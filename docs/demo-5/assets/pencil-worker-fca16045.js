import{u as Ze,a as ts,b as es,c as ss,d as rs,e as ns,f as as,g as is,h as os,i as cs,j as us,k as ms,l as ys,m as bs,n as ls,o as ps,p as gs,q as fs}from"./index-2d1c455f.js";Ze();ms();ys();ts();es();bs();ls();ps();gs();ss();rs();ns();as();fs();is();os();cs();const e={constructor:null,typedArray:null,type:0,name:void 0,byteSize:0,align:0,isConst:!1,isTuple:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null}},t={type:0,isRequired:!1},s={},O={},D={},F={},T={},_={},l={},S={},$={},L={},r={},g={},u={},A={},B={},G={},H={},U={},J={},N={},ct={},k={},Q={},q={},c={},f={},R={},ut={},W={},I={},X={},v={},Y={},E={},x={},d={},mt={},yt={},w={},bt={},lt={},pt={},Mt={},Z={},tt={},et={},Dt={},st={},Ft={},rt={},Tt={},_t={},gt={},ft={},$t={},Ot={},Lt={},St={},Bt={},Gt={},zt={},jt={},Ht={},ht={},Jt={},dt={},Nt={},Qt={},wt={},At={},Ut={},Pt={},Wt={},nt={},Xt={},Yt={},Vt={},Zt={},Rt={},te={},ee={},se={},re={},ne={},ae={},ie={},oe={},ce={},ue={},me={},ye={},be={},le={},pe={},ge={},fe={},kt={},Oe={},Se={},qt={},ze={},It={},je={},he={},de={},we={},Ae={},Ue={},Pe={},vt={},Ve={},Re={},ke={},qe={},Ie={},ve={},Ee={},xe={},Ke={},Ce={},Me={},De={},Fe={},Te={},_e={},$e={},Le={},Be={},Ge={},He={},Je={},Ne={},Os=new Uint8Array,Ss=new Uint8Array,zs=new Uint8Array([0,0,0,0,0,0,0,0]),js=new Uint8Array,hs=new Uint8Array([0,0,0,0,0,0,89,64]),ds=new Uint8Array,ws=new Uint8Array([0,0,0,0,0,64,88,64]),As=new Uint8Array,Us=new Uint8Array,Ps=new Uint8Array([0,0,0,0,0,0,0,0]),Vs=new Uint8Array,Rs=new Uint8Array([0,0,0,0,0,0,89,64]),ks=new Uint8Array,qs=new Uint8Array([0,0,0,0,0,0,46,64]),Is=new Uint8Array,vs=new Uint8Array,Es=new Uint8Array([0,0,0,0,0,0,0,0]),xs=new Uint8Array,Ks=new Uint8Array([0,0,0,0,0,0,36,64]),Cs=new Uint8Array,Ms=new Uint8Array([102,102,102,102,102,102,35,64]),Ds=new Uint8Array,Fs=new Uint8Array,Ts=new Uint8Array,_s=new Uint8Array,$s=new Uint8Array,Ls=new Uint8Array([4]),Bs=new Uint8Array,Gs=new Uint8Array,Hs=new Uint8Array([244,4,0,1]),Js=new Uint8Array([97,114,46,115,104,97,100,101,114,46,112,101,110,99,105,108,0]),Ns=new Uint8Array([16,5,0,1]),Qs=new Uint8Array([65,108,97,110,32,82,111,115,115,0]),Ws=new Uint8Array,Xs=new Uint8Array([1]),Ys=new Uint8Array([43,5,0,1]),Zs=new Uint8Array([80,101,110,99,105,108,0]),tr=new Uint8Array,er=new Uint8Array,sr=new Uint8Array,rr=new Uint8Array([0]),nr=new Uint8Array([1]),Qe=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ar=new Uint8Array,ir=new Uint8Array,or=new Uint8Array,cr=new Uint8Array,ur=new Uint8Array([4]),Et=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),We=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),mr=new Uint8Array,yr=new Uint8Array,br=new Uint8Array,lr=new Uint8Array,pr=new Uint8Array([4]),xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),gr=new Uint8Array([0,0,194,66,0,0,112,65,0,0,194,66,51,51,27,65]),fr=new Uint8Array([27,0]),Or=new Uint8Array([27,0]),Sr=new Uint8Array,zr=new Uint8Array,jr=new Uint8Array,hr=new Uint8Array;Object.assign(Mt,{slots:{0:Z,1:et,2:st,3:rt}});Object.assign(Z,{structure:s,memory:{array:Os},const:!0,slots:{0:tt}});Object.assign(tt,{structure:g});Object.assign(et,{structure:r,memory:{array:Ss},const:!0,slots:{0:Dt}});Object.assign(Dt,{structure:u,memory:{array:zs},const:!0});Object.assign(st,{structure:r,memory:{array:js},const:!0,slots:{0:Ft}});Object.assign(Ft,{structure:u,memory:{array:hs},const:!0});Object.assign(rt,{structure:r,memory:{array:ds},const:!0,slots:{0:Tt}});Object.assign(Tt,{structure:u,memory:{array:ws},const:!0});Object.assign(_t,{slots:{0:gt,1:ft,2:Ot,3:St}});Object.assign(gt,{structure:s,memory:{array:As},const:!0,slots:{0:tt}});Object.assign(ft,{structure:r,memory:{array:Us},const:!0,slots:{0:$t}});Object.assign($t,{structure:u,memory:{array:Ps},const:!0});Object.assign(Ot,{structure:r,memory:{array:Vs},const:!0,slots:{0:Lt}});Object.assign(Lt,{structure:u,memory:{array:Rs},const:!0});Object.assign(St,{structure:r,memory:{array:ks},const:!0,slots:{0:Bt}});Object.assign(Bt,{structure:u,memory:{array:qs},const:!0});Object.assign(Gt,{slots:{0:zt,1:jt,2:ht,3:dt}});Object.assign(zt,{structure:s,memory:{array:Is},const:!0,slots:{0:tt}});Object.assign(jt,{structure:r,memory:{array:vs},const:!0,slots:{0:Ht}});Object.assign(Ht,{structure:u,memory:{array:Es},const:!0});Object.assign(ht,{structure:r,memory:{array:xs},const:!0,slots:{0:Jt}});Object.assign(Jt,{structure:u,memory:{array:Ks},const:!0});Object.assign(dt,{structure:r,memory:{array:Cs},const:!0,slots:{0:Nt}});Object.assign(Nt,{structure:u,memory:{array:Ms},const:!0});Object.assign(Qt,{slots:{0:wt,1:At,2:Ut,3:Pt}});Object.assign(wt,{structure:A,memory:{array:Ds},const:!0,slots:{0:Z,1:et,2:st,3:rt}});Object.assign(At,{structure:B,memory:{array:Fs},const:!0,slots:{0:gt,1:ft,2:Ot,3:St}});Object.assign(Ut,{structure:A,memory:{array:Ts},const:!0,slots:{0:Z,1:et,2:st,3:rt}});Object.assign(Pt,{structure:G,memory:{array:_s},const:!0,slots:{0:zt,1:jt,2:ht,3:dt}});Object.assign(Wt,{slots:{0:nt}});Object.assign(nt,{structure:l,memory:{array:$s},const:!0,slots:{0:Xt}});Object.assign(Xt,{structure:S,memory:{array:Ls},const:!0});Object.assign(Yt,{slots:{0:Vt}});Object.assign(Vt,{structure:U,memory:{array:Bs},const:!0,slots:{0:nt}});Object.assign(Zt,{slots:{0:Rt}});Object.assign(Rt,{structure:U,memory:{array:Gs},const:!0,slots:{0:nt}});Object.assign(te,{slots:{0:ee,1:re,2:ae,3:oe,4:ue,5:me,6:ye}});Object.assign(ee,{structure:F,memory:{array:Hs},const:!0,slots:{0:se}});Object.assign(se,{structure:D,memory:{array:Js},reloc:16778484});Object.assign(re,{structure:_,memory:{array:Ns},const:!0,slots:{0:ne}});Object.assign(ne,{structure:T,memory:{array:Qs},reloc:16778512});Object.assign(ae,{structure:l,memory:{array:Ws},const:!0,slots:{0:ie}});Object.assign(ie,{structure:S,memory:{array:Xs},const:!0});Object.assign(oe,{structure:L,memory:{array:Ys},const:!0,slots:{0:ce}});Object.assign(ce,{structure:$,memory:{array:Zs},reloc:16778539});Object.assign(ue,{structure:H,memory:{array:tr},const:!0,slots:{0:wt,1:At,2:Ut,3:Pt}});Object.assign(me,{structure:J,memory:{array:er},const:!0,slots:{0:Vt}});Object.assign(ye,{structure:N,memory:{array:sr},const:!0,slots:{0:Rt}});Object.assign(be,{slots:{0:le,1:pe}});Object.assign(le,{structure:f,memory:{array:rr},const:!0});Object.assign(pe,{structure:f,memory:{array:nr},const:!0});Object.assign(ge,{memory:{array:Qe},slots:{0:fe}});Object.assign(fe,{structure:q,memory:{array:Qe,offset:0,length:8},slots:{0:kt}});Object.assign(kt,{structure:Q,memory:{array:ar},reloc:0});Object.assign(Oe,{slots:{0:Se,1:ze,2:je}});Object.assign(Se,{structure:s,memory:{array:ir},const:!0,slots:{0:qt}});Object.assign(qt,{structure:k});Object.assign(ze,{structure:s,memory:{array:or},const:!0,slots:{0:It}});Object.assign(It,{structure:ut});Object.assign(je,{structure:l,memory:{array:cr},const:!0,slots:{0:he}});Object.assign(he,{structure:S,memory:{array:ur},const:!0});Object.assign(de,{memory:{array:Et},slots:{0:we}});Object.assign(we,{structure:W,memory:{array:Et},slots:{0:Ae}});Object.assign(Ae,{structure:q,memory:{array:Et,offset:0,length:8},slots:{0:kt}});Object.assign(Ue,{memory:{array:We},slots:{0:Pe}});Object.assign(Pe,{structure:v,memory:{array:We,offset:0,length:8},slots:{0:vt}});Object.assign(vt,{structure:X,memory:{array:mr},reloc:0});Object.assign(Ve,{slots:{0:Re,1:ke,2:qe}});Object.assign(Re,{structure:s,memory:{array:yr},const:!0,slots:{0:qt}});Object.assign(ke,{structure:s,memory:{array:br},const:!0,slots:{0:It}});Object.assign(qe,{structure:l,memory:{array:lr},const:!0,slots:{0:Ie}});Object.assign(Ie,{structure:S,memory:{array:pr},const:!0});Object.assign(ve,{memory:{array:xt},slots:{0:Ee}});Object.assign(Ee,{structure:Y,memory:{array:xt},slots:{0:xe}});Object.assign(xe,{structure:v,memory:{array:xt,offset:0,length:8},slots:{0:vt}});Object.assign(Ke,{memory:{array:gr}});Object.assign(Ce,{slots:{0:Me}});Object.assign(Me,{structure:d,memory:{array:fr},const:!0});Object.assign(De,{slots:{0:Fe}});Object.assign(Fe,{structure:w,memory:{array:Or},const:!0});Object.assign(Te,{slots:{0:_e,1:Le,2:Ge,3:Je}});Object.assign(_e,{structure:s,memory:{array:Sr},const:!0,slots:{0:$e}});Object.assign($e,{structure:ct});Object.assign(Le,{structure:s,memory:{array:zr},const:!0,slots:{0:Be}});Object.assign(Be,{structure:I});Object.assign(Ge,{structure:s,memory:{array:jr},const:!0,slots:{0:He}});Object.assign(He,{structure:E});Object.assign(Je,{structure:s,memory:{array:hr},const:!0,slots:{0:Ne}});Object.assign(Ne,{structure:x});const dr={argStruct:yt,thunkId:2,name:"createOutput"},wr={argStruct:lt,thunkId:3,name:"createPartialOutput"};Object.assign(s,{...e,name:"type",align:1,instance:{members:[{...t,type:6,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:s}],methods:[]}});Object.assign(O,{...e,name:"u8",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(D,{...e,type:1,name:"[16:0]u8",length:16,byteSize:17,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(F,{...e,type:13,name:"*const [16:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:D}],methods:[]}});Object.assign(T,{...e,type:1,name:"[9:0]u8",length:9,byteSize:10,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(_,{...e,type:13,name:"*const [9:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[]}});Object.assign(l,{...e,name:"comptime_int",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:l}],methods:[]}});Object.assign(S,{...e,name:"i8",byteSize:1,align:1,instance:{members:[{...t,type:2,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign($,{...e,type:1,name:"[6:0]u8",length:6,byteSize:7,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(L,{...e,type:13,name:"*const [6:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[]}});Object.assign(r,{...e,name:"comptime_float",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:r}],methods:[]}});Object.assign(g,{...e,name:"f32",byteSize:4,align:4,instance:{members:[{...t,type:4,bitOffset:0,bitSize:32,byteSize:4,structure:g}],methods:[]}});Object.assign(u,{...e,name:"f64",byteSize:8,align:8,instance:{members:[{...t,type:4,bitOffset:0,bitSize:64,byteSize:8,structure:u}],methods:[]}});Object.assign(A,{...e,type:2,name:"Struct4273185158",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:r},{...t,type:7,slot:2,name:"maxValue",structure:r},{...t,type:7,slot:3,name:"defaultValue",structure:r}],methods:[],template:Mt}});Object.assign(B,{...e,type:2,name:"Struct3782286797",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:r},{...t,type:7,slot:2,name:"maxValue",structure:r},{...t,type:7,slot:3,name:"defaultValue",structure:r}],methods:[],template:_t}});Object.assign(G,{...e,type:2,name:"Struct148207664",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:r},{...t,type:7,slot:2,name:"maxValue",structure:r},{...t,type:7,slot:3,name:"defaultValue",structure:r}],methods:[],template:Gt}});Object.assign(H,{...e,type:2,name:"Struct534432254",align:1,instance:{members:[{...t,type:7,slot:0,name:"n0",structure:A},{...t,type:7,slot:1,name:"n1",structure:B},{...t,type:7,slot:2,name:"n2",structure:A},{...t,type:7,slot:3,name:"n3",structure:G}],methods:[],template:Qt}});Object.assign(U,{...e,type:2,name:"Struct3832472641",align:1,instance:{members:[{...t,type:7,slot:0,name:"channels",structure:l}],methods:[],template:Wt}});Object.assign(J,{...e,type:2,name:"Struct2242867897",align:1,instance:{members:[{...t,type:7,slot:0,name:"src",structure:U}],methods:[],template:Yt}});Object.assign(N,{...e,type:2,name:"Struct1039671274",align:1,instance:{members:[{...t,type:7,slot:0,name:"result",structure:U}],methods:[],template:Zt}});Object.assign(ct,{...e,type:2,name:"pencil.kernel",align:1,static:{members:[{...t,type:7,slot:0,name:"namespace",structure:F},{...t,type:7,slot:1,name:"vendor",structure:_},{...t,type:7,slot:2,name:"version",structure:l},{...t,type:7,slot:3,name:"description",structure:L},{...t,type:7,slot:4,name:"parameters",structure:H},{...t,type:7,slot:5,name:"inputImages",structure:J},{...t,type:7,slot:6,name:"outputImages",structure:N}],methods:[],template:te}});Object.assign(k,{...e,type:15,name:"@Vector(4, u8)",length:4,byteSize:4,align:4,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(Q,{...e,type:14,name:"[_]const @Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:k}],methods:[]}});Object.assign(q,{...e,type:13,name:"[]const @Vector(4, u8)",byteSize:8,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:Q}],methods:[]}});Object.assign(c,{...e,name:"u32",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[]}});Object.assign(f,{...e,type:11,name:"pencil.ColorSpace",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:1,byteSize:1,structure:f}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"srgb",structure:f},{...t,type:7,slot:1,name:"display-p3",structure:f}],methods:[],template:be}});Object.assign(R,{...e,name:"usize",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:R}],methods:[]}});Object.assign(ut,{...e,type:15,name:"@Vector(4, f32)",length:4,byteSize:16,align:16,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:g}],methods:[]}});Object.assign(W,{...e,type:2,name:"pencil.Image(u8,4,false)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:q},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:f},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:R}],methods:[],template:ge},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:l}],methods:[],template:Oe}});Object.assign(I,{...e,type:2,name:"pencil.KernelInput(u8,pencil.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:W}],methods:[],template:de}});Object.assign(X,{...e,type:14,name:"[_]@Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:k}],methods:[]}});Object.assign(v,{...e,type:13,name:"[]@Vector(4, u8)",byteSize:8,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:X}],methods:[]}});Object.assign(Y,{...e,type:2,name:"pencil.Image(u8,4,true)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:v},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:f},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:R}],methods:[],template:Ue},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:l}],methods:[],template:Ve}});Object.assign(E,{...e,type:2,name:"pencil.KernelOutput(u8,pencil.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"result",structure:Y}],methods:[],template:ve}});Object.assign(x,{...e,type:2,name:"pencil.KernelParameters(pencil.kernel)",byteSize:16,align:4,instance:{members:[{...t,type:4,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"n0",structure:g},{...t,type:4,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"n1",structure:g},{...t,type:4,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"n2",structure:g},{...t,type:4,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"n3",structure:g}],methods:[],template:Ke}});Object.assign(d,{...e,type:10,name:"ErrorSet2562181964",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:d}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:d}],methods:[],template:Ce}});Object.assign(mt,{...e,type:9,name:"ErrorSet2562181964!pencil.KernelOutput(u8,pencil.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:E},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:d}],methods:[]}});Object.assign(yt,{...e,type:5,name:"createOutput",byteSize:76,align:4,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:0,bitSize:32,byteSize:4,slot:3,name:"0",structure:c},{...t,type:3,isRequired:!0,bitOffset:32,bitSize:32,byteSize:4,slot:4,name:"1",structure:c},{...t,type:5,isRequired:!0,bitOffset:64,bitSize:192,byteSize:24,slot:0,name:"2",structure:I},{...t,type:5,isRequired:!0,bitOffset:256,bitSize:128,byteSize:16,slot:1,name:"3",structure:x},{...t,type:5,isRequired:!0,bitOffset:384,bitSize:224,byteSize:28,slot:2,name:"retval",structure:mt}],methods:[]}});Object.assign(w,{...e,type:10,name:"ErrorSet421721046",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:w}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:w}],methods:[],template:De}});Object.assign(bt,{...e,type:9,name:"ErrorSet421721046!pencil.KernelOutput(u8,pencil.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:E},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:w}],methods:[]}});Object.assign(lt,{...e,type:5,name:"createPartialOutput",byteSize:84,align:4,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:0,bitSize:32,byteSize:4,slot:3,name:"0",structure:c},{...t,type:3,isRequired:!0,bitOffset:32,bitSize:32,byteSize:4,slot:4,name:"1",structure:c},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:5,name:"2",structure:c},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:6,name:"3",structure:c},{...t,type:5,isRequired:!0,bitOffset:128,bitSize:192,byteSize:24,slot:0,name:"4",structure:I},{...t,type:5,isRequired:!0,bitOffset:320,bitSize:128,byteSize:16,slot:1,name:"5",structure:x},{...t,type:5,isRequired:!0,bitOffset:448,bitSize:224,byteSize:28,slot:2,name:"retval",structure:bt}],methods:[]}});Object.assign(pt,{...e,type:2,name:"pencil",align:1,static:{members:[{...t,type:7,slot:0,name:"kernel",structure:s},{...t,type:7,slot:1,name:"Input",structure:s},{...t,type:7,slot:2,name:"Output",structure:s},{...t,type:7,slot:3,name:"Parameters",structure:s}],methods:[dr,wr],template:Te}});const Ar=[s,O,D,F,T,_,l,S,$,L,r,g,u,A,B,G,H,U,J,N,ct,k,Q,q,c,f,R,ut,W,I,X,v,Y,E,x,d,mt,yt,w,bt,lt,pt],Ur=pt,Pr={runtimeSafety:!1,littleEndian:!0},at=us();at.getSpecialExports();at.recreateStructures(Ar,Pr);const Vr=(async()=>{const i=new URL("pencil-045d49bb.wasm",import.meta.url).href;return fetch(i)})();at.loadModule(Vr);at.linkVariables(!0);const{constructor:Rr}=Ur,{createPartialOutput:kr,Input:qr,kernel:ot}=Rr;function Ir(i,m,o,a,n={},z={}){const j=[];for(const[b]of ot.inputImages)j.push(b);const P=[];for(const[b]of ot.outputImages)P.push(b);if(Array.isArray(n)){const b=n;n={};for(const[p,h]of j.entries())n[h]=b[p]}const y=new qr(void 0),K=[];let V;for(const b of j){let p=n[b];if(p||(j.length===1&&["data","width","height"].every(h=>!!n[h])?p=n:K.push(b)),y[b]=p,V){if(p.colorSpace!==V)throw new Error(`Input images must all use the same color space: ${V}`)}else V=p.colorSpace}if(K.length>0)throw new Error(`Missing input image${K.length>1?"s":""}: ${K.join(", ")}`);const it=kr(i,m,o,a,y,z),Kt=b=>{const p={};for(const h of P){const{data:{typedArray:C},width:Ct,height:Xe}=b[h];let M;if(typeof ImageData=="function"){const Ye=new Uint8ClampedArray(C.buffer,C.byteOffset,C.byteLength);M=new ImageData(Ye,Ct,a,{colorSpace:V})}else M={data:C,width:Ct,height:Xe};if(P.length===1)return M;p[h]=M}return p};return it[Symbol.toStringTag]==="Promise"?it.then(Kt):Kt(it)}function vr(){const i={};for(let[m,o]of ot){if(m==="parameters"){const a={};for(const[n,z]of o){const j=a[n]={};for(let[P,y]of z)typeof y=="object"?y=y.string??y.valueOf():typeof y=="function"&&(y=Er(y.name)),j[P]=y}o=a}else typeof o=="object"&&(o=o.string??o.valueOf());i[m]=o}return i}function Er(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=async i=>{if(!Array.isArray(i.data))return;const[m,o,...a]=i.data;try{const[n,z]=await xr(m,a);postMessage([m,o,n],{transfer:z})}catch(n){postMessage(["error",o,n])}};async function xr(i,m){switch(i){case"getKernelInfo":return[vr(...m)];case"createPartialImageData":const a=await Ir(...m),n=[];if("data"in a&&"width"in a&&"height"in a)n.push(a.data.buffer);else for(const z of Object.entries(a))n.push(a.data.buffer);return[a,n];default:throw new Error(`Unknown function: ${i}`)}}postMessage("ready");
