import{u as mt,a as st,b as at,c as ot,d as it,e as ct,f as nt,g as lt,h as ut,i as pt,j as yt,k as ft,l as dt,o as bt,n as _t,m as ht,p as gt,q as St,r as zt}from"./index-467e5205.js";mt();st();at();ot();it();ct();nt();lt();ut();pt();yt();ft();dt();bt();_t();ht();gt();const r={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},V={},q={},A={},z={},f={},w={},ne={},le={},E={},b={},m={},t={},ue={},M={},h={},U={},R={},pe={},K={},ye={},T={},fe={},F={},de={},$={},be={},B={},_e={},L={},he={},G={},ge={},H={},Se={},J={},ze={},N={},Ve={},Q={},j={},we={},W={},Re={},X={},Oe={},Y={},qe={},Z={},Ae={},ee={},Ue={},te={},re={},je={},me={},Pe={},se={},Me={},P={},xe={},Ce={},Ie={},u={},Ke={},ae={},oe={},ie={},x={},C={},Te={},Fe={},$e={},Be={},Le={},Ge={},He={};Object.assign(V,{...r,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:V}],methods:[],template:null},slot:5});Object.assign(q,{...r,type:1,name:"[10:0]u8",length:10,byteSize:11,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:V}],methods:[],template:null},slot:4});Object.assign(A,{...r,type:11,name:"*const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:3});Object.assign(z,{...r,type:11,name:"**const [10:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:2});Object.assign(f,{...r,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:7});Object.assign(w,{...r,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:f}],methods:[],template:null},slot:6});Object.assign(ne,{...r,type:1,name:"[24:0]u8",length:24,byteSize:25,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:V}],methods:[],template:null},slot:10});Object.assign(le,{...r,type:11,name:"*const [24:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:9});Object.assign(E,{...r,type:11,name:"**const [24:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:8});Object.assign(b,{...r,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:28});Object.assign(m,{...r,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:m}],methods:[],template:null},slot:52});Object.assign(t,{...r,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:51});const Vt=new Uint8Array([]),wt=new Uint8Array([56,30,16,0]),Je=new Uint8Array([154,153,153,153,153,153,185,63]),Rt=new Uint8Array([160,30,16,0]),Ot=new Uint8Array([0,0,0,0,0,0,20,64]),qt=new Uint8Array([96,30,16,0]),ke=new Uint8Array([0,0,0,0,0,0,0,64]);Object.assign(ue,{...r,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 2}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:b},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:t},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:t},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:t}],methods:[],template:{memory:{array:Vt},slots:{0:{structure:t,memory:{array:wt},slots:{0:{structure:m,memory:{array:Je},address:1056312}}},1:{structure:t,memory:{array:Rt},slots:{0:{structure:m,memory:{array:Ot},address:1056416}}},2:{structure:t,memory:{array:qt},slots:{0:{structure:m,memory:{array:ke},address:1056352}}}}}},slot:36});Object.assign(M,{...r,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 2}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:35});Object.assign(h,{...r,type:13,name:"@Vector(3, f32)",length:3,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:29});const At=new Uint8Array([]),Ut=new Uint8Array([136,30,16,0]),Xe=new Uint8Array([0,0,0,0,0,0,24,192]),jt=new Uint8Array([136,30,16,0]),Pt=new Uint8Array([128,30,16,0]),xt=new Uint8Array([0,0,0,0,0,0,57,192]);Object.assign(U,{...r,type:2,name:"struct{comptime comptime_float = -6, comptime comptime_float = -6, comptime comptime_float = -25}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:t},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:t},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:t}],methods:[],template:{memory:{array:At},slots:{0:{structure:t,memory:{array:Ut},slots:{0:{structure:m,memory:{array:Xe},address:1056392}}},1:{structure:t,memory:{array:jt},slots:{0:{structure:m,memory:{array:Xe},address:1056392}}},2:{structure:t,memory:{array:Pt},slots:{0:{structure:m,memory:{array:xt},address:1056384}}}}}},slot:54});Object.assign(R,{...r,type:11,name:"*const struct{comptime comptime_float = -6, comptime comptime_float = -6, comptime comptime_float = -25}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:U}],methods:[],template:null},slot:53});const Ct=new Uint8Array([]),It=new Uint8Array([112,30,16,0]),ce=new Uint8Array([0,0,0,0,0,0,24,64]),kt=new Uint8Array([112,30,16,0]),vt=new Uint8Array([72,30,16,0]),y=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(pe,{...r,type:2,name:"struct{comptime comptime_float = 6, comptime comptime_float = 6, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:t},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:t},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:t}],methods:[],template:{memory:{array:Ct},slots:{0:{structure:t,memory:{array:It},slots:{0:{structure:m,memory:{array:ce},address:1056368}}},1:{structure:t,memory:{array:kt},slots:{0:{structure:m,memory:{array:ce},address:1056368}}},2:{structure:t,memory:{array:vt},slots:{0:{structure:m,memory:{array:y},address:1056328}}}}}},slot:56});Object.assign(K,{...r,type:11,name:"*const struct{comptime comptime_float = 6, comptime comptime_float = 6, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pe}],methods:[],template:null},slot:55});const Dt=new Uint8Array([]),Et=new Uint8Array([72,30,16,0]),Mt=new Uint8Array([96,30,16,0]),Kt=new Uint8Array([120,30,16,0]),Tt=new Uint8Array([0,0,0,0,0,0,16,192]);Object.assign(ye,{...r,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 2, comptime comptime_float = -4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:t},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:t},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:t}],methods:[],template:{memory:{array:Dt},slots:{0:{structure:t,memory:{array:Et},slots:{0:{structure:m,memory:{array:y},address:1056328}}},1:{structure:t,memory:{array:Mt},slots:{0:{structure:m,memory:{array:ke},address:1056352}}},2:{structure:t,memory:{array:Kt},slots:{0:{structure:m,memory:{array:Tt},address:1056376}}}}}},slot:58});Object.assign(T,{...r,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 2, comptime comptime_float = -4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:57});const Ft=new Uint8Array([]),$t=new Uint8Array([170,170,170,170]),s=new Uint8Array([]),Bt=new Uint8Array([170,170,170,170]),Lt=new Uint8Array([170,170,170,170]);Object.assign(fe,{...r,type:2,name:"struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -6, comptime comptime_float = -6, comptime comptime_float = -25} = .{-6, -6, -25}, comptime maxValue: struct{comptime comptime_float = 6, comptime comptime_float = 6, comptime comptime_float = 0} = .{6, 6, 0}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 2, comptime comptime_float = -4} = .{0, 2, -4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:R},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:K},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:T}],methods:[],template:{memory:{array:Ft},slots:{0:{structure:R,memory:{array:$t},slots:{0:{structure:U,memory:{array:s},address:-1431655766}}},1:{structure:K,memory:{array:Bt},slots:{0:{structure:pe,memory:{array:s},address:-1431655766}}},2:{structure:T,memory:{array:Lt},slots:{0:{structure:ye,memory:{array:s},address:-1431655766}}}}}},slot:38});Object.assign(F,{...r,type:11,name:"*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -6, comptime comptime_float = -6, comptime comptime_float = -25} = .{-6, -6, -25}, comptime maxValue: struct{comptime comptime_float = 6, comptime comptime_float = 6, comptime comptime_float = 0} = .{6, 6, 0}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 2, comptime comptime_float = -4} = .{0, 2, -4}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:37});const Gt=new Uint8Array([]),Ht=new Uint8Array([112,30,16,0]),Jt=new Uint8Array([112,30,16,0]),Nt=new Uint8Array([104,30,16,0]),Qt=new Uint8Array([0,0,0,0,0,0,0,192]);Object.assign(de,{...r,type:2,name:"struct{comptime comptime_float = 6, comptime comptime_float = 6, comptime comptime_float = -2}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:t},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:t},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:t}],methods:[],template:{memory:{array:Gt},slots:{0:{structure:t,memory:{array:Ht},slots:{0:{structure:m,memory:{array:ce},address:1056368}}},1:{structure:t,memory:{array:Jt},slots:{0:{structure:m,memory:{array:ce},address:1056368}}},2:{structure:t,memory:{array:Nt},slots:{0:{structure:m,memory:{array:Qt},address:1056360}}}}}},slot:60});Object.assign($,{...r,type:11,name:"*const struct{comptime comptime_float = 6, comptime comptime_float = 6, comptime comptime_float = -2}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:de}],methods:[],template:null},slot:59});const Wt=new Uint8Array([]),Xt=new Uint8Array([72,30,16,0]),Yt=new Uint8Array([96,30,16,0]),Zt=new Uint8Array([88,30,16,0]),er=new Uint8Array([0,0,0,0,0,0,36,192]);Object.assign(be,{...r,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 2, comptime comptime_float = -10}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:t},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:t},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:t}],methods:[],template:{memory:{array:Wt},slots:{0:{structure:t,memory:{array:Xt},slots:{0:{structure:m,memory:{array:y},address:1056328}}},1:{structure:t,memory:{array:Yt},slots:{0:{structure:m,memory:{array:ke},address:1056352}}},2:{structure:t,memory:{array:Zt},slots:{0:{structure:m,memory:{array:er},address:1056344}}}}}},slot:62});Object.assign(B,{...r,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 2, comptime comptime_float = -10}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:61});const tr=new Uint8Array([]),rr=new Uint8Array([170,170,170,170]),mr=new Uint8Array([170,170,170,170]),sr=new Uint8Array([170,170,170,170]);Object.assign(_e,{...r,type:2,name:"struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -6, comptime comptime_float = -6, comptime comptime_float = -25} = .{-6, -6, -25}, comptime maxValue: struct{comptime comptime_float = 6, comptime comptime_float = 6, comptime comptime_float = -2} = .{6, 6, -2}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 2, comptime comptime_float = -10} = .{0, 2, -10}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:R},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:$},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:B}],methods:[],template:{memory:{array:tr},slots:{0:{structure:R,memory:{array:rr},slots:{0:{structure:U,memory:{array:s},address:-1431655766}}},1:{structure:$,memory:{array:mr},slots:{0:{structure:de,memory:{array:s},address:-1431655766}}},2:{structure:B,memory:{array:sr},slots:{0:{structure:be,memory:{array:s},address:-1431655766}}}}}},slot:40});Object.assign(L,{...r,type:11,name:"*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -6, comptime comptime_float = -6, comptime comptime_float = -25} = .{-6, -6, -25}, comptime maxValue: struct{comptime comptime_float = 6, comptime comptime_float = 6, comptime comptime_float = -2} = .{6, 6, -2}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 2, comptime comptime_float = -10} = .{0, 2, -10}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_e}],methods:[],template:null},slot:39});const ar=new Uint8Array([]),or=new Uint8Array([56,30,16,0]),ir=new Uint8Array([152,30,16,0]),cr=new Uint8Array([0,0,0,0,0,0,32,64]),nr=new Uint8Array([96,30,16,0]);Object.assign(he,{...r,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 8, comptime defaultValue: comptime_float = 2}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:b},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:t},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:t},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:t}],methods:[],template:{memory:{array:ar},slots:{0:{structure:t,memory:{array:or},slots:{0:{structure:m,memory:{array:Je},address:1056312}}},1:{structure:t,memory:{array:ir},slots:{0:{structure:m,memory:{array:cr},address:1056408}}},2:{structure:t,memory:{array:nr},slots:{0:{structure:m,memory:{array:ke},address:1056352}}}}}},slot:42});Object.assign(G,{...r,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 8, comptime defaultValue: comptime_float = 2}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:he}],methods:[],template:null},slot:41});const lr=new Uint8Array([]),ur=new Uint8Array([72,30,16,0]),pr=new Uint8Array([72,30,16,0]),yr=new Uint8Array([72,30,16,0]);Object.assign(ge,{...r,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:t},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:t},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:t}],methods:[],template:{memory:{array:lr},slots:{0:{structure:t,memory:{array:ur},slots:{0:{structure:m,memory:{array:y},address:1056328}}},1:{structure:t,memory:{array:pr},slots:{0:{structure:m,memory:{array:y},address:1056328}}},2:{structure:t,memory:{array:yr},slots:{0:{structure:m,memory:{array:y},address:1056328}}}}}},slot:64});Object.assign(H,{...r,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ge}],methods:[],template:null},slot:63});const fr=new Uint8Array([]),dr=new Uint8Array([48,30,16,0]),d=new Uint8Array([0,0,0,0,0,0,240,63]),br=new Uint8Array([48,30,16,0]),_r=new Uint8Array([48,30,16,0]);Object.assign(Se,{...r,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:t},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:t},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:t}],methods:[],template:{memory:{array:fr},slots:{0:{structure:t,memory:{array:dr},slots:{0:{structure:m,memory:{array:d},address:1056304}}},1:{structure:t,memory:{array:br},slots:{0:{structure:m,memory:{array:d},address:1056304}}},2:{structure:t,memory:{array:_r},slots:{0:{structure:m,memory:{array:d},address:1056304}}}}}},slot:66});Object.assign(J,{...r,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Se}],methods:[],template:null},slot:65});const hr=new Uint8Array([]),gr=new Uint8Array([80,30,16,0]),De=new Uint8Array([154,153,153,153,153,153,233,63]),Sr=new Uint8Array([80,30,16,0]),zr=new Uint8Array([80,30,16,0]);Object.assign(ze,{...r,type:2,name:"struct{comptime comptime_float = 0.8, comptime comptime_float = 0.8, comptime comptime_float = 0.8}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:t},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:t},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:t}],methods:[],template:{memory:{array:hr},slots:{0:{structure:t,memory:{array:gr},slots:{0:{structure:m,memory:{array:De},address:1056336}}},1:{structure:t,memory:{array:Sr},slots:{0:{structure:m,memory:{array:De},address:1056336}}},2:{structure:t,memory:{array:zr},slots:{0:{structure:m,memory:{array:De},address:1056336}}}}}},slot:68});Object.assign(N,{...r,type:11,name:"*const struct{comptime comptime_float = 0.8, comptime comptime_float = 0.8, comptime comptime_float = 0.8}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ze}],methods:[],template:null},slot:67});const Vr=new Uint8Array([]),wr=new Uint8Array([170,170,170,170]),Rr=new Uint8Array([170,170,170,170]),Or=new Uint8Array([170,170,170,170]);Object.assign(Ve,{...r,type:2,name:"struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.8, comptime comptime_float = 0.8, comptime comptime_float = 0.8} = .{0.8, 0.8, 0.8}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:H},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:J},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:N}],methods:[],template:{memory:{array:Vr},slots:{0:{structure:H,memory:{array:wr},slots:{0:{structure:ge,memory:{array:s},address:-1431655766}}},1:{structure:J,memory:{array:Rr},slots:{0:{structure:Se,memory:{array:s},address:-1431655766}}},2:{structure:N,memory:{array:Or},slots:{0:{structure:ze,memory:{array:s},address:-1431655766}}}}}},slot:44});Object.assign(Q,{...r,type:11,name:"*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.8, comptime comptime_float = 0.8, comptime comptime_float = 0.8} = .{0.8, 0.8, 0.8}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ve}],methods:[],template:null},slot:43});Object.assign(j,{...r,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:30});const qr=new Uint8Array([]),Ar=new Uint8Array([72,30,16,0]),Ur=new Uint8Array([72,30,16,0]),jr=new Uint8Array([72,30,16,0]),Pr=new Uint8Array([72,30,16,0]);Object.assign(we,{...r,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:t},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:t},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:t},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:t}],methods:[],template:{memory:{array:qr},slots:{0:{structure:t,memory:{array:Ar},slots:{0:{structure:m,memory:{array:y},address:1056328}}},1:{structure:t,memory:{array:Ur},slots:{0:{structure:m,memory:{array:y},address:1056328}}},2:{structure:t,memory:{array:jr},slots:{0:{structure:m,memory:{array:y},address:1056328}}},3:{structure:t,memory:{array:Pr},slots:{0:{structure:m,memory:{array:y},address:1056328}}}}}},slot:70});Object.assign(W,{...r,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:we}],methods:[],template:null},slot:69});const xr=new Uint8Array([]),Cr=new Uint8Array([48,30,16,0]),Ir=new Uint8Array([48,30,16,0]),kr=new Uint8Array([48,30,16,0]),vr=new Uint8Array([48,30,16,0]);Object.assign(Re,{...r,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:t},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:t},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:t},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:t}],methods:[],template:{memory:{array:xr},slots:{0:{structure:t,memory:{array:Cr},slots:{0:{structure:m,memory:{array:d},address:1056304}}},1:{structure:t,memory:{array:Ir},slots:{0:{structure:m,memory:{array:d},address:1056304}}},2:{structure:t,memory:{array:kr},slots:{0:{structure:m,memory:{array:d},address:1056304}}},3:{structure:t,memory:{array:vr},slots:{0:{structure:m,memory:{array:d},address:1056304}}}}}},slot:72});Object.assign(X,{...r,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Re}],methods:[],template:null},slot:71});const Dr=new Uint8Array([]),Er=new Uint8Array([64,30,16,0]),Mr=new Uint8Array([154,153,153,153,153,153,169,63]),Kr=new Uint8Array([56,30,16,0]),Tr=new Uint8Array([48,30,16,0]),Fr=new Uint8Array([48,30,16,0]);Object.assign(Oe,{...r,type:2,name:"struct{comptime comptime_float = 0.05, comptime comptime_float = 0.1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:t},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:t},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:t},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:t}],methods:[],template:{memory:{array:Dr},slots:{0:{structure:t,memory:{array:Er},slots:{0:{structure:m,memory:{array:Mr},address:1056320}}},1:{structure:t,memory:{array:Kr},slots:{0:{structure:m,memory:{array:Je},address:1056312}}},2:{structure:t,memory:{array:Tr},slots:{0:{structure:m,memory:{array:d},address:1056304}}},3:{structure:t,memory:{array:Fr},slots:{0:{structure:m,memory:{array:d},address:1056304}}}}}},slot:74});Object.assign(Y,{...r,type:11,name:"*const struct{comptime comptime_float = 0.05, comptime comptime_float = 0.1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Oe}],methods:[],template:null},slot:73});const $r=new Uint8Array([]),Br=new Uint8Array([170,170,170,170]),Lr=new Uint8Array([170,170,170,170]),Gr=new Uint8Array([170,170,170,170]);Object.assign(qe,{...r,type:2,name:"struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.05, comptime comptime_float = 0.1, comptime comptime_float = 1, comptime comptime_float = 1} = .{0.05, 0.1, 1, 1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:j},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:W},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:X},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:Y}],methods:[],template:{memory:{array:$r},slots:{0:{structure:W,memory:{array:Br},slots:{0:{structure:we,memory:{array:s},address:-1431655766}}},1:{structure:X,memory:{array:Lr},slots:{0:{structure:Re,memory:{array:s},address:-1431655766}}},2:{structure:Y,memory:{array:Gr},slots:{0:{structure:Oe,memory:{array:s},address:-1431655766}}}}}},slot:46});Object.assign(Z,{...r,type:11,name:"*const struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.05, comptime comptime_float = 0.1, comptime comptime_float = 1, comptime comptime_float = 1} = .{0.05, 0.1, 1, 1}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:qe}],methods:[],template:null},slot:45});const Hr=new Uint8Array([]),Jr=new Uint8Array([170,170,170,170]),Nr=new Uint8Array([170,170,170,170]),Qr=new Uint8Array([170,170,170,170]),Wr=new Uint8Array([170,170,170,170]),Xr=new Uint8Array([170,170,170,170]),Yr=new Uint8Array([170,170,170,170]);Object.assign(Ae,{...r,type:2,name:"struct{comptime viewPlaneDistance: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 2} = .{.type = f32, .minValue = 0.1, .maxValue = 5, .defaultValue = 2}, comptime lightPos: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -6, comptime comptime_float = -6, comptime comptime_float = -25} = .{-6, -6, -25}, comptime maxValue: struct{comptime comptime_float = 6, comptime comptime_float = 6, comptime comptime_float = 0} = .{6, 6, 0}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 2, comptime comptime_float = -4} = .{0, 2, -4}} = .{.type = @Vector(3, f32), .minValue = .{-6, -6, -25}, .maxValue = .{6, 6, 0}, .defaultValue = .{0, 2, -4}}, comptime sphere0Position: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -6, comptime comptime_float = -6, comptime comptime_float = -25} = .{-6, -6, -25}, comptime maxValue: struct{comptime comptime_float = 6, comptime comptime_float = 6, comptime comptime_float = -2} = .{6, 6, -2}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 2, comptime comptime_float = -10} = .{0, 2, -10}} = .{.type = @Vector(3, f32), .minValue = .{-6, -6, -25}, .maxValue = .{6, 6, -2}, .defaultValue = .{0, 2, -10}}, comptime sphere0Radius: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 8, comptime defaultValue: comptime_float = 2} = .{.type = f32, .minValue = 0.1, .maxValue = 8, .defaultValue = 2}, comptime sphere0Color: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.8, comptime comptime_float = 0.8, comptime comptime_float = 0.8} = .{0.8, 0.8, 0.8}} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{0.8, 0.8, 0.8}}, comptime sphere0Material: struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.05, comptime comptime_float = 0.1, comptime comptime_float = 1, comptime comptime_float = 1} = .{0.05, 0.1, 1, 1}} = .{.type = @Vector(4, f32), .minValue = .{0, 0, 0, 0}, .maxValue = .{1, 1, 1, 1}, .defaultValue = .{0.05, 0.1, 1, 1}}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"viewPlaneDistance",structure:M},{...e,type:8,isRequired:!1,slot:1,name:"lightPos",structure:F},{...e,type:8,isRequired:!1,slot:2,name:"sphere0Position",structure:L},{...e,type:8,isRequired:!1,slot:3,name:"sphere0Radius",structure:G},{...e,type:8,isRequired:!1,slot:4,name:"sphere0Color",structure:Q},{...e,type:8,isRequired:!1,slot:5,name:"sphere0Material",structure:Z}],methods:[],template:{memory:{array:Hr},slots:{0:{structure:M,memory:{array:Jr},slots:{0:{structure:ue,memory:{array:s},address:-1431655766}}},1:{structure:F,memory:{array:Nr},slots:{0:{structure:fe,memory:{array:s},address:-1431655766}}},2:{structure:L,memory:{array:Qr},slots:{0:{structure:_e,memory:{array:s},address:-1431655766}}},3:{structure:G,memory:{array:Wr},slots:{0:{structure:he,memory:{array:s},address:-1431655766}}},4:{structure:Q,memory:{array:Xr},slots:{0:{structure:Ve,memory:{array:s},address:-1431655766}}},5:{structure:Z,memory:{array:Yr},slots:{0:{structure:qe,memory:{array:s},address:-1431655766}}}}}},slot:12});Object.assign(ee,{...r,type:11,name:"*struct{comptime viewPlaneDistance: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 2} = .{.type = f32, .minValue = 0.1, .maxValue = 5, .defaultValue = 2}, comptime lightPos: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -6, comptime comptime_float = -6, comptime comptime_float = -25} = .{-6, -6, -25}, comptime maxValue: struct{comptime comptime_float = 6, comptime comptime_float = 6, comptime comptime_float = 0} = .{6, 6, 0}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 2, comptime comptime_float = -4} = .{0, 2, -4}} = .{.type = @Vector(3, f32), .minValue = .{-6, -6, -25}, .maxValue = .{6, 6, 0}, .defaultValue = .{0, 2, -4}}, comptime sphere0Position: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -6, comptime comptime_float = -6, comptime comptime_float = -25} = .{-6, -6, -25}, comptime maxValue: struct{comptime comptime_float = 6, comptime comptime_float = 6, comptime comptime_float = -2} = .{6, 6, -2}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 2, comptime comptime_float = -10} = .{0, 2, -10}} = .{.type = @Vector(3, f32), .minValue = .{-6, -6, -25}, .maxValue = .{6, 6, -2}, .defaultValue = .{0, 2, -10}}, comptime sphere0Radius: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 8, comptime defaultValue: comptime_float = 2} = .{.type = f32, .minValue = 0.1, .maxValue = 8, .defaultValue = 2}, comptime sphere0Color: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.8, comptime comptime_float = 0.8, comptime comptime_float = 0.8} = .{0.8, 0.8, 0.8}} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{0.8, 0.8, 0.8}}, comptime sphere0Material: struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.05, comptime comptime_float = 0.1, comptime comptime_float = 1, comptime comptime_float = 1} = .{0.05, 0.1, 1, 1}} = .{.type = @Vector(4, f32), .minValue = .{0, 0, 0, 0}, .maxValue = .{1, 1, 1, 1}, .defaultValue = .{0.05, 0.1, 1, 1}}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ae}],methods:[],template:null},slot:11});const Zr=new Uint8Array([]);Object.assign(Ue,{...r,type:2,name:"@TypeOf(.{})",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Zr}}},slot:14});Object.assign(te,{...r,type:11,name:"*@TypeOf(.{})",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ue}],methods:[],template:null},slot:13});Object.assign(re,{...r,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:f}],methods:[],template:null},slot:75});const em=new Uint8Array([]),tm=new Uint8Array([144,30,16,0]),rm=new Uint8Array([4,0,0,0]);Object.assign(je,{...r,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:re}],methods:[],template:{memory:{array:em},slots:{0:{structure:re,memory:{array:tm},slots:{0:{structure:f,memory:{array:rm},address:1056400}}}}}},slot:48});Object.assign(me,{...r,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:je}],methods:[],template:null},slot:47});const mm=new Uint8Array([]),sm=new Uint8Array([170,170,170,170]);Object.assign(Pe,{...r,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:me}],methods:[],template:{memory:{array:mm},slots:{0:{structure:me,memory:{array:sm},slots:{0:{structure:je,memory:{array:s},address:-1431655766}}}}}},slot:16});Object.assign(se,{...r,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Pe}],methods:[],template:null},slot:15});const am=new Uint8Array([]),om=new Uint8Array([]),im=new Uint8Array([92,252,15,0]),cm=new Uint8Array([0,87,16,0]),Ye=new Uint8Array([78,101,119,103,114,111,117,110,100,115,0]),nm=new Uint8Array([180,252,15,0]),lm=new Uint8Array([0,87,16,0]),um=new Uint8Array([12,253,15,0]),pm=new Uint8Array([1,0,0,0]),ym=new Uint8Array([68,253,15,0]),fm=new Uint8Array([231,86,16,0]),dm=new Uint8Array([80,105,120,101,108,32,66,108,101,110,100,101,114,32,82,97,121,116,114,97,99,105,110,103,0]),bm=new Uint8Array([170,170,170,170]),_m=new Uint8Array([170,170,170,170]),hm=new Uint8Array([170,170,170,170]);Object.assign(Me,{...r,type:2,name:"raytracer.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:am}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:z},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:z},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:w},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:E},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:ee},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:te},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:se}],methods:[],template:{memory:{array:om},slots:{0:{structure:z,memory:{array:im},slots:{0:{structure:A,memory:{array:cm},slots:{0:{structure:q,memory:{array:Ye},address:1070848}}}}},1:{structure:z,memory:{array:nm},slots:{0:{structure:A,memory:{array:lm},slots:{0:{structure:q,memory:{array:Ye},address:1070848}}}}},2:{structure:w,memory:{array:um},slots:{0:{structure:f,memory:{array:pm}}}},3:{structure:E,memory:{array:ym},slots:{0:{structure:le,memory:{array:fm},slots:{0:{structure:ne,memory:{array:dm},address:1070823}}}}},4:{structure:ee,memory:{array:bm},slots:{0:{structure:Ae,memory:{array:s},address:-1431655766}}},5:{structure:te,memory:{array:_m},slots:{0:{structure:Ue,memory:{array:s},address:-1431655766}}},6:{structure:se,memory:{array:hm},slots:{0:{structure:Pe,memory:{array:s},address:-1431655766}}}}}},slot:1});const gm=new Uint8Array([]);Object.assign(P,{...r,type:2,name:"raytracer.KernelInput(u8,raytracer.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:gm}}},slot:17});Object.assign(xe,{...r,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:V}],methods:[],template:null},slot:22});Object.assign(Ce,{...r,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:xe}],methods:[],template:null},slot:21});Object.assign(Ie,{...r,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Ce}],methods:[],template:null},slot:20});Object.assign(u,{...r,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:23});const Sm=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Ke,{...r,type:9,name:"raytracer.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:f},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:f}],methods:[],template:{memory:{array:Sm}}},slot:24});Object.assign(ae,{...r,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:ae}],methods:[],template:null},slot:25});Object.assign(oe,{...r,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:oe}],methods:[],template:null},slot:26});const zm=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Vm=new Uint8Array([]),wm=new Uint8Array([16,251,15,0]),Rm=new Uint8Array([4,0,0,0]);Object.assign(ie,{...r,type:2,name:"raytracer.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Ie},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Ke},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:ae},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:oe}],methods:[],template:{memory:{array:zm}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:xe},{...e,type:7,isRequired:!1,name:"FPixel",structure:j},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:w}],methods:[],template:{memory:{array:Vm},slots:{0:{structure:w,memory:{array:wm},slots:{0:{structure:f,memory:{array:Rm}}}}}}},slot:19});const Om=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),qm=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Am=new Uint8Array([0,0,0,0,0,0,0,0]),Ze=new Uint8Array([]);Object.assign(x,{...r,type:2,name:"raytracer.KernelOutput(u8,raytracer.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:ie}],methods:[],template:{memory:{array:Om},slots:{0:{structure:ie,memory:{array:qm},slots:{0:{structure:Ie,memory:{array:Am},slots:{0:{structure:Ce,memory:{array:Ze}}}}}}}}},slot:18});const Um=new Uint8Array([0,0,0,0,0,0,0,64,0,0,128,192,0,0,0,0,0,0,0,0,0,0,0,64,0,0,32,193,0,0,0,0,205,204,76,63,205,204,76,63,205,204,76,63,0,0,0,0,205,204,76,61,205,204,204,61,0,0,128,63,0,0,128,63,0,0,0,64,0,0,0,64,0,0,0,0,0,0,0,0]);Object.assign(C,{...r,type:2,name:"raytracer.KernelParameters(raytracer.kernel)",length:1,byteSize:80,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:512,bitSize:32,byteSize:4,slot:0,name:"viewPlaneDistance",structure:b},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:96,byteSize:16,slot:1,name:"lightPos",structure:h},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:96,byteSize:16,slot:2,name:"sphere0Position",structure:h},{...e,type:4,isRequired:!1,bitOffset:544,bitSize:32,byteSize:4,slot:3,name:"sphere0Radius",structure:b},{...e,type:6,isRequired:!1,bitOffset:256,bitSize:96,byteSize:16,slot:4,name:"sphere0Color",structure:h},{...e,type:6,isRequired:!1,bitOffset:384,bitSize:128,byteSize:16,slot:5,name:"sphere0Material",structure:j}],methods:[],template:{memory:{array:Um}}},slot:27});Object.assign(Te,{...r,type:8,name:"@typeInfo(@typeInfo(@TypeOf(raytracer.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:49});Object.assign(Fe,{...r,type:7,name:"@typeInfo(@typeInfo(@TypeOf(raytracer.createOutput)).Fn.return_type.?).ErrorUnion.error_set!raytracer.KernelOutput(u8,raytracer.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:x},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Te}],methods:[],template:null},slot:33});Object.assign($e,{...r,type:3,name:"createOutput",length:1,byteSize:128,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:640,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:672,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:1024,bitSize:0,byteSize:0,slot:2,name:"2",structure:P},{...e,type:6,bitOffset:0,bitSize:640,byteSize:80,slot:3,name:"3",structure:C},{...e,type:6,bitOffset:704,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Fe}],methods:[],template:null},slot:31});Object.assign(Be,{...r,type:8,name:"@typeInfo(@typeInfo(@TypeOf(raytracer.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:50});Object.assign(Le,{...r,type:7,name:"@typeInfo(@typeInfo(@TypeOf(raytracer.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!raytracer.KernelOutput(u8,raytracer.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:x},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Be}],methods:[],template:null},slot:34});Object.assign(Ge,{...r,type:3,name:"createPartialOutput",length:1,byteSize:128,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:640,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:672,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:704,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:736,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:1024,bitSize:0,byteSize:0,slot:4,name:"4",structure:P},{...e,type:6,bitOffset:0,bitSize:640,byteSize:80,slot:5,name:"5",structure:C},{...e,type:6,bitOffset:768,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Le}],methods:[],template:null},slot:32});const jm={argStruct:$e,thunk:6,name:"createOutput"},Pm={argStruct:Ge,thunk:7,name:"createPartialOutput"};Object.assign(He,{...r,type:2,name:"raytracer",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ze}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:Me},{...e,type:7,isRequired:!1,name:"Input",structure:P},{...e,type:7,isRequired:!1,name:"Output",structure:x},{...e,type:7,isRequired:!1,name:"Parameters",structure:C}],methods:[jm,Pm],template:null},slot:0});const xm=[V,q,A,z,f,w,ne,le,E,b,m,t,ue,M,h,U,R,pe,K,ye,T,fe,F,de,$,be,B,_e,L,he,G,ge,H,Se,J,ze,N,Ve,Q,j,we,W,Re,X,Oe,Y,qe,Z,Ae,ee,Ue,te,re,je,me,Pe,se,Me,P,xe,Ce,Ie,u,Ke,ae,oe,ie,x,C,Te,Fe,$e,Be,Le,Ge,He],Cm=St(xm),Im=He.constructor,km=(async()=>{const c=new URL("raytracer-6ca12335.wasm",import.meta.url).href;return fetch(c)})();zt(km,{...Cm,writeBack:!0});const{createOutput:$m,createPartialOutput:vm,kernel:Ee,Input:Dm,Output:Bm,Parameters:Lm}=Im;function Em(c,l,o,a,i={},g={}){if(Array.isArray(i)){const _=i;i={};for(const[p,S]of Object.keys(Ee.inputImages).entries())i[S]=_[p]}const I=new Dm(void 0),k=Object.keys(Ee.inputImages),n=[];let O;for(const _ of k){let p=i[_];if(p||(k.length===1&&["data","width","height"].every(S=>!!i[S])?p=i:n.push(_)),I[_]=p,O){if(p.colorSpace!==O)throw new Error(`Input images must all use the same color space: ${O}`)}else O=p.colorSpace}if(n.length>0)throw new Error(`Missing input image${n.length>1?"s":""}: ${n.join(", ")}`);const ve=vm(c,l,o,a,I,g),Ne=_=>{const p=Object.keys(_),S={};for(const Qe of p){const{data:{typedArray:v},width:We,height:tt}=_[Qe];let D;if(typeof ImageData=="function"){const rt=new Uint8ClampedArray(v.buffer,v.byteOffset,v.byteLength);D=new ImageData(rt,We,a,{colorSpace:O})}else D={data:v,width:We,height:tt};if(p.length===1)return D;S[Qe]=D}return S};return ve[Symbol.toStringTag]==="Promise"?ve.then(Ne):Ne(ve)}function Mm(){const c={};for(let[l,o]of Object.entries(Ee)){if(l==="parameters"){const a={};for(const[i,g]of Object.entries(o)){const I=a[i]={};for(let[k,n]of Object.entries(g))typeof n=="object"?"string"in n?n=n.string:n=et(n):typeof n=="function"&&(n=Km(n.name)),I[k]=n}o=a}else typeof o=="object"&&("string"in o?o=o.string:o=o.valueOf());c[l]=o}return c}function et(c){const l=[];for(let[o,a]of Object.entries(c))typeof a=="object"&&(a=et(a)),l[o]=a;return l}function Km(c){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[c]}onmessage=c=>{const[l,o,...a]=c.data;Tm(l,a).then(([i,g])=>{postMessage([l,o,i],{transfer:g})}).catch(i=>{postMessage(["error",o,i])})};async function Tm(c,l){switch(c){case"getKernelInfo":return[Mm(...l)];case"createPartialImageData":const a=await Em(...l),i=[];if("data"in a&&"width"in a&&"height"in a)i.push(a.data.buffer);else for(const g of Object.entries(a))i.push(a.data.buffer);return[a,i];default:throw new Error(`Unknown function: ${c}`)}}
