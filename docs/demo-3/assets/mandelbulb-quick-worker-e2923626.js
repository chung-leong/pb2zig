import{u as rm,a as mm,b as am,d as om,c as im,e as cm,f as nm,g as um,h as lm,i as pm,j as ym,k as dm,l as fm,n as bm,o as hm,m as _m,p as gm,q as Vm,r as Sm}from"./index-778418ea.js";rm();mm();am();om();im();cm();nm();um();lm();pm();ym();dm();fm();bm();hm();_m();gm();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},c={},Q={},Z={},ge={},Ft={},Mt={},Ve={},i={},E={},Dt={},Jt={},Se={},o={},Zt={},Kt={},ze={},Nt={},qe={},g={},A={},K={},N={},O={},$t={},we={},W={},X={},T={},Gt={},Re={},x={},j={},z={},Ht={},Ue={},a={},r={},s={},Qt={},Wt={},Ae={},Xt={},Oe={},Y={},ee={},L={},Yt={},xe={},es={},ts={},je={},ss={},Pe={},rs={},ms={},Ce={},as={},ke={},os={},is={},Ie={},cs={},ve={},ns={},us={},Ee={},ls={},Te={},ps={},Le={},u={},ys={},Be={},ds={},Fe={},fs={},Me={},bs={},hs={},De={},_s={},Je={},gs={},Ze={},Vs={},Ke={},Ss={},Ne={},zs={},qs={},$e={},ws={},Ge={},Rs={},He={},Us={},Qe={},R={},_={},We={},As={},Xe={},te={},B={},se={},F={},Os={},Ye={},xs={},js={},et={},Ps={},tt={},Cs={},st={},ks={},rt={},Is={},mt={},vs={},at={},Es={},ot={},P={},q={},Ts={},Ls={},it={},C={},k={},w={},Bs={},ct={},Fs={},nt={},Ms={},ut={},re={},me={},M={},Ds={},lt={},Js={},pt={},Zs={},yt={},Ks={},dt={},Ns={},ft={},$s={},Gs={},bt={},Hs={},ht={},ae={},oe={},D={},Qs={},_t={},ie={},ce={},J={},Ws={},gt={},Xs={},Vt={},Ys={},St={},er={},zt={},tr={},sr={},qt={},rr={},wt={},mr={},ar={},Rt={},or={},Ut={},ir={},At={},cr={},nr={},Ot={},ur={},xt={},lr={},pr={},jt={},yr={},Pt={},dr={},Ct={},fr={},kt={},br={},It={},hr={},vt={},_r={},Et={},gr={},Tt={},kr={},ne={},Vr={},Sr={},zr={},V={},Ir={},Lt={},vr={},Bt={},ue={},le={},Er={},Tr={},Lr={},Br={},Fr={},Mr={},Dr={};Object.assign(c,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:5});Object.assign(Q,{...t,type:1,name:"[19:0]u8",length:19,byteSize:20,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:4});Object.assign(Z,{...t,type:11,name:"*const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:3});Object.assign(ge,{...t,type:11,name:"**const [19:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:2});Object.assign(Ft,{...t,type:1,name:"[11:0]u8",length:11,byteSize:12,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:8});Object.assign(Mt,{...t,type:11,name:"*const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ft}],methods:[],template:null},slot:7});Object.assign(Ve,{...t,type:11,name:"**const [11:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Mt}],methods:[],template:null},slot:6});Object.assign(i,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:i}],methods:[],template:null},slot:10});Object.assign(E,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:i}],methods:[],template:null},slot:9});Object.assign(Dt,{...t,type:1,name:"[49:0]u8",length:49,byteSize:50,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:13});Object.assign(Jt,{...t,type:11,name:"*const [49:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Dt}],methods:[],template:null},slot:12});Object.assign(Se,{...t,type:11,name:"**const [49:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Jt}],methods:[],template:null},slot:11});Object.assign(o,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:i}],methods:[],template:null},slot:107});Object.assign(Zt,{...t,type:1,name:"[60:0]u8",length:60,byteSize:61,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:110});Object.assign(Kt,{...t,type:11,name:"*const [60:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Zt}],methods:[],template:null},slot:109});Object.assign(ze,{...t,type:11,name:"*const *const [60:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Kt}],methods:[],template:null},slot:108});const zm=new Uint8Array([]),qm=new Uint8Array([72,31,16,0]),Pr=new Uint8Array([1,0,0,0]),wm=new Uint8Array([72,32,16,0]),Rm=new Uint8Array([3,0,0,0]),Um=new Uint8Array([72,31,16,0]),Am=new Uint8Array([68,32,16,0]),Om=new Uint8Array([241,36,16,0]),xm=new Uint8Array([83,117,112,101,114,32,115,97,109,112,108,105,110,103,32,113,117,97,108,105,116,121,46,32,78,117,109,98,101,114,32,111,102,32,115,97,109,112,108,101,115,32,115,113,117,97,114,101,100,32,112,101,114,32,112,105,120,101,108,46,0]);Object.assign(Nt,{...t,type:2,name:'struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 1, comptime description: *const [60:0]u8 = "Super sampling quality. Number of samples squared per pixel."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:i},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:o},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:o},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:ze}],methods:[],template:{memory:{array:zm},slots:{0:{structure:o,memory:{array:qm},slots:{0:{structure:i,memory:{array:Pr},address:1056584}}},1:{structure:o,memory:{array:wm},slots:{0:{structure:i,memory:{array:Rm},address:1056840}}},2:{structure:o,memory:{array:Um},slots:{0:{structure:i,memory:{array:Pr},address:1056584}}},3:{structure:ze,memory:{array:Am},slots:{0:{structure:Kt,memory:{array:Om},address:1056836,slots:{0:{structure:Zt,memory:{array:xm},address:1058033}}}}}}}},slot:39});Object.assign(qe,{...t,type:11,name:'*const struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 1, comptime description: *const [60:0]u8 = "Super sampling quality. Number of samples squared per pixel."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Nt}],methods:[],template:null},slot:38});Object.assign(g,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:g}],methods:[],template:null},slot:28});Object.assign(A,{...t,type:11,name:"*const bool",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:g}],methods:[],template:null},slot:111});Object.assign(K,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:114});Object.assign(N,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:K}],methods:[],template:null},slot:113});Object.assign(O,{...t,type:11,name:"*const *const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:112});const jm=new Uint8Array([]),Pm=new Uint8Array([64,32,16,0]),Cm=new Uint8Array([1]),km=new Uint8Array([60,32,16,0]),Im=new Uint8Array([219,36,16,0]),vm=new Uint8Array([69,110,97,98,108,101,32,112,104,111,110,103,32,115,104,97,100,105,110,103,46,0]);Object.assign($t,{...t,type:2,name:'struct{comptime type: type = bool, comptime defaultValue: bool = true, comptime description: *const [21:0]u8 = "Enable phong shading."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:g},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:A},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:O}],methods:[],template:{memory:{array:jm},slots:{0:{structure:A,memory:{array:Pm},slots:{0:{structure:g,memory:{array:Cm},address:1056832}}},1:{structure:O,memory:{array:km},slots:{0:{structure:N,memory:{array:Im},address:1056828,slots:{0:{structure:K,memory:{array:vm},address:1058011}}}}}}}},slot:41});Object.assign(we,{...t,type:11,name:'*const struct{comptime type: type = bool, comptime defaultValue: bool = true, comptime description: *const [21:0]u8 = "Enable phong shading."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$t}],methods:[],template:null},slot:40});Object.assign(W,{...t,type:1,name:"[25:0]u8",length:25,byteSize:26,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:117});Object.assign(X,{...t,type:11,name:"*const [25:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:116});Object.assign(T,{...t,type:11,name:"*const *const [25:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:115});const Em=new Uint8Array([]),Tm=new Uint8Array([52,32,16,0]),Qr=new Uint8Array([0]),Lm=new Uint8Array([56,32,16,0]),Bm=new Uint8Array([193,36,16,0]),Fm=new Uint8Array([69,110,97,98,108,101,32,74,117,108,105,97,32,115,101,116,32,118,101,114,115,105,111,110,46,0]);Object.assign(Gt,{...t,type:2,name:'struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [25:0]u8 = "Enable Julia set version."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:g},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:A},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:T}],methods:[],template:{memory:{array:Em},slots:{0:{structure:A,memory:{array:Tm},slots:{0:{structure:g,memory:{array:Qr},address:1056820}}},1:{structure:T,memory:{array:Lm},slots:{0:{structure:X,memory:{array:Bm},address:1056824,slots:{0:{structure:W,memory:{array:Fm},address:1057985}}}}}}}},slot:43});Object.assign(Re,{...t,type:11,name:'*const struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [25:0]u8 = "Enable Julia set version."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Gt}],methods:[],template:null},slot:42});Object.assign(x,{...t,type:1,name:"[24:0]u8",length:24,byteSize:25,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:120});Object.assign(j,{...t,type:11,name:"*const [24:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:x}],methods:[],template:null},slot:119});Object.assign(z,{...t,type:11,name:"*const *const [24:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:j}],methods:[],template:null},slot:118});const Mm=new Uint8Array([]),Dm=new Uint8Array([52,32,16,0]),Jm=new Uint8Array([48,32,16,0]),Zm=new Uint8Array([168,36,16,0]),Km=new Uint8Array([69,110,97,98,108,101,32,114,97,100,105,111,108,97,114,105,97,32,115,116,121,108,101,46,0]);Object.assign(Ht,{...t,type:2,name:'struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [24:0]u8 = "Enable radiolaria style."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:g},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:A},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:z}],methods:[],template:{memory:{array:Mm},slots:{0:{structure:A,memory:{array:Dm},slots:{0:{structure:g,memory:{array:Qr},address:1056820}}},1:{structure:z,memory:{array:Jm},slots:{0:{structure:j,memory:{array:Zm},address:1056816,slots:{0:{structure:x,memory:{array:Km},address:1057960}}}}}}}},slot:45});Object.assign(Ue,{...t,type:11,name:'*const struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [24:0]u8 = "Enable radiolaria style."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ht}],methods:[],template:null},slot:44});Object.assign(a,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:a}],methods:[],template:null},slot:31});Object.assign(r,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:r}],methods:[],template:null},slot:122});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:r}],methods:[],template:null},slot:121});Object.assign(Qt,{...t,type:1,name:"[28:0]u8",length:28,byteSize:29,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:125});Object.assign(Wt,{...t,type:11,name:"*const [28:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Qt}],methods:[],template:null},slot:124});Object.assign(Ae,{...t,type:11,name:"*const *const [28:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Wt}],methods:[],template:null},slot:123});const Nm=new Uint8Array([]),$m=new Uint8Array([8,31,16,0]),be=new Uint8Array([0,0,0,0,0,0,16,192]),Gm=new Uint8Array([0,31,16,0]),G=new Uint8Array([0,0,0,0,0,0,16,64]),Hm=new Uint8Array([112,30,16,0]),n=new Uint8Array([0,0,0,0,0,0,0,0]),Qm=new Uint8Array([44,32,16,0]),Wm=new Uint8Array([139,36,16,0]),Xm=new Uint8Array([84,119,101,97,107,32,116,104,101,32,114,97,100,105,111,108,97,114,105,97,32,101,102,102,101,99,116,46,0]);Object.assign(Xt,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = -4, comptime maxValue: comptime_float = 4, comptime defaultValue: comptime_float = 0, comptime description: *const [28:0]u8 = "Tweak the radiolaria effect."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Ae}],methods:[],template:{memory:{array:Nm},slots:{0:{structure:s,memory:{array:$m},slots:{0:{structure:r,memory:{array:be},address:1056520}}},1:{structure:s,memory:{array:Gm},slots:{0:{structure:r,memory:{array:G},address:1056512}}},2:{structure:s,memory:{array:Hm},slots:{0:{structure:r,memory:{array:n},address:1056368}}},3:{structure:Ae,memory:{array:Qm},slots:{0:{structure:Wt,memory:{array:Wm},address:1056812,slots:{0:{structure:Qt,memory:{array:Xm},address:1057931}}}}}}}},slot:47});Object.assign(Oe,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = -4, comptime maxValue: comptime_float = 4, comptime defaultValue: comptime_float = 0, comptime description: *const [28:0]u8 = "Tweak the radiolaria effect."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Xt}],methods:[],template:null},slot:46});Object.assign(Y,{...t,type:1,name:"[26:0]u8",length:26,byteSize:27,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:128});Object.assign(ee,{...t,type:11,name:"*const [26:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:127});Object.assign(L,{...t,type:11,name:"*const *const [26:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:126});const Ym=new Uint8Array([]),ea=new Uint8Array([112,30,16,0]),ta=new Uint8Array([144,30,16,0]),d=new Uint8Array([0,0,0,0,0,0,240,63]),sa=new Uint8Array([112,30,16,0]),ra=new Uint8Array([40,32,16,0]),ma=new Uint8Array([112,36,16,0]),aa=new Uint8Array([69,110,97,98,108,101,32,114,97,121,32,116,114,97,99,101,100,32,115,104,97,100,111,119,115,46,0]);Object.assign(Yt,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [26:0]u8 = "Enable ray traced shadows."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:L}],methods:[],template:{memory:{array:Ym},slots:{0:{structure:s,memory:{array:ea},slots:{0:{structure:r,memory:{array:n},address:1056368}}},1:{structure:s,memory:{array:ta},slots:{0:{structure:r,memory:{array:d},address:1056400}}},2:{structure:s,memory:{array:sa},slots:{0:{structure:r,memory:{array:n},address:1056368}}},3:{structure:L,memory:{array:ra},slots:{0:{structure:ee,memory:{array:ma},address:1056808,slots:{0:{structure:Y,memory:{array:aa},address:1057904}}}}}}}},slot:49});Object.assign(xe,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [26:0]u8 = "Enable ray traced shadows."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Yt}],methods:[],template:null},slot:48});Object.assign(es,{...t,type:1,name:"[61:0]u8",length:61,byteSize:62,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:131});Object.assign(ts,{...t,type:11,name:"*const [61:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:es}],methods:[],template:null},slot:130});Object.assign(je,{...t,type:11,name:"*const *const [61:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ts}],methods:[],template:null},slot:129});const oa=new Uint8Array([]),ia=new Uint8Array([112,30,16,0]),ca=new Uint8Array([144,30,16,0]),na=new Uint8Array([32,32,16,0]),ua=new Uint8Array([154,153,153,153,153,153,233,63]),la=new Uint8Array([24,32,16,0]),pa=new Uint8Array([50,36,16,0]),ya=new Uint8Array([69,110,97,98,108,101,32,102,97,107,101,32,97,109,98,105,101,110,116,32,111,99,99,108,117,115,105,111,110,32,102,97,99,116,111,114,32,98,97,115,101,100,32,111,110,32,116,104,101,32,111,114,98,105,116,32,116,114,97,112,46,0]);Object.assign(ss,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.8, comptime description: *const [61:0]u8 = "Enable fake ambient occlusion factor based on the orbit trap."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:je}],methods:[],template:{memory:{array:oa},slots:{0:{structure:s,memory:{array:ia},slots:{0:{structure:r,memory:{array:n},address:1056368}}},1:{structure:s,memory:{array:ca},slots:{0:{structure:r,memory:{array:d},address:1056400}}},2:{structure:s,memory:{array:na},slots:{0:{structure:r,memory:{array:ua},address:1056800}}},3:{structure:je,memory:{array:la},slots:{0:{structure:ts,memory:{array:pa},address:1056792,slots:{0:{structure:es,memory:{array:ya},address:1057842}}}}}}}},slot:51});Object.assign(Pe,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.8, comptime description: *const [61:0]u8 = "Enable fake ambient occlusion factor based on the orbit trap."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ss}],methods:[],template:null},slot:50});Object.assign(rs,{...t,type:1,name:"[100:0]u8",length:100,byteSize:101,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:134});Object.assign(ms,{...t,type:11,name:"*const [100:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:rs}],methods:[],template:null},slot:133});Object.assign(Ce,{...t,type:11,name:"*const *const [100:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ms}],methods:[],template:null},slot:132});const da=new Uint8Array([]),fa=new Uint8Array([112,30,16,0]),ba=new Uint8Array([144,30,16,0]),ha=new Uint8Array([16,32,16,0]),_a=new Uint8Array([143,194,245,40,92,143,226,63]),ga=new Uint8Array([8,32,16,0]),Va=new Uint8Array([205,35,16,0]),Sa=new Uint8Array([69,109,112,104,97,115,105,115,101,32,116,104,101,32,115,116,114,117,99,116,117,114,101,32,101,100,103,101,115,32,98,97,115,101,100,32,111,110,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,115,116,101,112,115,32,105,116,32,116,97,107,101,115,32,116,111,32,114,101,97,99,104,32,97,32,112,111,105,110,116,32,105,110,32,116,104,101,32,102,114,97,99,116,97,108,46,0]);Object.assign(as,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.58, comptime description: *const [100:0]u8 = "Emphasise the structure edges based on the number of steps it takes to reach a point in the fractal."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Ce}],methods:[],template:{memory:{array:da},slots:{0:{structure:s,memory:{array:fa},slots:{0:{structure:r,memory:{array:n},address:1056368}}},1:{structure:s,memory:{array:ba},slots:{0:{structure:r,memory:{array:d},address:1056400}}},2:{structure:s,memory:{array:ha},slots:{0:{structure:r,memory:{array:_a},address:1056784}}},3:{structure:Ce,memory:{array:ga},slots:{0:{structure:ms,memory:{array:Va},address:1056776,slots:{0:{structure:rs,memory:{array:Sa},address:1057741}}}}}}}},slot:53});Object.assign(ke,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.58, comptime description: *const [100:0]u8 = "Emphasise the structure edges based on the number of steps it takes to reach a point in the fractal."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:as}],methods:[],template:null},slot:52});Object.assign(os,{...t,type:1,name:"[66:0]u8",length:66,byteSize:67,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:137});Object.assign(is,{...t,type:11,name:"*const [66:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:os}],methods:[],template:null},slot:136});Object.assign(Ie,{...t,type:11,name:"*const *const [66:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:is}],methods:[],template:null},slot:135});const za=new Uint8Array([]),qa=new Uint8Array([144,30,16,0]),wa=new Uint8Array([0,32,16,0]),Ra=new Uint8Array([0,0,0,0,0,0,48,64]),Ua=new Uint8Array([248,31,16,0]),Aa=new Uint8Array([0,0,0,0,0,0,4,64]),Oa=new Uint8Array([240,31,16,0]),xa=new Uint8Array([138,35,16,0]),ja=new Uint8Array([83,101,116,115,32,116,104,101,32,98,111,117,110,100,105,110,103,32,115,112,104,101,114,101,32,114,97,100,105,117,115,32,116,111,32,104,101,108,112,32,97,99,99,101,108,101,114,97,116,101,32,116,104,101,32,114,97,121,116,114,97,99,105,110,103,46,0]);Object.assign(cs,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 16, comptime defaultValue: comptime_float = 2.5, comptime description: *const [66:0]u8 = "Sets the bounding sphere radius to help accelerate the raytracing."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Ie}],methods:[],template:{memory:{array:za},slots:{0:{structure:s,memory:{array:qa},slots:{0:{structure:r,memory:{array:d},address:1056400}}},1:{structure:s,memory:{array:wa},slots:{0:{structure:r,memory:{array:Ra},address:1056768}}},2:{structure:s,memory:{array:Ua},slots:{0:{structure:r,memory:{array:Aa},address:1056760}}},3:{structure:Ie,memory:{array:Oa},slots:{0:{structure:is,memory:{array:xa},address:1056752,slots:{0:{structure:os,memory:{array:ja},address:1057674}}}}}}}},slot:55});Object.assign(ve,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 16, comptime defaultValue: comptime_float = 2.5, comptime description: *const [66:0]u8 = "Sets the bounding sphere radius to help accelerate the raytracing."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:cs}],methods:[],template:null},slot:54});Object.assign(ns,{...t,type:1,name:"[101:0]u8",length:101,byteSize:102,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:140});Object.assign(us,{...t,type:11,name:"*const [101:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ns}],methods:[],template:null},slot:139});Object.assign(Ee,{...t,type:11,name:"*const *const [101:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:us}],methods:[],template:null},slot:138});const Pa=new Uint8Array([]),Ca=new Uint8Array([232,31,16,0]),ka=new Uint8Array([0,0,0,0,0,0,224,63]),Ia=new Uint8Array([224,31,16,0]),va=new Uint8Array([0,0,0,0,0,0,40,64]),Ea=new Uint8Array([0,31,16,0]),Ta=new Uint8Array([216,31,16,0]),La=new Uint8Array([36,35,16,0]),Ba=new Uint8Array([83,101,116,115,32,116,104,101,32,98,97,105,108,111,117,116,32,118,97,108,117,101,32,102,111,114,32,116,104,101,32,102,114,97,99,116,97,108,32,99,97,108,99,117,108,97,116,105,111,110,46,32,76,111,119,101,114,32,118,97,108,117,101,115,32,103,105,118,101,32,115,109,111,111,116,104,101,114,32,108,101,115,115,32,100,101,116,97,105,108,101,100,32,114,101,115,117,108,116,115,46,0]);Object.assign(ls,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0.5, comptime maxValue: comptime_float = 12, comptime defaultValue: comptime_float = 4, comptime description: *const [101:0]u8 = "Sets the bailout value for the fractal calculation. Lower values give smoother less detailed results."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Ee}],methods:[],template:{memory:{array:Pa},slots:{0:{structure:s,memory:{array:Ca},slots:{0:{structure:r,memory:{array:ka},address:1056744}}},1:{structure:s,memory:{array:Ia},slots:{0:{structure:r,memory:{array:va},address:1056736}}},2:{structure:s,memory:{array:Ea},slots:{0:{structure:r,memory:{array:G},address:1056512}}},3:{structure:Ee,memory:{array:Ta},slots:{0:{structure:us,memory:{array:La},address:1056728,slots:{0:{structure:ns,memory:{array:Ba},address:1057572}}}}}}}},slot:57});Object.assign(Te,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.5, comptime maxValue: comptime_float = 12, comptime defaultValue: comptime_float = 4, comptime description: *const [101:0]u8 = "Sets the bailout value for the fractal calculation. Lower values give smoother less detailed results."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ls}],methods:[],template:null},slot:56});const Fa=new Uint8Array([]),Ma=new Uint8Array([16,31,16,0]),he=new Uint8Array([0,0,0,0,0,0,0,64]),Da=new Uint8Array([208,31,16,0]),Ja=new Uint8Array([0,0,0,0,0,0,64,64]),Za=new Uint8Array([200,31,16,0]),Ka=new Uint8Array([0,0,0,0,0,0,32,64]),Na=new Uint8Array([192,31,16,0]),$a=new Uint8Array([10,35,16,0]),Ga=new Uint8Array([84,104,101,32,112,111,119,101,114,32,111,102,32,116,104,101,32,102,114,97,99,116,97,108,46,0]);Object.assign(ps,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 2, comptime maxValue: comptime_float = 32, comptime defaultValue: comptime_float = 8, comptime description: *const [25:0]u8 = "The power of the fractal."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:T}],methods:[],template:{memory:{array:Fa},slots:{0:{structure:s,memory:{array:Ma},slots:{0:{structure:r,memory:{array:he},address:1056528}}},1:{structure:s,memory:{array:Da},slots:{0:{structure:r,memory:{array:Ja},address:1056720}}},2:{structure:s,memory:{array:Za},slots:{0:{structure:r,memory:{array:Ka},address:1056712}}},3:{structure:T,memory:{array:Na},slots:{0:{structure:X,memory:{array:$a},address:1056704,slots:{0:{structure:W,memory:{array:Ga},address:1057546}}}}}}}},slot:59});Object.assign(Le,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 2, comptime maxValue: comptime_float = 32, comptime defaultValue: comptime_float = 8, comptime description: *const [25:0]u8 = "The power of the fractal."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ps}],methods:[],template:null},slot:58});Object.assign(u,{...t,type:13,name:"@Vector(3, f32)",length:3,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:a}],methods:[],template:null},slot:32});const Ha=new Uint8Array([]),Qa=new Uint8Array([24,31,16,0]),Ur=new Uint8Array([0,0,0,0,0,0,0,192]),Wa=new Uint8Array([24,31,16,0]),Xa=new Uint8Array([24,31,16,0]);Object.assign(ys,{...t,type:2,name:"struct{comptime comptime_float = -2, comptime comptime_float = -2, comptime comptime_float = -2}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Ha},slots:{0:{structure:s,memory:{array:Qa},slots:{0:{structure:r,memory:{array:Ur},address:1056536}}},1:{structure:s,memory:{array:Wa},slots:{0:{structure:r,memory:{array:Ur},address:1056536}}},2:{structure:s,memory:{array:Xa},slots:{0:{structure:r,memory:{array:Ur},address:1056536}}}}}},slot:142});Object.assign(Be,{...t,type:11,name:"*const struct{comptime comptime_float = -2, comptime comptime_float = -2, comptime comptime_float = -2}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ys}],methods:[],template:null},slot:141});const Ya=new Uint8Array([]),eo=new Uint8Array([16,31,16,0]),to=new Uint8Array([16,31,16,0]),so=new Uint8Array([16,31,16,0]);Object.assign(ds,{...t,type:2,name:"struct{comptime comptime_float = 2, comptime comptime_float = 2, comptime comptime_float = 2}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Ya},slots:{0:{structure:s,memory:{array:eo},slots:{0:{structure:r,memory:{array:he},address:1056528}}},1:{structure:s,memory:{array:to},slots:{0:{structure:r,memory:{array:he},address:1056528}}},2:{structure:s,memory:{array:so},slots:{0:{structure:r,memory:{array:he},address:1056528}}}}}},slot:144});Object.assign(Fe,{...t,type:11,name:"*const struct{comptime comptime_float = 2, comptime comptime_float = 2, comptime comptime_float = 2}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ds}],methods:[],template:null},slot:143});const ro=new Uint8Array([]),mo=new Uint8Array([144,30,16,0]),ao=new Uint8Array([112,30,16,0]),oo=new Uint8Array([112,30,16,0]);Object.assign(fs,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:ro},slots:{0:{structure:s,memory:{array:mo},slots:{0:{structure:r,memory:{array:d},address:1056400}}},1:{structure:s,memory:{array:ao},slots:{0:{structure:r,memory:{array:n},address:1056368}}},2:{structure:s,memory:{array:oo},slots:{0:{structure:r,memory:{array:n},address:1056368}}}}}},slot:146});Object.assign(Me,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fs}],methods:[],template:null},slot:145});Object.assign(bs,{...t,type:1,name:"[37:0]u8",length:37,byteSize:38,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:149});Object.assign(hs,{...t,type:11,name:"*const [37:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:bs}],methods:[],template:null},slot:148});Object.assign(De,{...t,type:11,name:"*const *const [37:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:hs}],methods:[],template:null},slot:147});const io=new Uint8Array([]),co=new Uint8Array([170,170,170,170]),m=new Uint8Array([]),no=new Uint8Array([170,170,170,170]),uo=new Uint8Array([170,170,170,170]),lo=new Uint8Array([188,31,16,0]),po=new Uint8Array([228,34,16,0]),yo=new Uint8Array([84,104,101,32,99,32,99,111,110,115,116,97,110,116,32,102,111,114,32,74,117,108,105,97,32,115,101,116,32,102,114,97,99,116,97,108,115,0]);Object.assign(_s,{...t,type:2,name:'struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -2, comptime comptime_float = -2} = .{-2, -2, -2}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 2, comptime comptime_float = 2} = .{2, 2, 2}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 0, comptime comptime_float = 0} = .{1, 0, 0}, comptime description: *const [37:0]u8 = "The c constant for Julia set fractals"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:Be},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:Fe},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:Me},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:De}],methods:[],template:{memory:{array:io},slots:{0:{structure:Be,memory:{array:co},slots:{0:{structure:ys,memory:{array:m},address:-1431655766}}},1:{structure:Fe,memory:{array:no},slots:{0:{structure:ds,memory:{array:m},address:-1431655766}}},2:{structure:Me,memory:{array:uo},slots:{0:{structure:fs,memory:{array:m},address:-1431655766}}},3:{structure:De,memory:{array:lo},slots:{0:{structure:hs,memory:{array:po},address:1056700,slots:{0:{structure:bs,memory:{array:yo},address:1057508}}}}}}}},slot:61});Object.assign(Je,{...t,type:11,name:'*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -2, comptime comptime_float = -2} = .{-2, -2, -2}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 2, comptime comptime_float = 2} = .{2, 2, 2}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 0, comptime comptime_float = 0} = .{1, 0, 0}, comptime description: *const [37:0]u8 = "The c constant for Julia set fractals"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_s}],methods:[],template:null},slot:60});const fo=new Uint8Array([]),bo=new Uint8Array([8,31,16,0]),ho=new Uint8Array([8,31,16,0]),_o=new Uint8Array([8,31,16,0]);Object.assign(gs,{...t,type:2,name:"struct{comptime comptime_float = -4, comptime comptime_float = -4, comptime comptime_float = -4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:fo},slots:{0:{structure:s,memory:{array:bo},slots:{0:{structure:r,memory:{array:be},address:1056520}}},1:{structure:s,memory:{array:ho},slots:{0:{structure:r,memory:{array:be},address:1056520}}},2:{structure:s,memory:{array:_o},slots:{0:{structure:r,memory:{array:be},address:1056520}}}}}},slot:151});Object.assign(Ze,{...t,type:11,name:"*const struct{comptime comptime_float = -4, comptime comptime_float = -4, comptime comptime_float = -4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:gs}],methods:[],template:null},slot:150});const go=new Uint8Array([]),Vo=new Uint8Array([0,31,16,0]),So=new Uint8Array([0,31,16,0]),zo=new Uint8Array([0,31,16,0]);Object.assign(Vs,{...t,type:2,name:"struct{comptime comptime_float = 4, comptime comptime_float = 4, comptime comptime_float = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:go},slots:{0:{structure:s,memory:{array:Vo},slots:{0:{structure:r,memory:{array:G},address:1056512}}},1:{structure:s,memory:{array:So},slots:{0:{structure:r,memory:{array:G},address:1056512}}},2:{structure:s,memory:{array:zo},slots:{0:{structure:r,memory:{array:G},address:1056512}}}}}},slot:153});Object.assign(Ke,{...t,type:11,name:"*const struct{comptime comptime_float = 4, comptime comptime_float = 4, comptime comptime_float = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Vs}],methods:[],template:null},slot:152});const qo=new Uint8Array([]),wo=new Uint8Array([112,30,16,0]),Ro=new Uint8Array([248,30,16,0]),Uo=new Uint8Array([205,204,204,204,204,204,4,192]),Ao=new Uint8Array([112,30,16,0]);Object.assign(Ss,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = -2.6, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:qo},slots:{0:{structure:s,memory:{array:wo},slots:{0:{structure:r,memory:{array:n},address:1056368}}},1:{structure:s,memory:{array:Ro},slots:{0:{structure:r,memory:{array:Uo},address:1056504}}},2:{structure:s,memory:{array:Ao},slots:{0:{structure:r,memory:{array:n},address:1056368}}}}}},slot:155});Object.assign(Ne,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = -2.6, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ss}],methods:[],template:null},slot:154});Object.assign(zs,{...t,type:1,name:"[16:0]u8",length:16,byteSize:17,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:158});Object.assign(qs,{...t,type:11,name:"*const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:zs}],methods:[],template:null},slot:157});Object.assign($e,{...t,type:11,name:"*const *const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:qs}],methods:[],template:null},slot:156});const Oo=new Uint8Array([]),xo=new Uint8Array([170,170,170,170]),jo=new Uint8Array([170,170,170,170]),Po=new Uint8Array([170,170,170,170]),Co=new Uint8Array([184,31,16,0]),ko=new Uint8Array([211,34,16,0]),Io=new Uint8Array([67,97,109,101,114,97,32,112,111,115,105,116,105,111,110,46,0]);Object.assign(ws,{...t,type:2,name:'struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -4, comptime comptime_float = -4, comptime comptime_float = -4} = .{-4, -4, -4}, comptime maxValue: struct{comptime comptime_float = 4, comptime comptime_float = 4, comptime comptime_float = 4} = .{4, 4, 4}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = -2.6, comptime comptime_float = 0} = .{0, -2.6, 0}, comptime description: *const [16:0]u8 = "Camera position."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:Ze},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:Ke},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:Ne},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:$e}],methods:[],template:{memory:{array:Oo},slots:{0:{structure:Ze,memory:{array:xo},slots:{0:{structure:gs,memory:{array:m},address:-1431655766}}},1:{structure:Ke,memory:{array:jo},slots:{0:{structure:Vs,memory:{array:m},address:-1431655766}}},2:{structure:Ne,memory:{array:Po},slots:{0:{structure:Ss,memory:{array:m},address:-1431655766}}},3:{structure:$e,memory:{array:Co},slots:{0:{structure:qs,memory:{array:ko},address:1056696,slots:{0:{structure:zs,memory:{array:Io},address:1057491}}}}}}}},slot:63});Object.assign(Ge,{...t,type:11,name:'*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -4, comptime comptime_float = -4, comptime comptime_float = -4} = .{-4, -4, -4}, comptime maxValue: struct{comptime comptime_float = 4, comptime comptime_float = 4, comptime comptime_float = 4} = .{4, 4, 4}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = -2.6, comptime comptime_float = 0} = .{0, -2.6, 0}, comptime description: *const [16:0]u8 = "Camera position."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ws}],methods:[],template:null},slot:62});const vo=new Uint8Array([]),Eo=new Uint8Array([240,30,16,0]),Ar=new Uint8Array([154,153,153,153,153,153,185,191]),To=new Uint8Array([240,30,16,0]),Lo=new Uint8Array([240,30,16,0]);Object.assign(Rs,{...t,type:2,name:"struct{comptime comptime_float = -0.1, comptime comptime_float = -0.1, comptime comptime_float = -0.1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:vo},slots:{0:{structure:s,memory:{array:Eo},slots:{0:{structure:r,memory:{array:Ar},address:1056496}}},1:{structure:s,memory:{array:To},slots:{0:{structure:r,memory:{array:Ar},address:1056496}}},2:{structure:s,memory:{array:Lo},slots:{0:{structure:r,memory:{array:Ar},address:1056496}}}}}},slot:160});Object.assign(He,{...t,type:11,name:"*const struct{comptime comptime_float = -0.1, comptime comptime_float = -0.1, comptime comptime_float = -0.1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Rs}],methods:[],template:null},slot:159});const Bo=new Uint8Array([]),Fo=new Uint8Array([232,30,16,0]),H=new Uint8Array([154,153,153,153,153,153,185,63]),Mo=new Uint8Array([232,30,16,0]),Do=new Uint8Array([232,30,16,0]);Object.assign(Us,{...t,type:2,name:"struct{comptime comptime_float = 0.1, comptime comptime_float = 0.1, comptime comptime_float = 0.1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Bo},slots:{0:{structure:s,memory:{array:Fo},slots:{0:{structure:r,memory:{array:H},address:1056488}}},1:{structure:s,memory:{array:Mo},slots:{0:{structure:r,memory:{array:H},address:1056488}}},2:{structure:s,memory:{array:Do},slots:{0:{structure:r,memory:{array:H},address:1056488}}}}}},slot:162});Object.assign(Qe,{...t,type:11,name:"*const struct{comptime comptime_float = 0.1, comptime comptime_float = 0.1, comptime comptime_float = 0.1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Us}],methods:[],template:null},slot:161});const Jo=new Uint8Array([]),Zo=new Uint8Array([112,30,16,0]),Ko=new Uint8Array([112,30,16,0]),No=new Uint8Array([112,30,16,0]);Object.assign(R,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Jo},slots:{0:{structure:s,memory:{array:Zo},slots:{0:{structure:r,memory:{array:n},address:1056368}}},1:{structure:s,memory:{array:Ko},slots:{0:{structure:r,memory:{array:n},address:1056368}}},2:{structure:s,memory:{array:No},slots:{0:{structure:r,memory:{array:n},address:1056368}}}}}},slot:164});Object.assign(_,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:163});Object.assign(We,{...t,type:11,name:"*const *const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:165});const $o=new Uint8Array([]),Go=new Uint8Array([170,170,170,170]),Ho=new Uint8Array([170,170,170,170]),Qo=new Uint8Array([170,170,170,170]),Wo=new Uint8Array([180,31,16,0]),Xo=new Uint8Array([191,34,16,0]),Yo=new Uint8Array([70,105,110,101,32,116,117,110,101,32,112,111,115,105,116,105,111,110,46,0]);Object.assign(As,{...t,type:2,name:'struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -0.1, comptime comptime_float = -0.1, comptime comptime_float = -0.1} = .{-0.1, -0.1, -0.1}, comptime maxValue: struct{comptime comptime_float = 0.1, comptime comptime_float = 0.1, comptime comptime_float = 0.1} = .{0.1, 0.1, 0.1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime description: *const [19:0]u8 = "Fine tune position."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:He},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:Qe},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:_},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:We}],methods:[],template:{memory:{array:$o},slots:{0:{structure:He,memory:{array:Go},slots:{0:{structure:Rs,memory:{array:m},address:-1431655766}}},1:{structure:Qe,memory:{array:Ho},slots:{0:{structure:Us,memory:{array:m},address:-1431655766}}},2:{structure:_,memory:{array:Qo},slots:{0:{structure:R,memory:{array:m},address:-1431655766}}},3:{structure:We,memory:{array:Wo},slots:{0:{structure:Z,memory:{array:Xo},address:1056692,slots:{0:{structure:Q,memory:{array:Yo},address:1057471}}}}}}}},slot:65});Object.assign(Xe,{...t,type:11,name:'*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -0.1, comptime comptime_float = -0.1, comptime comptime_float = -0.1} = .{-0.1, -0.1, -0.1}, comptime maxValue: struct{comptime comptime_float = 0.1, comptime comptime_float = 0.1, comptime comptime_float = 0.1} = .{0.1, 0.1, 0.1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime description: *const [19:0]u8 = "Fine tune position."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:As}],methods:[],template:null},slot:64});const ei=new Uint8Array([]),ti=new Uint8Array([224,30,16,0]),Or=new Uint8Array([0,0,0,0,0,128,102,192]),si=new Uint8Array([224,30,16,0]),ri=new Uint8Array([224,30,16,0]);Object.assign(te,{...t,type:2,name:"struct{comptime comptime_float = -180, comptime comptime_float = -180, comptime comptime_float = -180}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:ei},slots:{0:{structure:s,memory:{array:ti},slots:{0:{structure:r,memory:{array:Or},address:1056480}}},1:{structure:s,memory:{array:si},slots:{0:{structure:r,memory:{array:Or},address:1056480}}},2:{structure:s,memory:{array:ri},slots:{0:{structure:r,memory:{array:Or},address:1056480}}}}}},slot:167});Object.assign(B,{...t,type:11,name:"*const struct{comptime comptime_float = -180, comptime comptime_float = -180, comptime comptime_float = -180}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:166});const mi=new Uint8Array([]),ai=new Uint8Array([216,30,16,0]),xr=new Uint8Array([0,0,0,0,0,128,102,64]),oi=new Uint8Array([216,30,16,0]),ii=new Uint8Array([216,30,16,0]);Object.assign(se,{...t,type:2,name:"struct{comptime comptime_float = 180, comptime comptime_float = 180, comptime comptime_float = 180}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:mi},slots:{0:{structure:s,memory:{array:ai},slots:{0:{structure:r,memory:{array:xr},address:1056472}}},1:{structure:s,memory:{array:oi},slots:{0:{structure:r,memory:{array:xr},address:1056472}}},2:{structure:s,memory:{array:ii},slots:{0:{structure:r,memory:{array:xr},address:1056472}}}}}},slot:169});Object.assign(F,{...t,type:11,name:"*const struct{comptime comptime_float = 180, comptime comptime_float = 180, comptime comptime_float = 180}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:168});const ci=new Uint8Array([]),ni=new Uint8Array([112,30,16,0]),ui=new Uint8Array([112,30,16,0]),li=new Uint8Array([208,30,16,0]),pi=new Uint8Array([0,0,0,0,0,128,86,192]);Object.assign(Os,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = -90}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:ci},slots:{0:{structure:s,memory:{array:ni},slots:{0:{structure:r,memory:{array:n},address:1056368}}},1:{structure:s,memory:{array:ui},slots:{0:{structure:r,memory:{array:n},address:1056368}}},2:{structure:s,memory:{array:li},slots:{0:{structure:r,memory:{array:pi},address:1056464}}}}}},slot:171});Object.assign(Ye,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = -90}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Os}],methods:[],template:null},slot:170});Object.assign(xs,{...t,type:1,name:"[42:0]u8",length:42,byteSize:43,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:174});Object.assign(js,{...t,type:11,name:"*const [42:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:xs}],methods:[],template:null},slot:173});Object.assign(et,{...t,type:11,name:"*const *const [42:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:js}],methods:[],template:null},slot:172});const yi=new Uint8Array([]),di=new Uint8Array([170,170,170,170]),fi=new Uint8Array([170,170,170,170]),bi=new Uint8Array([170,170,170,170]),hi=new Uint8Array([176,31,16,0]),_i=new Uint8Array([148,34,16,0]),gi=new Uint8Array([80,111,105,110,116,105,110,103,32,97,110,103,108,101,32,105,110,32,101,97,99,104,32,97,120,105,115,32,111,102,32,116,104,101,32,99,97,109,101,114,97,46,0]);Object.assign(Ps,{...t,type:2,name:'struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -180, comptime comptime_float = -180, comptime comptime_float = -180} = .{-180, -180, -180}, comptime maxValue: struct{comptime comptime_float = 180, comptime comptime_float = 180, comptime comptime_float = 180} = .{180, 180, 180}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = -90} = .{0, 0, -90}, comptime description: *const [42:0]u8 = "Pointing angle in each axis of the camera."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:B},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:F},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:Ye},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:et}],methods:[],template:{memory:{array:yi},slots:{0:{structure:B,memory:{array:di},slots:{0:{structure:te,memory:{array:m},address:-1431655766}}},1:{structure:F,memory:{array:fi},slots:{0:{structure:se,memory:{array:m},address:-1431655766}}},2:{structure:Ye,memory:{array:bi},slots:{0:{structure:Os,memory:{array:m},address:-1431655766}}},3:{structure:et,memory:{array:hi},slots:{0:{structure:js,memory:{array:_i},address:1056688,slots:{0:{structure:xs,memory:{array:gi},address:1057428}}}}}}}},slot:67});Object.assign(tt,{...t,type:11,name:'*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -180, comptime comptime_float = -180, comptime comptime_float = -180} = .{-180, -180, -180}, comptime maxValue: struct{comptime comptime_float = 180, comptime comptime_float = 180, comptime comptime_float = 180} = .{180, 180, 180}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = -90} = .{0, 0, -90}, comptime description: *const [42:0]u8 = "Pointing angle in each axis of the camera."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ps}],methods:[],template:null},slot:66});const Vi=new Uint8Array([]),Si=new Uint8Array([112,30,16,0]),zi=new Uint8Array([168,31,16,0]),qi=new Uint8Array([0,0,0,0,0,0,36,64]),wi=new Uint8Array([112,30,16,0]),Ri=new Uint8Array([164,31,16,0]),Ui=new Uint8Array([126,34,16,0]),Ai=new Uint8Array([90,111,111,109,32,116,104,101,32,99,97,109,101,114,97,32,118,105,101,119,46,0]);Object.assign(Cs,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 0, comptime description: *const [21:0]u8 = "Zoom the camera view."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:O}],methods:[],template:{memory:{array:Vi},slots:{0:{structure:s,memory:{array:Si},slots:{0:{structure:r,memory:{array:n},address:1056368}}},1:{structure:s,memory:{array:zi},slots:{0:{structure:r,memory:{array:qi},address:1056680}}},2:{structure:s,memory:{array:wi},slots:{0:{structure:r,memory:{array:n},address:1056368}}},3:{structure:O,memory:{array:Ri},slots:{0:{structure:N,memory:{array:Ui},address:1056676,slots:{0:{structure:K,memory:{array:Ai},address:1057406}}}}}}}},slot:69});Object.assign(st,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 0, comptime description: *const [21:0]u8 = "Zoom the camera view."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Cs}],methods:[],template:null},slot:68});const Oi=new Uint8Array([]),xi=new Uint8Array([200,30,16,0]),jr=new Uint8Array([0,0,0,0,0,0,73,192]),ji=new Uint8Array([200,30,16,0]),Pi=new Uint8Array([200,30,16,0]);Object.assign(ks,{...t,type:2,name:"struct{comptime comptime_float = -50, comptime comptime_float = -50, comptime comptime_float = -50}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Oi},slots:{0:{structure:s,memory:{array:xi},slots:{0:{structure:r,memory:{array:jr},address:1056456}}},1:{structure:s,memory:{array:ji},slots:{0:{structure:r,memory:{array:jr},address:1056456}}},2:{structure:s,memory:{array:Pi},slots:{0:{structure:r,memory:{array:jr},address:1056456}}}}}},slot:176});Object.assign(rt,{...t,type:11,name:"*const struct{comptime comptime_float = -50, comptime comptime_float = -50, comptime comptime_float = -50}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ks}],methods:[],template:null},slot:175});const Ci=new Uint8Array([]),ki=new Uint8Array([192,30,16,0]),_e=new Uint8Array([0,0,0,0,0,0,73,64]),Ii=new Uint8Array([192,30,16,0]),vi=new Uint8Array([192,30,16,0]);Object.assign(Is,{...t,type:2,name:"struct{comptime comptime_float = 50, comptime comptime_float = 50, comptime comptime_float = 50}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Ci},slots:{0:{structure:s,memory:{array:ki},slots:{0:{structure:r,memory:{array:_e},address:1056448}}},1:{structure:s,memory:{array:Ii},slots:{0:{structure:r,memory:{array:_e},address:1056448}}},2:{structure:s,memory:{array:vi},slots:{0:{structure:r,memory:{array:_e},address:1056448}}}}}},slot:178});Object.assign(mt,{...t,type:11,name:"*const struct{comptime comptime_float = 50, comptime comptime_float = 50, comptime comptime_float = 50}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Is}],methods:[],template:null},slot:177});const Ei=new Uint8Array([]),Ti=new Uint8Array([176,30,16,0]),Nr=new Uint8Array([0,0,0,0,0,0,67,64]),Li=new Uint8Array([184,30,16,0]),Bi=new Uint8Array([0,0,0,0,0,0,69,192]),Fi=new Uint8Array([176,30,16,0]);Object.assign(vs,{...t,type:2,name:"struct{comptime comptime_float = 38, comptime comptime_float = -42, comptime comptime_float = 38}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Ei},slots:{0:{structure:s,memory:{array:Ti},slots:{0:{structure:r,memory:{array:Nr},address:1056432}}},1:{structure:s,memory:{array:Li},slots:{0:{structure:r,memory:{array:Bi},address:1056440}}},2:{structure:s,memory:{array:Fi},slots:{0:{structure:r,memory:{array:Nr},address:1056432}}}}}},slot:180});Object.assign(at,{...t,type:11,name:"*const struct{comptime comptime_float = 38, comptime comptime_float = -42, comptime comptime_float = 38}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:vs}],methods:[],template:null},slot:179});const Mi=new Uint8Array([]),Di=new Uint8Array([170,170,170,170]),Ji=new Uint8Array([170,170,170,170]),Zi=new Uint8Array([170,170,170,170]),Ki=new Uint8Array([160,31,16,0]),Ni=new Uint8Array([101,34,16,0]),$i=new Uint8Array([80,111,115,105,116,105,111,110,32,111,102,32,112,111,105,110,116,32,108,105,103,104,116,46,0]);Object.assign(Es,{...t,type:2,name:'struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -50, comptime comptime_float = -50, comptime comptime_float = -50} = .{-50, -50, -50}, comptime maxValue: struct{comptime comptime_float = 50, comptime comptime_float = 50, comptime comptime_float = 50} = .{50, 50, 50}, comptime defaultValue: struct{comptime comptime_float = 38, comptime comptime_float = -42, comptime comptime_float = 38} = .{38, -42, 38}, comptime description: *const [24:0]u8 = "Position of point light."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:rt},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:mt},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:at},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:z}],methods:[],template:{memory:{array:Mi},slots:{0:{structure:rt,memory:{array:Di},slots:{0:{structure:ks,memory:{array:m},address:-1431655766}}},1:{structure:mt,memory:{array:Ji},slots:{0:{structure:Is,memory:{array:m},address:-1431655766}}},2:{structure:at,memory:{array:Zi},slots:{0:{structure:vs,memory:{array:m},address:-1431655766}}},3:{structure:z,memory:{array:Ki},slots:{0:{structure:j,memory:{array:Ni},address:1056672,slots:{0:{structure:x,memory:{array:$i},address:1057381}}}}}}}},slot:71});Object.assign(ot,{...t,type:11,name:'*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -50, comptime comptime_float = -50, comptime comptime_float = -50} = .{-50, -50, -50}, comptime maxValue: struct{comptime comptime_float = 50, comptime comptime_float = 50, comptime comptime_float = 50} = .{50, 50, 50}, comptime defaultValue: struct{comptime comptime_float = 38, comptime comptime_float = -42, comptime comptime_float = 38} = .{38, -42, 38}, comptime description: *const [24:0]u8 = "Position of point light."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Es}],methods:[],template:null},slot:70});const Gi=new Uint8Array([]),Hi=new Uint8Array([144,30,16,0]),Qi=new Uint8Array([144,30,16,0]),Wi=new Uint8Array([144,30,16,0]);Object.assign(P,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Gi},slots:{0:{structure:s,memory:{array:Hi},slots:{0:{structure:r,memory:{array:d},address:1056400}}},1:{structure:s,memory:{array:Qi},slots:{0:{structure:r,memory:{array:d},address:1056400}}},2:{structure:s,memory:{array:Wi},slots:{0:{structure:r,memory:{array:d},address:1056400}}}}}},slot:182});Object.assign(q,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:P}],methods:[],template:null},slot:181});Object.assign(Ts,{...t,type:1,name:"[18:0]u8",length:18,byteSize:19,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:185});Object.assign(Ls,{...t,type:11,name:"*const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ts}],methods:[],template:null},slot:184});Object.assign(it,{...t,type:11,name:"*const *const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ls}],methods:[],template:null},slot:183});Object.assign(C,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:188});Object.assign(k,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:C}],methods:[],template:null},slot:187});Object.assign(w,{...t,type:11,name:"*const *const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:k}],methods:[],template:null},slot:186});const Xi=new Uint8Array([]),Yi=new Uint8Array([170,170,170,170]),ec=new Uint8Array([170,170,170,170]),tc=new Uint8Array([170,170,170,170]),sc=new Uint8Array([156,31,16,0]),rc=new Uint8Array([82,34,16,0]),mc=new Uint8Array([66,97,99,107,103,114,111,117,110,100,32,99,111,108,111,117,114,46,0]),ac=new Uint8Array([120,31,16,0]),qr=new Uint8Array([74,34,16,0]),wr=new Uint8Array([97,101,67,111,108,111,114,0]);Object.assign(Bs,{...t,type:2,name:'struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime description: *const [18:0]u8 = "Background colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:_},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:q},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:_},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:it},{...e,type:8,isRequired:!1,slot:4,name:"aeUIControl",structure:w}],methods:[],template:{memory:{array:Xi},slots:{0:{structure:_,memory:{array:Yi},slots:{0:{structure:R,memory:{array:m},address:-1431655766}}},1:{structure:q,memory:{array:ec},slots:{0:{structure:P,memory:{array:m},address:-1431655766}}},2:{structure:_,memory:{array:tc},slots:{0:{structure:R,memory:{array:m},address:-1431655766}}},3:{structure:it,memory:{array:sc},slots:{0:{structure:Ls,memory:{array:rc},address:1056668,slots:{0:{structure:Ts,memory:{array:mc},address:1057362}}}}},4:{structure:w,memory:{array:ac},slots:{0:{structure:k,memory:{array:qr},address:1056632,slots:{0:{structure:C,memory:{array:wr},address:1057354}}}}}}}},slot:73});Object.assign(ct,{...t,type:11,name:'*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime description: *const [18:0]u8 = "Background colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Bs}],methods:[],template:null},slot:72});const oc=new Uint8Array([]),ic=new Uint8Array([112,30,16,0]),cc=new Uint8Array([144,30,16,0]),nc=new Uint8Array([144,30,16,0]),uc=new Uint8Array([152,31,16,0]),lc=new Uint8Array([49,34,16,0]),pc=new Uint8Array([66,97,99,107,103,114,111,117,110,100,32,116,114,97,110,115,112,97,114,101,110,99,121,46,0]);Object.assign(Fs,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [24:0]u8 = "Background transparency."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:z}],methods:[],template:{memory:{array:oc},slots:{0:{structure:s,memory:{array:ic},slots:{0:{structure:r,memory:{array:n},address:1056368}}},1:{structure:s,memory:{array:cc},slots:{0:{structure:r,memory:{array:d},address:1056400}}},2:{structure:s,memory:{array:nc},slots:{0:{structure:r,memory:{array:d},address:1056400}}},3:{structure:z,memory:{array:uc},slots:{0:{structure:j,memory:{array:lc},address:1056664,slots:{0:{structure:x,memory:{array:pc},address:1057329}}}}}}}},slot:75});Object.assign(nt,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [24:0]u8 = "Background transparency."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Fs}],methods:[],template:null},slot:74});const yc=new Uint8Array([]),dc=new Uint8Array([112,30,16,0]),fc=new Uint8Array([152,30,16,0]),Wr=new Uint8Array([51,51,51,51,51,51,235,63]),bc=new Uint8Array([168,30,16,0]),hc=new Uint8Array([174,71,225,122,20,174,239,63]);Object.assign(Ms,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0.85, comptime comptime_float = 0.99}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:yc},slots:{0:{structure:s,memory:{array:dc},slots:{0:{structure:r,memory:{array:n},address:1056368}}},1:{structure:s,memory:{array:fc},slots:{0:{structure:r,memory:{array:Wr},address:1056408}}},2:{structure:s,memory:{array:bc},slots:{0:{structure:r,memory:{array:hc},address:1056424}}}}}},slot:190});Object.assign(ut,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0.85, comptime comptime_float = 0.99}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ms}],methods:[],template:null},slot:189});Object.assign(re,{...t,type:1,name:"[15:0]u8",length:15,byteSize:16,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:193});Object.assign(me,{...t,type:11,name:"*const [15:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:192});Object.assign(M,{...t,type:11,name:"*const *const [15:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:191});const _c=new Uint8Array([]),gc=new Uint8Array([170,170,170,170]),Vc=new Uint8Array([170,170,170,170]),Sc=new Uint8Array([170,170,170,170]),zc=new Uint8Array([148,31,16,0]),qc=new Uint8Array([33,34,16,0]),wc=new Uint8Array([68,105,102,102,117,115,101,32,99,111,108,111,117,114,46,0]),Rc=new Uint8Array([120,31,16,0]);Object.assign(Ds,{...t,type:2,name:'struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0.85, comptime comptime_float = 0.99} = .{0, 0.85, 0.99}, comptime description: *const [15:0]u8 = "Diffuse colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:_},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:q},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:ut},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:M},{...e,type:8,isRequired:!1,slot:4,name:"aeUIControl",structure:w}],methods:[],template:{memory:{array:_c},slots:{0:{structure:_,memory:{array:gc},slots:{0:{structure:R,memory:{array:m},address:-1431655766}}},1:{structure:q,memory:{array:Vc},slots:{0:{structure:P,memory:{array:m},address:-1431655766}}},2:{structure:ut,memory:{array:Sc},slots:{0:{structure:Ms,memory:{array:m},address:-1431655766}}},3:{structure:M,memory:{array:zc},slots:{0:{structure:me,memory:{array:qc},address:1056660,slots:{0:{structure:re,memory:{array:wc},address:1057313}}}}},4:{structure:w,memory:{array:Rc},slots:{0:{structure:k,memory:{array:qr},address:1056632,slots:{0:{structure:C,memory:{array:wr},address:1057354}}}}}}}},slot:77});Object.assign(lt,{...t,type:11,name:'*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0.85, comptime comptime_float = 0.99} = .{0, 0.85, 0.99}, comptime description: *const [15:0]u8 = "Diffuse colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ds}],methods:[],template:null},slot:76});const Uc=new Uint8Array([]),Ac=new Uint8Array([160,30,16,0]),Oc=new Uint8Array([113,61,10,215,163,112,229,63]),xc=new Uint8Array([152,30,16,0]),jc=new Uint8Array([144,30,16,0]);Object.assign(Js,{...t,type:2,name:"struct{comptime comptime_float = 0.67, comptime comptime_float = 0.85, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Uc},slots:{0:{structure:s,memory:{array:Ac},slots:{0:{structure:r,memory:{array:Oc},address:1056416}}},1:{structure:s,memory:{array:xc},slots:{0:{structure:r,memory:{array:Wr},address:1056408}}},2:{structure:s,memory:{array:jc},slots:{0:{structure:r,memory:{array:d},address:1056400}}}}}},slot:195});Object.assign(pt,{...t,type:11,name:"*const struct{comptime comptime_float = 0.67, comptime comptime_float = 0.85, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Js}],methods:[],template:null},slot:194});const Pc=new Uint8Array([]),Cc=new Uint8Array([170,170,170,170]),kc=new Uint8Array([170,170,170,170]),Ic=new Uint8Array([170,170,170,170]),vc=new Uint8Array([144,31,16,0]),Ec=new Uint8Array([11,34,16,0]),Tc=new Uint8Array([65,109,98,105,101,110,116,32,108,105,103,104,116,32,99,111,108,111,117,114,46,0]),Lc=new Uint8Array([120,31,16,0]);Object.assign(Zs,{...t,type:2,name:'struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.67, comptime comptime_float = 0.85, comptime comptime_float = 1} = .{0.67, 0.85, 1}, comptime description: *const [21:0]u8 = "Ambient light colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:_},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:q},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:pt},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:O},{...e,type:8,isRequired:!1,slot:4,name:"aeUIControl",structure:w}],methods:[],template:{memory:{array:Pc},slots:{0:{structure:_,memory:{array:Cc},slots:{0:{structure:R,memory:{array:m},address:-1431655766}}},1:{structure:q,memory:{array:kc},slots:{0:{structure:P,memory:{array:m},address:-1431655766}}},2:{structure:pt,memory:{array:Ic},slots:{0:{structure:Js,memory:{array:m},address:-1431655766}}},3:{structure:O,memory:{array:vc},slots:{0:{structure:N,memory:{array:Ec},address:1056656,slots:{0:{structure:K,memory:{array:Tc},address:1057291}}}}},4:{structure:w,memory:{array:Lc},slots:{0:{structure:k,memory:{array:qr},address:1056632,slots:{0:{structure:C,memory:{array:wr},address:1057354}}}}}}}},slot:79});Object.assign(yt,{...t,type:11,name:'*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.67, comptime comptime_float = 0.85, comptime comptime_float = 1} = .{0.67, 0.85, 1}, comptime description: *const [21:0]u8 = "Ambient light colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Zs}],methods:[],template:null},slot:78});const Bc=new Uint8Array([]),Fc=new Uint8Array([112,30,16,0]),Mc=new Uint8Array([144,30,16,0]),Dc=new Uint8Array([136,31,16,0]),Jc=new Uint8Array([154,153,153,153,153,153,217,63]),Zc=new Uint8Array([128,31,16,0]),Kc=new Uint8Array([242,33,16,0]),Nc=new Uint8Array([65,109,98,105,101,110,116,32,108,105,103,104,116,32,105,110,116,101,110,115,105,116,121,46,0]);Object.assign(Ks,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.4, comptime description: *const [24:0]u8 = "Ambient light intensity."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:z}],methods:[],template:{memory:{array:Bc},slots:{0:{structure:s,memory:{array:Fc},slots:{0:{structure:r,memory:{array:n},address:1056368}}},1:{structure:s,memory:{array:Mc},slots:{0:{structure:r,memory:{array:d},address:1056400}}},2:{structure:s,memory:{array:Dc},slots:{0:{structure:r,memory:{array:Jc},address:1056648}}},3:{structure:z,memory:{array:Zc},slots:{0:{structure:j,memory:{array:Kc},address:1056640,slots:{0:{structure:x,memory:{array:Nc},address:1057266}}}}}}}},slot:81});Object.assign(dt,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.4, comptime description: *const [24:0]u8 = "Ambient light intensity."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ks}],methods:[],template:null},slot:80});const $c=new Uint8Array([]),Gc=new Uint8Array([136,30,16,0]),Hc=new Uint8Array([184,30,133,235,81,184,222,63]),Qc=new Uint8Array([128,30,16,0]),Wc=new Uint8Array([225,122,20,174,71,225,226,63]),Xc=new Uint8Array([120,30,16,0]),Xr=new Uint8Array([31,133,235,81,184,30,229,63]);Object.assign(Ns,{...t,type:2,name:"struct{comptime comptime_float = 0.48, comptime comptime_float = 0.59, comptime comptime_float = 0.66}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:$c},slots:{0:{structure:s,memory:{array:Gc},slots:{0:{structure:r,memory:{array:Hc},address:1056392}}},1:{structure:s,memory:{array:Qc},slots:{0:{structure:r,memory:{array:Wc},address:1056384}}},2:{structure:s,memory:{array:Xc},slots:{0:{structure:r,memory:{array:Xr},address:1056376}}}}}},slot:197});Object.assign(ft,{...t,type:11,name:"*const struct{comptime comptime_float = 0.48, comptime comptime_float = 0.59, comptime comptime_float = 0.66}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ns}],methods:[],template:null},slot:196});Object.assign($s,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:200});Object.assign(Gs,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$s}],methods:[],template:null},slot:199});Object.assign(bt,{...t,type:11,name:"*const *const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Gs}],methods:[],template:null},slot:198});const Yc=new Uint8Array([]),en=new Uint8Array([170,170,170,170]),tn=new Uint8Array([170,170,170,170]),sn=new Uint8Array([170,170,170,170]),rn=new Uint8Array([124,31,16,0]),mn=new Uint8Array([228,33,16,0]),an=new Uint8Array([76,105,103,104,116,32,99,111,108,111,117,114,46,0]),on=new Uint8Array([120,31,16,0]);Object.assign(Hs,{...t,type:2,name:'struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.48, comptime comptime_float = 0.59, comptime comptime_float = 0.66} = .{0.48, 0.59, 0.66}, comptime description: *const [13:0]u8 = "Light colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:_},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:q},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:ft},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:bt},{...e,type:8,isRequired:!1,slot:4,name:"aeUIControl",structure:w}],methods:[],template:{memory:{array:Yc},slots:{0:{structure:_,memory:{array:en},slots:{0:{structure:R,memory:{array:m},address:-1431655766}}},1:{structure:q,memory:{array:tn},slots:{0:{structure:P,memory:{array:m},address:-1431655766}}},2:{structure:ft,memory:{array:sn},slots:{0:{structure:Ns,memory:{array:m},address:-1431655766}}},3:{structure:bt,memory:{array:rn},slots:{0:{structure:Gs,memory:{array:mn},address:1056636,slots:{0:{structure:$s,memory:{array:an},address:1057252}}}}},4:{structure:w,memory:{array:on},slots:{0:{structure:k,memory:{array:qr},address:1056632,slots:{0:{structure:C,memory:{array:wr},address:1057354}}}}}}}},slot:83});Object.assign(ht,{...t,type:11,name:'*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.48, comptime comptime_float = 0.59, comptime comptime_float = 0.66} = .{0.48, 0.59, 0.66}, comptime description: *const [13:0]u8 = "Light colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Hs}],methods:[],template:null},slot:82});Object.assign(ae,{...t,type:1,name:"[46:0]u8",length:46,byteSize:47,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:203});Object.assign(oe,{...t,type:11,name:"*const [46:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:202});Object.assign(D,{...t,type:11,name:"*const *const [46:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:201});const cn=new Uint8Array([]),nn=new Uint8Array([112,30,16,0]),un=new Uint8Array([144,30,16,0]),ln=new Uint8Array([112,31,16,0]),pn=new Uint8Array([154,153,153,153,153,153,201,63]),yn=new Uint8Array([104,31,16,0]),dn=new Uint8Array([181,33,16,0]),fn=new Uint8Array([86,97,114,121,32,116,104,101,32,99,111,108,111,117,114,32,98,97,115,101,100,32,111,110,32,116,104,101,32,110,111,114,109,97,108,32,100,105,114,101,99,116,105,111,110,46,0]);Object.assign(Qs,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.2, comptime description: *const [46:0]u8 = "Vary the colour based on the normal direction."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:D}],methods:[],template:{memory:{array:cn},slots:{0:{structure:s,memory:{array:nn},slots:{0:{structure:r,memory:{array:n},address:1056368}}},1:{structure:s,memory:{array:un},slots:{0:{structure:r,memory:{array:d},address:1056400}}},2:{structure:s,memory:{array:ln},slots:{0:{structure:r,memory:{array:pn},address:1056624}}},3:{structure:D,memory:{array:yn},slots:{0:{structure:oe,memory:{array:dn},address:1056616,slots:{0:{structure:ae,memory:{array:fn},address:1057205}}}}}}}},slot:85});Object.assign(_t,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.2, comptime description: *const [46:0]u8 = "Vary the colour based on the normal direction."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Qs}],methods:[],template:null},slot:84});Object.assign(ie,{...t,type:1,name:"[17:0]u8",length:17,byteSize:18,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:206});Object.assign(ce,{...t,type:11,name:"*const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:205});Object.assign(J,{...t,type:11,name:"*const *const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:204});const bn=new Uint8Array([]),hn=new Uint8Array([112,30,16,0]),_n=new Uint8Array([144,30,16,0]),gn=new Uint8Array([112,30,16,0]),Vn=new Uint8Array([100,31,16,0]),Sn=new Uint8Array([163,33,16,0]),zn=new Uint8Array([82,105,109,32,108,105,103,104,116,32,102,97,99,116,111,114,46,0]);Object.assign(Ws,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [17:0]u8 = "Rim light factor."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:J}],methods:[],template:{memory:{array:bn},slots:{0:{structure:s,memory:{array:hn},slots:{0:{structure:r,memory:{array:n},address:1056368}}},1:{structure:s,memory:{array:_n},slots:{0:{structure:r,memory:{array:d},address:1056400}}},2:{structure:s,memory:{array:gn},slots:{0:{structure:r,memory:{array:n},address:1056368}}},3:{structure:J,memory:{array:Vn},slots:{0:{structure:ce,memory:{array:Sn},address:1056612,slots:{0:{structure:ie,memory:{array:zn},address:1057187}}}}}}}},slot:87});Object.assign(gt,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [17:0]u8 = "Rim light factor."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ws}],methods:[],template:null},slot:86});const qn=new Uint8Array([]),wn=new Uint8Array([112,30,16,0]),Rn=new Uint8Array([144,30,16,0]),Un=new Uint8Array([120,30,16,0]),An=new Uint8Array([96,31,16,0]),On=new Uint8Array([145,33,16,0]),xn=new Uint8Array([80,104,111,110,101,32,115,112,101,99,117,108,97,114,105,116,121,0]);Object.assign(Xs,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.66, comptime description: *const [17:0]u8 = "Phone specularity"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:J}],methods:[],template:{memory:{array:qn},slots:{0:{structure:s,memory:{array:wn},slots:{0:{structure:r,memory:{array:n},address:1056368}}},1:{structure:s,memory:{array:Rn},slots:{0:{structure:r,memory:{array:d},address:1056400}}},2:{structure:s,memory:{array:Un},slots:{0:{structure:r,memory:{array:Xr},address:1056376}}},3:{structure:J,memory:{array:An},slots:{0:{structure:ce,memory:{array:On},address:1056608,slots:{0:{structure:ie,memory:{array:xn},address:1057169}}}}}}}},slot:89});Object.assign(Vt,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.66, comptime description: *const [17:0]u8 = "Phone specularity"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Xs}],methods:[],template:null},slot:88});const jn=new Uint8Array([]),Pn=new Uint8Array([232,30,16,0]),Cn=new Uint8Array([192,30,16,0]),kn=new Uint8Array([88,31,16,0]),In=new Uint8Array([0,0,0,0,0,0,46,64]),vn=new Uint8Array([80,31,16,0]),En=new Uint8Array([129,33,16,0]),Tn=new Uint8Array([80,104,111,110,103,32,115,104,105,110,105,110,101,115,115,0]);Object.assign(Ys,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 50, comptime defaultValue: comptime_float = 15, comptime description: *const [15:0]u8 = "Phong shininess"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:M}],methods:[],template:{memory:{array:jn},slots:{0:{structure:s,memory:{array:Pn},slots:{0:{structure:r,memory:{array:H},address:1056488}}},1:{structure:s,memory:{array:Cn},slots:{0:{structure:r,memory:{array:_e},address:1056448}}},2:{structure:s,memory:{array:kn},slots:{0:{structure:r,memory:{array:In},address:1056600}}},3:{structure:M,memory:{array:vn},slots:{0:{structure:me,memory:{array:En},address:1056592,slots:{0:{structure:re,memory:{array:Tn},address:1057153}}}}}}}},slot:91});Object.assign(St,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 50, comptime defaultValue: comptime_float = 15, comptime description: *const [15:0]u8 = "Phong shininess"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ys}],methods:[],template:null},slot:90});const Ln=new Uint8Array([]),Bn=new Uint8Array([112,30,16,0]),Fn=new Uint8Array([104,30,16,0]),Mn=new Uint8Array([0,0,0,0,0,0,66,64]),Dn=new Uint8Array([96,30,16,0]),Jn=new Uint8Array([205,204,204,204,204,204,67,64]);Object.assign(er,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 36, comptime comptime_float = 39.6}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Ln},slots:{0:{structure:s,memory:{array:Bn},slots:{0:{structure:r,memory:{array:n},address:1056368}}},1:{structure:s,memory:{array:Fn},slots:{0:{structure:r,memory:{array:Mn},address:1056360}}},2:{structure:s,memory:{array:Dn},slots:{0:{structure:r,memory:{array:Jn},address:1056352}}}}}},slot:208});Object.assign(zt,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 36, comptime comptime_float = 39.6}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:er}],methods:[],template:null},slot:207});Object.assign(tr,{...t,type:1,name:"[35:0]u8",length:35,byteSize:36,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:211});Object.assign(sr,{...t,type:11,name:"*const [35:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:tr}],methods:[],template:null},slot:210});Object.assign(qt,{...t,type:11,name:"*const *const [35:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:sr}],methods:[],template:null},slot:209});const Zn=new Uint8Array([]),Kn=new Uint8Array([170,170,170,170]),Nn=new Uint8Array([170,170,170,170]),$n=new Uint8Array([170,170,170,170]),Gn=new Uint8Array([76,31,16,0]),Hn=new Uint8Array([93,33,16,0]),Qn=new Uint8Array([82,111,116,97,116,101,32,116,104,101,32,77,97,110,100,101,108,98,117,108,98,32,105,110,32,101,97,99,104,32,97,120,105,115,46,0]);Object.assign(rr,{...t,type:2,name:'struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -180, comptime comptime_float = -180, comptime comptime_float = -180} = .{-180, -180, -180}, comptime maxValue: struct{comptime comptime_float = 180, comptime comptime_float = 180, comptime comptime_float = 180} = .{180, 180, 180}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 36, comptime comptime_float = 39.6} = .{0, 36, 39.6}, comptime description: *const [35:0]u8 = "Rotate the Mandelbulb in each axis."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:B},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:F},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:zt},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:qt}],methods:[],template:{memory:{array:Zn},slots:{0:{structure:B,memory:{array:Kn},slots:{0:{structure:te,memory:{array:m},address:-1431655766}}},1:{structure:F,memory:{array:Nn},slots:{0:{structure:se,memory:{array:m},address:-1431655766}}},2:{structure:zt,memory:{array:$n},slots:{0:{structure:er,memory:{array:m},address:-1431655766}}},3:{structure:qt,memory:{array:Gn},slots:{0:{structure:sr,memory:{array:Hn},address:1056588,slots:{0:{structure:tr,memory:{array:Qn},address:1057117}}}}}}}},slot:93});Object.assign(wt,{...t,type:11,name:'*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -180, comptime comptime_float = -180, comptime comptime_float = -180} = .{-180, -180, -180}, comptime maxValue: struct{comptime comptime_float = 180, comptime comptime_float = 180, comptime comptime_float = 180} = .{180, 180, 180}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 36, comptime comptime_float = 39.6} = .{0, 36, 39.6}, comptime description: *const [35:0]u8 = "Rotate the Mandelbulb in each axis."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:rr}],methods:[],template:null},slot:92});Object.assign(mr,{...t,type:1,name:"[88:0]u8",length:88,byteSize:89,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:214});Object.assign(ar,{...t,type:11,name:"*const [88:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:mr}],methods:[],template:null},slot:213});Object.assign(Rt,{...t,type:11,name:"*const *const [88:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ar}],methods:[],template:null},slot:212});const Wn=new Uint8Array([]),Xn=new Uint8Array([72,31,16,0]),Yn=new Uint8Array([68,31,16,0]),eu=new Uint8Array([20,0,0,0]),tu=new Uint8Array([64,31,16,0]),su=new Uint8Array([6,0,0,0]),ru=new Uint8Array([60,31,16,0]),mu=new Uint8Array([4,33,16,0]),au=new Uint8Array([77,111,114,101,32,105,116,101,114,97,116,105,111,110,115,32,114,101,118,101,97,108,32,109,111,114,101,32,100,101,116,97,105,108,32,105,110,32,116,104,101,32,102,114,97,99,116,97,108,32,115,117,114,102,97,99,101,32,98,117,116,32,116,97,107,101,115,32,108,111,110,103,101,114,32,116,111,32,99,97,108,99,117,108,97,116,101,46,0]);Object.assign(or,{...t,type:2,name:'struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 20, comptime defaultValue: comptime_int = 6, comptime description: *const [88:0]u8 = "More iterations reveal more detail in the fractal surface but takes longer to calculate."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:i},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:o},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:o},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Rt}],methods:[],template:{memory:{array:Wn},slots:{0:{structure:o,memory:{array:Xn},slots:{0:{structure:i,memory:{array:Pr},address:1056584}}},1:{structure:o,memory:{array:Yn},slots:{0:{structure:i,memory:{array:eu},address:1056580}}},2:{structure:o,memory:{array:tu},slots:{0:{structure:i,memory:{array:su},address:1056576}}},3:{structure:Rt,memory:{array:ru},slots:{0:{structure:ar,memory:{array:mu},address:1056572,slots:{0:{structure:mr,memory:{array:au},address:1057028}}}}}}}},slot:95});Object.assign(Ut,{...t,type:11,name:'*const struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 20, comptime defaultValue: comptime_int = 6, comptime description: *const [88:0]u8 = "More iterations reveal more detail in the fractal surface but takes longer to calculate."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:or}],methods:[],template:null},slot:94});const ou=new Uint8Array([]),iu=new Uint8Array([56,31,16,0]),cu=new Uint8Array([10,0,0,0]),nu=new Uint8Array([52,31,16,0]),uu=new Uint8Array([200,0,0,0]),lu=new Uint8Array([48,31,16,0]),pu=new Uint8Array([110,0,0,0]),yu=new Uint8Array([44,31,16,0]),du=new Uint8Array([213,32,16,0]),fu=new Uint8Array([84,104,101,32,109,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,115,116,101,112,115,32,97,32,114,97,121,32,115,104,111,117,108,100,32,116,97,107,101,46,0]);Object.assign(ir,{...t,type:2,name:'struct{comptime type: type = i32, comptime minValue: comptime_int = 10, comptime maxValue: comptime_int = 200, comptime defaultValue: comptime_int = 110, comptime description: *const [46:0]u8 = "The maximum number of steps a ray should take."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:i},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:o},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:o},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:D}],methods:[],template:{memory:{array:ou},slots:{0:{structure:o,memory:{array:iu},slots:{0:{structure:i,memory:{array:cu},address:1056568}}},1:{structure:o,memory:{array:nu},slots:{0:{structure:i,memory:{array:uu},address:1056564}}},2:{structure:o,memory:{array:lu},slots:{0:{structure:i,memory:{array:pu},address:1056560}}},3:{structure:D,memory:{array:yu},slots:{0:{structure:oe,memory:{array:du},address:1056556,slots:{0:{structure:ae,memory:{array:fu},address:1056981}}}}}}}},slot:97});Object.assign(At,{...t,type:11,name:'*const struct{comptime type: type = i32, comptime minValue: comptime_int = 10, comptime maxValue: comptime_int = 200, comptime defaultValue: comptime_int = 110, comptime description: *const [46:0]u8 = "The maximum number of steps a ray should take."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ir}],methods:[],template:null},slot:96});Object.assign(cr,{...t,type:1,name:"[109:0]u8",length:109,byteSize:110,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:217});Object.assign(nr,{...t,type:11,name:"*const [109:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:cr}],methods:[],template:null},slot:216});Object.assign(Ot,{...t,type:11,name:"*const *const [109:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:nr}],methods:[],template:null},slot:215});const bu=new Uint8Array([]),hu=new Uint8Array([232,30,16,0]),_u=new Uint8Array([144,30,16,0]),gu=new Uint8Array([144,30,16,0]),Vu=new Uint8Array([40,31,16,0]),Su=new Uint8Array([103,32,16,0]),zu=new Uint8Array([83,99,97,108,101,32,116,104,101,32,101,112,115,105,108,111,110,32,115,116,101,112,32,100,105,115,116,97,110,99,101,46,32,83,109,97,108,108,101,114,32,118,97,108,117,101,115,32,97,114,101,32,115,108,111,119,101,114,32,98,117,116,32,119,105,108,108,32,103,101,110,101,114,97,116,101,32,115,109,111,111,116,104,101,114,32,114,101,115,117,108,116,115,32,102,111,114,32,116,104,105,110,32,97,114,101,97,115,46,0]);Object.assign(ur,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [109:0]u8 = "Scale the epsilon step distance. Smaller values are slower but will generate smoother results for thin areas."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Ot}],methods:[],template:{memory:{array:bu},slots:{0:{structure:s,memory:{array:hu},slots:{0:{structure:r,memory:{array:H},address:1056488}}},1:{structure:s,memory:{array:_u},slots:{0:{structure:r,memory:{array:d},address:1056400}}},2:{structure:s,memory:{array:gu},slots:{0:{structure:r,memory:{array:d},address:1056400}}},3:{structure:Ot,memory:{array:Vu},slots:{0:{structure:nr,memory:{array:Su},address:1056552,slots:{0:{structure:cr,memory:{array:zu},address:1056871}}}}}}}},slot:99});Object.assign(xt,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [109:0]u8 = "Scale the epsilon step distance. Smaller values are slower but will generate smoother results for thin areas."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ur}],methods:[],template:null},slot:98});Object.assign(lr,{...t,type:13,name:"@Vector(2, i32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,structure:i}],methods:[],template:null},slot:33});const qu=new Uint8Array([]),wu=new Uint8Array([88,30,16,0]),$r=new Uint8Array([100,0,0,0]),Ru=new Uint8Array([88,30,16,0]);Object.assign(pr,{...t,type:2,name:"struct{comptime comptime_int = 100, comptime comptime_int = 100}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:o}],methods:[],template:{memory:{array:qu},slots:{0:{structure:o,memory:{array:wu},slots:{0:{structure:i,memory:{array:$r},address:1056344}}},1:{structure:o,memory:{array:Ru},slots:{0:{structure:i,memory:{array:$r},address:1056344}}}}}},slot:219});Object.assign(jt,{...t,type:11,name:"*const struct{comptime comptime_int = 100, comptime comptime_int = 100}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pr}],methods:[],template:null},slot:218});const Uu=new Uint8Array([]),Au=new Uint8Array([84,30,16,0]),Gr=new Uint8Array([0,8,0,0]),Ou=new Uint8Array([84,30,16,0]);Object.assign(yr,{...t,type:2,name:"struct{comptime comptime_int = 2048, comptime comptime_int = 2048}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:o}],methods:[],template:{memory:{array:Uu},slots:{0:{structure:o,memory:{array:Au},slots:{0:{structure:i,memory:{array:Gr},address:1056340}}},1:{structure:o,memory:{array:Ou},slots:{0:{structure:i,memory:{array:Gr},address:1056340}}}}}},slot:221});Object.assign(Pt,{...t,type:11,name:"*const struct{comptime comptime_int = 2048, comptime comptime_int = 2048}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:yr}],methods:[],template:null},slot:220});const xu=new Uint8Array([]),ju=new Uint8Array([80,30,16,0]),Hr=new Uint8Array([0,2,0,0]),Pu=new Uint8Array([80,30,16,0]);Object.assign(dr,{...t,type:2,name:"struct{comptime comptime_int = 512, comptime comptime_int = 512}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:o}],methods:[],template:{memory:{array:xu},slots:{0:{structure:o,memory:{array:ju},slots:{0:{structure:i,memory:{array:Hr},address:1056336}}},1:{structure:o,memory:{array:Pu},slots:{0:{structure:i,memory:{array:Hr},address:1056336}}}}}},slot:223});Object.assign(Ct,{...t,type:11,name:"*const struct{comptime comptime_int = 512, comptime comptime_int = 512}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:dr}],methods:[],template:null},slot:222});const Cu=new Uint8Array([]),ku=new Uint8Array([170,170,170,170]),Iu=new Uint8Array([170,170,170,170]),vu=new Uint8Array([170,170,170,170]),Eu=new Uint8Array([36,31,16,0]),Tu=new Uint8Array([76,32,16,0]),Lu=new Uint8Array([84,104,101,32,111,117,116,112,117,116,32,115,105,122,101,32,105,110,32,112,105,120,101,108,115,46,0]);Object.assign(fr,{...t,type:2,name:'struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 2048, comptime comptime_int = 2048} = .{2048, 2048}, comptime defaultValue: struct{comptime comptime_int = 512, comptime comptime_int = 512} = .{512, 512}, comptime description: *const [26:0]u8 = "The output size in pixels."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:lr},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:jt},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:Pt},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:Ct},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:L}],methods:[],template:{memory:{array:Cu},slots:{0:{structure:jt,memory:{array:ku},slots:{0:{structure:pr,memory:{array:m},address:-1431655766}}},1:{structure:Pt,memory:{array:Iu},slots:{0:{structure:yr,memory:{array:m},address:-1431655766}}},2:{structure:Ct,memory:{array:vu},slots:{0:{structure:dr,memory:{array:m},address:-1431655766}}},3:{structure:L,memory:{array:Eu},slots:{0:{structure:ee,memory:{array:Tu},address:1056548,slots:{0:{structure:Y,memory:{array:Lu},address:1056844}}}}}}}},slot:101});Object.assign(kt,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 2048, comptime comptime_int = 2048} = .{2048, 2048}, comptime defaultValue: struct{comptime comptime_int = 512, comptime comptime_int = 512} = .{512, 512}, comptime description: *const [26:0]u8 = "The output size in pixels."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fr}],methods:[],template:null},slot:100});const Bu=new Uint8Array([]),Fu=new Uint8Array([170,170,170,170]),Mu=new Uint8Array([170,170,170,170]),Du=new Uint8Array([170,170,170,170]),Ju=new Uint8Array([170,170,170,170]),Zu=new Uint8Array([170,170,170,170]),Ku=new Uint8Array([170,170,170,170]),Nu=new Uint8Array([170,170,170,170]),$u=new Uint8Array([170,170,170,170]),Gu=new Uint8Array([170,170,170,170]),Hu=new Uint8Array([170,170,170,170]),Qu=new Uint8Array([170,170,170,170]),Wu=new Uint8Array([170,170,170,170]),Xu=new Uint8Array([170,170,170,170]),Yu=new Uint8Array([170,170,170,170]),e1=new Uint8Array([170,170,170,170]),t1=new Uint8Array([170,170,170,170]),s1=new Uint8Array([170,170,170,170]),r1=new Uint8Array([170,170,170,170]),m1=new Uint8Array([170,170,170,170]),a1=new Uint8Array([170,170,170,170]),o1=new Uint8Array([170,170,170,170]),i1=new Uint8Array([170,170,170,170]),c1=new Uint8Array([170,170,170,170]),n1=new Uint8Array([170,170,170,170]),u1=new Uint8Array([170,170,170,170]),l1=new Uint8Array([170,170,170,170]),p1=new Uint8Array([170,170,170,170]),y1=new Uint8Array([170,170,170,170]),d1=new Uint8Array([170,170,170,170]),f1=new Uint8Array([170,170,170,170]),b1=new Uint8Array([170,170,170,170]),h1=new Uint8Array([170,170,170,170]);Object.assign(br,{...t,type:2,name:'struct{comptime antialiasing: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 1, comptime description: *const [60:0]u8 = "Super sampling quality. Number of samples squared per pixel."} = .{.type = i32, .minValue = 1, .maxValue = 3, .defaultValue = 1, .description = "Super sampling quality. Number of samples squared per pixel."}, comptime phong: struct{comptime type: type = bool, comptime defaultValue: bool = true, comptime description: *const [21:0]u8 = "Enable phong shading."} = .{.type = bool, .defaultValue = true, .description = "Enable phong shading."}, comptime julia: struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [25:0]u8 = "Enable Julia set version."} = .{.type = bool, .defaultValue = false, .description = "Enable Julia set version."}, comptime radiolaria: struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [24:0]u8 = "Enable radiolaria style."} = .{.type = bool, .defaultValue = false, .description = "Enable radiolaria style."}, comptime radiolariaFactor: struct{comptime type: type = f32, comptime minValue: comptime_float = -4, comptime maxValue: comptime_float = 4, comptime defaultValue: comptime_float = 0, comptime description: *const [28:0]u8 = "Tweak the radiolaria effect."} = .{.type = f32, .minValue = -4, .maxValue = 4, .defaultValue = 0, .description = "Tweak the radiolaria effect."}, comptime shadows: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [26:0]u8 = "Enable ray traced shadows."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0, .description = "Enable ray traced shadows."}, comptime ambientOcclusion: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.8, comptime description: *const [61:0]u8 = "Enable fake ambient occlusion factor based on the orbit trap."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.8, .description = "Enable fake ambient occlusion factor based on the orbit trap."}, comptime ambientOcclusionEmphasis: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.58, comptime description: *const [100:0]u8 = "Emphasise the structure edges based on the number of steps it takes to reach a point in the fractal."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.58, .description = "Emphasise the structure edges based on the number of steps it takes to reach a point in the fractal."}, comptime bounding: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 16, comptime defaultValue: comptime_float = 2.5, comptime description: *const [66:0]u8 = "Sets the bounding sphere radius to help accelerate the raytracing."} = .{.type = f32, .minValue = 1, .maxValue = 16, .defaultValue = 2.5, .description = "Sets the bounding sphere radius to help accelerate the raytracing."}, comptime bailout: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.5, comptime maxValue: comptime_float = 12, comptime defaultValue: comptime_float = 4, comptime description: *const [101:0]u8 = "Sets the bailout value for the fractal calculation. Lower values give smoother less detailed results."} = .{.type = f32, .minValue = 0.5, .maxValue = 12, .defaultValue = 4, .description = "Sets the bailout value for the fractal calculation. Lower values give smoother less detailed results."}, comptime power: struct{comptime type: type = f32, comptime minValue: comptime_float = 2, comptime maxValue: comptime_float = 32, comptime defaultValue: comptime_float = 8, comptime description: *const [25:0]u8 = "The power of the fractal."} = .{.type = f32, .minValue = 2, .maxValue = 32, .defaultValue = 8, .description = "The power of the fractal."}, comptime julia_c: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -2, comptime comptime_float = -2} = .{-2, -2, -2}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 2, comptime comptime_float = 2} = .{2, 2, 2}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 0, comptime comptime_float = 0} = .{1, 0, 0}, comptime description: *const [37:0]u8 = "The c constant for Julia set fractals"} = .{.type = @Vector(3, f32), .minValue = .{-2, -2, -2}, .maxValue = .{2, 2, 2}, .defaultValue = .{1, 0, 0}, .description = "The c constant for Julia set fractals"}, comptime cameraPosition: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -4, comptime comptime_float = -4, comptime comptime_float = -4} = .{-4, -4, -4}, comptime maxValue: struct{comptime comptime_float = 4, comptime comptime_float = 4, comptime comptime_float = 4} = .{4, 4, 4}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = -2.6, comptime comptime_float = 0} = .{0, -2.6, 0}, comptime description: *const [16:0]u8 = "Camera position."} = .{.type = @Vector(3, f32), .minValue = .{-4, -4, -4}, .maxValue = .{4, 4, 4}, .defaultValue = .{0, -2.6, 0}, .description = "Camera position."}, comptime cameraPositionFine: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -0.1, comptime comptime_float = -0.1, comptime comptime_float = -0.1} = .{-0.1, -0.1, -0.1}, comptime maxValue: struct{comptime comptime_float = 0.1, comptime comptime_float = 0.1, comptime comptime_float = 0.1} = .{0.1, 0.1, 0.1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime description: *const [19:0]u8 = "Fine tune position."} = .{.type = @Vector(3, f32), .minValue = .{-0.1, -0.1, -0.1}, .maxValue = .{0.1, 0.1, 0.1}, .defaultValue = .{0, 0, 0}, .description = "Fine tune position."}, comptime cameraRotation: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -180, comptime comptime_float = -180, comptime comptime_float = -180} = .{-180, -180, -180}, comptime maxValue: struct{comptime comptime_float = 180, comptime comptime_float = 180, comptime comptime_float = 180} = .{180, 180, 180}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = -90} = .{0, 0, -90}, comptime description: *const [42:0]u8 = "Pointing angle in each axis of the camera."} = .{.type = @Vector(3, f32), .minValue = .{-180, -180, -180}, .maxValue = .{180, 180, 180}, .defaultValue = .{0, 0, -90}, .description = "Pointing angle in each axis of the camera."}, comptime cameraZoom: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 0, comptime description: *const [21:0]u8 = "Zoom the camera view."} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 0, .description = "Zoom the camera view."}, comptime light: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -50, comptime comptime_float = -50, comptime comptime_float = -50} = .{-50, -50, -50}, comptime maxValue: struct{comptime comptime_float = 50, comptime comptime_float = 50, comptime comptime_float = 50} = .{50, 50, 50}, comptime defaultValue: struct{comptime comptime_float = 38, comptime comptime_float = -42, comptime comptime_float = 38} = .{38, -42, 38}, comptime description: *const [24:0]u8 = "Position of point light."} = .{.type = @Vector(3, f32), .minValue = .{-50, -50, -50}, .maxValue = .{50, 50, 50}, .defaultValue = .{38, -42, 38}, .description = "Position of point light."}, comptime colorBackground: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime description: *const [18:0]u8 = "Background colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{0, 0, 0}, .description = "Background colour.", .aeUIControl = "aeColor"}, comptime colorBackgroundTransparency: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [24:0]u8 = "Background transparency."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 1, .description = "Background transparency."}, comptime colorDiffuse: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0.85, comptime comptime_float = 0.99} = .{0, 0.85, 0.99}, comptime description: *const [15:0]u8 = "Diffuse colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{0, 0.85, 0.99}, .description = "Diffuse colour.", .aeUIControl = "aeColor"}, comptime colorAmbient: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.67, comptime comptime_float = 0.85, comptime comptime_float = 1} = .{0.67, 0.85, 1}, comptime description: *const [21:0]u8 = "Ambient light colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{0.67, 0.85, 1}, .description = "Ambient light colour.", .aeUIControl = "aeColor"}, comptime colorAmbientIntensity: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.4, comptime description: *const [24:0]u8 = "Ambient light intensity."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.4, .description = "Ambient light intensity."}, comptime colorLight: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.48, comptime comptime_float = 0.59, comptime comptime_float = 0.66} = .{0.48, 0.59, 0.66}, comptime description: *const [13:0]u8 = "Light colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{0.48, 0.59, 0.66}, .description = "Light colour.", .aeUIControl = "aeColor"}, comptime colorSpread: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.2, comptime description: *const [46:0]u8 = "Vary the colour based on the normal direction."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.2, .description = "Vary the colour based on the normal direction."}, comptime rimLight: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [17:0]u8 = "Rim light factor."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0, .description = "Rim light factor."}, comptime specularity: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.66, comptime description: *const [17:0]u8 = "Phone specularity"} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.66, .description = "Phone specularity"}, comptime specularExponent: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 50, comptime defaultValue: comptime_float = 15, comptime description: *const [15:0]u8 = "Phong shininess"} = .{.type = f32, .minValue = 0.1, .maxValue = 50, .defaultValue = 15, .description = "Phong shininess"}, comptime rotation: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -180, comptime comptime_float = -180, comptime comptime_float = -180} = .{-180, -180, -180}, comptime maxValue: struct{comptime comptime_float = 180, comptime comptime_float = 180, comptime comptime_float = 180} = .{180, 180, 180}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 36, comptime comptime_float = 39.6} = .{0, 36, 39.6}, comptime description: *const [35:0]u8 = "Rotate the Mandelbulb in each axis."} = .{.type = @Vector(3, f32), .minValue = .{-180, -180, -180}, .maxValue = .{180, 180, 180}, .defaultValue = .{0, 36, 39.6}, .description = "Rotate the Mandelbulb in each axis."}, comptime maxIterations: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 20, comptime defaultValue: comptime_int = 6, comptime description: *const [88:0]u8 = "More iterations reveal more detail in the fractal surface but takes longer to calculate."} = .{.type = i32, .minValue = 1, .maxValue = 20, .defaultValue = 6, .description = "More iterations reveal more detail in the fractal surface but takes longer to calculate."}, comptime stepLimit: struct{comptime type: type = i32, comptime minValue: comptime_int = 10, comptime maxValue: comptime_int = 200, comptime defaultValue: comptime_int = 110, comptime description: *const [46:0]u8 = "The maximum number of steps a ray should take."} = .{.type = i32, .minValue = 10, .maxValue = 200, .defaultValue = 110, .description = "The maximum number of steps a ray should take."}, comptime epsilonScale: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [109:0]u8 = "Scale the epsilon step distance. Smaller values are slower but will generate smoother results for thin areas."} = .{.type = f32, .minValue = 0.1, .maxValue = 1, .defaultValue = 1, .description = "Scale the epsilon step distance. Smaller values are slower but will generate smoother results for thin areas."}, comptime size: struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 2048, comptime comptime_int = 2048} = .{2048, 2048}, comptime defaultValue: struct{comptime comptime_int = 512, comptime comptime_int = 512} = .{512, 512}, comptime description: *const [26:0]u8 = "The output size in pixels."} = .{.type = @Vector(2, i32), .minValue = .{100, 100}, .maxValue = .{2048, 2048}, .defaultValue = .{512, 512}, .description = "The output size in pixels."}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"antialiasing",structure:qe},{...e,type:8,isRequired:!1,slot:1,name:"phong",structure:we},{...e,type:8,isRequired:!1,slot:2,name:"julia",structure:Re},{...e,type:8,isRequired:!1,slot:3,name:"radiolaria",structure:Ue},{...e,type:8,isRequired:!1,slot:4,name:"radiolariaFactor",structure:Oe},{...e,type:8,isRequired:!1,slot:5,name:"shadows",structure:xe},{...e,type:8,isRequired:!1,slot:6,name:"ambientOcclusion",structure:Pe},{...e,type:8,isRequired:!1,slot:7,name:"ambientOcclusionEmphasis",structure:ke},{...e,type:8,isRequired:!1,slot:8,name:"bounding",structure:ve},{...e,type:8,isRequired:!1,slot:9,name:"bailout",structure:Te},{...e,type:8,isRequired:!1,slot:10,name:"power",structure:Le},{...e,type:8,isRequired:!1,slot:11,name:"julia_c",structure:Je},{...e,type:8,isRequired:!1,slot:12,name:"cameraPosition",structure:Ge},{...e,type:8,isRequired:!1,slot:13,name:"cameraPositionFine",structure:Xe},{...e,type:8,isRequired:!1,slot:14,name:"cameraRotation",structure:tt},{...e,type:8,isRequired:!1,slot:15,name:"cameraZoom",structure:st},{...e,type:8,isRequired:!1,slot:16,name:"light",structure:ot},{...e,type:8,isRequired:!1,slot:17,name:"colorBackground",structure:ct},{...e,type:8,isRequired:!1,slot:18,name:"colorBackgroundTransparency",structure:nt},{...e,type:8,isRequired:!1,slot:19,name:"colorDiffuse",structure:lt},{...e,type:8,isRequired:!1,slot:20,name:"colorAmbient",structure:yt},{...e,type:8,isRequired:!1,slot:21,name:"colorAmbientIntensity",structure:dt},{...e,type:8,isRequired:!1,slot:22,name:"colorLight",structure:ht},{...e,type:8,isRequired:!1,slot:23,name:"colorSpread",structure:_t},{...e,type:8,isRequired:!1,slot:24,name:"rimLight",structure:gt},{...e,type:8,isRequired:!1,slot:25,name:"specularity",structure:Vt},{...e,type:8,isRequired:!1,slot:26,name:"specularExponent",structure:St},{...e,type:8,isRequired:!1,slot:27,name:"rotation",structure:wt},{...e,type:8,isRequired:!1,slot:28,name:"maxIterations",structure:Ut},{...e,type:8,isRequired:!1,slot:29,name:"stepLimit",structure:At},{...e,type:8,isRequired:!1,slot:30,name:"epsilonScale",structure:xt},{...e,type:8,isRequired:!1,slot:31,name:"size",structure:kt}],methods:[],template:{memory:{array:Bu},slots:{0:{structure:qe,memory:{array:Fu},slots:{0:{structure:Nt,memory:{array:m},address:-1431655766}}},1:{structure:we,memory:{array:Mu},slots:{0:{structure:$t,memory:{array:m},address:-1431655766}}},2:{structure:Re,memory:{array:Du},slots:{0:{structure:Gt,memory:{array:m},address:-1431655766}}},3:{structure:Ue,memory:{array:Ju},slots:{0:{structure:Ht,memory:{array:m},address:-1431655766}}},4:{structure:Oe,memory:{array:Zu},slots:{0:{structure:Xt,memory:{array:m},address:-1431655766}}},5:{structure:xe,memory:{array:Ku},slots:{0:{structure:Yt,memory:{array:m},address:-1431655766}}},6:{structure:Pe,memory:{array:Nu},slots:{0:{structure:ss,memory:{array:m},address:-1431655766}}},7:{structure:ke,memory:{array:$u},slots:{0:{structure:as,memory:{array:m},address:-1431655766}}},8:{structure:ve,memory:{array:Gu},slots:{0:{structure:cs,memory:{array:m},address:-1431655766}}},9:{structure:Te,memory:{array:Hu},slots:{0:{structure:ls,memory:{array:m},address:-1431655766}}},10:{structure:Le,memory:{array:Qu},slots:{0:{structure:ps,memory:{array:m},address:-1431655766}}},11:{structure:Je,memory:{array:Wu},slots:{0:{structure:_s,memory:{array:m},address:-1431655766}}},12:{structure:Ge,memory:{array:Xu},slots:{0:{structure:ws,memory:{array:m},address:-1431655766}}},13:{structure:Xe,memory:{array:Yu},slots:{0:{structure:As,memory:{array:m},address:-1431655766}}},14:{structure:tt,memory:{array:e1},slots:{0:{structure:Ps,memory:{array:m},address:-1431655766}}},15:{structure:st,memory:{array:t1},slots:{0:{structure:Cs,memory:{array:m},address:-1431655766}}},16:{structure:ot,memory:{array:s1},slots:{0:{structure:Es,memory:{array:m},address:-1431655766}}},17:{structure:ct,memory:{array:r1},slots:{0:{structure:Bs,memory:{array:m},address:-1431655766}}},18:{structure:nt,memory:{array:m1},slots:{0:{structure:Fs,memory:{array:m},address:-1431655766}}},19:{structure:lt,memory:{array:a1},slots:{0:{structure:Ds,memory:{array:m},address:-1431655766}}},20:{structure:yt,memory:{array:o1},slots:{0:{structure:Zs,memory:{array:m},address:-1431655766}}},21:{structure:dt,memory:{array:i1},slots:{0:{structure:Ks,memory:{array:m},address:-1431655766}}},22:{structure:ht,memory:{array:c1},slots:{0:{structure:Hs,memory:{array:m},address:-1431655766}}},23:{structure:_t,memory:{array:n1},slots:{0:{structure:Qs,memory:{array:m},address:-1431655766}}},24:{structure:gt,memory:{array:u1},slots:{0:{structure:Ws,memory:{array:m},address:-1431655766}}},25:{structure:Vt,memory:{array:l1},slots:{0:{structure:Xs,memory:{array:m},address:-1431655766}}},26:{structure:St,memory:{array:p1},slots:{0:{structure:Ys,memory:{array:m},address:-1431655766}}},27:{structure:wt,memory:{array:y1},slots:{0:{structure:rr,memory:{array:m},address:-1431655766}}},28:{structure:Ut,memory:{array:d1},slots:{0:{structure:or,memory:{array:m},address:-1431655766}}},29:{structure:At,memory:{array:f1},slots:{0:{structure:ir,memory:{array:m},address:-1431655766}}},30:{structure:xt,memory:{array:b1},slots:{0:{structure:ur,memory:{array:m},address:-1431655766}}},31:{structure:kt,memory:{array:h1},slots:{0:{structure:fr,memory:{array:m},address:-1431655766}}}}}},slot:15});Object.assign(It,{...t,type:11,name:'*struct{comptime antialiasing: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 1, comptime description: *const [60:0]u8 = "Super sampling quality. Number of samples squared per pixel."} = .{.type = i32, .minValue = 1, .maxValue = 3, .defaultValue = 1, .description = "Super sampling quality. Number of samples squared per pixel."}, comptime phong: struct{comptime type: type = bool, comptime defaultValue: bool = true, comptime description: *const [21:0]u8 = "Enable phong shading."} = .{.type = bool, .defaultValue = true, .description = "Enable phong shading."}, comptime julia: struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [25:0]u8 = "Enable Julia set version."} = .{.type = bool, .defaultValue = false, .description = "Enable Julia set version."}, comptime radiolaria: struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [24:0]u8 = "Enable radiolaria style."} = .{.type = bool, .defaultValue = false, .description = "Enable radiolaria style."}, comptime radiolariaFactor: struct{comptime type: type = f32, comptime minValue: comptime_float = -4, comptime maxValue: comptime_float = 4, comptime defaultValue: comptime_float = 0, comptime description: *const [28:0]u8 = "Tweak the radiolaria effect."} = .{.type = f32, .minValue = -4, .maxValue = 4, .defaultValue = 0, .description = "Tweak the radiolaria effect."}, comptime shadows: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [26:0]u8 = "Enable ray traced shadows."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0, .description = "Enable ray traced shadows."}, comptime ambientOcclusion: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.8, comptime description: *const [61:0]u8 = "Enable fake ambient occlusion factor based on the orbit trap."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.8, .description = "Enable fake ambient occlusion factor based on the orbit trap."}, comptime ambientOcclusionEmphasis: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.58, comptime description: *const [100:0]u8 = "Emphasise the structure edges based on the number of steps it takes to reach a point in the fractal."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.58, .description = "Emphasise the structure edges based on the number of steps it takes to reach a point in the fractal."}, comptime bounding: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 16, comptime defaultValue: comptime_float = 2.5, comptime description: *const [66:0]u8 = "Sets the bounding sphere radius to help accelerate the raytracing."} = .{.type = f32, .minValue = 1, .maxValue = 16, .defaultValue = 2.5, .description = "Sets the bounding sphere radius to help accelerate the raytracing."}, comptime bailout: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.5, comptime maxValue: comptime_float = 12, comptime defaultValue: comptime_float = 4, comptime description: *const [101:0]u8 = "Sets the bailout value for the fractal calculation. Lower values give smoother less detailed results."} = .{.type = f32, .minValue = 0.5, .maxValue = 12, .defaultValue = 4, .description = "Sets the bailout value for the fractal calculation. Lower values give smoother less detailed results."}, comptime power: struct{comptime type: type = f32, comptime minValue: comptime_float = 2, comptime maxValue: comptime_float = 32, comptime defaultValue: comptime_float = 8, comptime description: *const [25:0]u8 = "The power of the fractal."} = .{.type = f32, .minValue = 2, .maxValue = 32, .defaultValue = 8, .description = "The power of the fractal."}, comptime julia_c: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -2, comptime comptime_float = -2} = .{-2, -2, -2}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 2, comptime comptime_float = 2} = .{2, 2, 2}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 0, comptime comptime_float = 0} = .{1, 0, 0}, comptime description: *const [37:0]u8 = "The c constant for Julia set fractals"} = .{.type = @Vector(3, f32), .minValue = .{-2, -2, -2}, .maxValue = .{2, 2, 2}, .defaultValue = .{1, 0, 0}, .description = "The c constant for Julia set fractals"}, comptime cameraPosition: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -4, comptime comptime_float = -4, comptime comptime_float = -4} = .{-4, -4, -4}, comptime maxValue: struct{comptime comptime_float = 4, comptime comptime_float = 4, comptime comptime_float = 4} = .{4, 4, 4}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = -2.6, comptime comptime_float = 0} = .{0, -2.6, 0}, comptime description: *const [16:0]u8 = "Camera position."} = .{.type = @Vector(3, f32), .minValue = .{-4, -4, -4}, .maxValue = .{4, 4, 4}, .defaultValue = .{0, -2.6, 0}, .description = "Camera position."}, comptime cameraPositionFine: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -0.1, comptime comptime_float = -0.1, comptime comptime_float = -0.1} = .{-0.1, -0.1, -0.1}, comptime maxValue: struct{comptime comptime_float = 0.1, comptime comptime_float = 0.1, comptime comptime_float = 0.1} = .{0.1, 0.1, 0.1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime description: *const [19:0]u8 = "Fine tune position."} = .{.type = @Vector(3, f32), .minValue = .{-0.1, -0.1, -0.1}, .maxValue = .{0.1, 0.1, 0.1}, .defaultValue = .{0, 0, 0}, .description = "Fine tune position."}, comptime cameraRotation: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -180, comptime comptime_float = -180, comptime comptime_float = -180} = .{-180, -180, -180}, comptime maxValue: struct{comptime comptime_float = 180, comptime comptime_float = 180, comptime comptime_float = 180} = .{180, 180, 180}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = -90} = .{0, 0, -90}, comptime description: *const [42:0]u8 = "Pointing angle in each axis of the camera."} = .{.type = @Vector(3, f32), .minValue = .{-180, -180, -180}, .maxValue = .{180, 180, 180}, .defaultValue = .{0, 0, -90}, .description = "Pointing angle in each axis of the camera."}, comptime cameraZoom: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 0, comptime description: *const [21:0]u8 = "Zoom the camera view."} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 0, .description = "Zoom the camera view."}, comptime light: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -50, comptime comptime_float = -50, comptime comptime_float = -50} = .{-50, -50, -50}, comptime maxValue: struct{comptime comptime_float = 50, comptime comptime_float = 50, comptime comptime_float = 50} = .{50, 50, 50}, comptime defaultValue: struct{comptime comptime_float = 38, comptime comptime_float = -42, comptime comptime_float = 38} = .{38, -42, 38}, comptime description: *const [24:0]u8 = "Position of point light."} = .{.type = @Vector(3, f32), .minValue = .{-50, -50, -50}, .maxValue = .{50, 50, 50}, .defaultValue = .{38, -42, 38}, .description = "Position of point light."}, comptime colorBackground: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime description: *const [18:0]u8 = "Background colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{0, 0, 0}, .description = "Background colour.", .aeUIControl = "aeColor"}, comptime colorBackgroundTransparency: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [24:0]u8 = "Background transparency."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 1, .description = "Background transparency."}, comptime colorDiffuse: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0.85, comptime comptime_float = 0.99} = .{0, 0.85, 0.99}, comptime description: *const [15:0]u8 = "Diffuse colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{0, 0.85, 0.99}, .description = "Diffuse colour.", .aeUIControl = "aeColor"}, comptime colorAmbient: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.67, comptime comptime_float = 0.85, comptime comptime_float = 1} = .{0.67, 0.85, 1}, comptime description: *const [21:0]u8 = "Ambient light colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{0.67, 0.85, 1}, .description = "Ambient light colour.", .aeUIControl = "aeColor"}, comptime colorAmbientIntensity: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.4, comptime description: *const [24:0]u8 = "Ambient light intensity."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.4, .description = "Ambient light intensity."}, comptime colorLight: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.48, comptime comptime_float = 0.59, comptime comptime_float = 0.66} = .{0.48, 0.59, 0.66}, comptime description: *const [13:0]u8 = "Light colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{0.48, 0.59, 0.66}, .description = "Light colour.", .aeUIControl = "aeColor"}, comptime colorSpread: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.2, comptime description: *const [46:0]u8 = "Vary the colour based on the normal direction."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.2, .description = "Vary the colour based on the normal direction."}, comptime rimLight: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [17:0]u8 = "Rim light factor."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0, .description = "Rim light factor."}, comptime specularity: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.66, comptime description: *const [17:0]u8 = "Phone specularity"} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.66, .description = "Phone specularity"}, comptime specularExponent: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 50, comptime defaultValue: comptime_float = 15, comptime description: *const [15:0]u8 = "Phong shininess"} = .{.type = f32, .minValue = 0.1, .maxValue = 50, .defaultValue = 15, .description = "Phong shininess"}, comptime rotation: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -180, comptime comptime_float = -180, comptime comptime_float = -180} = .{-180, -180, -180}, comptime maxValue: struct{comptime comptime_float = 180, comptime comptime_float = 180, comptime comptime_float = 180} = .{180, 180, 180}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 36, comptime comptime_float = 39.6} = .{0, 36, 39.6}, comptime description: *const [35:0]u8 = "Rotate the Mandelbulb in each axis."} = .{.type = @Vector(3, f32), .minValue = .{-180, -180, -180}, .maxValue = .{180, 180, 180}, .defaultValue = .{0, 36, 39.6}, .description = "Rotate the Mandelbulb in each axis."}, comptime maxIterations: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 20, comptime defaultValue: comptime_int = 6, comptime description: *const [88:0]u8 = "More iterations reveal more detail in the fractal surface but takes longer to calculate."} = .{.type = i32, .minValue = 1, .maxValue = 20, .defaultValue = 6, .description = "More iterations reveal more detail in the fractal surface but takes longer to calculate."}, comptime stepLimit: struct{comptime type: type = i32, comptime minValue: comptime_int = 10, comptime maxValue: comptime_int = 200, comptime defaultValue: comptime_int = 110, comptime description: *const [46:0]u8 = "The maximum number of steps a ray should take."} = .{.type = i32, .minValue = 10, .maxValue = 200, .defaultValue = 110, .description = "The maximum number of steps a ray should take."}, comptime epsilonScale: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [109:0]u8 = "Scale the epsilon step distance. Smaller values are slower but will generate smoother results for thin areas."} = .{.type = f32, .minValue = 0.1, .maxValue = 1, .defaultValue = 1, .description = "Scale the epsilon step distance. Smaller values are slower but will generate smoother results for thin areas."}, comptime size: struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 2048, comptime comptime_int = 2048} = .{2048, 2048}, comptime defaultValue: struct{comptime comptime_int = 512, comptime comptime_int = 512} = .{512, 512}, comptime description: *const [26:0]u8 = "The output size in pixels."} = .{.type = @Vector(2, i32), .minValue = .{100, 100}, .maxValue = .{2048, 2048}, .defaultValue = .{512, 512}, .description = "The output size in pixels."}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:br}],methods:[],template:null},slot:14});const _1=new Uint8Array([]);Object.assign(hr,{...t,type:2,name:"@TypeOf(.{})",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:_1}}},slot:17});Object.assign(vt,{...t,type:11,name:"*@TypeOf(.{})",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:hr}],methods:[],template:null},slot:16});const g1=new Uint8Array([]),V1=new Uint8Array([32,31,16,0]),S1=new Uint8Array([4,0,0,0]);Object.assign(_r,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:o}],methods:[],template:{memory:{array:g1},slots:{0:{structure:o,memory:{array:V1},slots:{0:{structure:i,memory:{array:S1},address:1056544}}}}}},slot:103});Object.assign(Et,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_r}],methods:[],template:null},slot:102});const z1=new Uint8Array([]),q1=new Uint8Array([170,170,170,170]);Object.assign(gr,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:Et}],methods:[],template:{memory:{array:z1},slots:{0:{structure:Et,memory:{array:q1},slots:{0:{structure:_r,memory:{array:m},address:-1431655766}}}}}},slot:19});Object.assign(Tt,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:gr}],methods:[],template:null},slot:18});const w1=new Uint8Array([]),R1=new Uint8Array([]),U1=new Uint8Array([196,250,15,0]),A1=new Uint8Array([163,24,17,0]),O1=new Uint8Array([99,111,109,46,115,117,98,98,108,117,101,46,102,105,108,116,101,114,115,0]),x1=new Uint8Array([4,251,15,0]),j1=new Uint8Array([151,24,17,0]),P1=new Uint8Array([84,111,109,32,66,101,100,100,97,114,100,0]),C1=new Uint8Array([68,251,15,0]),k1=new Uint8Array([1,0,0,0]),I1=new Uint8Array([156,251,15,0]),v1=new Uint8Array([101,24,17,0]),E1=new Uint8Array([77,97,110,100,101,108,98,117,108,98,32,70,114,97,99,116,97,108,32,82,97,121,32,84,114,97,99,101,114,32,45,32,116,104,101,32,113,117,105,99,107,32,118,101,114,115,105,111,110,0]),T1=new Uint8Array([170,170,170,170]),L1=new Uint8Array([170,170,170,170]),B1=new Uint8Array([170,170,170,170]);Object.assign(kr,{...t,type:2,name:"mandelbulb-quick.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:w1}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:ge},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:Ve},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:E},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:Se},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:It},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:vt},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:Tt}],methods:[],template:{memory:{array:R1},slots:{0:{structure:ge,memory:{array:U1},slots:{0:{structure:Z,memory:{array:A1},slots:{0:{structure:Q,memory:{array:O1},address:1120419}}}}},1:{structure:Ve,memory:{array:x1},slots:{0:{structure:Mt,memory:{array:j1},slots:{0:{structure:Ft,memory:{array:P1},address:1120407}}}}},2:{structure:E,memory:{array:C1},slots:{0:{structure:i,memory:{array:k1}}}},3:{structure:Se,memory:{array:I1},slots:{0:{structure:Jt,memory:{array:v1},slots:{0:{structure:Dt,memory:{array:E1},address:1120357}}}}},4:{structure:It,memory:{array:T1},slots:{0:{structure:br,memory:{array:m},address:-1431655766}}},5:{structure:vt,memory:{array:L1},slots:{0:{structure:hr,memory:{array:m},address:-1431655766}}},6:{structure:Tt,memory:{array:B1},slots:{0:{structure:gr,memory:{array:m},address:-1431655766}}}}}},slot:1});const F1=new Uint8Array([]);Object.assign(ne,{...t,type:2,name:"mandelbulb-quick.KernelInput(u8,mandelbulb-quick.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:F1}}},slot:20});Object.assign(Vr,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:c}],methods:[],template:null},slot:25});Object.assign(Sr,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:Vr}],methods:[],template:null},slot:24});Object.assign(zr,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Sr}],methods:[],template:null},slot:23});Object.assign(V,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:V}],methods:[],template:null},slot:26});const M1=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Ir,{...t,type:9,name:"mandelbulb-quick.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:i},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:i}],methods:[],template:{memory:{array:M1}}},slot:27});Object.assign(Lt,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:Lt}],methods:[],template:null},slot:29});Object.assign(vr,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:a}],methods:[],template:null},slot:104});const D1=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),J1=new Uint8Array([]),Z1=new Uint8Array([88,249,15,0]),K1=new Uint8Array([4,0,0,0]);Object.assign(Bt,{...t,type:2,name:"mandelbulb-quick.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:zr},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:V},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:V},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Ir},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:g},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:Lt}],methods:[],template:{memory:{array:D1}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:Vr},{...e,type:7,isRequired:!1,name:"FPixel",structure:vr},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:E}],methods:[],template:{memory:{array:J1},slots:{0:{structure:E,memory:{array:Z1},slots:{0:{structure:i,memory:{array:K1}}}}}}},slot:22});const N1=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),$1=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),G1=new Uint8Array([0,0,0,0,0,0,0,0]),Yr=new Uint8Array([]);Object.assign(ue,{...t,type:2,name:"mandelbulb-quick.KernelOutput(u8,mandelbulb-quick.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:Bt}],methods:[],template:{memory:{array:N1},slots:{0:{structure:Bt,memory:{array:$1},slots:{0:{structure:zr,memory:{array:G1},slots:{0:{structure:Sr,memory:{array:Yr}}}}}}}}},slot:21});const H1=new Uint8Array([0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,38,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,194,0,0,0,0,0,0,24,66,0,0,40,194,0,0,24,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,89,63,164,112,125,63,0,0,0,0,31,133,43,63,154,153,89,63,0,0,128,63,0,0,0,0,143,194,245,62,61,10,23,63,195,245,40,63,0,0,0,0,0,0,0,0,0,0,16,66,102,102,30,66,0,0,0,0,0,2,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,205,204,76,63,225,122,20,63,0,0,32,64,0,0,128,64,0,0,0,65,0,0,0,0,0,0,128,63,205,204,204,62,205,204,76,62,0,0,0,0,195,245,40,63,0,0,112,65,6,0,0,0,110,0,0,0,0,0,128,63,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);Object.assign(le,{...t,type:2,name:"mandelbulb-quick.KernelParameters(mandelbulb-quick.kernel)",length:1,byteSize:256,align:4,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:1344,bitSize:32,byteSize:4,slot:0,name:"antialiasing",structure:i},{...e,type:1,isRequired:!1,bitOffset:1920,bitSize:1,byteSize:1,slot:1,name:"phong",structure:g},{...e,type:1,isRequired:!1,bitOffset:1928,bitSize:1,byteSize:1,slot:2,name:"julia",structure:g},{...e,type:1,isRequired:!1,bitOffset:1936,bitSize:1,byteSize:1,slot:3,name:"radiolaria",structure:g},{...e,type:4,isRequired:!1,bitOffset:1376,bitSize:32,byteSize:4,slot:4,name:"radiolariaFactor",structure:a},{...e,type:4,isRequired:!1,bitOffset:1408,bitSize:32,byteSize:4,slot:5,name:"shadows",structure:a},{...e,type:4,isRequired:!1,bitOffset:1440,bitSize:32,byteSize:4,slot:6,name:"ambientOcclusion",structure:a},{...e,type:4,isRequired:!1,bitOffset:1472,bitSize:32,byteSize:4,slot:7,name:"ambientOcclusionEmphasis",structure:a},{...e,type:4,isRequired:!1,bitOffset:1504,bitSize:32,byteSize:4,slot:8,name:"bounding",structure:a},{...e,type:4,isRequired:!1,bitOffset:1536,bitSize:32,byteSize:4,slot:9,name:"bailout",structure:a},{...e,type:4,isRequired:!1,bitOffset:1568,bitSize:32,byteSize:4,slot:10,name:"power",structure:a},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:96,byteSize:16,slot:11,name:"julia_c",structure:u},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:96,byteSize:16,slot:12,name:"cameraPosition",structure:u},{...e,type:6,isRequired:!1,bitOffset:256,bitSize:96,byteSize:16,slot:13,name:"cameraPositionFine",structure:u},{...e,type:6,isRequired:!1,bitOffset:384,bitSize:96,byteSize:16,slot:14,name:"cameraRotation",structure:u},{...e,type:4,isRequired:!1,bitOffset:1600,bitSize:32,byteSize:4,slot:15,name:"cameraZoom",structure:a},{...e,type:6,isRequired:!1,bitOffset:512,bitSize:96,byteSize:16,slot:16,name:"light",structure:u},{...e,type:6,isRequired:!1,bitOffset:640,bitSize:96,byteSize:16,slot:17,name:"colorBackground",structure:u},{...e,type:4,isRequired:!1,bitOffset:1632,bitSize:32,byteSize:4,slot:18,name:"colorBackgroundTransparency",structure:a},{...e,type:6,isRequired:!1,bitOffset:768,bitSize:96,byteSize:16,slot:19,name:"colorDiffuse",structure:u},{...e,type:6,isRequired:!1,bitOffset:896,bitSize:96,byteSize:16,slot:20,name:"colorAmbient",structure:u},{...e,type:4,isRequired:!1,bitOffset:1664,bitSize:32,byteSize:4,slot:21,name:"colorAmbientIntensity",structure:a},{...e,type:6,isRequired:!1,bitOffset:1024,bitSize:96,byteSize:16,slot:22,name:"colorLight",structure:u},{...e,type:4,isRequired:!1,bitOffset:1696,bitSize:32,byteSize:4,slot:23,name:"colorSpread",structure:a},{...e,type:4,isRequired:!1,bitOffset:1728,bitSize:32,byteSize:4,slot:24,name:"rimLight",structure:a},{...e,type:4,isRequired:!1,bitOffset:1760,bitSize:32,byteSize:4,slot:25,name:"specularity",structure:a},{...e,type:4,isRequired:!1,bitOffset:1792,bitSize:32,byteSize:4,slot:26,name:"specularExponent",structure:a},{...e,type:6,isRequired:!1,bitOffset:1152,bitSize:96,byteSize:16,slot:27,name:"rotation",structure:u},{...e,type:2,isRequired:!1,bitOffset:1824,bitSize:32,byteSize:4,slot:28,name:"maxIterations",structure:i},{...e,type:2,isRequired:!1,bitOffset:1856,bitSize:32,byteSize:4,slot:29,name:"stepLimit",structure:i},{...e,type:4,isRequired:!1,bitOffset:1888,bitSize:32,byteSize:4,slot:30,name:"epsilonScale",structure:a},{...e,type:6,isRequired:!1,bitOffset:1280,bitSize:64,byteSize:8,slot:31,name:"size",structure:lr}],methods:[],template:{memory:{array:H1}}},slot:30});Object.assign(Er,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(mandelbulb-quick.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:105});Object.assign(Tr,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(mandelbulb-quick.createOutput)).Fn.return_type.?).ErrorUnion.error_set!mandelbulb-quick.KernelOutput(u8,mandelbulb-quick.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:ue},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Er}],methods:[],template:null},slot:36});Object.assign(Lr,{...t,type:3,name:"createOutput",length:1,byteSize:304,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:2048,bitSize:32,byteSize:4,slot:0,name:"0",structure:V},{...e,type:3,bitOffset:2080,bitSize:32,byteSize:4,slot:1,name:"1",structure:V},{...e,type:6,bitOffset:2432,bitSize:0,byteSize:0,slot:2,name:"2",structure:ne},{...e,type:6,bitOffset:0,bitSize:2048,byteSize:256,slot:3,name:"3",structure:le},{...e,type:6,bitOffset:2112,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Tr}],methods:[],template:null},slot:34});Object.assign(Br,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(mandelbulb-quick.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:106});Object.assign(Fr,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(mandelbulb-quick.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!mandelbulb-quick.KernelOutput(u8,mandelbulb-quick.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:ue},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Br}],methods:[],template:null},slot:37});Object.assign(Mr,{...t,type:3,name:"createPartialOutput",length:1,byteSize:304,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:2048,bitSize:32,byteSize:4,slot:0,name:"0",structure:V},{...e,type:3,bitOffset:2080,bitSize:32,byteSize:4,slot:1,name:"1",structure:V},{...e,type:3,bitOffset:2112,bitSize:32,byteSize:4,slot:2,name:"2",structure:V},{...e,type:3,bitOffset:2144,bitSize:32,byteSize:4,slot:3,name:"3",structure:V},{...e,type:6,bitOffset:2432,bitSize:0,byteSize:0,slot:4,name:"4",structure:ne},{...e,type:6,bitOffset:0,bitSize:2048,byteSize:256,slot:5,name:"5",structure:le},{...e,type:6,bitOffset:2176,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Fr}],methods:[],template:null},slot:35});const Q1={argStruct:Lr,thunk:1,name:"createOutput"},W1={argStruct:Mr,thunk:4,name:"createPartialOutput"};Object.assign(Dr,{...t,type:2,name:"mandelbulb-quick",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Yr}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:kr},{...e,type:7,isRequired:!1,name:"Input",structure:ne},{...e,type:7,isRequired:!1,name:"Output",structure:ue},{...e,type:7,isRequired:!1,name:"Parameters",structure:le}],methods:[Q1,W1],template:null},slot:0});const X1=[c,Q,Z,ge,Ft,Mt,Ve,i,E,Dt,Jt,Se,o,Zt,Kt,ze,Nt,qe,g,A,K,N,O,$t,we,W,X,T,Gt,Re,x,j,z,Ht,Ue,a,r,s,Qt,Wt,Ae,Xt,Oe,Y,ee,L,Yt,xe,es,ts,je,ss,Pe,rs,ms,Ce,as,ke,os,is,Ie,cs,ve,ns,us,Ee,ls,Te,ps,Le,u,ys,Be,ds,Fe,fs,Me,bs,hs,De,_s,Je,gs,Ze,Vs,Ke,Ss,Ne,zs,qs,$e,ws,Ge,Rs,He,Us,Qe,R,_,We,As,Xe,te,B,se,F,Os,Ye,xs,js,et,Ps,tt,Cs,st,ks,rt,Is,mt,vs,at,Es,ot,P,q,Ts,Ls,it,C,k,w,Bs,ct,Fs,nt,Ms,ut,re,me,M,Ds,lt,Js,pt,Zs,yt,Ks,dt,Ns,ft,$s,Gs,bt,Hs,ht,ae,oe,D,Qs,_t,ie,ce,J,Ws,gt,Xs,Vt,Ys,St,er,zt,tr,sr,qt,rr,wt,mr,ar,Rt,or,Ut,ir,At,cr,nr,Ot,ur,xt,lr,pr,jt,yr,Pt,dr,Ct,fr,kt,br,It,hr,vt,_r,Et,gr,Tt,kr,ne,Vr,Sr,zr,V,Ir,Lt,vr,Bt,ue,le,Er,Tr,Lr,Br,Fr,Mr,Dr],Y1=Vm(X1),el=Dr.constructor,tl=(async()=>{const f=new URL("mandelbulb-quick-969e1b48.wasm",import.meta.url).href;return fetch(f)})();Sm(tl,{...Y1,writeBack:!0});const{createOutput:nl,createPartialOutput:sl,kernel:Cr,Input:rl,Output:ul,Parameters:ll}=el;function ml(f,h,p,l,y={},I={}){if(Array.isArray(y)){const U=y;y={};for(const[S,v]of Object.keys(Cr.inputImages).entries())y[v]=U[S]}const pe=new rl(void 0),ye=Object.keys(Cr.inputImages),b=[];let $;for(const U of ye){let S=y[U];if(S||(ye.length===1&&["data","width","height"].every(v=>!!y[v])?S=y:b.push(U)),pe[U]=S,$){if(S.colorSpace!==$)throw new Error(`Input images must all use the same color space: ${$}`)}else $=S.colorSpace}if(b.length>0)throw new Error(`Missing input image${b.length>1?"s":""}: ${b.join(", ")}`);const Rr=sl(f,h,p,l,pe,I),Jr=U=>{const S=Object.keys(U),v={};for(const Zr of S){const{data:{typedArray:de},width:Kr,height:tm}=U[Zr];let fe;if(typeof ImageData=="function"){const sm=new Uint8ClampedArray(de.buffer,de.byteOffset,de.byteLength);fe=new ImageData(sm,Kr,l,{colorSpace:$})}else fe={data:de,width:Kr,height:tm};if(S.length===1)return fe;v[Zr]=fe}return v};return Rr[Symbol.toStringTag]==="Promise"?Rr.then(Jr):Jr(Rr)}function al(){const f={};for(let[h,p]of Object.entries(Cr)){if(h==="parameters"){const l={};for(const[y,I]of Object.entries(p)){const pe=l[y]={};for(let[ye,b]of Object.entries(I))typeof b=="object"?"string"in b?b=b.string:b=em(b):typeof b=="function"&&(b=ol(b.name)),pe[ye]=b}p=l}else typeof p=="object"&&("string"in p?p=p.string:p=p.valueOf());f[h]=p}return f}function em(f){const h=[];for(let[p,l]of Object.entries(f))typeof l=="object"&&(l=em(l)),h[p]=l;return h}function ol(f){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[f]}onmessage=f=>{const[h,p,...l]=f.data;il(h,l).then(([y,I])=>{postMessage([h,p,y],{transfer:I})}).catch(y=>{postMessage(["error",p,y])})};async function il(f,h){switch(f){case"getKernelInfo":return[al(...h)];case"createPartialImageData":const l=await ml(...h),y=[];if("data"in l&&"width"in l&&"height"in l)y.push(l.data.buffer);else for(const I of Object.entries(l))y.push(l.data.buffer);return[l,y];default:throw new Error(`Unknown function: ${f}`)}}
