import{u as Ye,a as Ge,b as He,c as Je,d as Ne,e as Qe,f as We,g as Ze,h as et,i as tt,j as rt,k as st,l as at,m as nt,n as it,o as ut,p as ot,q as mt}from"./index-b8a86fe8.js";Ye();Ge();He();Je();Ne();Qe();We();Ze();et();tt();rt();st();at();nt();it();ut();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},w={},ue={},oe={},B={},me={},ye={},L={},f={},g={},le={},ce={},X={},d={},o={},s={},r={},k={},q={},be={},Y={},pe={},G={},fe={},H={},z={},v={},O={},j={},h={},de={},J={},Se={},N={},he={},Q={},x={},P={},E={},V={},ge={},W={},I={},R={},c={},n={},we={},Z={},ze={},ee={},Ae={},te={},Ue={},re={},Re={},se={},qe={},ae={},Ie={},K={},Oe={},je={},Pe={},b={},ke={},ne={},ie={},D={},M={},ve={},xe={},Ee={},Ke={},De={},Me={},Fe={};Object.assign(w,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:w}],methods:[],template:null},slot:5});Object.assign(ue,{...t,type:1,name:"[33:0]u8",length:33,byteSize:34,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:w}],methods:[],template:null},slot:4});Object.assign(oe,{...t,type:11,name:"*const [33:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:3});Object.assign(B,{...t,type:11,name:"*const *const [33:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:2});Object.assign(me,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:w}],methods:[],template:null},slot:8});Object.assign(ye,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:7});Object.assign(L,{...t,type:11,name:"*const *const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:6});Object.assign(f,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:10});Object.assign(g,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:f}],methods:[],template:null},slot:9});Object.assign(le,{...t,type:1,name:"[23:0]u8",length:23,byteSize:24,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:w}],methods:[],template:null},slot:13});Object.assign(ce,{...t,type:11,name:"*const [23:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:12});Object.assign(X,{...t,type:11,name:"*const *const [23:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:11});Object.assign(d,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:d}],methods:[],template:null},slot:32});Object.assign(o,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:d}],methods:[],template:null},slot:30});Object.assign(s,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:s}],methods:[],template:null},slot:74});Object.assign(r,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:s}],methods:[],template:null},slot:73});const yt=new Uint8Array,lt=new Uint8Array([112,243,15,0]),ct=new Uint8Array([0,0,0,0,0,0,0,0]),bt=new Uint8Array([152,243,15,0]),pt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(k,{...t,type:2,name:"Struct0031",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:yt},slots:{0:{structure:r,memory:{array:lt},slots:{0:{structure:s,memory:{array:ct}}}},1:{structure:r,memory:{array:bt},slots:{0:{structure:s,memory:{array:pt}}}}}}},slot:56});Object.assign(q,{...t,type:11,name:"Struct0022",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:k}],methods:[],template:null},slot:55});const ft=new Uint8Array,dt=new Uint8Array([80,250,15,0]),St=new Uint8Array([0,0,0,0,0,64,143,64]),ht=new Uint8Array([136,250,15,0]),gt=new Uint8Array([0,0,0,0,0,64,143,64]);Object.assign(be,{...t,type:2,name:"Struct0032",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:ft},slots:{0:{structure:r,memory:{array:dt},slots:{0:{structure:s,memory:{array:St}}}},1:{structure:r,memory:{array:ht},slots:{0:{structure:s,memory:{array:gt}}}}}}},slot:58});Object.assign(Y,{...t,type:11,name:"Struct0023",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:57});const wt=new Uint8Array,zt=new Uint8Array([80,250,15,0]),At=new Uint8Array([0,0,0,0,0,0,128,64]),Ut=new Uint8Array([136,250,15,0]),Rt=new Uint8Array([0,0,0,0,0,0,128,64]);Object.assign(pe,{...t,type:2,name:"Struct0033",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:wt},slots:{0:{structure:r,memory:{array:zt},slots:{0:{structure:s,memory:{array:At}}}},1:{structure:r,memory:{array:Ut},slots:{0:{structure:s,memory:{array:Rt}}}}}}},slot:60});Object.assign(G,{...t,type:11,name:"Struct0024",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pe}],methods:[],template:null},slot:59});const qt=new Uint8Array,Ot=new Uint8Array([170,170,170,170]),jt=new Uint8Array,Pt=new Uint8Array([170,170,170,170]),Vt=new Uint8Array,Ct=new Uint8Array([170,170,170,170]),It=new Uint8Array;Object.assign(fe,{...t,type:2,name:"Struct0014",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:q},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:Y},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:G}],methods:[],template:{memory:{array:qt},slots:{0:{structure:q,memory:{array:Ot},slots:{0:{structure:k,memory:{array:jt}}}},1:{structure:Y,memory:{array:Pt},slots:{0:{structure:be,memory:{array:Vt}}}},2:{structure:G,memory:{array:Ct},slots:{0:{structure:pe,memory:{array:It}}}}}}},slot:38});Object.assign(H,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:37});Object.assign(z,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:d}],methods:[],template:null},slot:31});const kt=new Uint8Array,vt=new Uint8Array([32,243,15,0]),xt=new Uint8Array([0,0,0,0,0,0,0,0]),Et=new Uint8Array([72,243,15,0]),Kt=new Uint8Array([0,0,0,0,0,0,0,0]),Dt=new Uint8Array([112,243,15,0]),Mt=new Uint8Array([0,0,0,0,0,0,0,0]),Ft=new Uint8Array([152,243,15,0]),Tt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(v,{...t,type:2,name:"Struct0034",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:r},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:r}],methods:[],template:{memory:{array:kt},slots:{0:{structure:r,memory:{array:vt},slots:{0:{structure:s,memory:{array:xt}}}},1:{structure:r,memory:{array:Et},slots:{0:{structure:s,memory:{array:Kt}}}},2:{structure:r,memory:{array:Dt},slots:{0:{structure:s,memory:{array:Mt}}}},3:{structure:r,memory:{array:Ft},slots:{0:{structure:s,memory:{array:Tt}}}}}}},slot:62});Object.assign(O,{...t,type:11,name:"Struct0025",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:v}],methods:[],template:null},slot:61});const _t=new Uint8Array,$t=new Uint8Array([32,243,15,0]),Bt=new Uint8Array([0,0,0,0,0,0,240,63]),Lt=new Uint8Array([72,243,15,0]),Xt=new Uint8Array([0,0,0,0,0,0,240,63]),Yt=new Uint8Array([112,243,15,0]),Gt=new Uint8Array([0,0,0,0,0,0,240,63]),Ht=new Uint8Array([152,243,15,0]),Jt=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(j,{...t,type:2,name:"Struct0035",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:r},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:r}],methods:[],template:{memory:{array:_t},slots:{0:{structure:r,memory:{array:$t},slots:{0:{structure:s,memory:{array:Bt}}}},1:{structure:r,memory:{array:Lt},slots:{0:{structure:s,memory:{array:Xt}}}},2:{structure:r,memory:{array:Yt},slots:{0:{structure:s,memory:{array:Gt}}}},3:{structure:r,memory:{array:Ht},slots:{0:{structure:s,memory:{array:Jt}}}}}}},slot:64});Object.assign(h,{...t,type:11,name:"Struct0026",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:j}],methods:[],template:null},slot:63});const Nt=new Uint8Array,Qt=new Uint8Array([170,170,170,170]),Wt=new Uint8Array,Zt=new Uint8Array([170,170,170,170]),er=new Uint8Array,tr=new Uint8Array([170,170,170,170]),rr=new Uint8Array;Object.assign(de,{...t,type:2,name:"Struct0015",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:z},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:O},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:h},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:h}],methods:[],template:{memory:{array:Nt},slots:{0:{structure:O,memory:{array:Qt},slots:{0:{structure:v,memory:{array:Wt}}}},1:{structure:h,memory:{array:Zt},slots:{0:{structure:j,memory:{array:er}}}},2:{structure:h,memory:{array:tr},slots:{0:{structure:j,memory:{array:rr}}}}}}},slot:40});Object.assign(J,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:de}],methods:[],template:null},slot:39});const sr=new Uint8Array,ar=new Uint8Array([96,249,15,0]),nr=new Uint8Array([0,0,0,0,0,0,0,0]),ir=new Uint8Array([168,249,15,0]),ur=new Uint8Array([0,0,0,0,0,0,0,0]),or=new Uint8Array([0,250,15,0]),mr=new Uint8Array([154,153,153,153,153,153,233,63]),yr=new Uint8Array([120,250,15,0]),lr=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(Se,{...t,type:2,name:"Struct0036",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:r},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:r}],methods:[],template:{memory:{array:sr},slots:{0:{structure:r,memory:{array:ar},slots:{0:{structure:s,memory:{array:nr}}}},1:{structure:r,memory:{array:ir},slots:{0:{structure:s,memory:{array:ur}}}},2:{structure:r,memory:{array:or},slots:{0:{structure:s,memory:{array:mr}}}},3:{structure:r,memory:{array:yr},slots:{0:{structure:s,memory:{array:lr}}}}}}},slot:66});Object.assign(N,{...t,type:11,name:"Struct0027",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Se}],methods:[],template:null},slot:65});const cr=new Uint8Array,br=new Uint8Array([170,170,170,170]),pr=new Uint8Array,fr=new Uint8Array([170,170,170,170]),dr=new Uint8Array,Sr=new Uint8Array([170,170,170,170]),hr=new Uint8Array;Object.assign(he,{...t,type:2,name:"Struct0016",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:z},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:O},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:h},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:N}],methods:[],template:{memory:{array:cr},slots:{0:{structure:O,memory:{array:br},slots:{0:{structure:v,memory:{array:pr}}}},1:{structure:h,memory:{array:fr},slots:{0:{structure:j,memory:{array:dr}}}},2:{structure:N,memory:{array:Sr},slots:{0:{structure:Se,memory:{array:hr}}}}}}},slot:42});Object.assign(Q,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:he}],methods:[],template:null},slot:41});const gr=new Uint8Array,wr=new Uint8Array([0,241,15,0]),zr=new Uint8Array([0,0,0,0,0,0,36,192]),Ar=new Uint8Array([40,241,15,0]),Ur=new Uint8Array([0,0,0,0,0,0,36,192]);Object.assign(x,{...t,type:2,name:"Struct0037",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:gr},slots:{0:{structure:r,memory:{array:wr},slots:{0:{structure:s,memory:{array:zr}}}},1:{structure:r,memory:{array:Ar},slots:{0:{structure:s,memory:{array:Ur}}}}}}},slot:68});Object.assign(P,{...t,type:11,name:"Struct0028",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:x}],methods:[],template:null},slot:67});const Rr=new Uint8Array,qr=new Uint8Array([0,241,15,0]),Or=new Uint8Array([0,0,0,0,0,0,36,64]),jr=new Uint8Array([40,241,15,0]),Pr=new Uint8Array([0,0,0,0,0,0,36,64]);Object.assign(E,{...t,type:2,name:"Struct0038",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:Rr},slots:{0:{structure:r,memory:{array:qr},slots:{0:{structure:s,memory:{array:Or}}}},1:{structure:r,memory:{array:jr},slots:{0:{structure:s,memory:{array:Pr}}}}}}},slot:70});Object.assign(V,{...t,type:11,name:"Struct0029",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:E}],methods:[],template:null},slot:69});const Vr=new Uint8Array,Cr=new Uint8Array([112,243,15,0]),Ir=new Uint8Array([0,0,0,0,0,0,20,192]),kr=new Uint8Array([152,243,15,0]),vr=new Uint8Array([0,0,0,0,0,0,20,64]);Object.assign(ge,{...t,type:2,name:"Struct0039",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:Vr},slots:{0:{structure:r,memory:{array:Cr},slots:{0:{structure:s,memory:{array:Ir}}}},1:{structure:r,memory:{array:kr},slots:{0:{structure:s,memory:{array:vr}}}}}}},slot:72});Object.assign(W,{...t,type:11,name:"Struct0030",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ge}],methods:[],template:null},slot:71});const xr=new Uint8Array,Er=new Uint8Array([170,170,170,170]),Kr=new Uint8Array,Dr=new Uint8Array([170,170,170,170]),Mr=new Uint8Array,Fr=new Uint8Array([170,170,170,170]),Tr=new Uint8Array;Object.assign(I,{...t,type:2,name:"Struct0017",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:P},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:V},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:W}],methods:[],template:{memory:{array:xr},slots:{0:{structure:P,memory:{array:Er},slots:{0:{structure:x,memory:{array:Kr}}}},1:{structure:V,memory:{array:Dr},slots:{0:{structure:E,memory:{array:Mr}}}},2:{structure:W,memory:{array:Fr},slots:{0:{structure:ge,memory:{array:Tr}}}}}}},slot:44});Object.assign(R,{...t,type:11,name:"Struct0009",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:I}],methods:[],template:null},slot:43});const _r=new Uint8Array,$r=new Uint8Array([170,170,170,170]),Br=new Uint8Array,Lr=new Uint8Array([170,170,170,170]),Xr=new Uint8Array,Yr=new Uint8Array([170,170,170,170]),Gr=new Uint8Array;Object.assign(c,{...t,type:2,name:"Struct0018",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:P},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:V},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:q}],methods:[],template:{memory:{array:_r},slots:{0:{structure:P,memory:{array:$r},slots:{0:{structure:x,memory:{array:Br}}}},1:{structure:V,memory:{array:Lr},slots:{0:{structure:E,memory:{array:Xr}}}},2:{structure:q,memory:{array:Yr},slots:{0:{structure:k,memory:{array:Gr}}}}}}},slot:46});Object.assign(n,{...t,type:11,name:"Struct0010",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:45});const Hr=new Uint8Array,Jr=new Uint8Array([128,250,15,0]),Nr=new Uint8Array([0,0,0,0,0,0,240,63]),Qr=new Uint8Array([216,247,15,0]),Wr=new Uint8Array([0,0,0,0,0,0,36,64]),Zr=new Uint8Array([184,247,15,0]),es=new Uint8Array([0,0,0,0,0,0,8,64]);Object.assign(we,{...t,type:2,name:"Struct0019",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:Hr},slots:{0:{structure:r,memory:{array:Jr},slots:{0:{structure:s,memory:{array:Nr}}}},1:{structure:r,memory:{array:Qr},slots:{0:{structure:s,memory:{array:Wr}}}},2:{structure:r,memory:{array:Zr},slots:{0:{structure:s,memory:{array:es}}}}}}},slot:48});Object.assign(Z,{...t,type:11,name:"Struct0011",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:we}],methods:[],template:null},slot:47});const ts=new Uint8Array,rs=new Uint8Array([128,250,15,0]),ss=new Uint8Array([0,0,0,0,0,0,240,63]),as=new Uint8Array([216,247,15,0]),ns=new Uint8Array([0,0,0,0,0,0,89,64]),is=new Uint8Array([184,247,15,0]),us=new Uint8Array([0,0,0,0,0,0,57,64]);Object.assign(ze,{...t,type:2,name:"Struct0020",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:ts},slots:{0:{structure:r,memory:{array:rs},slots:{0:{structure:s,memory:{array:ss}}}},1:{structure:r,memory:{array:as},slots:{0:{structure:s,memory:{array:ns}}}},2:{structure:r,memory:{array:is},slots:{0:{structure:s,memory:{array:us}}}}}}},slot:50});Object.assign(ee,{...t,type:11,name:"Struct0012",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ze}],methods:[],template:null},slot:49});const os=new Uint8Array,ms=new Uint8Array([170,170,170,170]),ys=new Uint8Array,ls=new Uint8Array([170,170,170,170]),cs=new Uint8Array,bs=new Uint8Array([170,170,170,170]),ps=new Uint8Array,fs=new Uint8Array([170,170,170,170]),ds=new Uint8Array,Ss=new Uint8Array([170,170,170,170]),hs=new Uint8Array,gs=new Uint8Array([170,170,170,170]),ws=new Uint8Array,zs=new Uint8Array([170,170,170,170]),As=new Uint8Array,Us=new Uint8Array([170,170,170,170]),Rs=new Uint8Array,qs=new Uint8Array([170,170,170,170]),Os=new Uint8Array,js=new Uint8Array([170,170,170,170]),Ps=new Uint8Array,Vs=new Uint8Array([170,170,170,170]),Cs=new Uint8Array,Is=new Uint8Array([170,170,170,170]),ks=new Uint8Array,vs=new Uint8Array([170,170,170,170]),xs=new Uint8Array,Es=new Uint8Array([170,170,170,170]),Ks=new Uint8Array,Ds=new Uint8Array([170,170,170,170]),Ms=new Uint8Array;Object.assign(Ae,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"size",structure:H},{...e,type:8,isRequired:!1,slot:1,name:"colorStart",structure:J},{...e,type:8,isRequired:!1,slot:2,name:"colorEnd",structure:Q},{...e,type:8,isRequired:!1,slot:3,name:"rangeX",structure:R},{...e,type:8,isRequired:!1,slot:4,name:"rangeY",structure:R},{...e,type:8,isRequired:!1,slot:5,name:"c0",structure:n},{...e,type:8,isRequired:!1,slot:6,name:"c1",structure:n},{...e,type:8,isRequired:!1,slot:7,name:"c2",structure:n},{...e,type:8,isRequired:!1,slot:8,name:"c3",structure:n},{...e,type:8,isRequired:!1,slot:9,name:"c4",structure:n},{...e,type:8,isRequired:!1,slot:10,name:"c5",structure:n},{...e,type:8,isRequired:!1,slot:11,name:"c6",structure:n},{...e,type:8,isRequired:!1,slot:12,name:"c7",structure:n},{...e,type:8,isRequired:!1,slot:13,name:"toleranceInversePower",structure:Z},{...e,type:8,isRequired:!1,slot:14,name:"iterations",structure:ee}],methods:[],template:{memory:{array:os},slots:{0:{structure:H,memory:{array:ms},slots:{0:{structure:fe,memory:{array:ys}}}},1:{structure:J,memory:{array:ls},slots:{0:{structure:de,memory:{array:cs}}}},2:{structure:Q,memory:{array:bs},slots:{0:{structure:he,memory:{array:ps}}}},3:{structure:R,memory:{array:fs},slots:{0:{structure:I,memory:{array:ds}}}},4:{structure:R,memory:{array:Ss},slots:{0:{structure:I,memory:{array:hs}}}},5:{structure:n,memory:{array:gs},slots:{0:{structure:c,memory:{array:ws}}}},6:{structure:n,memory:{array:zs},slots:{0:{structure:c,memory:{array:As}}}},7:{structure:n,memory:{array:Us},slots:{0:{structure:c,memory:{array:Rs}}}},8:{structure:n,memory:{array:qs},slots:{0:{structure:c,memory:{array:Os}}}},9:{structure:n,memory:{array:js},slots:{0:{structure:c,memory:{array:Ps}}}},10:{structure:n,memory:{array:Vs},slots:{0:{structure:c,memory:{array:Cs}}}},11:{structure:n,memory:{array:Is},slots:{0:{structure:c,memory:{array:ks}}}},12:{structure:n,memory:{array:vs},slots:{0:{structure:c,memory:{array:xs}}}},13:{structure:Z,memory:{array:Es},slots:{0:{structure:we,memory:{array:Ks}}}},14:{structure:ee,memory:{array:Ds},slots:{0:{structure:ze,memory:{array:Ms}}}}}}},slot:15});Object.assign(te,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ae}],methods:[],template:null},slot:14});const Fs=new Uint8Array;Object.assign(Ue,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Fs}}},slot:17});Object.assign(re,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ue}],methods:[],template:null},slot:16});const Ts=new Uint8Array,_s=new Uint8Array([160,253,15,0]),$s=new Uint8Array([4,0,0,0]);Object.assign(Re,{...t,type:2,name:"Struct0021",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:g}],methods:[],template:{memory:{array:Ts},slots:{0:{structure:g,memory:{array:_s},slots:{0:{structure:f,memory:{array:$s}}}}}}},slot:52});Object.assign(se,{...t,type:11,name:"Struct0013",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Re}],methods:[],template:null},slot:51});const Bs=new Uint8Array,Ls=new Uint8Array([170,170,170,170]),Xs=new Uint8Array;Object.assign(qe,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:se}],methods:[],template:{memory:{array:Bs},slots:{0:{structure:se,memory:{array:Ls},slots:{0:{structure:Re,memory:{array:Xs}}}}}}},slot:19});Object.assign(ae,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:qe}],methods:[],template:null},slot:18});const Ys=new Uint8Array,Gs=new Uint8Array,Hs=new Uint8Array([160,37,16,0]),Js=new Uint8Array([68,37,16,0]),Ns=new Uint8Array([99,111,109,46,111,109,45,108,97,98,115,46,102,105,108,116,101,114,115,46,110,101,119,116,111,110,82,97,112,104,115,111,110,0]),Qs=new Uint8Array([156,37,16,0]),Ws=new Uint8Array([49,37,16,0]),Zs=new Uint8Array([79,109,32,76,97,98,115,0]),ea=new Uint8Array([152,37,16,0]),ta=new Uint8Array([1,0,0,0]),ra=new Uint8Array([148,37,16,0]),sa=new Uint8Array([8,37,16,0]),aa=new Uint8Array([78,101,119,116,111,110,32,82,97,112,104,115,111,110,32,70,114,97,99,116,97,108,115,0]),na=new Uint8Array([170,170,170,170]),ia=new Uint8Array,ua=new Uint8Array([170,170,170,170]),oa=new Uint8Array,ma=new Uint8Array([170,170,170,170]),ya=new Uint8Array;Object.assign(Ie,{...t,type:2,name:"newton-raphson.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ys}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:B},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:L},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:g},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:X},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:te},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:re},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:ae}],methods:[],template:{memory:{array:Gs},slots:{0:{structure:B,memory:{array:Hs},slots:{0:{structure:oe,memory:{array:Js},slots:{0:{structure:ue,memory:{array:Ns}}}}}},1:{structure:L,memory:{array:Qs},slots:{0:{structure:ye,memory:{array:Ws},slots:{0:{structure:me,memory:{array:Zs}}}}}},2:{structure:g,memory:{array:ea},slots:{0:{structure:f,memory:{array:ta}}}},3:{structure:X,memory:{array:ra},slots:{0:{structure:ce,memory:{array:sa},slots:{0:{structure:le,memory:{array:aa}}}}}},4:{structure:te,memory:{array:na},slots:{0:{structure:Ae,memory:{array:ia}}}},5:{structure:re,memory:{array:ua},slots:{0:{structure:Ue,memory:{array:oa}}}},6:{structure:ae,memory:{array:ma},slots:{0:{structure:qe,memory:{array:ya}}}}}}},slot:1});const la=new Uint8Array;Object.assign(K,{...t,type:2,name:"newton-raphson.KernelInput(u8,newton-raphson.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:la}}},slot:20});Object.assign(Oe,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:w}],methods:[],template:null},slot:25});Object.assign(je,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:Oe}],methods:[],template:null},slot:24});Object.assign(Pe,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:je}],methods:[],template:null},slot:23});Object.assign(b,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:26});const ca=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ke,{...t,type:9,name:"newton-raphson.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:f},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:f}],methods:[],template:{memory:{array:ca}}},slot:27});Object.assign(ne,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:ne}],methods:[],template:null},slot:28});const ba=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),pa=new Uint8Array,fa=new Uint8Array([208,36,16,0]),da=new Uint8Array([4,0,0,0]);Object.assign(ie,{...t,type:2,name:"newton-raphson.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Pe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:b},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:b},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ke},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:ne}],methods:[],template:{memory:{array:ba}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:Oe},{...e,type:7,isRequired:!1,name:"FPixel",structure:z},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:g}],methods:[],template:{memory:{array:pa},slots:{0:{structure:g,memory:{array:fa},slots:{0:{structure:f,memory:{array:da}}}}}}},slot:22});const Sa=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ha=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ga=new Uint8Array([0,0,0,0,0,0,0,0]),wa=new Uint8Array;Object.assign(D,{...t,type:2,name:"newton-raphson.KernelOutput(u8,newton-raphson.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:ie}],methods:[],template:{memory:{array:Sa},slots:{0:{structure:ie,memory:{array:ha},slots:{0:{structure:Pe,memory:{array:ga},address:1047560,slots:{0:{structure:je,memory:{array:wa},address:0}}}}}}}},slot:21});const za=new Uint8Array([0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,205,204,76,63,0,0,128,63,0,0,0,68,0,0,0,68,0,0,160,192,0,0,160,64,0,0,160,192,0,0,160,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,64,0,0,200,65]);Object.assign(M,{...t,type:2,name:"newton-raphson.KernelParameters(newton-raphson.kernel)",length:1,byteSize:128,align:4,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:256,bitSize:64,byteSize:8,slot:0,name:"size",structure:o},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:128,byteSize:16,slot:1,name:"colorStart",structure:z},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:128,byteSize:16,slot:2,name:"colorEnd",structure:z},{...e,type:6,isRequired:!1,bitOffset:320,bitSize:64,byteSize:8,slot:3,name:"rangeX",structure:o},{...e,type:6,isRequired:!1,bitOffset:384,bitSize:64,byteSize:8,slot:4,name:"rangeY",structure:o},{...e,type:6,isRequired:!1,bitOffset:448,bitSize:64,byteSize:8,slot:5,name:"c0",structure:o},{...e,type:6,isRequired:!1,bitOffset:512,bitSize:64,byteSize:8,slot:6,name:"c1",structure:o},{...e,type:6,isRequired:!1,bitOffset:576,bitSize:64,byteSize:8,slot:7,name:"c2",structure:o},{...e,type:6,isRequired:!1,bitOffset:640,bitSize:64,byteSize:8,slot:8,name:"c3",structure:o},{...e,type:6,isRequired:!1,bitOffset:704,bitSize:64,byteSize:8,slot:9,name:"c4",structure:o},{...e,type:6,isRequired:!1,bitOffset:768,bitSize:64,byteSize:8,slot:10,name:"c5",structure:o},{...e,type:6,isRequired:!1,bitOffset:832,bitSize:64,byteSize:8,slot:11,name:"c6",structure:o},{...e,type:6,isRequired:!1,bitOffset:896,bitSize:64,byteSize:8,slot:12,name:"c7",structure:o},{...e,type:4,isRequired:!1,bitOffset:960,bitSize:32,byteSize:4,slot:13,name:"toleranceInversePower",structure:d},{...e,type:4,isRequired:!1,bitOffset:992,bitSize:32,byteSize:4,slot:14,name:"iterations",structure:d}],methods:[],template:{memory:{array:za}}},slot:29});Object.assign(ve,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(newton-raphson.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:53});Object.assign(xe,{...t,type:7,name:"ErrorSet0000!newton-raphson.KernelOutput(u8,newton-raphson.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:D},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ve}],methods:[],template:null},slot:35});Object.assign(Ee,{...t,type:3,name:"createOutput",length:1,byteSize:176,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:1024,bitSize:32,byteSize:4,slot:0,name:"0",structure:b},{...e,type:3,bitOffset:1056,bitSize:32,byteSize:4,slot:1,name:"1",structure:b},{...e,type:6,bitOffset:1408,bitSize:0,byteSize:0,slot:2,name:"2",structure:K},{...e,type:6,bitOffset:0,bitSize:1024,byteSize:128,slot:3,name:"3",structure:M},{...e,type:6,bitOffset:1088,bitSize:224,byteSize:28,slot:4,name:"retval",structure:xe}],methods:[],template:null},slot:33});Object.assign(Ke,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(newton-raphson.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:54});Object.assign(De,{...t,type:7,name:"ErrorSet0001!newton-raphson.KernelOutput(u8,newton-raphson.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:D},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Ke}],methods:[],template:null},slot:36});Object.assign(Me,{...t,type:3,name:"createPartialOutput",length:1,byteSize:176,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:1024,bitSize:32,byteSize:4,slot:0,name:"0",structure:b},{...e,type:3,bitOffset:1056,bitSize:32,byteSize:4,slot:1,name:"1",structure:b},{...e,type:3,bitOffset:1088,bitSize:32,byteSize:4,slot:2,name:"2",structure:b},{...e,type:3,bitOffset:1120,bitSize:32,byteSize:4,slot:3,name:"3",structure:b},{...e,type:6,bitOffset:1408,bitSize:0,byteSize:0,slot:4,name:"4",structure:K},{...e,type:6,bitOffset:0,bitSize:1024,byteSize:128,slot:5,name:"5",structure:M},{...e,type:6,bitOffset:1152,bitSize:224,byteSize:28,slot:6,name:"retval",structure:De}],methods:[],template:null},slot:34});const Aa=new Uint8Array,Ua={argStruct:Ee,thunk:7,name:"createOutput"},Ra={argStruct:Me,thunk:2,name:"createPartialOutput"};Object.assign(Fe,{...t,type:2,name:"newton-raphson",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Aa}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:Ie},{...e,type:7,isRequired:!1,name:"Input",structure:K},{...e,type:7,isRequired:!1,name:"Output",structure:D},{...e,type:7,isRequired:!1,name:"Parameters",structure:M}],methods:[Ua,Ra],template:null},slot:0});const qa=[w,ue,oe,B,me,ye,L,f,g,le,ce,X,d,o,s,r,k,q,be,Y,pe,G,fe,H,z,v,O,j,h,de,J,Se,N,he,Q,x,P,E,V,ge,W,I,R,c,n,we,Z,ze,ee,Ae,te,Ue,re,Re,se,qe,ae,Ie,K,Oe,je,Pe,b,ke,ne,ie,D,M,ve,xe,Ee,Ke,De,Me,Fe],Oa=ot(qa),ja=Fe.constructor,Pa=(async()=>{const m=new URL("newton-raphson-db87b29a.wasm",import.meta.url).href;return fetch(m)})();mt(Pa,{...Oa,writeBack:!0});const{createOutput:Ka,createPartialOutput:Va,kernel:Ce,Input:Ca,Output:Da,Parameters:Ma}=ja;function Ia(m,l,i,a,u={},A={}){if(Array.isArray(u)){const S=u;u={};for(const[p,U]of Object.keys(Ce.inputImages).entries())u[U]=S[p]}const F=new Ca(void 0),T=Object.keys(Ce.inputImages),y=[];let C;for(const S of T){let p=u[S];if(p||(T.length===1&&["data","width","height"].every(U=>!!u[U])?p=u:y.push(S)),F[S]=p,C){if(p.colorSpace!==C)throw new Error(`Input images must all use the same color space: ${C}`)}else C=p.colorSpace}if(y.length>0)throw new Error(`Missing input image${y.length>1?"s":""}: ${y.join(", ")}`);const Ve=Va(m,l,i,a,F,A),Te=S=>{const p=Object.keys(S),U={};for(const _e of p){const{data:{typedArray:_},width:$e,height:Le}=S[_e];let $;if(typeof ImageData=="function"){const Xe=new Uint8ClampedArray(_.buffer,_.byteOffset,_.byteLength);$=new ImageData(Xe,$e,a,{colorSpace:C})}else $={data:_,width:$e,height:Le};if(p.length===1)return $;U[_e]=$}return U};return Ve[Symbol.toStringTag]==="Promise"?Ve.then(Te):Te(Ve)}function ka(){const m={};for(let[l,i]of Object.entries(Ce)){if(l==="parameters"){const a={};for(const[u,A]of Object.entries(i)){const F=a[u]={};for(let[T,y]of Object.entries(A))typeof y=="object"?"string"in y?y=y.string:y=Be(y):typeof y=="function"&&(y=va(y.name)),F[T]=y}i=a}else typeof i=="object"&&("string"in i?i=i.string:i=i.valueOf());m[l]=i}return m}function Be(m){const l=[];for(let[i,a]of Object.entries(m))typeof a=="object"&&(a=Be(a)),l[i]=a;return l}function va(m){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[m]}onmessage=m=>{const[l,i,...a]=m.data;xa(l,a).then(([u,A])=>{postMessage([l,i,u],{transfer:A})}).catch(u=>{postMessage(["error",i,u])})};async function xa(m,l){switch(m){case"getKernelInfo":return[ka(...l)];case"createPartialImageData":const a=await Ia(...l),u=[];if("data"in a&&"width"in a&&"height"in a)u.push(a.data.buffer);else for(const A of Object.entries(a))u.push(a.data.buffer);return[a,u];default:throw new Error(`Unknown function: ${m}`)}}
