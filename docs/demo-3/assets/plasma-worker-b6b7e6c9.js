import{u as Qe,a as We,b as Xe,c as Ye,d as Ze,e as et,f as tt,g as rt,h as st,i as at,j as nt,k as it,l as ut,m as ot,n as mt,o as lt,p as yt,q as ct}from"./index-b8a86fe8.js";Qe();We();Xe();Ye();Ze();et();tt();rt();st();at();nt();it();ut();ot();mt();lt();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},g={},re={},se={},I={},ae={},ne={},v={},p={},d={},ie={},ue={},x={},S={},c={},s={},r={},h={},b={},O={},A={},oe={},E={},me={},K={},le={},D={},ye={},_={},ce={},M={},be={},F={},pe={},T={},fe={},$={},de={},Se={},B={},ge={},L={},he={},G={},ze={},H={},we={},J={},Ae={},N={},Ue={},Q={},Oe={},W={},Re={},X={},qe={},Y={},je={},Z={},ve={},R={},Pe={},Ve={},Ce={},l={},xe={},ee={},Ee={},te={},q={},j={},Ke={},De={},_e={},Me={},Fe={},Te={},$e={};Object.assign(g,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:5});Object.assign(re,{...t,type:1,name:"[18:0]u8",length:18,byteSize:19,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:4});Object.assign(se,{...t,type:11,name:"*const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:3});Object.assign(I,{...t,type:11,name:"*const *const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:2});Object.assign(ae,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:8});Object.assign(ne,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:7});Object.assign(v,{...t,type:11,name:"*const *const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:6});Object.assign(p,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:10});Object.assign(d,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:9});Object.assign(ie,{...t,type:1,name:"[22:0]u8",length:22,byteSize:23,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:13});Object.assign(ue,{...t,type:11,name:"*const [22:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:12});Object.assign(x,{...t,type:11,name:"*const *const [22:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:11});Object.assign(S,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:31});Object.assign(c,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:30});Object.assign(s,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:s}],methods:[],template:null},slot:63});Object.assign(r,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:s}],methods:[],template:null},slot:62});const bt=new Uint8Array,pt=new Uint8Array([144,246,15,0]),ft=new Uint8Array([0,0,0,0,0,0,0,0]),dt=new Uint8Array([184,246,15,0]),St=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(h,{...t,type:2,name:"Struct0031",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:bt},slots:{0:{structure:r,memory:{array:pt},slots:{0:{structure:s,memory:{array:ft}}}},1:{structure:r,memory:{array:dt},slots:{0:{structure:s,memory:{array:St}}}}}}},slot:55});Object.assign(b,{...t,type:11,name:"Struct0020",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:h}],methods:[],template:null},slot:54});const gt=new Uint8Array,ht=new Uint8Array([144,246,15,0]),zt=new Uint8Array([0,0,0,0,0,0,144,64]),wt=new Uint8Array([184,246,15,0]),At=new Uint8Array([0,0,0,0,0,0,144,64]);Object.assign(O,{...t,type:2,name:"Struct0032",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:gt},slots:{0:{structure:r,memory:{array:ht},slots:{0:{structure:s,memory:{array:zt}}}},1:{structure:r,memory:{array:wt},slots:{0:{structure:s,memory:{array:At}}}}}}},slot:57});Object.assign(A,{...t,type:11,name:"Struct0021",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:O}],methods:[],template:null},slot:56});const Ut=new Uint8Array,Ot=new Uint8Array([96,250,15,0]),Rt=new Uint8Array([0,0,0,0,0,0,144,64]),qt=new Uint8Array([128,250,15,0]),jt=new Uint8Array([0,0,0,0,0,0,128,64]);Object.assign(oe,{...t,type:2,name:"Struct0033",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:Ut},slots:{0:{structure:r,memory:{array:Ot},slots:{0:{structure:s,memory:{array:Rt}}}},1:{structure:r,memory:{array:qt},slots:{0:{structure:s,memory:{array:jt}}}}}}},slot:59});Object.assign(E,{...t,type:11,name:"Struct0022",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:58});const Pt=new Uint8Array,Vt=new Uint8Array([170,170,170,170]),Ct=new Uint8Array,kt=new Uint8Array([170,170,170,170]),It=new Uint8Array,vt=new Uint8Array([170,170,170,170]),xt=new Uint8Array;Object.assign(me,{...t,type:2,name:"Struct0013",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:A},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:E}],methods:[],template:{memory:{array:Pt},slots:{0:{structure:b,memory:{array:Vt},slots:{0:{structure:h,memory:{array:Ct}}}},1:{structure:A,memory:{array:kt},slots:{0:{structure:O,memory:{array:It}}}},2:{structure:E,memory:{array:vt},slots:{0:{structure:oe,memory:{array:xt}}}}}}},slot:38});Object.assign(K,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:37});const Et=new Uint8Array,Kt=new Uint8Array([96,250,15,0]),Dt=new Uint8Array([0,0,0,0,0,0,128,64]),_t=new Uint8Array([128,250,15,0]),Mt=new Uint8Array([0,0,0,0,0,0,112,64]);Object.assign(le,{...t,type:2,name:"Struct0034",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:Et},slots:{0:{structure:r,memory:{array:Kt},slots:{0:{structure:s,memory:{array:Dt}}}},1:{structure:r,memory:{array:_t},slots:{0:{structure:s,memory:{array:Mt}}}}}}},slot:61});Object.assign(D,{...t,type:11,name:"Struct0023",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:60});const Ft=new Uint8Array,Tt=new Uint8Array([170,170,170,170]),$t=new Uint8Array,Bt=new Uint8Array([170,170,170,170]),Lt=new Uint8Array,Gt=new Uint8Array([170,170,170,170]),Ht=new Uint8Array;Object.assign(ye,{...t,type:2,name:"Struct0014",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:A},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:D}],methods:[],template:{memory:{array:Ft},slots:{0:{structure:b,memory:{array:Tt},slots:{0:{structure:h,memory:{array:$t}}}},1:{structure:A,memory:{array:Bt},slots:{0:{structure:O,memory:{array:Lt}}}},2:{structure:D,memory:{array:Gt},slots:{0:{structure:le,memory:{array:Ht}}}}}}},slot:40});Object.assign(_,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:39});const Jt=new Uint8Array,Nt=new Uint8Array([120,250,15,0]),Qt=new Uint8Array([0,0,0,0,0,0,0,0]),Wt=new Uint8Array([16,248,15,0]),Xt=new Uint8Array([154,153,153,153,153,153,185,63]),Yt=new Uint8Array([184,249,15,0]),Zt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(ce,{...t,type:2,name:"Struct0015",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:Jt},slots:{0:{structure:r,memory:{array:Nt},slots:{0:{structure:s,memory:{array:Qt}}}},1:{structure:r,memory:{array:Wt},slots:{0:{structure:s,memory:{array:Xt}}}},2:{structure:r,memory:{array:Yt},slots:{0:{structure:s,memory:{array:Zt}}}}}}},slot:42});Object.assign(M,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:41});const er=new Uint8Array,tr=new Uint8Array([96,250,15,0]),rr=new Uint8Array([0,0,0,0,0,0,89,192]),sr=new Uint8Array([128,250,15,0]),ar=new Uint8Array([0,0,0,0,0,0,89,192]);Object.assign(be,{...t,type:2,name:"Struct0035",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:er},slots:{0:{structure:r,memory:{array:tr},slots:{0:{structure:s,memory:{array:rr}}}},1:{structure:r,memory:{array:sr},slots:{0:{structure:s,memory:{array:ar}}}}}}},slot:65});Object.assign(F,{...t,type:11,name:"Struct0024",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:64});const nr=new Uint8Array,ir=new Uint8Array([96,250,15,0]),ur=new Uint8Array([0,0,0,0,0,0,89,64]),or=new Uint8Array([128,250,15,0]),mr=new Uint8Array([0,0,0,0,0,0,89,64]);Object.assign(pe,{...t,type:2,name:"Struct0036",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:nr},slots:{0:{structure:r,memory:{array:ir},slots:{0:{structure:s,memory:{array:ur}}}},1:{structure:r,memory:{array:or},slots:{0:{structure:s,memory:{array:mr}}}}}}},slot:67});Object.assign(T,{...t,type:11,name:"Struct0025",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pe}],methods:[],template:null},slot:66});const lr=new Uint8Array,yr=new Uint8Array([170,170,170,170]),cr=new Uint8Array,br=new Uint8Array([170,170,170,170]),pr=new Uint8Array,fr=new Uint8Array([170,170,170,170]),dr=new Uint8Array;Object.assign(fe,{...t,type:2,name:"Struct0016",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:F},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:T},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:b}],methods:[],template:{memory:{array:lr},slots:{0:{structure:F,memory:{array:yr},slots:{0:{structure:be,memory:{array:cr}}}},1:{structure:T,memory:{array:br},slots:{0:{structure:pe,memory:{array:pr}}}},2:{structure:b,memory:{array:fr},slots:{0:{structure:h,memory:{array:dr}}}}}}},slot:44});Object.assign($,{...t,type:11,name:"Struct0009",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:43});Object.assign(de,{...t,type:13,name:"@Vector(3, f32)",length:3,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:32});const Sr=new Uint8Array,gr=new Uint8Array([248,249,15,0]),hr=new Uint8Array([0,0,0,0,0,0,20,192]),zr=new Uint8Array([88,250,15,0]),wr=new Uint8Array([0,0,0,0,0,0,20,192]),Ar=new Uint8Array([120,250,15,0]),Ur=new Uint8Array([0,0,0,0,0,0,20,192]);Object.assign(Se,{...t,type:2,name:"Struct0037",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:r}],methods:[],template:{memory:{array:Sr},slots:{0:{structure:r,memory:{array:gr},slots:{0:{structure:s,memory:{array:hr}}}},1:{structure:r,memory:{array:zr},slots:{0:{structure:s,memory:{array:wr}}}},2:{structure:r,memory:{array:Ar},slots:{0:{structure:s,memory:{array:Ur}}}}}}},slot:69});Object.assign(B,{...t,type:11,name:"Struct0026",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Se}],methods:[],template:null},slot:68});const Or=new Uint8Array,Rr=new Uint8Array([248,249,15,0]),qr=new Uint8Array([0,0,0,0,0,0,20,64]),jr=new Uint8Array([88,250,15,0]),Pr=new Uint8Array([0,0,0,0,0,0,20,64]),Vr=new Uint8Array([120,250,15,0]),Cr=new Uint8Array([0,0,0,0,0,0,20,64]);Object.assign(ge,{...t,type:2,name:"Struct0038",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:r}],methods:[],template:{memory:{array:Or},slots:{0:{structure:r,memory:{array:Rr},slots:{0:{structure:s,memory:{array:qr}}}},1:{structure:r,memory:{array:jr},slots:{0:{structure:s,memory:{array:Pr}}}},2:{structure:r,memory:{array:Vr},slots:{0:{structure:s,memory:{array:Cr}}}}}}},slot:71});Object.assign(L,{...t,type:11,name:"Struct0027",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ge}],methods:[],template:null},slot:70});const kr=new Uint8Array,Ir=new Uint8Array([248,249,15,0]),vr=new Uint8Array([0,0,0,0,0,0,0,0]),xr=new Uint8Array([88,250,15,0]),Er=new Uint8Array([0,0,0,0,0,0,0,0]),Kr=new Uint8Array([120,250,15,0]),Dr=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(he,{...t,type:2,name:"Struct0039",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:r}],methods:[],template:{memory:{array:kr},slots:{0:{structure:r,memory:{array:Ir},slots:{0:{structure:s,memory:{array:vr}}}},1:{structure:r,memory:{array:xr},slots:{0:{structure:s,memory:{array:Er}}}},2:{structure:r,memory:{array:Kr},slots:{0:{structure:s,memory:{array:Dr}}}}}}},slot:73});Object.assign(G,{...t,type:11,name:"Struct0028",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:he}],methods:[],template:null},slot:72});const _r=new Uint8Array,Mr=new Uint8Array([170,170,170,170]),Fr=new Uint8Array,Tr=new Uint8Array([170,170,170,170]),$r=new Uint8Array,Br=new Uint8Array([170,170,170,170]),Lr=new Uint8Array;Object.assign(ze,{...t,type:2,name:"Struct0017",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:de},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:B},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:L},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:G}],methods:[],template:{memory:{array:_r},slots:{0:{structure:B,memory:{array:Mr},slots:{0:{structure:Se,memory:{array:Fr}}}},1:{structure:L,memory:{array:Tr},slots:{0:{structure:ge,memory:{array:$r}}}},2:{structure:G,memory:{array:Br},slots:{0:{structure:he,memory:{array:Lr}}}}}}},slot:46});Object.assign(H,{...t,type:11,name:"Struct0010",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ze}],methods:[],template:null},slot:45});const Gr=new Uint8Array,Hr=new Uint8Array([96,250,15,0]),Jr=new Uint8Array([154,153,153,153,153,153,185,63]),Nr=new Uint8Array([128,250,15,0]),Qr=new Uint8Array([154,153,153,153,153,153,185,63]);Object.assign(we,{...t,type:2,name:"Struct0040",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:Gr},slots:{0:{structure:r,memory:{array:Hr},slots:{0:{structure:s,memory:{array:Jr}}}},1:{structure:r,memory:{array:Nr},slots:{0:{structure:s,memory:{array:Qr}}}}}}},slot:75});Object.assign(J,{...t,type:11,name:"Struct0029",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:we}],methods:[],template:null},slot:74});const Wr=new Uint8Array,Xr=new Uint8Array([96,250,15,0]),Yr=new Uint8Array([154,153,153,153,153,153,169,63]),Zr=new Uint8Array([128,250,15,0]),es=new Uint8Array([154,153,153,153,153,153,169,63]);Object.assign(Ae,{...t,type:2,name:"Struct0041",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:Wr},slots:{0:{structure:r,memory:{array:Xr},slots:{0:{structure:s,memory:{array:Yr}}}},1:{structure:r,memory:{array:Zr},slots:{0:{structure:s,memory:{array:es}}}}}}},slot:77});Object.assign(N,{...t,type:11,name:"Struct0030",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ae}],methods:[],template:null},slot:76});const ts=new Uint8Array,rs=new Uint8Array([170,170,170,170]),ss=new Uint8Array,as=new Uint8Array([170,170,170,170]),ns=new Uint8Array,is=new Uint8Array([170,170,170,170]),us=new Uint8Array;Object.assign(Ue,{...t,type:2,name:"Struct0018",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:J},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:N}],methods:[],template:{memory:{array:ts},slots:{0:{structure:b,memory:{array:rs},slots:{0:{structure:h,memory:{array:ss}}}},1:{structure:J,memory:{array:as},slots:{0:{structure:we,memory:{array:ns}}}},2:{structure:N,memory:{array:is},slots:{0:{structure:Ae,memory:{array:us}}}}}}},slot:48});Object.assign(Q,{...t,type:11,name:"Struct0011",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ue}],methods:[],template:null},slot:47});const os=new Uint8Array,ms=new Uint8Array([170,170,170,170]),ls=new Uint8Array,ys=new Uint8Array([170,170,170,170]),cs=new Uint8Array,bs=new Uint8Array([170,170,170,170]),ps=new Uint8Array,fs=new Uint8Array([170,170,170,170]),ds=new Uint8Array,Ss=new Uint8Array([170,170,170,170]),gs=new Uint8Array,hs=new Uint8Array([170,170,170,170]),zs=new Uint8Array;Object.assign(Oe,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"size",structure:K},{...e,type:8,isRequired:!1,slot:1,name:"center",structure:_},{...e,type:8,isRequired:!1,slot:2,name:"distort",structure:M},{...e,type:8,isRequired:!1,slot:3,name:"offset",structure:$},{...e,type:8,isRequired:!1,slot:4,name:"color_offset",structure:H},{...e,type:8,isRequired:!1,slot:5,name:"wave",structure:Q}],methods:[],template:{memory:{array:os},slots:{0:{structure:K,memory:{array:ms},slots:{0:{structure:me,memory:{array:ls}}}},1:{structure:_,memory:{array:ys},slots:{0:{structure:ye,memory:{array:cs}}}},2:{structure:M,memory:{array:bs},slots:{0:{structure:ce,memory:{array:ps}}}},3:{structure:$,memory:{array:fs},slots:{0:{structure:fe,memory:{array:ds}}}},4:{structure:H,memory:{array:Ss},slots:{0:{structure:ze,memory:{array:gs}}}},5:{structure:Q,memory:{array:hs},slots:{0:{structure:Ue,memory:{array:zs}}}}}}},slot:15});Object.assign(W,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Oe}],methods:[],template:null},slot:14});const ws=new Uint8Array;Object.assign(Re,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ws}}},slot:17});Object.assign(X,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Re}],methods:[],template:null},slot:16});const As=new Uint8Array,Us=new Uint8Array([160,253,15,0]),Os=new Uint8Array([4,0,0,0]);Object.assign(qe,{...t,type:2,name:"Struct0019",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:As},slots:{0:{structure:d,memory:{array:Us},slots:{0:{structure:p,memory:{array:Os}}}}}}},slot:50});Object.assign(Y,{...t,type:11,name:"Struct0012",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:qe}],methods:[],template:null},slot:49});const Rs=new Uint8Array,qs=new Uint8Array([170,170,170,170]),js=new Uint8Array;Object.assign(je,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:Y}],methods:[],template:{memory:{array:Rs},slots:{0:{structure:Y,memory:{array:qs},slots:{0:{structure:qe,memory:{array:js}}}}}}},slot:19});Object.assign(Z,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:je}],methods:[],template:null},slot:18});const Ps=new Uint8Array,Vs=new Uint8Array,Cs=new Uint8Array([248,36,16,0]),ks=new Uint8Array([179,36,16,0]),Is=new Uint8Array([99,111,109,46,109,114,100,111,111,98,46,115,104,97,100,101,114,115,0]),vs=new Uint8Array([244,36,16,0]),xs=new Uint8Array([160,36,16,0]),Es=new Uint8Array([77,114,46,100,111,111,98,0]),Ks=new Uint8Array([240,36,16,0]),Ds=new Uint8Array([1,0,0,0]),_s=new Uint8Array([236,36,16,0]),Ms=new Uint8Array([120,36,16,0]),Fs=new Uint8Array([71,111,111,100,32,111,108,100,32,112,108,97,115,109,97,32,101,102,102,101,99,116,0]),Ts=new Uint8Array([170,170,170,170]),$s=new Uint8Array,Bs=new Uint8Array([170,170,170,170]),Ls=new Uint8Array,Gs=new Uint8Array([170,170,170,170]),Hs=new Uint8Array;Object.assign(ve,{...t,type:2,name:"plasma.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ps}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:I},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:v},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:d},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:x},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:W},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:X},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:Z}],methods:[],template:{memory:{array:Vs},slots:{0:{structure:I,memory:{array:Cs},slots:{0:{structure:se,memory:{array:ks},slots:{0:{structure:re,memory:{array:Is}}}}}},1:{structure:v,memory:{array:vs},slots:{0:{structure:ne,memory:{array:xs},slots:{0:{structure:ae,memory:{array:Es}}}}}},2:{structure:d,memory:{array:Ks},slots:{0:{structure:p,memory:{array:Ds}}}},3:{structure:x,memory:{array:_s},slots:{0:{structure:ue,memory:{array:Ms},slots:{0:{structure:ie,memory:{array:Fs}}}}}},4:{structure:W,memory:{array:Ts},slots:{0:{structure:Oe,memory:{array:$s}}}},5:{structure:X,memory:{array:Bs},slots:{0:{structure:Re,memory:{array:Ls}}}},6:{structure:Z,memory:{array:Gs},slots:{0:{structure:je,memory:{array:Hs}}}}}}},slot:1});const Js=new Uint8Array;Object.assign(R,{...t,type:2,name:"plasma.KernelInput(u8,plasma.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Js}}},slot:20});Object.assign(Pe,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:25});Object.assign(Ve,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:Pe}],methods:[],template:null},slot:24});Object.assign(Ce,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Ve}],methods:[],template:null},slot:23});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:26});const Ns=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(xe,{...t,type:9,name:"plasma.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:p},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:p}],methods:[],template:{memory:{array:Ns}}},slot:27});Object.assign(ee,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:ee}],methods:[],template:null},slot:28});Object.assign(Ee,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:51});const Qs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ws=new Uint8Array,Xs=new Uint8Array([64,36,16,0]),Ys=new Uint8Array([4,0,0,0]);Object.assign(te,{...t,type:2,name:"plasma.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Ce},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:xe},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:ee}],methods:[],template:{memory:{array:Qs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:Pe},{...e,type:7,isRequired:!1,name:"FPixel",structure:Ee},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Ws},slots:{0:{structure:d,memory:{array:Xs},slots:{0:{structure:p,memory:{array:Ys}}}}}}},slot:22});const Zs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ea=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ta=new Uint8Array([0,0,0,0,0,0,0,0]),ra=new Uint8Array;Object.assign(q,{...t,type:2,name:"plasma.KernelOutput(u8,plasma.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:te}],methods:[],template:{memory:{array:Zs},slots:{0:{structure:te,memory:{array:ea},slots:{0:{structure:Ce,memory:{array:ta},address:1047560,slots:{0:{structure:Ve,memory:{array:ra},address:0}}}}}}}},slot:21});const sa=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,68,0,0,0,68,0,0,0,68,0,0,128,67,0,0,0,0,0,0,0,0,205,204,76,61,205,204,76,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);Object.assign(j,{...t,type:2,name:"plasma.KernelParameters(plasma.kernel)",length:1,byteSize:64,align:4,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:128,bitSize:64,byteSize:8,slot:0,name:"size",structure:c},{...e,type:6,isRequired:!1,bitOffset:192,bitSize:64,byteSize:8,slot:1,name:"center",structure:c},{...e,type:4,isRequired:!1,bitOffset:384,bitSize:32,byteSize:4,slot:2,name:"distort",structure:S},{...e,type:6,isRequired:!1,bitOffset:256,bitSize:64,byteSize:8,slot:3,name:"offset",structure:c},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:96,byteSize:16,slot:4,name:"color_offset",structure:de},{...e,type:6,isRequired:!1,bitOffset:320,bitSize:64,byteSize:8,slot:5,name:"wave",structure:c}],methods:[],template:{memory:{array:sa}}},slot:29});Object.assign(Ke,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(plasma.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:52});Object.assign(De,{...t,type:7,name:"ErrorSet0000!plasma.KernelOutput(u8,plasma.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:q},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Ke}],methods:[],template:null},slot:35});Object.assign(_e,{...t,type:3,name:"createOutput",length:1,byteSize:112,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:512,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:544,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:896,bitSize:0,byteSize:0,slot:2,name:"2",structure:R},{...e,type:6,bitOffset:0,bitSize:512,byteSize:64,slot:3,name:"3",structure:j},{...e,type:6,bitOffset:576,bitSize:224,byteSize:28,slot:4,name:"retval",structure:De}],methods:[],template:null},slot:33});Object.assign(Me,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(plasma.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:53});Object.assign(Fe,{...t,type:7,name:"ErrorSet0001!plasma.KernelOutput(u8,plasma.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:q},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Me}],methods:[],template:null},slot:36});Object.assign(Te,{...t,type:3,name:"createPartialOutput",length:1,byteSize:112,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:512,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:544,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:576,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:608,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:896,bitSize:0,byteSize:0,slot:4,name:"4",structure:R},{...e,type:6,bitOffset:0,bitSize:512,byteSize:64,slot:5,name:"5",structure:j},{...e,type:6,bitOffset:640,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Fe}],methods:[],template:null},slot:34});const aa=new Uint8Array,na={argStruct:_e,thunk:8,name:"createOutput"},ia={argStruct:Te,thunk:2,name:"createPartialOutput"};Object.assign($e,{...t,type:2,name:"plasma",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:aa}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ve},{...e,type:7,isRequired:!1,name:"Input",structure:R},{...e,type:7,isRequired:!1,name:"Output",structure:q},{...e,type:7,isRequired:!1,name:"Parameters",structure:j}],methods:[na,ia],template:null},slot:0});const ua=[g,re,se,I,ae,ne,v,p,d,ie,ue,x,S,c,s,r,h,b,O,A,oe,E,me,K,le,D,ye,_,ce,M,be,F,pe,T,fe,$,de,Se,B,ge,L,he,G,ze,H,we,J,Ae,N,Ue,Q,Oe,W,Re,X,qe,Y,je,Z,ve,R,Pe,Ve,Ce,l,xe,ee,Ee,te,q,j,Ke,De,_e,Me,Fe,Te,$e],oa=yt(ua),ma=$e.constructor,la=(async()=>{const u=new URL("plasma-6be897b9.wasm",import.meta.url).href;return fetch(u)})();ct(la,{...oa,writeBack:!0});const{createOutput:ga,createPartialOutput:ya,kernel:Ie,Input:ca,Output:ha,Parameters:za}=ma;function ba(u,m,n,a,i={},z={}){if(Array.isArray(i)){const f=i;i={};for(const[y,w]of Object.keys(Ie.inputImages).entries())i[w]=f[y]}const P=new ca(void 0),V=Object.keys(Ie.inputImages),o=[];let U;for(const f of V){let y=i[f];if(y||(V.length===1&&["data","width","height"].every(w=>!!i[w])?y=i:o.push(f)),P[f]=y,U){if(y.colorSpace!==U)throw new Error(`Input images must all use the same color space: ${U}`)}else U=y.colorSpace}if(o.length>0)throw new Error(`Missing input image${o.length>1?"s":""}: ${o.join(", ")}`);const ke=ya(u,m,n,a,P,z),Be=f=>{const y=Object.keys(f),w={};for(const Le of y){const{data:{typedArray:C},width:Ge,height:Je}=f[Le];let k;if(typeof ImageData=="function"){const Ne=new Uint8ClampedArray(C.buffer,C.byteOffset,C.byteLength);k=new ImageData(Ne,Ge,a,{colorSpace:U})}else k={data:C,width:Ge,height:Je};if(y.length===1)return k;w[Le]=k}return w};return ke[Symbol.toStringTag]==="Promise"?ke.then(Be):Be(ke)}function pa(){const u={};for(let[m,n]of Object.entries(Ie)){if(m==="parameters"){const a={};for(const[i,z]of Object.entries(n)){const P=a[i]={};for(let[V,o]of Object.entries(z))typeof o=="object"?"string"in o?o=o.string:o=He(o):typeof o=="function"&&(o=fa(o.name)),P[V]=o}n=a}else typeof n=="object"&&("string"in n?n=n.string:n=n.valueOf());u[m]=n}return u}function He(u){const m=[];for(let[n,a]of Object.entries(u))typeof a=="object"&&(a=He(a)),m[n]=a;return m}function fa(u){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[u]}onmessage=u=>{const[m,n,...a]=u.data;da(m,a).then(([i,z])=>{postMessage([m,n,i],{transfer:z})}).catch(i=>{postMessage(["error",n,i])})};async function da(u,m){switch(u){case"getKernelInfo":return[pa(...m)];case"createPartialImageData":const a=await ba(...m),i=[];if("data"in a&&"width"in a&&"height"in a)i.push(a.data.buffer);else for(const z of Object.entries(a))i.push(a.data.buffer);return[a,i];default:throw new Error(`Unknown function: ${u}`)}}
