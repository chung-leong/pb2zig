import{u as De,a as Ee,b as Ke,c as Te,d as Fe,e as Me,f as Ye,g as $e,h as Be,i as Le,j as Ge,k as He,l as Je,o as Ne,n as Qe,m as We,p as Xe,q as Ze,r as et}from"./index-467e5205.js";De();Ee();Ke();Te();Fe();Me();Ye();$e();Be();Le();Ge();He();Je();Ne();Qe();We();Xe();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},d={},N={},Q={},x={},W={},X={},I={},f={},z={},Z={},ee={},k={},c={},r={},s={},_={},S={},w={},te={},C={},se={},v={},re={},D={},ae={},E={},me={},K={},ie={},T={},oe={},F={},ne={},M={},ue={},Y={},$={},le={},B={},ce={},L={},Se={},V={},ye={},pe={},fe={},y={},ze={},G={},H={},J={},R={},q={},Oe={},_e={},we={},Ve={},Re={},qe={},Ae={};Object.assign(d,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:5});Object.assign(N,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:4});Object.assign(Q,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:3});Object.assign(x,{...t,type:11,name:"**const [14:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:2});Object.assign(W,{...t,type:1,name:"[11:0]u8",length:11,byteSize:12,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:8});Object.assign(X,{...t,type:11,name:"*const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:7});Object.assign(I,{...t,type:11,name:"**const [11:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:6});Object.assign(f,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:10});Object.assign(z,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:f}],methods:[],template:null},slot:9});Object.assign(Z,{...t,type:1,name:"[32:0]u8",length:32,byteSize:33,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:13});Object.assign(ee,{...t,type:11,name:"*const [32:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:12});Object.assign(k,{...t,type:11,name:"**const [32:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:11});Object.assign(c,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:31});Object.assign(r,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:r}],methods:[],template:null},slot:52});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:r}],methods:[],template:null},slot:51});const tt=new Uint8Array([]),st=new Uint8Array([176,30,16,0]),rt=new Uint8Array([0,0,0,0,0,0,128,64]);Object.assign(_,{...t,type:2,name:"struct{comptime type: type = f32, comptime defaultValue: comptime_float = 512}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:tt},slots:{0:{structure:s,memory:{array:st},slots:{0:{structure:r,memory:{array:rt},address:1056432}}}}}},slot:38});Object.assign(S,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime defaultValue: comptime_float = 512}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_}],methods:[],template:null},slot:37});Object.assign(w,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:32});const at=new Uint8Array([]),mt=new Uint8Array([120,30,16,0]),de=new Uint8Array([0,0,0,0,0,0,240,191]),it=new Uint8Array([120,30,16,0]),ot=new Uint8Array([112,30,16,0]),nt=new Uint8Array([0,0,0,0,0,0,0,192]),ut=new Uint8Array([104,30,16,0]),lt=new Uint8Array([0,0,0,0,0,0,224,191]);Object.assign(te,{...t,type:2,name:"struct{comptime comptime_float = -1, comptime comptime_float = -1, comptime comptime_float = -2, comptime comptime_float = -0.5}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:s}],methods:[],template:{memory:{array:at},slots:{0:{structure:s,memory:{array:mt},slots:{0:{structure:r,memory:{array:de},address:1056376}}},1:{structure:s,memory:{array:it},slots:{0:{structure:r,memory:{array:de},address:1056376}}},2:{structure:s,memory:{array:ot},slots:{0:{structure:r,memory:{array:nt},address:1056368}}},3:{structure:s,memory:{array:ut},slots:{0:{structure:r,memory:{array:lt},address:1056360}}}}}},slot:54});Object.assign(C,{...t,type:11,name:"*const struct{comptime comptime_float = -1, comptime comptime_float = -1, comptime comptime_float = -2, comptime comptime_float = -0.5}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:53});const ct=new Uint8Array([]),yt=new Uint8Array([96,30,16,0]),he=new Uint8Array([0,0,0,0,0,0,240,63]),pt=new Uint8Array([96,30,16,0]),ft=new Uint8Array([88,30,16,0]),bt=new Uint8Array([0,0,0,0,0,0,0,64]),dt=new Uint8Array([80,30,16,0]),ht=new Uint8Array([0,0,0,0,0,0,224,63]);Object.assign(se,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 2, comptime comptime_float = 0.5}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:s}],methods:[],template:{memory:{array:ct},slots:{0:{structure:s,memory:{array:yt},slots:{0:{structure:r,memory:{array:he},address:1056352}}},1:{structure:s,memory:{array:pt},slots:{0:{structure:r,memory:{array:he},address:1056352}}},2:{structure:s,memory:{array:ft},slots:{0:{structure:r,memory:{array:bt},address:1056344}}},3:{structure:s,memory:{array:dt},slots:{0:{structure:r,memory:{array:ht},address:1056336}}}}}},slot:56});Object.assign(v,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 2, comptime comptime_float = 0.5}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:55});const gt=new Uint8Array([]),St=new Uint8Array([72,30,16,0]),zt=new Uint8Array([154,153,153,153,153,153,217,191]),Ot=new Uint8Array([64,30,16,0]),_t=new Uint8Array([195,245,40,92,143,194,229,191]),wt=new Uint8Array([56,30,16,0]),Vt=new Uint8Array([10,215,163,112,61,10,215,191]),Rt=new Uint8Array([48,30,16,0]),qt=new Uint8Array([123,20,174,71,225,122,164,191]);Object.assign(re,{...t,type:2,name:"struct{comptime comptime_float = -0.4, comptime comptime_float = -0.68, comptime comptime_float = -0.36, comptime comptime_float = -0.04}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:s}],methods:[],template:{memory:{array:gt},slots:{0:{structure:s,memory:{array:St},slots:{0:{structure:r,memory:{array:zt},address:1056328}}},1:{structure:s,memory:{array:Ot},slots:{0:{structure:r,memory:{array:_t},address:1056320}}},2:{structure:s,memory:{array:wt},slots:{0:{structure:r,memory:{array:Vt},address:1056312}}},3:{structure:s,memory:{array:Rt},slots:{0:{structure:r,memory:{array:qt},address:1056304}}}}}},slot:58});Object.assign(D,{...t,type:11,name:"*const struct{comptime comptime_float = -0.4, comptime comptime_float = -0.68, comptime comptime_float = -0.36, comptime comptime_float = -0.04}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:57});const At=new Uint8Array([]),Ut=new Uint8Array([170,170,170,170]),l=new Uint8Array([]),jt=new Uint8Array([170,170,170,170]),Pt=new Uint8Array([170,170,170,170]);Object.assign(ae,{...t,type:2,name:"struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1, comptime comptime_float = -2, comptime comptime_float = -0.5} = .{-1, -1, -2, -0.5}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 2, comptime comptime_float = 0.5} = .{1, 1, 2, 0.5}, comptime defaultValue: struct{comptime comptime_float = -0.4, comptime comptime_float = -0.68, comptime comptime_float = -0.36, comptime comptime_float = -0.04} = .{-0.4, -0.68, -0.36, -0.04}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:w},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:C},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:v},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:D}],methods:[],template:{memory:{array:At},slots:{0:{structure:C,memory:{array:Ut},slots:{0:{structure:te,memory:{array:l},address:-1431655766}}},1:{structure:v,memory:{array:jt},slots:{0:{structure:se,memory:{array:l},address:-1431655766}}},2:{structure:D,memory:{array:Pt},slots:{0:{structure:re,memory:{array:l},address:-1431655766}}}}}},slot:40});Object.assign(E,{...t,type:11,name:"*const struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1, comptime comptime_float = -2, comptime comptime_float = -0.5} = .{-1, -1, -2, -0.5}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 2, comptime comptime_float = 0.5} = .{1, 1, 2, 0.5}, comptime defaultValue: struct{comptime comptime_float = -0.4, comptime comptime_float = -0.68, comptime comptime_float = -0.36, comptime comptime_float = -0.04} = .{-0.4, -0.68, -0.36, -0.04}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:39});const xt=new Uint8Array([]),It=new Uint8Array([120,30,16,0]),kt=new Uint8Array([96,30,16,0]),Ct=new Uint8Array([136,30,16,0]),Ue=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(me,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:xt},slots:{0:{structure:s,memory:{array:It},slots:{0:{structure:r,memory:{array:de},address:1056376}}},1:{structure:s,memory:{array:kt},slots:{0:{structure:r,memory:{array:he},address:1056352}}},2:{structure:s,memory:{array:Ct},slots:{0:{structure:r,memory:{array:Ue},address:1056392}}}}}},slot:42});Object.assign(K,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:41});const vt=new Uint8Array([]),Dt=new Uint8Array([136,30,16,0]),Et=new Uint8Array([168,30,16,0]),Kt=new Uint8Array([0,0,0,0,0,0,36,64]),Tt=new Uint8Array([160,30,16,0]),Ft=new Uint8Array([0,0,0,0,0,0,8,64]);Object.assign(ie,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 3}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:vt},slots:{0:{structure:s,memory:{array:Dt},slots:{0:{structure:r,memory:{array:Ue},address:1056392}}},1:{structure:s,memory:{array:Et},slots:{0:{structure:r,memory:{array:Kt},address:1056424}}},2:{structure:s,memory:{array:Tt},slots:{0:{structure:r,memory:{array:Ft},address:1056416}}}}}},slot:44});Object.assign(T,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 3}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:43});const Mt=new Uint8Array([]),Yt=new Uint8Array([152,30,16,0]),$t=new Uint8Array([0,0,0,0,0,0,20,192]),Bt=new Uint8Array([144,30,16,0]),Lt=new Uint8Array([0,0,0,0,0,0,20,64]),Gt=new Uint8Array([136,30,16,0]);Object.assign(oe,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = -5, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Mt},slots:{0:{structure:s,memory:{array:Yt},slots:{0:{structure:r,memory:{array:$t},address:1056408}}},1:{structure:s,memory:{array:Bt},slots:{0:{structure:r,memory:{array:Lt},address:1056400}}},2:{structure:s,memory:{array:Gt},slots:{0:{structure:r,memory:{array:Ue},address:1056392}}}}}},slot:46});Object.assign(F,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = -5, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:45});const Ht=new Uint8Array([]),Jt=new Uint8Array([170,170,170,170]),Nt=new Uint8Array([170,170,170,170]),Qt=new Uint8Array([170,170,170,170]),Wt=new Uint8Array([170,170,170,170]),Xt=new Uint8Array([170,170,170,170]),Zt=new Uint8Array([170,170,170,170]);Object.assign(ne,{...t,type:2,name:"struct{comptime width: struct{comptime type: type = f32, comptime defaultValue: comptime_float = 512} = .{.type = f32, .defaultValue = 512}, comptime height: struct{comptime type: type = f32, comptime defaultValue: comptime_float = 512} = .{.type = f32, .defaultValue = 512}, comptime c: struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1, comptime comptime_float = -2, comptime comptime_float = -0.5} = .{-1, -1, -2, -0.5}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 2, comptime comptime_float = 0.5} = .{1, 1, 2, 0.5}, comptime defaultValue: struct{comptime comptime_float = -0.4, comptime comptime_float = -0.68, comptime comptime_float = -0.36, comptime comptime_float = -0.04} = .{-0.4, -0.68, -0.36, -0.04}} = .{.type = @Vector(4, f32), .minValue = .{-1, -1, -2, -0.5}, .maxValue = .{1, 1, 2, 0.5}, .defaultValue = .{-0.4, -0.68, -0.36, -0.04}}, comptime w: struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = -1, .maxValue = 1, .defaultValue = 0}, comptime camDistance: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 3} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 3}, comptime rotationY: struct{comptime type: type = f32, comptime minValue: comptime_float = -5, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = -5, .maxValue = 5, .defaultValue = 0}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"width",structure:S},{...e,type:8,isRequired:!1,slot:1,name:"height",structure:S},{...e,type:8,isRequired:!1,slot:2,name:"c",structure:E},{...e,type:8,isRequired:!1,slot:3,name:"w",structure:K},{...e,type:8,isRequired:!1,slot:4,name:"camDistance",structure:T},{...e,type:8,isRequired:!1,slot:5,name:"rotationY",structure:F}],methods:[],template:{memory:{array:Ht},slots:{0:{structure:S,memory:{array:Jt},slots:{0:{structure:_,memory:{array:l},address:-1431655766}}},1:{structure:S,memory:{array:Nt},slots:{0:{structure:_,memory:{array:l},address:-1431655766}}},2:{structure:E,memory:{array:Qt},slots:{0:{structure:ae,memory:{array:l},address:-1431655766}}},3:{structure:K,memory:{array:Wt},slots:{0:{structure:me,memory:{array:l},address:-1431655766}}},4:{structure:T,memory:{array:Xt},slots:{0:{structure:ie,memory:{array:l},address:-1431655766}}},5:{structure:F,memory:{array:Zt},slots:{0:{structure:oe,memory:{array:l},address:-1431655766}}}}}},slot:15});Object.assign(M,{...t,type:11,name:"*struct{comptime width: struct{comptime type: type = f32, comptime defaultValue: comptime_float = 512} = .{.type = f32, .defaultValue = 512}, comptime height: struct{comptime type: type = f32, comptime defaultValue: comptime_float = 512} = .{.type = f32, .defaultValue = 512}, comptime c: struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1, comptime comptime_float = -2, comptime comptime_float = -0.5} = .{-1, -1, -2, -0.5}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 2, comptime comptime_float = 0.5} = .{1, 1, 2, 0.5}, comptime defaultValue: struct{comptime comptime_float = -0.4, comptime comptime_float = -0.68, comptime comptime_float = -0.36, comptime comptime_float = -0.04} = .{-0.4, -0.68, -0.36, -0.04}} = .{.type = @Vector(4, f32), .minValue = .{-1, -1, -2, -0.5}, .maxValue = .{1, 1, 2, 0.5}, .defaultValue = .{-0.4, -0.68, -0.36, -0.04}}, comptime w: struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = -1, .maxValue = 1, .defaultValue = 0}, comptime camDistance: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 3} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 3}, comptime rotationY: struct{comptime type: type = f32, comptime minValue: comptime_float = -5, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = -5, .maxValue = 5, .defaultValue = 0}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:14});const es=new Uint8Array([]);Object.assign(ue,{...t,type:2,name:"@TypeOf(.{})",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:es}}},slot:17});Object.assign(Y,{...t,type:11,name:"*@TypeOf(.{})",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:16});Object.assign($,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:f}],methods:[],template:null},slot:59});const ts=new Uint8Array([]),ss=new Uint8Array([128,30,16,0]),rs=new Uint8Array([4,0,0,0]);Object.assign(le,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:$}],methods:[],template:{memory:{array:ts},slots:{0:{structure:$,memory:{array:ss},slots:{0:{structure:f,memory:{array:rs},address:1056384}}}}}},slot:48});Object.assign(B,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:47});const as=new Uint8Array([]),ms=new Uint8Array([170,170,170,170]);Object.assign(ce,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:B}],methods:[],template:{memory:{array:as},slots:{0:{structure:B,memory:{array:ms},slots:{0:{structure:le,memory:{array:l},address:-1431655766}}}}}},slot:19});Object.assign(L,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:18});const is=new Uint8Array([]),os=new Uint8Array([]),ns=new Uint8Array([124,250,15,0]),us=new Uint8Array([63,63,16,0]),ls=new Uint8Array([100,101,114,115,99,104,109,97,108,101,46,99,111,109,0]),cs=new Uint8Array([188,250,15,0]),ys=new Uint8Array([51,63,16,0]),ps=new Uint8Array([68,101,114,32,83,99,104,109,97,108,101,0]),fs=new Uint8Array([252,250,15,0]),bs=new Uint8Array([1,0,0,0]),ds=new Uint8Array([84,251,15,0]),hs=new Uint8Array([18,63,16,0]),gs=new Uint8Array([82,97,121,116,114,97,99,101,115,32,97,32,81,117,97,116,101,114,110,105,111,110,32,74,117,108,105,97,32,115,101,116,0]),Ss=new Uint8Array([170,170,170,170]),zs=new Uint8Array([170,170,170,170]),Os=new Uint8Array([170,170,170,170]);Object.assign(Se,{...t,type:2,name:"rt-julia.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:is}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:x},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:I},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:z},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:k},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:M},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:Y},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:L}],methods:[],template:{memory:{array:os},slots:{0:{structure:x,memory:{array:ns},slots:{0:{structure:Q,memory:{array:us},slots:{0:{structure:N,memory:{array:ls},address:1064767}}}}},1:{structure:I,memory:{array:cs},slots:{0:{structure:X,memory:{array:ys},slots:{0:{structure:W,memory:{array:ps},address:1064755}}}}},2:{structure:z,memory:{array:fs},slots:{0:{structure:f,memory:{array:bs}}}},3:{structure:k,memory:{array:ds},slots:{0:{structure:ee,memory:{array:hs},slots:{0:{structure:Z,memory:{array:gs},address:1064722}}}}},4:{structure:M,memory:{array:Ss},slots:{0:{structure:ne,memory:{array:l},address:-1431655766}}},5:{structure:Y,memory:{array:zs},slots:{0:{structure:ue,memory:{array:l},address:-1431655766}}},6:{structure:L,memory:{array:Os},slots:{0:{structure:ce,memory:{array:l},address:-1431655766}}}}}},slot:1});const _s=new Uint8Array([]);Object.assign(V,{...t,type:2,name:"rt-julia.KernelInput(u8,rt-julia.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:_s}}},slot:20});Object.assign(ye,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:25});Object.assign(pe,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:ye}],methods:[],template:null},slot:24});Object.assign(fe,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:pe}],methods:[],template:null},slot:23});Object.assign(y,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:26});const ws=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ze,{...t,type:9,name:"rt-julia.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:f},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:f}],methods:[],template:{memory:{array:ws}}},slot:27});Object.assign(G,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:G}],methods:[],template:null},slot:28});Object.assign(H,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:H}],methods:[],template:null},slot:29});const Vs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Rs=new Uint8Array([]),qs=new Uint8Array([96,253,15,0]),As=new Uint8Array([4,0,0,0]);Object.assign(J,{...t,type:2,name:"rt-julia.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:fe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:y},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:y},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ze},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:G},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:H}],methods:[],template:{memory:{array:Vs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:ye},{...e,type:7,isRequired:!1,name:"FPixel",structure:w},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:z}],methods:[],template:{memory:{array:Rs},slots:{0:{structure:z,memory:{array:qs},slots:{0:{structure:f,memory:{array:As}}}}}}},slot:22});const Us=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),js=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ps=new Uint8Array([0,0,0,0,0,0,0,0]),Ie=new Uint8Array([]);Object.assign(R,{...t,type:2,name:"rt-julia.KernelOutput(u8,rt-julia.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:J}],methods:[],template:{memory:{array:Us},slots:{0:{structure:J,memory:{array:js},slots:{0:{structure:fe,memory:{array:Ps},slots:{0:{structure:pe,memory:{array:Ie}}}}}}}}},slot:21});const xs=new Uint8Array([205,204,204,190,123,20,46,191,236,81,184,190,10,215,35,189,0,0,0,68,0,0,0,68,0,0,0,0,0,0,64,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);Object.assign(q,{...t,type:2,name:"rt-julia.KernelParameters(rt-julia.kernel)",length:1,byteSize:48,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"width",structure:c},{...e,type:4,isRequired:!1,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"height",structure:c},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:128,byteSize:16,slot:2,name:"c",structure:w},{...e,type:4,isRequired:!1,bitOffset:192,bitSize:32,byteSize:4,slot:3,name:"w",structure:c},{...e,type:4,isRequired:!1,bitOffset:224,bitSize:32,byteSize:4,slot:4,name:"camDistance",structure:c},{...e,type:4,isRequired:!1,bitOffset:256,bitSize:32,byteSize:4,slot:5,name:"rotationY",structure:c}],methods:[],template:{memory:{array:xs}}},slot:30});Object.assign(Oe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(rt-julia.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:49});Object.assign(_e,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(rt-julia.createOutput)).Fn.return_type.?).ErrorUnion.error_set!rt-julia.KernelOutput(u8,rt-julia.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:R},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Oe}],methods:[],template:null},slot:35});Object.assign(we,{...t,type:3,name:"createOutput",length:1,byteSize:96,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:384,bitSize:32,byteSize:4,slot:0,name:"0",structure:y},{...e,type:3,bitOffset:416,bitSize:32,byteSize:4,slot:1,name:"1",structure:y},{...e,type:6,bitOffset:768,bitSize:0,byteSize:0,slot:2,name:"2",structure:V},{...e,type:6,bitOffset:0,bitSize:384,byteSize:48,slot:3,name:"3",structure:q},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:4,name:"retval",structure:_e}],methods:[],template:null},slot:33});Object.assign(Ve,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(rt-julia.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:50});Object.assign(Re,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(rt-julia.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!rt-julia.KernelOutput(u8,rt-julia.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:R},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Ve}],methods:[],template:null},slot:36});Object.assign(qe,{...t,type:3,name:"createPartialOutput",length:1,byteSize:96,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:384,bitSize:32,byteSize:4,slot:0,name:"0",structure:y},{...e,type:3,bitOffset:416,bitSize:32,byteSize:4,slot:1,name:"1",structure:y},{...e,type:3,bitOffset:448,bitSize:32,byteSize:4,slot:2,name:"2",structure:y},{...e,type:3,bitOffset:480,bitSize:32,byteSize:4,slot:3,name:"3",structure:y},{...e,type:6,bitOffset:768,bitSize:0,byteSize:0,slot:4,name:"4",structure:V},{...e,type:6,bitOffset:0,bitSize:384,byteSize:48,slot:5,name:"5",structure:q},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Re}],methods:[],template:null},slot:34});const Is={argStruct:we,thunk:7,name:"createOutput"},ks={argStruct:qe,thunk:2,name:"createPartialOutput"};Object.assign(Ae,{...t,type:2,name:"rt-julia",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ie}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:Se},{...e,type:7,isRequired:!1,name:"Input",structure:V},{...e,type:7,isRequired:!1,name:"Output",structure:R},{...e,type:7,isRequired:!1,name:"Parameters",structure:q}],methods:[Is,ks],template:null},slot:0});const Cs=[d,N,Q,x,W,X,I,f,z,Z,ee,k,c,r,s,_,S,w,te,C,se,v,re,D,ae,E,me,K,ie,T,oe,F,ne,M,ue,Y,$,le,B,ce,L,Se,V,ye,pe,fe,y,ze,G,H,J,R,q,Oe,_e,we,Ve,Re,qe,Ae],vs=Ze(Cs),Ds=Ae.constructor,Es=(async()=>{const o=new URL("rt-julia-cc141a5e.wasm",import.meta.url).href;return fetch(o)})();et(Es,{...vs,writeBack:!0});const{createOutput:Ls,createPartialOutput:Ks,kernel:ge,Input:Ts,Output:Gs,Parameters:Hs}=Ds;function Fs(o,u,m,a,i={},h={}){if(Array.isArray(i)){const b=i;i={};for(const[p,g]of Object.keys(ge.inputImages).entries())i[g]=b[p]}const A=new Ts(void 0),U=Object.keys(ge.inputImages),n=[];let O;for(const b of U){let p=i[b];if(p||(U.length===1&&["data","width","height"].every(g=>!!i[g])?p=i:n.push(b)),A[b]=p,O){if(p.colorSpace!==O)throw new Error(`Input images must all use the same color space: ${O}`)}else O=p.colorSpace}if(n.length>0)throw new Error(`Missing input image${n.length>1?"s":""}: ${n.join(", ")}`);const be=Ks(o,u,m,a,A,h),je=b=>{const p=Object.keys(b),g={};for(const Pe of p){const{data:{typedArray:j},width:xe,height:Ce}=b[Pe];let P;if(typeof ImageData=="function"){const ve=new Uint8ClampedArray(j.buffer,j.byteOffset,j.byteLength);P=new ImageData(ve,xe,a,{colorSpace:O})}else P={data:j,width:xe,height:Ce};if(p.length===1)return P;g[Pe]=P}return g};return be[Symbol.toStringTag]==="Promise"?be.then(je):je(be)}function Ms(){const o={};for(let[u,m]of Object.entries(ge)){if(u==="parameters"){const a={};for(const[i,h]of Object.entries(m)){const A=a[i]={};for(let[U,n]of Object.entries(h))typeof n=="object"?"string"in n?n=n.string:n=ke(n):typeof n=="function"&&(n=Ys(n.name)),A[U]=n}m=a}else typeof m=="object"&&("string"in m?m=m.string:m=m.valueOf());o[u]=m}return o}function ke(o){const u=[];for(let[m,a]of Object.entries(o))typeof a=="object"&&(a=ke(a)),u[m]=a;return u}function Ys(o){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[o]}onmessage=o=>{const[u,m,...a]=o.data;$s(u,a).then(([i,h])=>{postMessage([u,m,i],{transfer:h})}).catch(i=>{postMessage(["error",m,i])})};async function $s(o,u){switch(o){case"getKernelInfo":return[Ms(...u)];case"createPartialImageData":const a=await Fs(...u),i=[];if("data"in a&&"width"in a&&"height"in a)i.push(a.data.buffer);else for(const h of Object.entries(a))i.push(a.data.buffer);return[a,i];default:throw new Error(`Unknown function: ${o}`)}}
