import{u as aa,a as ma,b as oa,c as ia,d as na,e as ca,f as ua,g as la,h as pa,i as ya,j as da,k as fa,l as ba,n as ha,o as ga,m as Sa,p as Va,q as za,r as _a}from"./index-467e5205.js";aa();ma();oa();ia();na();ca();ua();la();pa();ya();da();fa();ba();ha();ga();Sa();Va();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},i={},H={},T={},qe={},Dt={},Bt={},Re={},o={},D={},Y={},ee={},M={},Nt={},Et={},Ue={},m={},te={},se={},B={},vt={},we={},n={},R={},a={},s={},Kt={},Ae={},Lt={},Oe={},J={},x={},re={},ae={},N={},Zt={},je={},me={},E={},oe={},v={},$t={},Gt={},xe={},Ht={},Ce={},Jt={},Qt={},Pe={},Wt={},Xt={},Ie={},A={},O={},g={},ie={},ne={},K={},Yt={},Te={},c={},S={},es={},ts={},ke={},ss={},Fe={},rs={},as={},Me={},ms={},De={},os={},is={},Be={},ns={},Ne={},cs={},us={},Ee={},ls={},ve={},ps={},Ke={},ys={},ds={},Le={},fs={},Ze={},bs={},$e={},hs={},Ge={},gs={},He={},Ss={},Je={},Q={},W={},C={},Vs={},Qe={},zs={},_s={},We={},qs={},Xe={},Rs={},Us={},Ye={},ws={},et={},As={},Os={},tt={},js={},st={},xs={},Cs={},rt={},Ps={},at={},ce={},ue={},L={},Is={},Ts={},mt={},ks={},Fs={},ot={},Ms={},it={},Ds={},Bs={},nt={},Ns={},ct={},U={},P={},V={},w={},b={},le={},pe={},Z={},Es={},ut={},vs={},lt={},Ks={},pt={},Ls={},Zs={},yt={},$s={},dt={},ye={},de={},$={},Gs={},ft={},Hs={},bt={},Js={},ht={},Qs={},Ws={},gt={},Xs={},St={},Ys={},er={},Vt={},tr={},zt={},sr={},rr={},_t={},ar={},qt={},G={},mr={},Rt={},or={},ir={},Ut={},nr={},wt={},cr={},At={},ur={},lr={},Ot={},pr={},jt={},yr={},xt={},dr={},Ct={},fr={},Pt={},br={},It={},hr={},Tt={},gr={},kt={},Or={},fe={},Sr={},Vr={},zr={},z={},jr={},Ft={},xr={},Mt={},be={},he={},Cr={},Pr={},Ir={},Tr={},kr={},Fr={},Mr={};Object.assign(i,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:5});Object.assign(H,{...t,type:1,name:"[19:0]u8",length:19,byteSize:20,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:4});Object.assign(T,{...t,type:11,name:"*const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:3});Object.assign(qe,{...t,type:11,name:"**const [19:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[],template:null},slot:2});Object.assign(Dt,{...t,type:1,name:"[11:0]u8",length:11,byteSize:12,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:8});Object.assign(Bt,{...t,type:11,name:"*const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Dt}],methods:[],template:null},slot:7});Object.assign(Re,{...t,type:11,name:"**const [11:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Bt}],methods:[],template:null},slot:6});Object.assign(o,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:o}],methods:[],template:null},slot:10});Object.assign(D,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:o}],methods:[],template:null},slot:9});Object.assign(Y,{...t,type:1,name:"[16:0]u8",length:16,byteSize:17,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:13});Object.assign(ee,{...t,type:11,name:"*const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:12});Object.assign(M,{...t,type:11,name:"**const [16:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:11});Object.assign(Nt,{...t,type:1,name:"[12:0]u8",length:12,byteSize:13,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:16});Object.assign(Et,{...t,type:11,name:"*const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Nt}],methods:[],template:null},slot:15});Object.assign(Ue,{...t,type:11,name:"**const [12:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Et}],methods:[],template:null},slot:14});Object.assign(m,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:o}],methods:[],template:null},slot:109});Object.assign(te,{...t,type:1,name:"[60:0]u8",length:60,byteSize:61,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:112});Object.assign(se,{...t,type:11,name:"*const [60:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:111});Object.assign(B,{...t,type:11,name:"*const *const [60:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:110});const qa=new Uint8Array([]),Ra=new Uint8Array([132,31,16,0]),qr=new Uint8Array([1,0,0,0]),Ua=new Uint8Array([172,31,16,0]),Qr=new Uint8Array([3,0,0,0]),wa=new Uint8Array([132,31,16,0]),Aa=new Uint8Array([4,32,16,0]),Oa=new Uint8Array([142,37,16,0]),ja=new Uint8Array([83,117,112,101,114,32,115,97,109,112,108,105,110,103,32,113,117,97,108,105,116,121,46,32,78,117,109,98,101,114,32,111,102,32,115,97,109,112,108,101,115,32,115,113,117,97,114,101,100,32,112,101,114,32,112,105,120,101,108,46,0]);Object.assign(vt,{...t,type:2,name:'struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 1, comptime description: *const [60:0]u8 = "Super sampling quality. Number of samples squared per pixel."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:m},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:m},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:B}],methods:[],template:{memory:{array:qa},slots:{0:{structure:m,memory:{array:Ra},slots:{0:{structure:o,memory:{array:qr},address:1056644}}},1:{structure:m,memory:{array:Ua},slots:{0:{structure:o,memory:{array:Qr},address:1056684}}},2:{structure:m,memory:{array:wa},slots:{0:{structure:o,memory:{array:qr},address:1056644}}},3:{structure:B,memory:{array:Aa},slots:{0:{structure:se,memory:{array:Oa},address:1056772,slots:{0:{structure:te,memory:{array:ja},address:1058190}}}}}}}},slot:43});Object.assign(we,{...t,type:11,name:'*const struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 1, comptime description: *const [60:0]u8 = "Super sampling quality. Number of samples squared per pixel."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:vt}],methods:[],template:null},slot:42});Object.assign(n,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:n}],methods:[],template:null},slot:35});Object.assign(R,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:n}],methods:[],template:null},slot:34});Object.assign(a,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:a}],methods:[],template:null},slot:155});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:a}],methods:[],template:null},slot:154});const xa=new Uint8Array([]),Ca=new Uint8Array([200,30,16,0]),Rr=new Uint8Array([0,0,0,0,0,0,0,192]),Pa=new Uint8Array([200,30,16,0]);Object.assign(Kt,{...t,type:2,name:"struct{comptime comptime_float = -2, comptime comptime_float = -2}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:xa},slots:{0:{structure:s,memory:{array:Ca},slots:{0:{structure:a,memory:{array:Rr},address:1056456}}},1:{structure:s,memory:{array:Pa},slots:{0:{structure:a,memory:{array:Rr},address:1056456}}}}}},slot:114});Object.assign(Ae,{...t,type:11,name:"*const struct{comptime comptime_float = -2, comptime comptime_float = -2}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Kt}],methods:[],template:null},slot:113});const Ia=new Uint8Array([]),Ta=new Uint8Array([192,30,16,0]),Ur=new Uint8Array([0,0,0,0,0,0,0,64]),ka=new Uint8Array([192,30,16,0]);Object.assign(Lt,{...t,type:2,name:"struct{comptime comptime_float = 2, comptime comptime_float = 2}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Ia},slots:{0:{structure:s,memory:{array:Ta},slots:{0:{structure:a,memory:{array:Ur},address:1056448}}},1:{structure:s,memory:{array:ka},slots:{0:{structure:a,memory:{array:Ur},address:1056448}}}}}},slot:116});Object.assign(Oe,{...t,type:11,name:"*const struct{comptime comptime_float = 2, comptime comptime_float = 2}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Lt}],methods:[],template:null},slot:115});const Fa=new Uint8Array([]),Ma=new Uint8Array([144,30,16,0]),h=new Uint8Array([0,0,0,0,0,0,0,0]),Da=new Uint8Array([144,30,16,0]);Object.assign(J,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Fa},slots:{0:{structure:s,memory:{array:Ma},slots:{0:{structure:a,memory:{array:h},address:1056400}}},1:{structure:s,memory:{array:Da},slots:{0:{structure:a,memory:{array:h},address:1056400}}}}}},slot:118});Object.assign(x,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:117});Object.assign(re,{...t,type:1,name:"[26:0]u8",length:26,byteSize:27,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:121});Object.assign(ae,{...t,type:11,name:"*const [26:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:120});Object.assign(N,{...t,type:11,name:"*const *const [26:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:119});const Ba=new Uint8Array([]),Na=new Uint8Array([170,170,170,170]),r=new Uint8Array([]),Ea=new Uint8Array([170,170,170,170]),va=new Uint8Array([170,170,170,170]),Ka=new Uint8Array([0,32,16,0]),La=new Uint8Array([115,37,16,0]),Za=new Uint8Array([84,104,101,32,99,101,110,116,101,114,32,111,102,32,116,104,101,32,102,114,97,99,116,97,108,46,0]);Object.assign(Zt,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -2} = .{-2, -2}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 2} = .{2, 2}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [26:0]u8 = "The center of the fractal."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:R},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:Ae},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:Oe},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:x},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:N}],methods:[],template:{memory:{array:Ba},slots:{0:{structure:Ae,memory:{array:Na},slots:{0:{structure:Kt,memory:{array:r},address:-1431655766}}},1:{structure:Oe,memory:{array:Ea},slots:{0:{structure:Lt,memory:{array:r},address:-1431655766}}},2:{structure:x,memory:{array:va},slots:{0:{structure:J,memory:{array:r},address:-1431655766}}},3:{structure:N,memory:{array:Ka},slots:{0:{structure:ae,memory:{array:La},address:1056768,slots:{0:{structure:re,memory:{array:Za},address:1058163}}}}}}}},slot:45});Object.assign(je,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -2} = .{-2, -2}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 2} = .{2, 2}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [26:0]u8 = "The center of the fractal."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Zt}],methods:[],template:null},slot:44});const $a=new Uint8Array([]),Ga=new Uint8Array([184,30,16,0]),wr=new Uint8Array([0,0,0,0,0,0,240,191]),Ha=new Uint8Array([184,30,16,0]);Object.assign(me,{...t,type:2,name:"struct{comptime comptime_float = -1, comptime comptime_float = -1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:$a},slots:{0:{structure:s,memory:{array:Ga},slots:{0:{structure:a,memory:{array:wr},address:1056440}}},1:{structure:s,memory:{array:Ha},slots:{0:{structure:a,memory:{array:wr},address:1056440}}}}}},slot:123});Object.assign(E,{...t,type:11,name:"*const struct{comptime comptime_float = -1, comptime comptime_float = -1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:122});const Ja=new Uint8Array([]),Qa=new Uint8Array([152,30,16,0]),_=new Uint8Array([0,0,0,0,0,0,240,63]),Wa=new Uint8Array([152,30,16,0]);Object.assign(oe,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Ja},slots:{0:{structure:s,memory:{array:Qa},slots:{0:{structure:a,memory:{array:_},address:1056408}}},1:{structure:s,memory:{array:Wa},slots:{0:{structure:a,memory:{array:_},address:1056408}}}}}},slot:125});Object.assign(v,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:124});Object.assign($t,{...t,type:1,name:"[30:0]u8",length:30,byteSize:31,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:128});Object.assign(Gt,{...t,type:11,name:"*const [30:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$t}],methods:[],template:null},slot:127});Object.assign(xe,{...t,type:11,name:"*const *const [30:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Gt}],methods:[],template:null},slot:126});const Xa=new Uint8Array([]),Ya=new Uint8Array([170,170,170,170]),em=new Uint8Array([170,170,170,170]),tm=new Uint8Array([170,170,170,170]),sm=new Uint8Array([252,31,16,0]),rm=new Uint8Array([84,37,16,0]),am=new Uint8Array([70,105,110,101,32,116,117,110,101,32,116,104,101,32,99,101,110,116,101,114,32,112,111,115,105,116,105,111,110,46,0]);Object.assign(Ht,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [30:0]u8 = "Fine tune the center position."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:R},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:E},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:v},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:x},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:xe}],methods:[],template:{memory:{array:Xa},slots:{0:{structure:E,memory:{array:Ya},slots:{0:{structure:me,memory:{array:r},address:-1431655766}}},1:{structure:v,memory:{array:em},slots:{0:{structure:oe,memory:{array:r},address:-1431655766}}},2:{structure:x,memory:{array:tm},slots:{0:{structure:J,memory:{array:r},address:-1431655766}}},3:{structure:xe,memory:{array:sm},slots:{0:{structure:Gt,memory:{array:rm},address:1056764,slots:{0:{structure:$t,memory:{array:am},address:1058132}}}}}}}},slot:47});Object.assign(Ce,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [30:0]u8 = "Fine tune the center position."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ht}],methods:[],template:null},slot:46});Object.assign(Jt,{...t,type:1,name:"[49:0]u8",length:49,byteSize:50,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:131});Object.assign(Qt,{...t,type:11,name:"*const [49:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Jt}],methods:[],template:null},slot:130});Object.assign(Pe,{...t,type:11,name:"*const *const [49:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Qt}],methods:[],template:null},slot:129});Object.assign(Wt,{...t,type:1,name:"[24:0]u8",length:24,byteSize:25,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:134});Object.assign(Xt,{...t,type:11,name:"*const [24:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Wt}],methods:[],template:null},slot:133});Object.assign(Ie,{...t,type:11,name:"*const *const [24:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Xt}],methods:[],template:null},slot:132});Object.assign(A,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:137});Object.assign(O,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:136});Object.assign(g,{...t,type:11,name:"*const *const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:O}],methods:[],template:null},slot:135});Object.assign(ie,{...t,type:1,name:"[59:0]u8",length:59,byteSize:60,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:140});Object.assign(ne,{...t,type:11,name:"*const [59:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:139});Object.assign(K,{...t,type:11,name:"*const *const [59:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:138});const mm=new Uint8Array([]),om=new Uint8Array([104,31,16,0]),I=new Uint8Array([0,0,0,0]),im=new Uint8Array([208,30,16,0]),Wr=new Uint8Array([4,0,0,0]),nm=new Uint8Array([104,31,16,0]),cm=new Uint8Array([248,31,16,0]),um=new Uint8Array([34,37,16,0]),lm=new Uint8Array([83,111,109,101,32,110,105,99,101,32,97,114,101,97,115,32,116,111,32,101,120,112,108,111,114,101,32,105,110,32,116,104,101,32,77,97,110,100,101,108,98,114,111,116,32,115,101,116,46,0]),pm=new Uint8Array([244,31,16,0]),ym=new Uint8Array([9,37,16,0]),dm=new Uint8Array([77,97,110,100,101,108,98,114,111,116,32,99,101,110,116,101,114,32,112,114,101,115,101,116,0]),fm=new Uint8Array([92,31,16,0]),Dr=new Uint8Array([1,37,16,0]),Br=new Uint8Array([97,101,80,111,112,117,112,0]),bm=new Uint8Array([240,31,16,0]),hm=new Uint8Array([197,36,16,0]),gm=new Uint8Array([70,114,101,101,32,99,111,110,116,114,111,108,124,83,101,97,104,111,114,115,101,32,116,97,105,108,124,76,105,103,104,116,110,105,110,103,124,83,112,105,114,97,108,124,77,105,110,105,32,77,97,110,100,101,108,98,114,111,116,0]);Object.assign(Yt,{...t,type:2,name:'struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 4, comptime defaultValue: comptime_int = 0, comptime description: *const [49:0]u8 = "Some nice areas to explore in the Mandelbrot set.", comptime aeDisplayName: *const [24:0]u8 = "Mandelbrot center preset", comptime aeUIControl: *const [7:0]u8 = "aePopup", comptime aePopupString: *const [59:0]u8 = "Free control|Seahorse tail|Lightning|Spiral|Mini Mandelbrot"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:m},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:m},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Pe},{...e,type:8,isRequired:!1,slot:4,name:"aeDisplayName",structure:Ie},{...e,type:8,isRequired:!1,slot:5,name:"aeUIControl",structure:g},{...e,type:8,isRequired:!1,slot:6,name:"aePopupString",structure:K}],methods:[],template:{memory:{array:mm},slots:{0:{structure:m,memory:{array:om},slots:{0:{structure:o,memory:{array:I},address:1056616}}},1:{structure:m,memory:{array:im},slots:{0:{structure:o,memory:{array:Wr},address:1056464}}},2:{structure:m,memory:{array:nm},slots:{0:{structure:o,memory:{array:I},address:1056616}}},3:{structure:Pe,memory:{array:cm},slots:{0:{structure:Qt,memory:{array:um},address:1056760,slots:{0:{structure:Jt,memory:{array:lm},address:1058082}}}}},4:{structure:Ie,memory:{array:pm},slots:{0:{structure:Xt,memory:{array:ym},address:1056756,slots:{0:{structure:Wt,memory:{array:dm},address:1058057}}}}},5:{structure:g,memory:{array:fm},slots:{0:{structure:O,memory:{array:Dr},address:1056604,slots:{0:{structure:A,memory:{array:Br},address:1058049}}}}},6:{structure:K,memory:{array:bm},slots:{0:{structure:ne,memory:{array:hm},address:1056752,slots:{0:{structure:ie,memory:{array:gm},address:1057989}}}}}}}},slot:49});Object.assign(Te,{...t,type:11,name:'*const struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 4, comptime defaultValue: comptime_int = 0, comptime description: *const [49:0]u8 = "Some nice areas to explore in the Mandelbrot set.", comptime aeDisplayName: *const [24:0]u8 = "Mandelbrot center preset", comptime aeUIControl: *const [7:0]u8 = "aePopup", comptime aePopupString: *const [59:0]u8 = "Free control|Seahorse tail|Lightning|Spiral|Mini Mandelbrot"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Yt}],methods:[],template:null},slot:48});Object.assign(c,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:c}],methods:[],template:null},slot:31});Object.assign(S,{...t,type:11,name:"*const bool",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:141});Object.assign(es,{...t,type:1,name:"[37:0]u8",length:37,byteSize:38,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:144});Object.assign(ts,{...t,type:11,name:"*const [37:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:es}],methods:[],template:null},slot:143});Object.assign(ke,{...t,type:11,name:"*const *const [37:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ts}],methods:[],template:null},slot:142});const Sm=new Uint8Array([]),Vm=new Uint8Array([84,31,16,0]),ge=new Uint8Array([0]),zm=new Uint8Array([236,31,16,0]),_m=new Uint8Array([159,36,16,0]),qm=new Uint8Array([85,115,101,32,116,104,101,32,115,116,97,110,100,97,114,100,32,77,97,110,100,101,108,98,114,111,116,32,101,113,117,97,116,105,111,110,46,0]);Object.assign(ss,{...t,type:2,name:'struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [37:0]u8 = "Use the standard Mandelbrot equation."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:S},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:ke}],methods:[],template:{memory:{array:Sm},slots:{0:{structure:S,memory:{array:Vm},slots:{0:{structure:c,memory:{array:ge},address:1056596}}},1:{structure:ke,memory:{array:zm},slots:{0:{structure:ts,memory:{array:_m},address:1056748,slots:{0:{structure:es,memory:{array:qm},address:1057951}}}}}}}},slot:51});Object.assign(Fe,{...t,type:11,name:'*const struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [37:0]u8 = "Use the standard Mandelbrot equation."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ss}],methods:[],template:null},slot:50});Object.assign(rs,{...t,type:1,name:"[35:0]u8",length:35,byteSize:36,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:147});Object.assign(as,{...t,type:11,name:"*const [35:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:rs}],methods:[],template:null},slot:146});Object.assign(Me,{...t,type:11,name:"*const *const [35:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:as}],methods:[],template:null},slot:145});const Rm=new Uint8Array([]),Um=new Uint8Array([84,31,16,0]),wm=new Uint8Array([232,31,16,0]),Am=new Uint8Array([123,36,16,0]),Om=new Uint8Array([73,110,99,108,117,100,101,32,122,94,122,32,105,110,32,116,104,101,32,102,114,97,99,116,97,108,32,101,113,117,97,116,105,111,110,0]);Object.assign(ms,{...t,type:2,name:'struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [35:0]u8 = "Include z^z in the fractal equation"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:S},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:Me}],methods:[],template:{memory:{array:Rm},slots:{0:{structure:S,memory:{array:Um},slots:{0:{structure:c,memory:{array:ge},address:1056596}}},1:{structure:Me,memory:{array:wm},slots:{0:{structure:as,memory:{array:Am},address:1056744,slots:{0:{structure:rs,memory:{array:Om},address:1057915}}}}}}}},slot:53});Object.assign(De,{...t,type:11,name:'*const struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [35:0]u8 = "Include z^z in the fractal equation"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ms}],methods:[],template:null},slot:52});Object.assign(os,{...t,type:1,name:"[38:0]u8",length:38,byteSize:39,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:150});Object.assign(is,{...t,type:11,name:"*const [38:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:os}],methods:[],template:null},slot:149});Object.assign(Be,{...t,type:11,name:"*const *const [38:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:is}],methods:[],template:null},slot:148});const jm=new Uint8Array([]),xm=new Uint8Array([84,31,16,0]),Cm=new Uint8Array([228,31,16,0]),Pm=new Uint8Array([84,36,16,0]),Im=new Uint8Array([73,110,99,108,117,100,101,32,115,105,110,40,122,41,32,105,110,32,116,104,101,32,102,114,97,99,116,97,108,32,101,113,117,97,116,105,111,110,0]);Object.assign(ns,{...t,type:2,name:'struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [38:0]u8 = "Include sin(z) in the fractal equation"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:S},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:Be}],methods:[],template:{memory:{array:jm},slots:{0:{structure:S,memory:{array:xm},slots:{0:{structure:c,memory:{array:ge},address:1056596}}},1:{structure:Be,memory:{array:Cm},slots:{0:{structure:is,memory:{array:Pm},address:1056740,slots:{0:{structure:os,memory:{array:Im},address:1057876}}}}}}}},slot:55});Object.assign(Ne,{...t,type:11,name:'*const struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [38:0]u8 = "Include sin(z) in the fractal equation"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ns}],methods:[],template:null},slot:54});Object.assign(cs,{...t,type:1,name:"[36:0]u8",length:36,byteSize:37,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:153});Object.assign(us,{...t,type:11,name:"*const [36:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:cs}],methods:[],template:null},slot:152});Object.assign(Ee,{...t,type:11,name:"*const *const [36:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:us}],methods:[],template:null},slot:151});const Tm=new Uint8Array([]),km=new Uint8Array([84,31,16,0]),Fm=new Uint8Array([224,31,16,0]),Mm=new Uint8Array([47,36,16,0]),Dm=new Uint8Array([73,110,99,108,117,100,101,32,101,40,122,41,32,105,110,32,116,104,101,32,102,114,97,99,116,97,108,32,101,113,117,97,116,105,111,110,0]);Object.assign(ls,{...t,type:2,name:'struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [36:0]u8 = "Include e(z) in the fractal equation"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:S},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:Ee}],methods:[],template:{memory:{array:Tm},slots:{0:{structure:S,memory:{array:km},slots:{0:{structure:c,memory:{array:ge},address:1056596}}},1:{structure:Ee,memory:{array:Fm},slots:{0:{structure:us,memory:{array:Mm},address:1056736,slots:{0:{structure:cs,memory:{array:Dm},address:1057839}}}}}}}},slot:57});Object.assign(ve,{...t,type:11,name:'*const struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [36:0]u8 = "Include e(z) in the fractal equation"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ls}],methods:[],template:null},slot:56});const Bm=new Uint8Array([]),Nm=new Uint8Array([216,31,16,0]),Em=new Uint8Array([0,0,0,0,0,0,40,192]),vm=new Uint8Array([208,31,16,0]),Km=new Uint8Array([0,0,0,0,0,0,40,64]),Lm=new Uint8Array([24,31,16,0]),Xr=new Uint8Array([0,0,0,0,0,0,8,64]),Zm=new Uint8Array([200,31,16,0]),$m=new Uint8Array([242,35,16,0]),Gm=new Uint8Array([82,97,105,115,101,32,122,32,116,111,32,116,104,101,32,112,111,119,101,114,32,101,32,105,110,32,116,104,101,32,102,114,97,99,116,97,108,32,102,111,114,109,117,108,97,58,32,122,39,32,61,32,122,94,101,32,43,32,109,117,0]);Object.assign(ps,{...t,type:2,name:`struct{comptime type: type = f32, comptime minValue: comptime_float = -12, comptime maxValue: comptime_float = 12, comptime defaultValue: comptime_float = 3, comptime description: *const [60:0]u8 = "Raise z to the power e in the fractal formula: z' = z^e + mu"}`,length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:n},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:B}],methods:[],template:{memory:{array:Bm},slots:{0:{structure:s,memory:{array:Nm},slots:{0:{structure:a,memory:{array:Em},address:1056728}}},1:{structure:s,memory:{array:vm},slots:{0:{structure:a,memory:{array:Km},address:1056720}}},2:{structure:s,memory:{array:Lm},slots:{0:{structure:a,memory:{array:Xr},address:1056536}}},3:{structure:B,memory:{array:Zm},slots:{0:{structure:se,memory:{array:$m},address:1056712,slots:{0:{structure:te,memory:{array:Gm},address:1057778}}}}}}}},slot:59});Object.assign(Ke,{...t,type:11,name:`*const struct{comptime type: type = f32, comptime minValue: comptime_float = -12, comptime maxValue: comptime_float = 12, comptime defaultValue: comptime_float = 3, comptime description: *const [60:0]u8 = "Raise z to the power e in the fractal formula: z' = z^e + mu"}`,length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ps}],methods:[],template:null},slot:58});Object.assign(ys,{...t,type:1,name:"[23:0]u8",length:23,byteSize:24,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:158});Object.assign(ds,{...t,type:11,name:"*const [23:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ys}],methods:[],template:null},slot:157});Object.assign(Le,{...t,type:11,name:"*const *const [23:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ds}],methods:[],template:null},slot:156});const Hm=new Uint8Array([]),Jm=new Uint8Array([192,31,16,0]),Qm=new Uint8Array([154,153,153,153,153,153,185,191]),Wm=new Uint8Array([224,30,16,0]),Yr=new Uint8Array([154,153,153,153,153,153,185,63]),Xm=new Uint8Array([144,30,16,0]),Ym=new Uint8Array([184,31,16,0]),eo=new Uint8Array([218,35,16,0]),to=new Uint8Array([70,105,110,101,32,116,117,110,101,32,116,104,101,32,101,120,112,111,110,101,110,116,46,0]);Object.assign(fs,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = -0.1, comptime maxValue: comptime_float = 0.1, comptime defaultValue: comptime_float = 0, comptime description: *const [23:0]u8 = "Fine tune the exponent."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:n},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Le}],methods:[],template:{memory:{array:Hm},slots:{0:{structure:s,memory:{array:Jm},slots:{0:{structure:a,memory:{array:Qm},address:1056704}}},1:{structure:s,memory:{array:Wm},slots:{0:{structure:a,memory:{array:Yr},address:1056480}}},2:{structure:s,memory:{array:Xm},slots:{0:{structure:a,memory:{array:h},address:1056400}}},3:{structure:Le,memory:{array:Ym},slots:{0:{structure:ds,memory:{array:eo},address:1056696,slots:{0:{structure:ys,memory:{array:to},address:1057754}}}}}}}},slot:61});Object.assign(Ze,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = -0.1, comptime maxValue: comptime_float = 0.1, comptime defaultValue: comptime_float = 0, comptime description: *const [23:0]u8 = "Fine tune the exponent."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fs}],methods:[],template:null},slot:60});const so=new Uint8Array([]),ro=new Uint8Array([176,30,16,0]),ao=new Uint8Array([225,122,20,174,71,225,218,63]),mo=new Uint8Array([144,30,16,0]);Object.assign(bs,{...t,type:2,name:"struct{comptime comptime_float = 0.42, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:so},slots:{0:{structure:s,memory:{array:ro},slots:{0:{structure:a,memory:{array:ao},address:1056432}}},1:{structure:s,memory:{array:mo},slots:{0:{structure:a,memory:{array:h},address:1056400}}}}}},slot:160});Object.assign($e,{...t,type:11,name:"*const struct{comptime comptime_float = 0.42, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:bs}],methods:[],template:null},slot:159});const oo=new Uint8Array([]),io=new Uint8Array([170,170,170,170]),no=new Uint8Array([170,170,170,170]),co=new Uint8Array([170,170,170,170]),uo=new Uint8Array([180,31,16,0]),lo=new Uint8Array([158,35,16,0]),po=new Uint8Array([84,104,101,32,99,111,109,112,108,101,120,32,112,97,114,97,109,101,116,101,114,32,111,102,32,116,104,101,32,102,114,97,99,116,97,108,32,102,111,114,109,117,108,97,58,32,122,39,32,61,32,122,94,101,32,43,32,109,117,0]);Object.assign(hs,{...t,type:2,name:`struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.42, comptime comptime_float = 0} = .{0.42, 0}, comptime description: *const [59:0]u8 = "The complex parameter of the fractal formula: z' = z^e + mu"}`,length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:R},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:E},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:v},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:$e},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:K}],methods:[],template:{memory:{array:oo},slots:{0:{structure:E,memory:{array:io},slots:{0:{structure:me,memory:{array:r},address:-1431655766}}},1:{structure:v,memory:{array:no},slots:{0:{structure:oe,memory:{array:r},address:-1431655766}}},2:{structure:$e,memory:{array:co},slots:{0:{structure:bs,memory:{array:r},address:-1431655766}}},3:{structure:K,memory:{array:uo},slots:{0:{structure:ne,memory:{array:lo},address:1056692,slots:{0:{structure:ie,memory:{array:po},address:1057694}}}}}}}},slot:63});Object.assign(Ge,{...t,type:11,name:`*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.42, comptime comptime_float = 0} = .{0.42, 0}, comptime description: *const [59:0]u8 = "The complex parameter of the fractal formula: z' = z^e + mu"}`,length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:hs}],methods:[],template:null},slot:62});const yo=new Uint8Array([]),fo=new Uint8Array([168,30,16,0]),Zr=new Uint8Array([123,20,174,71,225,122,132,191]),bo=new Uint8Array([168,30,16,0]);Object.assign(gs,{...t,type:2,name:"struct{comptime comptime_float = -0.01, comptime comptime_float = -0.01}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:yo},slots:{0:{structure:s,memory:{array:fo},slots:{0:{structure:a,memory:{array:Zr},address:1056424}}},1:{structure:s,memory:{array:bo},slots:{0:{structure:a,memory:{array:Zr},address:1056424}}}}}},slot:162});Object.assign(He,{...t,type:11,name:"*const struct{comptime comptime_float = -0.01, comptime comptime_float = -0.01}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:gs}],methods:[],template:null},slot:161});const ho=new Uint8Array([]),go=new Uint8Array([160,30,16,0]),$r=new Uint8Array([123,20,174,71,225,122,132,63]),So=new Uint8Array([160,30,16,0]);Object.assign(Ss,{...t,type:2,name:"struct{comptime comptime_float = 0.01, comptime comptime_float = 0.01}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:ho},slots:{0:{structure:s,memory:{array:go},slots:{0:{structure:a,memory:{array:$r},address:1056416}}},1:{structure:s,memory:{array:So},slots:{0:{structure:a,memory:{array:$r},address:1056416}}}}}},slot:164});Object.assign(Je,{...t,type:11,name:"*const struct{comptime comptime_float = 0.01, comptime comptime_float = 0.01}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ss}],methods:[],template:null},slot:163});Object.assign(Q,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:167});Object.assign(W,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:166});Object.assign(C,{...t,type:11,name:"*const *const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:165});const Vo=new Uint8Array([]),zo=new Uint8Array([170,170,170,170]),_o=new Uint8Array([170,170,170,170]),qo=new Uint8Array([170,170,170,170]),Ro=new Uint8Array([176,31,16,0]),Uo=new Uint8Array([144,35,16,0]),wo=new Uint8Array([70,105,110,101,32,116,117,110,101,32,109,117,46,0]);Object.assign(Vs,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -0.01, comptime comptime_float = -0.01} = .{-0.01, -0.01}, comptime maxValue: struct{comptime comptime_float = 0.01, comptime comptime_float = 0.01} = .{0.01, 0.01}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [13:0]u8 = "Fine tune mu."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:R},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:He},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:Je},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:x},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:C}],methods:[],template:{memory:{array:Vo},slots:{0:{structure:He,memory:{array:zo},slots:{0:{structure:gs,memory:{array:r},address:-1431655766}}},1:{structure:Je,memory:{array:_o},slots:{0:{structure:Ss,memory:{array:r},address:-1431655766}}},2:{structure:x,memory:{array:qo},slots:{0:{structure:J,memory:{array:r},address:-1431655766}}},3:{structure:C,memory:{array:Ro},slots:{0:{structure:W,memory:{array:Uo},address:1056688,slots:{0:{structure:Q,memory:{array:wo},address:1057680}}}}}}}},slot:65});Object.assign(Qe,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -0.01, comptime comptime_float = -0.01} = .{-0.01, -0.01}, comptime maxValue: struct{comptime comptime_float = 0.01, comptime comptime_float = 0.01} = .{0.01, 0.01}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [13:0]u8 = "Fine tune mu."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Vs}],methods:[],template:null},slot:64});Object.assign(zs,{...t,type:1,name:"[40:0]u8",length:40,byteSize:41,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:170});Object.assign(_s,{...t,type:11,name:"*const [40:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:zs}],methods:[],template:null},slot:169});Object.assign(We,{...t,type:11,name:"*const *const [40:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_s}],methods:[],template:null},slot:168});const Ao=new Uint8Array([]),Oo=new Uint8Array([104,31,16,0]),jo=new Uint8Array([172,31,16,0]),xo=new Uint8Array([104,31,16,0]),Co=new Uint8Array([168,31,16,0]),Po=new Uint8Array([103,35,16,0]),Io=new Uint8Array([67,104,97,110,103,101,115,32,116,104,101,32,115,116,121,108,101,32,111,102,32,116,104,101,32,98,97,105,108,111,117,116,32,101,102,102,101,99,116,46,0]),To=new Uint8Array([164,31,16,0]),ko=new Uint8Array([89,35,16,0]),Fo=new Uint8Array([66,97,105,108,111,117,116,32,115,116,121,108,101,0]),Mo=new Uint8Array([92,31,16,0]),Do=new Uint8Array([160,31,16,0]),Bo=new Uint8Array([62,35,16,0]),No=new Uint8Array([83,109,111,111,116,104,124,83,112,105,107,121,124,83,116,97,108,107,115,124,83,119,105,114,108,115,0]);Object.assign(qs,{...t,type:2,name:'struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 0, comptime description: *const [40:0]u8 = "Changes the style of the bailout effect.", comptime aeDisplayName: *const [13:0]u8 = "Bailout style", comptime aeUIControl: *const [7:0]u8 = "aePopup", comptime aePopupString: *const [26:0]u8 = "Smooth|Spiky|Stalks|Swirls"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:m},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:m},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:We},{...e,type:8,isRequired:!1,slot:4,name:"aeDisplayName",structure:C},{...e,type:8,isRequired:!1,slot:5,name:"aeUIControl",structure:g},{...e,type:8,isRequired:!1,slot:6,name:"aePopupString",structure:N}],methods:[],template:{memory:{array:Ao},slots:{0:{structure:m,memory:{array:Oo},slots:{0:{structure:o,memory:{array:I},address:1056616}}},1:{structure:m,memory:{array:jo},slots:{0:{structure:o,memory:{array:Qr},address:1056684}}},2:{structure:m,memory:{array:xo},slots:{0:{structure:o,memory:{array:I},address:1056616}}},3:{structure:We,memory:{array:Co},slots:{0:{structure:_s,memory:{array:Po},address:1056680,slots:{0:{structure:zs,memory:{array:Io},address:1057639}}}}},4:{structure:C,memory:{array:To},slots:{0:{structure:W,memory:{array:ko},address:1056676,slots:{0:{structure:Q,memory:{array:Fo},address:1057625}}}}},5:{structure:g,memory:{array:Mo},slots:{0:{structure:O,memory:{array:Dr},address:1056604,slots:{0:{structure:A,memory:{array:Br},address:1058049}}}}},6:{structure:N,memory:{array:Do},slots:{0:{structure:ae,memory:{array:Bo},address:1056672,slots:{0:{structure:re,memory:{array:No},address:1057598}}}}}}}},slot:67});Object.assign(Xe,{...t,type:11,name:'*const struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 0, comptime description: *const [40:0]u8 = "Changes the style of the bailout effect.", comptime aeDisplayName: *const [13:0]u8 = "Bailout style", comptime aeUIControl: *const [7:0]u8 = "aePopup", comptime aePopupString: *const [26:0]u8 = "Smooth|Spiky|Stalks|Swirls"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:qs}],methods:[],template:null},slot:66});Object.assign(Rs,{...t,type:1,name:"[18:0]u8",length:18,byteSize:19,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:173});Object.assign(Us,{...t,type:11,name:"*const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Rs}],methods:[],template:null},slot:172});Object.assign(Ye,{...t,type:11,name:"*const *const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Us}],methods:[],template:null},slot:171});const Eo=new Uint8Array([]),vo=new Uint8Array([192,30,16,0]),Ko=new Uint8Array([152,31,16,0]),Lo=new Uint8Array([0,0,0,0,0,192,98,64]),Zo=new Uint8Array([144,31,16,0]),$o=new Uint8Array([0,0,0,0,0,0,16,64]),Go=new Uint8Array([136,31,16,0]),Ho=new Uint8Array([43,35,16,0]),Jo=new Uint8Array([66,97,105,108,111,117,116,32,116,104,114,101,115,104,111,108,100,46,0]);Object.assign(ws,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 2, comptime maxValue: comptime_float = 150, comptime defaultValue: comptime_float = 4, comptime description: *const [18:0]u8 = "Bailout threshold."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:n},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Ye}],methods:[],template:{memory:{array:Eo},slots:{0:{structure:s,memory:{array:vo},slots:{0:{structure:a,memory:{array:Ur},address:1056448}}},1:{structure:s,memory:{array:Ko},slots:{0:{structure:a,memory:{array:Lo},address:1056664}}},2:{structure:s,memory:{array:Zo},slots:{0:{structure:a,memory:{array:$o},address:1056656}}},3:{structure:Ye,memory:{array:Go},slots:{0:{structure:Us,memory:{array:Ho},address:1056648,slots:{0:{structure:Rs,memory:{array:Jo},address:1057579}}}}}}}},slot:69});Object.assign(et,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 2, comptime maxValue: comptime_float = 150, comptime defaultValue: comptime_float = 4, comptime description: *const [18:0]u8 = "Bailout threshold."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ws}],methods:[],template:null},slot:68});Object.assign(As,{...t,type:1,name:"[108:0]u8",length:108,byteSize:109,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:176});Object.assign(Os,{...t,type:11,name:"*const [108:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:As}],methods:[],template:null},slot:175});Object.assign(tt,{...t,type:11,name:"*const *const [108:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Os}],methods:[],template:null},slot:174});const Qo=new Uint8Array([]),Wo=new Uint8Array([132,31,16,0]),Xo=new Uint8Array([128,31,16,0]),Yo=new Uint8Array([44,1,0,0]),ei=new Uint8Array([124,31,16,0]),ti=new Uint8Array([70,0,0,0]),si=new Uint8Array([120,31,16,0]),ri=new Uint8Array([190,34,16,0]),ai=new Uint8Array([84,104,101,32,109,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,105,116,101,114,97,116,105,111,110,115,32,102,111,114,32,101,97,99,104,32,112,105,120,101,108,32,98,101,102,111,114,101,32,98,97,105,108,111,117,116,46,32,85,115,101,32,116,111,32,105,110,99,114,101,97,115,101,32,100,101,116,97,105,108,32,97,116,32,116,104,101,32,102,114,97,99,116,97,108,32,101,100,103,101,115,46,0]);Object.assign(js,{...t,type:2,name:'struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 300, comptime defaultValue: comptime_int = 70, comptime description: *const [108:0]u8 = "The maximum number of iterations for each pixel before bailout. Use to increase detail at the fractal edges."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:m},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:m},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:tt}],methods:[],template:{memory:{array:Qo},slots:{0:{structure:m,memory:{array:Wo},slots:{0:{structure:o,memory:{array:qr},address:1056644}}},1:{structure:m,memory:{array:Xo},slots:{0:{structure:o,memory:{array:Yo},address:1056640}}},2:{structure:m,memory:{array:ei},slots:{0:{structure:o,memory:{array:ti},address:1056636}}},3:{structure:tt,memory:{array:si},slots:{0:{structure:Os,memory:{array:ri},address:1056632,slots:{0:{structure:As,memory:{array:ai},address:1057470}}}}}}}},slot:71});Object.assign(st,{...t,type:11,name:'*const struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 300, comptime defaultValue: comptime_int = 70, comptime description: *const [108:0]u8 = "The maximum number of iterations for each pixel before bailout. Use to increase detail at the fractal edges."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:js}],methods:[],template:null},slot:70});Object.assign(xs,{...t,type:1,name:"[39:0]u8",length:39,byteSize:40,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:179});Object.assign(Cs,{...t,type:11,name:"*const [39:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:xs}],methods:[],template:null},slot:178});Object.assign(rt,{...t,type:11,name:"*const *const [39:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Cs}],methods:[],template:null},slot:177});const mi=new Uint8Array([]),oi=new Uint8Array([104,31,16,0]),ii=new Uint8Array([116,31,16,0]),ni=new Uint8Array([150,0,0,0]),ci=new Uint8Array([104,31,16,0]),ui=new Uint8Array([112,31,16,0]),li=new Uint8Array([150,34,16,0]),pi=new Uint8Array([79,102,102,115,101,116,32,116,104,101,32,115,116,97,114,116,32,111,102,32,116,104,101,32,105,116,101,114,97,116,105,111,110,32,99,111,117,110,116,0]);Object.assign(Ps,{...t,type:2,name:'struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 150, comptime defaultValue: comptime_int = 0, comptime description: *const [39:0]u8 = "Offset the start of the iteration count"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:m},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:m},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:rt}],methods:[],template:{memory:{array:mi},slots:{0:{structure:m,memory:{array:oi},slots:{0:{structure:o,memory:{array:I},address:1056616}}},1:{structure:m,memory:{array:ii},slots:{0:{structure:o,memory:{array:ni},address:1056628}}},2:{structure:m,memory:{array:ci},slots:{0:{structure:o,memory:{array:I},address:1056616}}},3:{structure:rt,memory:{array:ui},slots:{0:{structure:Cs,memory:{array:li},address:1056624,slots:{0:{structure:xs,memory:{array:pi},address:1057430}}}}}}}},slot:73});Object.assign(at,{...t,type:11,name:'*const struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 150, comptime defaultValue: comptime_int = 0, comptime description: *const [39:0]u8 = "Offset the start of the iteration count"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ps}],methods:[],template:null},slot:72});Object.assign(ce,{...t,type:1,name:"[25:0]u8",length:25,byteSize:26,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:182});Object.assign(ue,{...t,type:11,name:"*const [25:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:181});Object.assign(L,{...t,type:11,name:"*const *const [25:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:180});Object.assign(Is,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:185});Object.assign(Ts,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Is}],methods:[],template:null},slot:184});Object.assign(mt,{...t,type:11,name:"*const *const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ts}],methods:[],template:null},slot:183});Object.assign(ks,{...t,type:1,name:"[76:0]u8",length:76,byteSize:77,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:188});Object.assign(Fs,{...t,type:11,name:"*const [76:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ks}],methods:[],template:null},slot:187});Object.assign(ot,{...t,type:11,name:"*const *const [76:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Fs}],methods:[],template:null},slot:186});const yi=new Uint8Array([]),di=new Uint8Array([104,31,16,0]),fi=new Uint8Array([108,31,16,0]),bi=new Uint8Array([5,0,0,0]),hi=new Uint8Array([104,31,16,0]),gi=new Uint8Array([100,31,16,0]),Si=new Uint8Array([124,34,16,0]),Vi=new Uint8Array([68,105,102,102,101,114,101,110,116,32,99,111,108,111,117,114,105,110,103,32,109,111,100,101,115,0]),zi=new Uint8Array([96,31,16,0]),_i=new Uint8Array([109,34,16,0]),qi=new Uint8Array([67,111,108,111,117,114,105,110,103,32,109,111,100,101,0]),Ri=new Uint8Array([92,31,16,0]),Ui=new Uint8Array([88,31,16,0]),wi=new Uint8Array([32,34,16,0]),Ai=new Uint8Array([83,109,111,111,116,104,124,83,104,101,108,102,32,98,97,110,100,105,110,103,124,83,111,108,105,100,32,98,97,110,100,105,110,103,124,66,105,110,97,114,121,32,100,101,99,111,110,118,111,108,117,116,105,111,110,124,67,111,110,116,111,117,114,32,98,97,110,100,115,124,83,112,105,107,101,115,0]);Object.assign(Ms,{...t,type:2,name:'struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 5, comptime defaultValue: comptime_int = 0, comptime description: *const [25:0]u8 = "Different colouring modes", comptime aeDisplayName: *const [14:0]u8 = "Colouring mode", comptime aeUIControl: *const [7:0]u8 = "aePopup", comptime aePopupString: *const [76:0]u8 = "Smooth|Shelf banding|Solid banding|Binary deconvolution|Contour bands|Spikes"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:m},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:m},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:L},{...e,type:8,isRequired:!1,slot:4,name:"aeDisplayName",structure:mt},{...e,type:8,isRequired:!1,slot:5,name:"aeUIControl",structure:g},{...e,type:8,isRequired:!1,slot:6,name:"aePopupString",structure:ot}],methods:[],template:{memory:{array:yi},slots:{0:{structure:m,memory:{array:di},slots:{0:{structure:o,memory:{array:I},address:1056616}}},1:{structure:m,memory:{array:fi},slots:{0:{structure:o,memory:{array:bi},address:1056620}}},2:{structure:m,memory:{array:hi},slots:{0:{structure:o,memory:{array:I},address:1056616}}},3:{structure:L,memory:{array:gi},slots:{0:{structure:ue,memory:{array:Si},address:1056612,slots:{0:{structure:ce,memory:{array:Vi},address:1057404}}}}},4:{structure:mt,memory:{array:zi},slots:{0:{structure:Ts,memory:{array:_i},address:1056608,slots:{0:{structure:Is,memory:{array:qi},address:1057389}}}}},5:{structure:g,memory:{array:Ri},slots:{0:{structure:O,memory:{array:Dr},address:1056604,slots:{0:{structure:A,memory:{array:Br},address:1058049}}}}},6:{structure:ot,memory:{array:Ui},slots:{0:{structure:Fs,memory:{array:wi},address:1056600,slots:{0:{structure:ks,memory:{array:Ai},address:1057312}}}}}}}},slot:75});Object.assign(it,{...t,type:11,name:'*const struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 5, comptime defaultValue: comptime_int = 0, comptime description: *const [25:0]u8 = "Different colouring modes", comptime aeDisplayName: *const [14:0]u8 = "Colouring mode", comptime aeUIControl: *const [7:0]u8 = "aePopup", comptime aePopupString: *const [76:0]u8 = "Smooth|Shelf banding|Solid banding|Binary deconvolution|Contour bands|Spikes"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ms}],methods:[],template:null},slot:74});Object.assign(Ds,{...t,type:1,name:"[42:0]u8",length:42,byteSize:43,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:191});Object.assign(Bs,{...t,type:11,name:"*const [42:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ds}],methods:[],template:null},slot:190});Object.assign(nt,{...t,type:11,name:"*const *const [42:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Bs}],methods:[],template:null},slot:189});const Oi=new Uint8Array([]),ji=new Uint8Array([84,31,16,0]),xi=new Uint8Array([80,31,16,0]),Ci=new Uint8Array([245,33,16,0]),Pi=new Uint8Array([85,115,101,32,104,117,101,44,32,115,97,116,117,114,97,116,105,111,110,44,32,98,114,105,103,104,116,110,101,115,115,32,99,111,108,111,117,114,105,110,103,46,0]);Object.assign(Ns,{...t,type:2,name:'struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [42:0]u8 = "Use hue, saturation, brightness colouring."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:S},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:nt}],methods:[],template:{memory:{array:Oi},slots:{0:{structure:S,memory:{array:ji},slots:{0:{structure:c,memory:{array:ge},address:1056596}}},1:{structure:nt,memory:{array:xi},slots:{0:{structure:Bs,memory:{array:Ci},address:1056592,slots:{0:{structure:Ds,memory:{array:Pi},address:1057269}}}}}}}},slot:77});Object.assign(ct,{...t,type:11,name:'*const struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [42:0]u8 = "Use hue, saturation, brightness colouring."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ns}],methods:[],template:null},slot:76});Object.assign(U,{...t,type:13,name:"@Vector(3, f32)",length:3,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:n}],methods:[],template:null},slot:36});const Ii=new Uint8Array([]),Ti=new Uint8Array([144,30,16,0]),ki=new Uint8Array([144,30,16,0]),Fi=new Uint8Array([144,30,16,0]);Object.assign(P,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Ii},slots:{0:{structure:s,memory:{array:Ti},slots:{0:{structure:a,memory:{array:h},address:1056400}}},1:{structure:s,memory:{array:ki},slots:{0:{structure:a,memory:{array:h},address:1056400}}},2:{structure:s,memory:{array:Fi},slots:{0:{structure:a,memory:{array:h},address:1056400}}}}}},slot:193});Object.assign(V,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:P}],methods:[],template:null},slot:192});const Mi=new Uint8Array([]),Di=new Uint8Array([152,30,16,0]),Bi=new Uint8Array([152,30,16,0]),Ni=new Uint8Array([152,30,16,0]);Object.assign(w,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Mi},slots:{0:{structure:s,memory:{array:Di},slots:{0:{structure:a,memory:{array:_},address:1056408}}},1:{structure:s,memory:{array:Bi},slots:{0:{structure:a,memory:{array:_},address:1056408}}},2:{structure:s,memory:{array:Ni},slots:{0:{structure:a,memory:{array:_},address:1056408}}}}}},slot:195});Object.assign(b,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:w}],methods:[],template:null},slot:194});Object.assign(le,{...t,type:1,name:"[17:0]u8",length:17,byteSize:18,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:198});Object.assign(pe,{...t,type:11,name:"*const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:197});Object.assign(Z,{...t,type:11,name:"*const *const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pe}],methods:[],template:null},slot:196});const Ei=new Uint8Array([]),vi=new Uint8Array([170,170,170,170]),Ki=new Uint8Array([170,170,170,170]),Li=new Uint8Array([170,170,170,170]),Zi=new Uint8Array([76,31,16,0]),$i=new Uint8Array([227,33,16,0]),Gi=new Uint8Array([84,104,101,32,111,117,116,101,114,32,99,111,108,111,117,114,46,0]),Hi=new Uint8Array([64,31,16,0]),Nr=new Uint8Array([219,33,16,0]),Er=new Uint8Array([97,101,67,111,108,111,114,0]);Object.assign(Es,{...t,type:2,name:'struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime description: *const [17:0]u8 = "The outer colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:U},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:V},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:b},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:b},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Z},{...e,type:8,isRequired:!1,slot:4,name:"aeUIControl",structure:g}],methods:[],template:{memory:{array:Ei},slots:{0:{structure:V,memory:{array:vi},slots:{0:{structure:P,memory:{array:r},address:-1431655766}}},1:{structure:b,memory:{array:Ki},slots:{0:{structure:w,memory:{array:r},address:-1431655766}}},2:{structure:b,memory:{array:Li},slots:{0:{structure:w,memory:{array:r},address:-1431655766}}},3:{structure:Z,memory:{array:Zi},slots:{0:{structure:pe,memory:{array:$i},address:1056588,slots:{0:{structure:le,memory:{array:Gi},address:1057251}}}}},4:{structure:g,memory:{array:Hi},slots:{0:{structure:O,memory:{array:Nr},address:1056576,slots:{0:{structure:A,memory:{array:Er},address:1057243}}}}}}}},slot:79});Object.assign(ut,{...t,type:11,name:'*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime description: *const [17:0]u8 = "The outer colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Es}],methods:[],template:null},slot:78});const Ji=new Uint8Array([]),Qi=new Uint8Array([144,30,16,0]),Wi=new Uint8Array([136,30,16,0]),Xi=new Uint8Array([236,81,184,30,133,235,209,63]),Yi=new Uint8Array([128,30,16,0]),en=new Uint8Array([113,61,10,215,163,112,221,63]);Object.assign(vs,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0.28, comptime comptime_float = 0.46}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Ji},slots:{0:{structure:s,memory:{array:Qi},slots:{0:{structure:a,memory:{array:h},address:1056400}}},1:{structure:s,memory:{array:Wi},slots:{0:{structure:a,memory:{array:Xi},address:1056392}}},2:{structure:s,memory:{array:Yi},slots:{0:{structure:a,memory:{array:en},address:1056384}}}}}},slot:200});Object.assign(lt,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0.28, comptime comptime_float = 0.46}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:vs}],methods:[],template:null},slot:199});const tn=new Uint8Array([]),sn=new Uint8Array([170,170,170,170]),rn=new Uint8Array([170,170,170,170]),an=new Uint8Array([170,170,170,170]),mn=new Uint8Array([72,31,16,0]),on=new Uint8Array([201,33,16,0]),nn=new Uint8Array([84,104,101,32,105,110,110,101,114,32,99,111,108,111,117,114,46,0]),cn=new Uint8Array([64,31,16,0]);Object.assign(Ks,{...t,type:2,name:'struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0.28, comptime comptime_float = 0.46} = .{0, 0.28, 0.46}, comptime description: *const [17:0]u8 = "The inner colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:U},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:V},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:b},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:lt},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Z},{...e,type:8,isRequired:!1,slot:4,name:"aeUIControl",structure:g}],methods:[],template:{memory:{array:tn},slots:{0:{structure:V,memory:{array:sn},slots:{0:{structure:P,memory:{array:r},address:-1431655766}}},1:{structure:b,memory:{array:rn},slots:{0:{structure:w,memory:{array:r},address:-1431655766}}},2:{structure:lt,memory:{array:an},slots:{0:{structure:vs,memory:{array:r},address:-1431655766}}},3:{structure:Z,memory:{array:mn},slots:{0:{structure:pe,memory:{array:on},address:1056584,slots:{0:{structure:le,memory:{array:nn},address:1057225}}}}},4:{structure:g,memory:{array:cn},slots:{0:{structure:O,memory:{array:Nr},address:1056576,slots:{0:{structure:A,memory:{array:Er},address:1057243}}}}}}}},slot:81});Object.assign(pt,{...t,type:11,name:'*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0.28, comptime comptime_float = 0.46} = .{0, 0.28, 0.46}, comptime description: *const [17:0]u8 = "The inner colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ks}],methods:[],template:null},slot:80});Object.assign(Ls,{...t,type:1,name:"[22:0]u8",length:22,byteSize:23,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:203});Object.assign(Zs,{...t,type:11,name:"*const [22:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ls}],methods:[],template:null},slot:202});Object.assign(yt,{...t,type:11,name:"*const *const [22:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Zs}],methods:[],template:null},slot:201});const un=new Uint8Array([]),ln=new Uint8Array([170,170,170,170]),pn=new Uint8Array([170,170,170,170]),yn=new Uint8Array([170,170,170,170]),dn=new Uint8Array([68,31,16,0]),fn=new Uint8Array([178,33,16,0]),bn=new Uint8Array([84,104,101,32,98,97,99,107,103,114,111,117,110,100,32,99,111,108,111,117,114,46,0]),hn=new Uint8Array([64,31,16,0]);Object.assign($s,{...t,type:2,name:'struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime description: *const [22:0]u8 = "The background colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:U},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:V},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:b},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:V},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:yt},{...e,type:8,isRequired:!1,slot:4,name:"aeUIControl",structure:g}],methods:[],template:{memory:{array:un},slots:{0:{structure:V,memory:{array:ln},slots:{0:{structure:P,memory:{array:r},address:-1431655766}}},1:{structure:b,memory:{array:pn},slots:{0:{structure:w,memory:{array:r},address:-1431655766}}},2:{structure:V,memory:{array:yn},slots:{0:{structure:P,memory:{array:r},address:-1431655766}}},3:{structure:yt,memory:{array:dn},slots:{0:{structure:Zs,memory:{array:fn},address:1056580,slots:{0:{structure:Ls,memory:{array:bn},address:1057202}}}}},4:{structure:g,memory:{array:hn},slots:{0:{structure:O,memory:{array:Nr},address:1056576,slots:{0:{structure:A,memory:{array:Er},address:1057243}}}}}}}},slot:83});Object.assign(dt,{...t,type:11,name:'*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime description: *const [22:0]u8 = "The background colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$s}],methods:[],template:null},slot:82});Object.assign(ye,{...t,type:1,name:"[48:0]u8",length:48,byteSize:49,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:206});Object.assign(de,{...t,type:11,name:"*const [48:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:205});Object.assign($,{...t,type:11,name:"*const *const [48:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:de}],methods:[],template:null},slot:204});const gn=new Uint8Array([]),Sn=new Uint8Array([152,30,16,0]),Vn=new Uint8Array([56,31,16,0]),zn=new Uint8Array([0,0,0,0,0,0,36,64]),_n=new Uint8Array([152,30,16,0]),qn=new Uint8Array([52,31,16,0]),Rn=new Uint8Array([129,33,16,0]),Un=new Uint8Array([84,104,101,32,110,117,109,98,101,114,32,111,102,32,116,105,109,101,115,32,116,104,101,32,99,111,108,111,117,114,32,103,114,97,100,105,101,110,116,32,114,101,112,101,97,116,115,46,0]);Object.assign(Gs,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1, comptime description: *const [48:0]u8 = "The number of times the colour gradient repeats."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:n},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:$}],methods:[],template:{memory:{array:gn},slots:{0:{structure:s,memory:{array:Sn},slots:{0:{structure:a,memory:{array:_},address:1056408}}},1:{structure:s,memory:{array:Vn},slots:{0:{structure:a,memory:{array:zn},address:1056568}}},2:{structure:s,memory:{array:_n},slots:{0:{structure:a,memory:{array:_},address:1056408}}},3:{structure:$,memory:{array:qn},slots:{0:{structure:de,memory:{array:Rn},address:1056564,slots:{0:{structure:ye,memory:{array:Un},address:1057153}}}}}}}},slot:85});Object.assign(ft,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1, comptime description: *const [48:0]u8 = "The number of times the colour gradient repeats."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Gs}],methods:[],template:null},slot:84});const wn=new Uint8Array([]),An=new Uint8Array([144,30,16,0]),On=new Uint8Array([152,30,16,0]),jn=new Uint8Array([144,30,16,0]),xn=new Uint8Array([48,31,16,0]),Cn=new Uint8Array([103,33,16,0]),Pn=new Uint8Array([83,104,105,102,116,32,116,104,101,32,99,111,108,111,117,114,32,109,97,112,112,105,110,103,46,0]);Object.assign(Hs,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [25:0]u8 = "Shift the colour mapping."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:n},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:L}],methods:[],template:{memory:{array:wn},slots:{0:{structure:s,memory:{array:An},slots:{0:{structure:a,memory:{array:h},address:1056400}}},1:{structure:s,memory:{array:On},slots:{0:{structure:a,memory:{array:_},address:1056408}}},2:{structure:s,memory:{array:jn},slots:{0:{structure:a,memory:{array:h},address:1056400}}},3:{structure:L,memory:{array:xn},slots:{0:{structure:ue,memory:{array:Cn},address:1056560,slots:{0:{structure:ce,memory:{array:Pn},address:1057127}}}}}}}},slot:87});Object.assign(bt,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [25:0]u8 = "Shift the colour mapping."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Hs}],methods:[],template:null},slot:86});const In=new Uint8Array([]),Tn=new Uint8Array([44,31,16,0]),kn=new Uint8Array([1]),Fn=new Uint8Array([40,31,16,0]),Mn=new Uint8Array([54,33,16,0]),Dn=new Uint8Array([82,101,102,108,101,99,116,32,116,104,101,32,99,111,108,111,117,114,32,103,114,97,100,105,101,110,116,32,111,114,32,117,115,101,32,97,98,114,117,112,116,32,115,116,101,112,115,46,0]);Object.assign(Js,{...t,type:2,name:'struct{comptime type: type = bool, comptime defaultValue: bool = true, comptime description: *const [48:0]u8 = "Reflect the colour gradient or use abrupt steps."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:S},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:$}],methods:[],template:{memory:{array:In},slots:{0:{structure:S,memory:{array:Tn},slots:{0:{structure:c,memory:{array:kn},address:1056556}}},1:{structure:$,memory:{array:Fn},slots:{0:{structure:de,memory:{array:Mn},address:1056552,slots:{0:{structure:ye,memory:{array:Dn},address:1057078}}}}}}}},slot:89});Object.assign(ht,{...t,type:11,name:'*const struct{comptime type: type = bool, comptime defaultValue: bool = true, comptime description: *const [48:0]u8 = "Reflect the colour gradient or use abrupt steps."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Js}],methods:[],template:null},slot:88});Object.assign(Qs,{...t,type:1,name:"[43:0]u8",length:43,byteSize:44,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:209});Object.assign(Ws,{...t,type:11,name:"*const [43:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Qs}],methods:[],template:null},slot:208});Object.assign(gt,{...t,type:11,name:"*const *const [43:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ws}],methods:[],template:null},slot:207});const Bn=new Uint8Array([]),Nn=new Uint8Array([152,30,16,0]),En=new Uint8Array([32,31,16,0]),vn=new Uint8Array([0,0,0,0,0,0,52,64]),Kn=new Uint8Array([24,31,16,0]),Ln=new Uint8Array([16,31,16,0]),Zn=new Uint8Array([10,33,16,0]),$n=new Uint8Array([68,101,116,101,114,109,105,110,101,115,32,116,104,101,32,109,97,112,112,105,110,103,32,115,99,97,108,101,32,111,102,32,116,104,101,32,99,111,108,111,117,114,46,0]);Object.assign(Xs,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 20, comptime defaultValue: comptime_float = 3, comptime description: *const [43:0]u8 = "Determines the mapping scale of the colour."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:n},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:gt}],methods:[],template:{memory:{array:Bn},slots:{0:{structure:s,memory:{array:Nn},slots:{0:{structure:a,memory:{array:_},address:1056408}}},1:{structure:s,memory:{array:En},slots:{0:{structure:a,memory:{array:vn},address:1056544}}},2:{structure:s,memory:{array:Kn},slots:{0:{structure:a,memory:{array:Xr},address:1056536}}},3:{structure:gt,memory:{array:Ln},slots:{0:{structure:Ws,memory:{array:Zn},address:1056528,slots:{0:{structure:Qs,memory:{array:$n},address:1057034}}}}}}}},slot:91});Object.assign(St,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 20, comptime defaultValue: comptime_float = 3, comptime description: *const [43:0]u8 = "Determines the mapping scale of the colour."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Xs}],methods:[],template:null},slot:90});Object.assign(Ys,{...t,type:1,name:"[88:0]u8",length:88,byteSize:89,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:212});Object.assign(er,{...t,type:11,name:"*const [88:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ys}],methods:[],template:null},slot:211});Object.assign(Vt,{...t,type:11,name:"*const *const [88:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:er}],methods:[],template:null},slot:210});const Gn=new Uint8Array([]),Hn=new Uint8Array([170,170,170,170]),Jn=new Uint8Array([170,170,170,170]),Qn=new Uint8Array([170,170,170,170]),Wn=new Uint8Array([12,31,16,0]),Xn=new Uint8Array([177,32,16,0]),Yn=new Uint8Array([83,101,112,97,114,97,116,101,32,97,108,112,104,97,32,99,111,110,116,114,111,108,115,32,102,111,114,32,99,111,108,111,114,49,44,32,99,111,108,111,114,50,32,97,110,100,32,99,111,108,111,114,66,97,99,107,103,114,111,117,110,100,32,102,111,114,32,65,102,116,101,114,69,102,102,101,99,116,115,32,115,117,112,112,111,114,116,46,0]);Object.assign(tr,{...t,type:2,name:'struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime description: *const [88:0]u8 = "Separate alpha controls for color1, color2 and colorBackground for AfterEffects support."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:U},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:V},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:b},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:b},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Vt}],methods:[],template:{memory:{array:Gn},slots:{0:{structure:V,memory:{array:Hn},slots:{0:{structure:P,memory:{array:r},address:-1431655766}}},1:{structure:b,memory:{array:Jn},slots:{0:{structure:w,memory:{array:r},address:-1431655766}}},2:{structure:b,memory:{array:Qn},slots:{0:{structure:w,memory:{array:r},address:-1431655766}}},3:{structure:Vt,memory:{array:Wn},slots:{0:{structure:er,memory:{array:Xn},address:1056524,slots:{0:{structure:Ys,memory:{array:Yn},address:1056945}}}}}}}},slot:93});Object.assign(zt,{...t,type:11,name:'*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime description: *const [88:0]u8 = "Separate alpha controls for color1, color2 and colorBackground for AfterEffects support."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:tr}],methods:[],template:null},slot:92});Object.assign(sr,{...t,type:1,name:"[80:0]u8",length:80,byteSize:81,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:215});Object.assign(rr,{...t,type:11,name:"*const [80:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:sr}],methods:[],template:null},slot:214});Object.assign(_t,{...t,type:11,name:"*const *const [80:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:rr}],methods:[],template:null},slot:213});const e1=new Uint8Array([]),t1=new Uint8Array([144,30,16,0]),s1=new Uint8Array([152,30,16,0]),r1=new Uint8Array([144,30,16,0]),a1=new Uint8Array([8,31,16,0]),m1=new Uint8Array([96,32,16,0]),o1=new Uint8Array([65,100,100,32,116,104,101,32,105,108,108,117,115,105,111,110,32,111,102,32,100,101,112,116,104,32,98,121,32,98,108,101,110,100,105,110,103,32,115,117,98,115,101,113,117,101,110,116,32,105,116,101,114,97,116,105,111,110,115,32,105,110,116,111,32,116,104,101,32,98,97,99,107,103,114,111,117,110,100,46,0]);Object.assign(ar,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [80:0]u8 = "Add the illusion of depth by blending subsequent iterations into the background."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:n},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:_t}],methods:[],template:{memory:{array:e1},slots:{0:{structure:s,memory:{array:t1},slots:{0:{structure:a,memory:{array:h},address:1056400}}},1:{structure:s,memory:{array:s1},slots:{0:{structure:a,memory:{array:_},address:1056408}}},2:{structure:s,memory:{array:r1},slots:{0:{structure:a,memory:{array:h},address:1056400}}},3:{structure:_t,memory:{array:a1},slots:{0:{structure:rr,memory:{array:m1},address:1056520,slots:{0:{structure:sr,memory:{array:o1},address:1056864}}}}}}}},slot:95});Object.assign(qt,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [80:0]u8 = "Add the illusion of depth by blending subsequent iterations into the background."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ar}],methods:[],template:null},slot:94});Object.assign(G,{...t,type:11,name:"*const *const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[],template:null},slot:216});const i1=new Uint8Array([]),n1=new Uint8Array([0,31,16,0]),c1=new Uint8Array([0,0,0,0,0,128,102,192]),u1=new Uint8Array([248,30,16,0]),l1=new Uint8Array([0,0,0,0,0,128,102,64]),p1=new Uint8Array([144,30,16,0]),y1=new Uint8Array([244,30,16,0]),d1=new Uint8Array([76,32,16,0]),f1=new Uint8Array([82,111,116,97,116,101,32,116,104,101,32,102,114,97,99,116,97,108,46,0]);Object.assign(mr,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0, comptime description: *const [19:0]u8 = "Rotate the fractal."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:n},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:G}],methods:[],template:{memory:{array:i1},slots:{0:{structure:s,memory:{array:n1},slots:{0:{structure:a,memory:{array:c1},address:1056512}}},1:{structure:s,memory:{array:u1},slots:{0:{structure:a,memory:{array:l1},address:1056504}}},2:{structure:s,memory:{array:p1},slots:{0:{structure:a,memory:{array:h},address:1056400}}},3:{structure:G,memory:{array:y1},slots:{0:{structure:T,memory:{array:d1},address:1056500,slots:{0:{structure:H,memory:{array:f1},address:1056844}}}}}}}},slot:97});Object.assign(Rt,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0, comptime description: *const [19:0]u8 = "Rotate the fractal."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:mr}],methods:[],template:null},slot:96});Object.assign(or,{...t,type:13,name:"@Vector(2, i32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,structure:o}],methods:[],template:null},slot:37});const b1=new Uint8Array([]),h1=new Uint8Array([120,30,16,0]),Gr=new Uint8Array([100,0,0,0]),g1=new Uint8Array([120,30,16,0]);Object.assign(ir,{...t,type:2,name:"struct{comptime comptime_int = 100, comptime comptime_int = 100}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:b1},slots:{0:{structure:m,memory:{array:h1},slots:{0:{structure:o,memory:{array:Gr},address:1056376}}},1:{structure:m,memory:{array:g1},slots:{0:{structure:o,memory:{array:Gr},address:1056376}}}}}},slot:218});Object.assign(Ut,{...t,type:11,name:"*const struct{comptime comptime_int = 100, comptime comptime_int = 100}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ir}],methods:[],template:null},slot:217});const S1=new Uint8Array([]),V1=new Uint8Array([116,30,16,0]),Hr=new Uint8Array([0,16,0,0]),z1=new Uint8Array([116,30,16,0]);Object.assign(nr,{...t,type:2,name:"struct{comptime comptime_int = 4096, comptime comptime_int = 4096}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:S1},slots:{0:{structure:m,memory:{array:V1},slots:{0:{structure:o,memory:{array:Hr},address:1056372}}},1:{structure:m,memory:{array:z1},slots:{0:{structure:o,memory:{array:Hr},address:1056372}}}}}},slot:220});Object.assign(wt,{...t,type:11,name:"*const struct{comptime comptime_int = 4096, comptime comptime_int = 4096}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:nr}],methods:[],template:null},slot:219});const _1=new Uint8Array([]),q1=new Uint8Array([112,30,16,0]),Jr=new Uint8Array([0,2,0,0]),R1=new Uint8Array([112,30,16,0]);Object.assign(cr,{...t,type:2,name:"struct{comptime comptime_int = 512, comptime comptime_int = 512}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:_1},slots:{0:{structure:m,memory:{array:q1},slots:{0:{structure:o,memory:{array:Jr},address:1056368}}},1:{structure:m,memory:{array:R1},slots:{0:{structure:o,memory:{array:Jr},address:1056368}}}}}},slot:222});Object.assign(At,{...t,type:11,name:"*const struct{comptime comptime_int = 512, comptime comptime_int = 512}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:cr}],methods:[],template:null},slot:221});Object.assign(ur,{...t,type:1,name:"[33:0]u8",length:33,byteSize:34,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:225});Object.assign(lr,{...t,type:11,name:"*const [33:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ur}],methods:[],template:null},slot:224});Object.assign(Ot,{...t,type:11,name:"*const *const [33:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:lr}],methods:[],template:null},slot:223});const U1=new Uint8Array([]),w1=new Uint8Array([170,170,170,170]),A1=new Uint8Array([170,170,170,170]),O1=new Uint8Array([170,170,170,170]),j1=new Uint8Array([240,30,16,0]),x1=new Uint8Array([42,32,16,0]),C1=new Uint8Array([84,104,101,32,115,105,122,101,32,111,102,32,116,104,101,32,114,101,110,100,101,114,101,100,32,102,114,97,99,116,97,108,46,0]);Object.assign(pr,{...t,type:2,name:'struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 4096, comptime comptime_int = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_int = 512, comptime comptime_int = 512} = .{512, 512}, comptime description: *const [33:0]u8 = "The size of the rendered fractal."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:or},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:Ut},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:wt},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:At},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Ot}],methods:[],template:{memory:{array:U1},slots:{0:{structure:Ut,memory:{array:w1},slots:{0:{structure:ir,memory:{array:r},address:-1431655766}}},1:{structure:wt,memory:{array:A1},slots:{0:{structure:nr,memory:{array:r},address:-1431655766}}},2:{structure:At,memory:{array:O1},slots:{0:{structure:cr,memory:{array:r},address:-1431655766}}},3:{structure:Ot,memory:{array:j1},slots:{0:{structure:lr,memory:{array:x1},address:1056496,slots:{0:{structure:ur,memory:{array:C1},address:1056810}}}}}}}},slot:99});Object.assign(jt,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 4096, comptime comptime_int = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_int = 512, comptime comptime_int = 512} = .{512, 512}, comptime description: *const [33:0]u8 = "The size of the rendered fractal."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pr}],methods:[],template:null},slot:98});const P1=new Uint8Array([]),I1=new Uint8Array([200,30,16,0]),T1=new Uint8Array([232,30,16,0]),k1=new Uint8Array([0,0,0,0,0,0,42,64]),F1=new Uint8Array([224,30,16,0]),M1=new Uint8Array([216,30,16,0]),D1=new Uint8Array([28,32,16,0]),B1=new Uint8Array([80,114,105,109,97,114,121,32,122,111,111,109,46,0]);Object.assign(yr,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = -2, comptime maxValue: comptime_float = 13, comptime defaultValue: comptime_float = 0.1, comptime description: *const [13:0]u8 = "Primary zoom."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:n},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:C}],methods:[],template:{memory:{array:P1},slots:{0:{structure:s,memory:{array:I1},slots:{0:{structure:a,memory:{array:Rr},address:1056456}}},1:{structure:s,memory:{array:T1},slots:{0:{structure:a,memory:{array:k1},address:1056488}}},2:{structure:s,memory:{array:F1},slots:{0:{structure:a,memory:{array:Yr},address:1056480}}},3:{structure:C,memory:{array:M1},slots:{0:{structure:W,memory:{array:D1},address:1056472,slots:{0:{structure:Q,memory:{array:B1},address:1056796}}}}}}}},slot:101});Object.assign(xt,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = -2, comptime maxValue: comptime_float = 13, comptime defaultValue: comptime_float = 0.1, comptime description: *const [13:0]u8 = "Primary zoom."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:yr}],methods:[],template:null},slot:100});const N1=new Uint8Array([]),E1=new Uint8Array([184,30,16,0]),v1=new Uint8Array([152,30,16,0]),K1=new Uint8Array([144,30,16,0]),L1=new Uint8Array([212,30,16,0]),Z1=new Uint8Array([8,32,16,0]),$1=new Uint8Array([70,105,110,101,32,116,117,110,101,32,116,104,101,32,122,111,111,109,46,0]);Object.assign(dr,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [19:0]u8 = "Fine tune the zoom."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:n},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:G}],methods:[],template:{memory:{array:N1},slots:{0:{structure:s,memory:{array:E1},slots:{0:{structure:a,memory:{array:wr},address:1056440}}},1:{structure:s,memory:{array:v1},slots:{0:{structure:a,memory:{array:_},address:1056408}}},2:{structure:s,memory:{array:K1},slots:{0:{structure:a,memory:{array:h},address:1056400}}},3:{structure:G,memory:{array:L1},slots:{0:{structure:T,memory:{array:Z1},address:1056468,slots:{0:{structure:H,memory:{array:$1},address:1056776}}}}}}}},slot:103});Object.assign(Ct,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [19:0]u8 = "Fine tune the zoom."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:dr}],methods:[],template:null},slot:102});const G1=new Uint8Array([]),H1=new Uint8Array([170,170,170,170]),J1=new Uint8Array([170,170,170,170]),Q1=new Uint8Array([170,170,170,170]),W1=new Uint8Array([170,170,170,170]),X1=new Uint8Array([170,170,170,170]),Y1=new Uint8Array([170,170,170,170]),ec=new Uint8Array([170,170,170,170]),tc=new Uint8Array([170,170,170,170]),sc=new Uint8Array([170,170,170,170]),rc=new Uint8Array([170,170,170,170]),ac=new Uint8Array([170,170,170,170]),mc=new Uint8Array([170,170,170,170]),oc=new Uint8Array([170,170,170,170]),ic=new Uint8Array([170,170,170,170]),nc=new Uint8Array([170,170,170,170]),cc=new Uint8Array([170,170,170,170]),uc=new Uint8Array([170,170,170,170]),lc=new Uint8Array([170,170,170,170]),pc=new Uint8Array([170,170,170,170]),yc=new Uint8Array([170,170,170,170]),dc=new Uint8Array([170,170,170,170]),fc=new Uint8Array([170,170,170,170]),bc=new Uint8Array([170,170,170,170]),hc=new Uint8Array([170,170,170,170]),gc=new Uint8Array([170,170,170,170]),Sc=new Uint8Array([170,170,170,170]),Vc=new Uint8Array([170,170,170,170]),zc=new Uint8Array([170,170,170,170]),_c=new Uint8Array([170,170,170,170]),qc=new Uint8Array([170,170,170,170]),Rc=new Uint8Array([170,170,170,170]);Object.assign(fr,{...t,type:2,name:`struct{comptime antialiasing: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 1, comptime description: *const [60:0]u8 = "Super sampling quality. Number of samples squared per pixel."} = .{.type = i32, .minValue = 1, .maxValue = 3, .defaultValue = 1, .description = "Super sampling quality. Number of samples squared per pixel."}, comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -2} = .{-2, -2}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 2} = .{2, 2}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [26:0]u8 = "The center of the fractal."} = .{.type = @Vector(2, f32), .minValue = .{-2, -2}, .maxValue = .{2, 2}, .defaultValue = .{0, 0}, .description = "The center of the fractal."}, comptime centerFineTune: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [30:0]u8 = "Fine tune the center position."} = .{.type = @Vector(2, f32), .minValue = .{-1, -1}, .maxValue = .{1, 1}, .defaultValue = .{0, 0}, .description = "Fine tune the center position."}, comptime centerPreset: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 4, comptime defaultValue: comptime_int = 0, comptime description: *const [49:0]u8 = "Some nice areas to explore in the Mandelbrot set.", comptime aeDisplayName: *const [24:0]u8 = "Mandelbrot center preset", comptime aeUIControl: *const [7:0]u8 = "aePopup", comptime aePopupString: *const [59:0]u8 = "Free control|Seahorse tail|Lightning|Spiral|Mini Mandelbrot"} = .{.type = i32, .minValue = 0, .maxValue = 4, .defaultValue = 0, .description = "Some nice areas to explore in the Mandelbrot set.", .aeDisplayName = "Mandelbrot center preset", .aeUIControl = "aePopup", .aePopupString = "Free control|Seahorse tail|Lightning|Spiral|Mini Mandelbrot"}, comptime mandelbrot: struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [37:0]u8 = "Use the standard Mandelbrot equation."} = .{.type = bool, .defaultValue = false, .description = "Use the standard Mandelbrot equation."}, comptime withPowerZ: struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [35:0]u8 = "Include z^z in the fractal equation"} = .{.type = bool, .defaultValue = false, .description = "Include z^z in the fractal equation"}, comptime withSine: struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [38:0]u8 = "Include sin(z) in the fractal equation"} = .{.type = bool, .defaultValue = false, .description = "Include sin(z) in the fractal equation"}, comptime withE: struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [36:0]u8 = "Include e(z) in the fractal equation"} = .{.type = bool, .defaultValue = false, .description = "Include e(z) in the fractal equation"}, comptime power: struct{comptime type: type = f32, comptime minValue: comptime_float = -12, comptime maxValue: comptime_float = 12, comptime defaultValue: comptime_float = 3, comptime description: *const [60:0]u8 = "Raise z to the power e in the fractal formula: z' = z^e + mu"} = .{.type = f32, .minValue = -12, .maxValue = 12, .defaultValue = 3, .description = "Raise z to the power e in the fractal formula: z' = z^e + mu"}, comptime powerFineTune: struct{comptime type: type = f32, comptime minValue: comptime_float = -0.1, comptime maxValue: comptime_float = 0.1, comptime defaultValue: comptime_float = 0, comptime description: *const [23:0]u8 = "Fine tune the exponent."} = .{.type = f32, .minValue = -0.1, .maxValue = 0.1, .defaultValue = 0, .description = "Fine tune the exponent."}, comptime mu: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.42, comptime comptime_float = 0} = .{0.42, 0}, comptime description: *const [59:0]u8 = "The complex parameter of the fractal formula: z' = z^e + mu"} = .{.type = @Vector(2, f32), .minValue = .{-1, -1}, .maxValue = .{1, 1}, .defaultValue = .{0.42, 0}, .description = "The complex parameter of the fractal formula: z' = z^e + mu"}, comptime muFineTune: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -0.01, comptime comptime_float = -0.01} = .{-0.01, -0.01}, comptime maxValue: struct{comptime comptime_float = 0.01, comptime comptime_float = 0.01} = .{0.01, 0.01}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [13:0]u8 = "Fine tune mu."} = .{.type = @Vector(2, f32), .minValue = .{-0.01, -0.01}, .maxValue = .{0.01, 0.01}, .defaultValue = .{0, 0}, .description = "Fine tune mu."}, comptime bailoutStyle: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 0, comptime description: *const [40:0]u8 = "Changes the style of the bailout effect.", comptime aeDisplayName: *const [13:0]u8 = "Bailout style", comptime aeUIControl: *const [7:0]u8 = "aePopup", comptime aePopupString: *const [26:0]u8 = "Smooth|Spiky|Stalks|Swirls"} = .{.type = i32, .minValue = 0, .maxValue = 3, .defaultValue = 0, .description = "Changes the style of the bailout effect.", .aeDisplayName = "Bailout style", .aeUIControl = "aePopup", .aePopupString = "Smooth|Spiky|Stalks|Swirls"}, comptime bailout: struct{comptime type: type = f32, comptime minValue: comptime_float = 2, comptime maxValue: comptime_float = 150, comptime defaultValue: comptime_float = 4, comptime description: *const [18:0]u8 = "Bailout threshold."} = .{.type = f32, .minValue = 2, .maxValue = 150, .defaultValue = 4, .description = "Bailout threshold."}, comptime iterations: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 300, comptime defaultValue: comptime_int = 70, comptime description: *const [108:0]u8 = "The maximum number of iterations for each pixel before bailout. Use to increase detail at the fractal edges."} = .{.type = i32, .minValue = 1, .maxValue = 300, .defaultValue = 70, .description = "The maximum number of iterations for each pixel before bailout. Use to increase detail at the fractal edges."}, comptime iterationsOffset: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 150, comptime defaultValue: comptime_int = 0, comptime description: *const [39:0]u8 = "Offset the start of the iteration count"} = .{.type = i32, .minValue = 0, .maxValue = 150, .defaultValue = 0, .description = "Offset the start of the iteration count"}, comptime colorMode: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 5, comptime defaultValue: comptime_int = 0, comptime description: *const [25:0]u8 = "Different colouring modes", comptime aeDisplayName: *const [14:0]u8 = "Colouring mode", comptime aeUIControl: *const [7:0]u8 = "aePopup", comptime aePopupString: *const [76:0]u8 = "Smooth|Shelf banding|Solid banding|Binary deconvolution|Contour bands|Spikes"} = .{.type = i32, .minValue = 0, .maxValue = 5, .defaultValue = 0, .description = "Different colouring modes", .aeDisplayName = "Colouring mode", .aeUIControl = "aePopup", .aePopupString = "Smooth|Shelf banding|Solid banding|Binary deconvolution|Contour bands|Spikes"}, comptime hsbColor: struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [42:0]u8 = "Use hue, saturation, brightness colouring."} = .{.type = bool, .defaultValue = false, .description = "Use hue, saturation, brightness colouring."}, comptime color1: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime description: *const [17:0]u8 = "The outer colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{1, 1, 1}, .description = "The outer colour.", .aeUIControl = "aeColor"}, comptime color2: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0.28, comptime comptime_float = 0.46} = .{0, 0.28, 0.46}, comptime description: *const [17:0]u8 = "The inner colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{0, 0.28, 0.46}, .description = "The inner colour.", .aeUIControl = "aeColor"}, comptime colorBackground: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime description: *const [22:0]u8 = "The background colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{0, 0, 0}, .description = "The background colour.", .aeUIControl = "aeColor"}, comptime colorCycle: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1, comptime description: *const [48:0]u8 = "The number of times the colour gradient repeats."} = .{.type = f32, .minValue = 1, .maxValue = 10, .defaultValue = 1, .description = "The number of times the colour gradient repeats."}, comptime colorCycleOffset: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [25:0]u8 = "Shift the colour mapping."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0, .description = "Shift the colour mapping."}, comptime colorCycleMirror: struct{comptime type: type = bool, comptime defaultValue: bool = true, comptime description: *const [48:0]u8 = "Reflect the colour gradient or use abrupt steps."} = .{.type = bool, .defaultValue = true, .description = "Reflect the colour gradient or use abrupt steps."}, comptime colorScale: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 20, comptime defaultValue: comptime_float = 3, comptime description: *const [43:0]u8 = "Determines the mapping scale of the colour."} = .{.type = f32, .minValue = 1, .maxValue = 20, .defaultValue = 3, .description = "Determines the mapping scale of the colour."}, comptime colorAlpha: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime description: *const [88:0]u8 = "Separate alpha controls for color1, color2 and colorBackground for AfterEffects support."} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{1, 1, 1}, .description = "Separate alpha controls for color1, color2 and colorBackground for AfterEffects support."}, comptime iterationColorBlend: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [80:0]u8 = "Add the illusion of depth by blending subsequent iterations into the background."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0, .description = "Add the illusion of depth by blending subsequent iterations into the background."}, comptime rotate: struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0, comptime description: *const [19:0]u8 = "Rotate the fractal."} = .{.type = f32, .minValue = -180, .maxValue = 180, .defaultValue = 0, .description = "Rotate the fractal."}, comptime size: struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 4096, comptime comptime_int = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_int = 512, comptime comptime_int = 512} = .{512, 512}, comptime description: *const [33:0]u8 = "The size of the rendered fractal."} = .{.type = @Vector(2, i32), .minValue = .{100, 100}, .maxValue = .{4096, 4096}, .defaultValue = .{512, 512}, .description = "The size of the rendered fractal."}, comptime zoom: struct{comptime type: type = f32, comptime minValue: comptime_float = -2, comptime maxValue: comptime_float = 13, comptime defaultValue: comptime_float = 0.1, comptime description: *const [13:0]u8 = "Primary zoom."} = .{.type = f32, .minValue = -2, .maxValue = 13, .defaultValue = 0.1, .description = "Primary zoom."}, comptime zoomFineTune: struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [19:0]u8 = "Fine tune the zoom."} = .{.type = f32, .minValue = -1, .maxValue = 1, .defaultValue = 0, .description = "Fine tune the zoom."}}`,length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"antialiasing",structure:we},{...e,type:8,isRequired:!1,slot:1,name:"center",structure:je},{...e,type:8,isRequired:!1,slot:2,name:"centerFineTune",structure:Ce},{...e,type:8,isRequired:!1,slot:3,name:"centerPreset",structure:Te},{...e,type:8,isRequired:!1,slot:4,name:"mandelbrot",structure:Fe},{...e,type:8,isRequired:!1,slot:5,name:"withPowerZ",structure:De},{...e,type:8,isRequired:!1,slot:6,name:"withSine",structure:Ne},{...e,type:8,isRequired:!1,slot:7,name:"withE",structure:ve},{...e,type:8,isRequired:!1,slot:8,name:"power",structure:Ke},{...e,type:8,isRequired:!1,slot:9,name:"powerFineTune",structure:Ze},{...e,type:8,isRequired:!1,slot:10,name:"mu",structure:Ge},{...e,type:8,isRequired:!1,slot:11,name:"muFineTune",structure:Qe},{...e,type:8,isRequired:!1,slot:12,name:"bailoutStyle",structure:Xe},{...e,type:8,isRequired:!1,slot:13,name:"bailout",structure:et},{...e,type:8,isRequired:!1,slot:14,name:"iterations",structure:st},{...e,type:8,isRequired:!1,slot:15,name:"iterationsOffset",structure:at},{...e,type:8,isRequired:!1,slot:16,name:"colorMode",structure:it},{...e,type:8,isRequired:!1,slot:17,name:"hsbColor",structure:ct},{...e,type:8,isRequired:!1,slot:18,name:"color1",structure:ut},{...e,type:8,isRequired:!1,slot:19,name:"color2",structure:pt},{...e,type:8,isRequired:!1,slot:20,name:"colorBackground",structure:dt},{...e,type:8,isRequired:!1,slot:21,name:"colorCycle",structure:ft},{...e,type:8,isRequired:!1,slot:22,name:"colorCycleOffset",structure:bt},{...e,type:8,isRequired:!1,slot:23,name:"colorCycleMirror",structure:ht},{...e,type:8,isRequired:!1,slot:24,name:"colorScale",structure:St},{...e,type:8,isRequired:!1,slot:25,name:"colorAlpha",structure:zt},{...e,type:8,isRequired:!1,slot:26,name:"iterationColorBlend",structure:qt},{...e,type:8,isRequired:!1,slot:27,name:"rotate",structure:Rt},{...e,type:8,isRequired:!1,slot:28,name:"size",structure:jt},{...e,type:8,isRequired:!1,slot:29,name:"zoom",structure:xt},{...e,type:8,isRequired:!1,slot:30,name:"zoomFineTune",structure:Ct}],methods:[],template:{memory:{array:G1},slots:{0:{structure:we,memory:{array:H1},slots:{0:{structure:vt,memory:{array:r},address:-1431655766}}},1:{structure:je,memory:{array:J1},slots:{0:{structure:Zt,memory:{array:r},address:-1431655766}}},2:{structure:Ce,memory:{array:Q1},slots:{0:{structure:Ht,memory:{array:r},address:-1431655766}}},3:{structure:Te,memory:{array:W1},slots:{0:{structure:Yt,memory:{array:r},address:-1431655766}}},4:{structure:Fe,memory:{array:X1},slots:{0:{structure:ss,memory:{array:r},address:-1431655766}}},5:{structure:De,memory:{array:Y1},slots:{0:{structure:ms,memory:{array:r},address:-1431655766}}},6:{structure:Ne,memory:{array:ec},slots:{0:{structure:ns,memory:{array:r},address:-1431655766}}},7:{structure:ve,memory:{array:tc},slots:{0:{structure:ls,memory:{array:r},address:-1431655766}}},8:{structure:Ke,memory:{array:sc},slots:{0:{structure:ps,memory:{array:r},address:-1431655766}}},9:{structure:Ze,memory:{array:rc},slots:{0:{structure:fs,memory:{array:r},address:-1431655766}}},10:{structure:Ge,memory:{array:ac},slots:{0:{structure:hs,memory:{array:r},address:-1431655766}}},11:{structure:Qe,memory:{array:mc},slots:{0:{structure:Vs,memory:{array:r},address:-1431655766}}},12:{structure:Xe,memory:{array:oc},slots:{0:{structure:qs,memory:{array:r},address:-1431655766}}},13:{structure:et,memory:{array:ic},slots:{0:{structure:ws,memory:{array:r},address:-1431655766}}},14:{structure:st,memory:{array:nc},slots:{0:{structure:js,memory:{array:r},address:-1431655766}}},15:{structure:at,memory:{array:cc},slots:{0:{structure:Ps,memory:{array:r},address:-1431655766}}},16:{structure:it,memory:{array:uc},slots:{0:{structure:Ms,memory:{array:r},address:-1431655766}}},17:{structure:ct,memory:{array:lc},slots:{0:{structure:Ns,memory:{array:r},address:-1431655766}}},18:{structure:ut,memory:{array:pc},slots:{0:{structure:Es,memory:{array:r},address:-1431655766}}},19:{structure:pt,memory:{array:yc},slots:{0:{structure:Ks,memory:{array:r},address:-1431655766}}},20:{structure:dt,memory:{array:dc},slots:{0:{structure:$s,memory:{array:r},address:-1431655766}}},21:{structure:ft,memory:{array:fc},slots:{0:{structure:Gs,memory:{array:r},address:-1431655766}}},22:{structure:bt,memory:{array:bc},slots:{0:{structure:Hs,memory:{array:r},address:-1431655766}}},23:{structure:ht,memory:{array:hc},slots:{0:{structure:Js,memory:{array:r},address:-1431655766}}},24:{structure:St,memory:{array:gc},slots:{0:{structure:Xs,memory:{array:r},address:-1431655766}}},25:{structure:zt,memory:{array:Sc},slots:{0:{structure:tr,memory:{array:r},address:-1431655766}}},26:{structure:qt,memory:{array:Vc},slots:{0:{structure:ar,memory:{array:r},address:-1431655766}}},27:{structure:Rt,memory:{array:zc},slots:{0:{structure:mr,memory:{array:r},address:-1431655766}}},28:{structure:jt,memory:{array:_c},slots:{0:{structure:pr,memory:{array:r},address:-1431655766}}},29:{structure:xt,memory:{array:qc},slots:{0:{structure:yr,memory:{array:r},address:-1431655766}}},30:{structure:Ct,memory:{array:Rc},slots:{0:{structure:dr,memory:{array:r},address:-1431655766}}}}}},slot:18});Object.assign(Pt,{...t,type:11,name:`*struct{comptime antialiasing: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 1, comptime description: *const [60:0]u8 = "Super sampling quality. Number of samples squared per pixel."} = .{.type = i32, .minValue = 1, .maxValue = 3, .defaultValue = 1, .description = "Super sampling quality. Number of samples squared per pixel."}, comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -2} = .{-2, -2}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 2} = .{2, 2}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [26:0]u8 = "The center of the fractal."} = .{.type = @Vector(2, f32), .minValue = .{-2, -2}, .maxValue = .{2, 2}, .defaultValue = .{0, 0}, .description = "The center of the fractal."}, comptime centerFineTune: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [30:0]u8 = "Fine tune the center position."} = .{.type = @Vector(2, f32), .minValue = .{-1, -1}, .maxValue = .{1, 1}, .defaultValue = .{0, 0}, .description = "Fine tune the center position."}, comptime centerPreset: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 4, comptime defaultValue: comptime_int = 0, comptime description: *const [49:0]u8 = "Some nice areas to explore in the Mandelbrot set.", comptime aeDisplayName: *const [24:0]u8 = "Mandelbrot center preset", comptime aeUIControl: *const [7:0]u8 = "aePopup", comptime aePopupString: *const [59:0]u8 = "Free control|Seahorse tail|Lightning|Spiral|Mini Mandelbrot"} = .{.type = i32, .minValue = 0, .maxValue = 4, .defaultValue = 0, .description = "Some nice areas to explore in the Mandelbrot set.", .aeDisplayName = "Mandelbrot center preset", .aeUIControl = "aePopup", .aePopupString = "Free control|Seahorse tail|Lightning|Spiral|Mini Mandelbrot"}, comptime mandelbrot: struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [37:0]u8 = "Use the standard Mandelbrot equation."} = .{.type = bool, .defaultValue = false, .description = "Use the standard Mandelbrot equation."}, comptime withPowerZ: struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [35:0]u8 = "Include z^z in the fractal equation"} = .{.type = bool, .defaultValue = false, .description = "Include z^z in the fractal equation"}, comptime withSine: struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [38:0]u8 = "Include sin(z) in the fractal equation"} = .{.type = bool, .defaultValue = false, .description = "Include sin(z) in the fractal equation"}, comptime withE: struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [36:0]u8 = "Include e(z) in the fractal equation"} = .{.type = bool, .defaultValue = false, .description = "Include e(z) in the fractal equation"}, comptime power: struct{comptime type: type = f32, comptime minValue: comptime_float = -12, comptime maxValue: comptime_float = 12, comptime defaultValue: comptime_float = 3, comptime description: *const [60:0]u8 = "Raise z to the power e in the fractal formula: z' = z^e + mu"} = .{.type = f32, .minValue = -12, .maxValue = 12, .defaultValue = 3, .description = "Raise z to the power e in the fractal formula: z' = z^e + mu"}, comptime powerFineTune: struct{comptime type: type = f32, comptime minValue: comptime_float = -0.1, comptime maxValue: comptime_float = 0.1, comptime defaultValue: comptime_float = 0, comptime description: *const [23:0]u8 = "Fine tune the exponent."} = .{.type = f32, .minValue = -0.1, .maxValue = 0.1, .defaultValue = 0, .description = "Fine tune the exponent."}, comptime mu: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.42, comptime comptime_float = 0} = .{0.42, 0}, comptime description: *const [59:0]u8 = "The complex parameter of the fractal formula: z' = z^e + mu"} = .{.type = @Vector(2, f32), .minValue = .{-1, -1}, .maxValue = .{1, 1}, .defaultValue = .{0.42, 0}, .description = "The complex parameter of the fractal formula: z' = z^e + mu"}, comptime muFineTune: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -0.01, comptime comptime_float = -0.01} = .{-0.01, -0.01}, comptime maxValue: struct{comptime comptime_float = 0.01, comptime comptime_float = 0.01} = .{0.01, 0.01}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [13:0]u8 = "Fine tune mu."} = .{.type = @Vector(2, f32), .minValue = .{-0.01, -0.01}, .maxValue = .{0.01, 0.01}, .defaultValue = .{0, 0}, .description = "Fine tune mu."}, comptime bailoutStyle: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 0, comptime description: *const [40:0]u8 = "Changes the style of the bailout effect.", comptime aeDisplayName: *const [13:0]u8 = "Bailout style", comptime aeUIControl: *const [7:0]u8 = "aePopup", comptime aePopupString: *const [26:0]u8 = "Smooth|Spiky|Stalks|Swirls"} = .{.type = i32, .minValue = 0, .maxValue = 3, .defaultValue = 0, .description = "Changes the style of the bailout effect.", .aeDisplayName = "Bailout style", .aeUIControl = "aePopup", .aePopupString = "Smooth|Spiky|Stalks|Swirls"}, comptime bailout: struct{comptime type: type = f32, comptime minValue: comptime_float = 2, comptime maxValue: comptime_float = 150, comptime defaultValue: comptime_float = 4, comptime description: *const [18:0]u8 = "Bailout threshold."} = .{.type = f32, .minValue = 2, .maxValue = 150, .defaultValue = 4, .description = "Bailout threshold."}, comptime iterations: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 300, comptime defaultValue: comptime_int = 70, comptime description: *const [108:0]u8 = "The maximum number of iterations for each pixel before bailout. Use to increase detail at the fractal edges."} = .{.type = i32, .minValue = 1, .maxValue = 300, .defaultValue = 70, .description = "The maximum number of iterations for each pixel before bailout. Use to increase detail at the fractal edges."}, comptime iterationsOffset: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 150, comptime defaultValue: comptime_int = 0, comptime description: *const [39:0]u8 = "Offset the start of the iteration count"} = .{.type = i32, .minValue = 0, .maxValue = 150, .defaultValue = 0, .description = "Offset the start of the iteration count"}, comptime colorMode: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 5, comptime defaultValue: comptime_int = 0, comptime description: *const [25:0]u8 = "Different colouring modes", comptime aeDisplayName: *const [14:0]u8 = "Colouring mode", comptime aeUIControl: *const [7:0]u8 = "aePopup", comptime aePopupString: *const [76:0]u8 = "Smooth|Shelf banding|Solid banding|Binary deconvolution|Contour bands|Spikes"} = .{.type = i32, .minValue = 0, .maxValue = 5, .defaultValue = 0, .description = "Different colouring modes", .aeDisplayName = "Colouring mode", .aeUIControl = "aePopup", .aePopupString = "Smooth|Shelf banding|Solid banding|Binary deconvolution|Contour bands|Spikes"}, comptime hsbColor: struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [42:0]u8 = "Use hue, saturation, brightness colouring."} = .{.type = bool, .defaultValue = false, .description = "Use hue, saturation, brightness colouring."}, comptime color1: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime description: *const [17:0]u8 = "The outer colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{1, 1, 1}, .description = "The outer colour.", .aeUIControl = "aeColor"}, comptime color2: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0.28, comptime comptime_float = 0.46} = .{0, 0.28, 0.46}, comptime description: *const [17:0]u8 = "The inner colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{0, 0.28, 0.46}, .description = "The inner colour.", .aeUIControl = "aeColor"}, comptime colorBackground: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime description: *const [22:0]u8 = "The background colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{0, 0, 0}, .description = "The background colour.", .aeUIControl = "aeColor"}, comptime colorCycle: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1, comptime description: *const [48:0]u8 = "The number of times the colour gradient repeats."} = .{.type = f32, .minValue = 1, .maxValue = 10, .defaultValue = 1, .description = "The number of times the colour gradient repeats."}, comptime colorCycleOffset: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [25:0]u8 = "Shift the colour mapping."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0, .description = "Shift the colour mapping."}, comptime colorCycleMirror: struct{comptime type: type = bool, comptime defaultValue: bool = true, comptime description: *const [48:0]u8 = "Reflect the colour gradient or use abrupt steps."} = .{.type = bool, .defaultValue = true, .description = "Reflect the colour gradient or use abrupt steps."}, comptime colorScale: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 20, comptime defaultValue: comptime_float = 3, comptime description: *const [43:0]u8 = "Determines the mapping scale of the colour."} = .{.type = f32, .minValue = 1, .maxValue = 20, .defaultValue = 3, .description = "Determines the mapping scale of the colour."}, comptime colorAlpha: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime description: *const [88:0]u8 = "Separate alpha controls for color1, color2 and colorBackground for AfterEffects support."} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{1, 1, 1}, .description = "Separate alpha controls for color1, color2 and colorBackground for AfterEffects support."}, comptime iterationColorBlend: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [80:0]u8 = "Add the illusion of depth by blending subsequent iterations into the background."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0, .description = "Add the illusion of depth by blending subsequent iterations into the background."}, comptime rotate: struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0, comptime description: *const [19:0]u8 = "Rotate the fractal."} = .{.type = f32, .minValue = -180, .maxValue = 180, .defaultValue = 0, .description = "Rotate the fractal."}, comptime size: struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 4096, comptime comptime_int = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_int = 512, comptime comptime_int = 512} = .{512, 512}, comptime description: *const [33:0]u8 = "The size of the rendered fractal."} = .{.type = @Vector(2, i32), .minValue = .{100, 100}, .maxValue = .{4096, 4096}, .defaultValue = .{512, 512}, .description = "The size of the rendered fractal."}, comptime zoom: struct{comptime type: type = f32, comptime minValue: comptime_float = -2, comptime maxValue: comptime_float = 13, comptime defaultValue: comptime_float = 0.1, comptime description: *const [13:0]u8 = "Primary zoom."} = .{.type = f32, .minValue = -2, .maxValue = 13, .defaultValue = 0.1, .description = "Primary zoom."}, comptime zoomFineTune: struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [19:0]u8 = "Fine tune the zoom."} = .{.type = f32, .minValue = -1, .maxValue = 1, .defaultValue = 0, .description = "Fine tune the zoom."}}`,length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fr}],methods:[],template:null},slot:17});const Uc=new Uint8Array([]);Object.assign(br,{...t,type:2,name:"@TypeOf(.{})",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Uc}}},slot:20});Object.assign(It,{...t,type:11,name:"*@TypeOf(.{})",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:br}],methods:[],template:null},slot:19});const wc=new Uint8Array([]),Ac=new Uint8Array([208,30,16,0]);Object.assign(hr,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:m}],methods:[],template:{memory:{array:wc},slots:{0:{structure:m,memory:{array:Ac},slots:{0:{structure:o,memory:{array:Wr},address:1056464}}}}}},slot:105});Object.assign(Tt,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:hr}],methods:[],template:null},slot:104});const Oc=new Uint8Array([]),jc=new Uint8Array([170,170,170,170]);Object.assign(gr,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:Tt}],methods:[],template:{memory:{array:Oc},slots:{0:{structure:Tt,memory:{array:jc},slots:{0:{structure:hr,memory:{array:r},address:-1431655766}}}}}},slot:22});Object.assign(kt,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:gr}],methods:[],template:null},slot:21});const xc=new Uint8Array([]),Cc=new Uint8Array([]),Pc=new Uint8Array([20,250,15,0]),Ic=new Uint8Array([213,1,17,0]),Tc=new Uint8Array([99,111,109,46,115,117,98,98,108,117,101,46,102,105,108,116,101,114,115,0]),kc=new Uint8Array([84,250,15,0]),Fc=new Uint8Array([201,1,17,0]),Mc=new Uint8Array([84,111,109,32,66,101,100,100,97,114,100,0]),Dc=new Uint8Array([148,250,15,0]),Bc=new Uint8Array([1,0,0,0]),Nc=new Uint8Array([236,250,15,0]),Ec=new Uint8Array([184,1,17,0]),vc=new Uint8Array([70,114,97,99,116,97,108,32,101,120,112,108,111,114,101,114,0]),Kc=new Uint8Array([68,251,15,0]),Lc=new Uint8Array([167,1,17,0]),Zc=new Uint8Array([70,114,97,99,116,97,108,32,69,120,112,108,111,114,101,114,0]),$c=new Uint8Array([156,251,15,0]),Gc=new Uint8Array([154,1,17,0]),Hc=new Uint8Array([80,105,120,101,108,32,66,101,110,100,101,114,0]),Jc=new Uint8Array([170,170,170,170]),Qc=new Uint8Array([170,170,170,170]),Wc=new Uint8Array([170,170,170,170]);Object.assign(Or,{...t,type:2,name:"fractal-explorer.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:xc}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:qe},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:Re},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:D},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:M},{...e,type:6,isRequired:!1,slot:4,name:"displayName",structure:M},{...e,type:6,isRequired:!1,slot:5,name:"category",structure:Ue},{...e,type:6,isRequired:!1,slot:6,name:"parameters",structure:Pt},{...e,type:6,isRequired:!1,slot:7,name:"inputImages",structure:It},{...e,type:6,isRequired:!1,slot:8,name:"outputImages",structure:kt}],methods:[],template:{memory:{array:Cc},slots:{0:{structure:qe,memory:{array:Pc},slots:{0:{structure:T,memory:{array:Ic},slots:{0:{structure:H,memory:{array:Tc},address:1114581}}}}},1:{structure:Re,memory:{array:kc},slots:{0:{structure:Bt,memory:{array:Fc},slots:{0:{structure:Dt,memory:{array:Mc},address:1114569}}}}},2:{structure:D,memory:{array:Dc},slots:{0:{structure:o,memory:{array:Bc}}}},3:{structure:M,memory:{array:Nc},slots:{0:{structure:ee,memory:{array:Ec},slots:{0:{structure:Y,memory:{array:vc},address:1114552}}}}},4:{structure:M,memory:{array:Kc},slots:{0:{structure:ee,memory:{array:Lc},slots:{0:{structure:Y,memory:{array:Zc},address:1114535}}}}},5:{structure:Ue,memory:{array:$c},slots:{0:{structure:Et,memory:{array:Gc},slots:{0:{structure:Nt,memory:{array:Hc},address:1114522}}}}},6:{structure:Pt,memory:{array:Jc},slots:{0:{structure:fr,memory:{array:r},address:-1431655766}}},7:{structure:It,memory:{array:Qc},slots:{0:{structure:br,memory:{array:r},address:-1431655766}}},8:{structure:kt,memory:{array:Wc},slots:{0:{structure:gr,memory:{array:r},address:-1431655766}}}}}},slot:1});const Xc=new Uint8Array([]);Object.assign(fe,{...t,type:2,name:"fractal-explorer.KernelInput(u8,fractal-explorer.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Xc}}},slot:23});Object.assign(Sr,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:i}],methods:[],template:null},slot:28});Object.assign(Vr,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:Sr}],methods:[],template:null},slot:27});Object.assign(zr,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Vr}],methods:[],template:null},slot:26});Object.assign(z,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:29});const Yc=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(jr,{...t,type:9,name:"fractal-explorer.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:o},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:o}],methods:[],template:{memory:{array:Yc}}},slot:30});Object.assign(Ft,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:Ft}],methods:[],template:null},slot:32});Object.assign(xr,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:n}],methods:[],template:null},slot:106});const eu=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),tu=new Uint8Array([]),su=new Uint8Array([40,253,15,0]),ru=new Uint8Array([4,0,0,0]);Object.assign(Mt,{...t,type:2,name:"fractal-explorer.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:zr},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:z},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:z},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:jr},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:c},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:Ft}],methods:[],template:{memory:{array:eu}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:Sr},{...e,type:7,isRequired:!1,name:"FPixel",structure:xr},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:D}],methods:[],template:{memory:{array:tu},slots:{0:{structure:D,memory:{array:su},slots:{0:{structure:o,memory:{array:ru}}}}}}},slot:25});const au=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),mu=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ou=new Uint8Array([0,0,0,0,0,0,0,0]),ea=new Uint8Array([]);Object.assign(be,{...t,type:2,name:"fractal-explorer.KernelOutput(u8,fractal-explorer.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:Mt}],methods:[],template:{memory:{array:au},slots:{0:{structure:Mt,memory:{array:mu},slots:{0:{structure:zr,memory:{array:ou},slots:{0:{structure:Vr,memory:{array:ea}}}}}}}}},slot:24});const iu=new Uint8Array([0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,41,92,143,62,31,133,235,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,10,215,62,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,64,64,0,0,0,0,0,0,0,0,0,0,128,64,70,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,64,64,0,0,0,0,0,0,0,0,205,204,204,61,0,0,0,0,0,0,0,0,0,1,0,0]);Object.assign(he,{...t,type:2,name:"fractal-explorer.KernelParameters(fractal-explorer.kernel)",length:1,byteSize:176,align:4,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:832,bitSize:32,byteSize:4,slot:0,name:"antialiasing",structure:o},{...e,type:6,isRequired:!1,bitOffset:512,bitSize:64,byteSize:8,slot:1,name:"center",structure:R},{...e,type:6,isRequired:!1,bitOffset:576,bitSize:64,byteSize:8,slot:2,name:"centerFineTune",structure:R},{...e,type:2,isRequired:!1,bitOffset:864,bitSize:32,byteSize:4,slot:3,name:"centerPreset",structure:o},{...e,type:1,isRequired:!1,bitOffset:1344,bitSize:1,byteSize:1,slot:4,name:"mandelbrot",structure:c},{...e,type:1,isRequired:!1,bitOffset:1352,bitSize:1,byteSize:1,slot:5,name:"withPowerZ",structure:c},{...e,type:1,isRequired:!1,bitOffset:1360,bitSize:1,byteSize:1,slot:6,name:"withSine",structure:c},{...e,type:1,isRequired:!1,bitOffset:1368,bitSize:1,byteSize:1,slot:7,name:"withE",structure:c},{...e,type:4,isRequired:!1,bitOffset:896,bitSize:32,byteSize:4,slot:8,name:"power",structure:n},{...e,type:4,isRequired:!1,bitOffset:928,bitSize:32,byteSize:4,slot:9,name:"powerFineTune",structure:n},{...e,type:6,isRequired:!1,bitOffset:640,bitSize:64,byteSize:8,slot:10,name:"mu",structure:R},{...e,type:6,isRequired:!1,bitOffset:704,bitSize:64,byteSize:8,slot:11,name:"muFineTune",structure:R},{...e,type:2,isRequired:!1,bitOffset:960,bitSize:32,byteSize:4,slot:12,name:"bailoutStyle",structure:o},{...e,type:4,isRequired:!1,bitOffset:992,bitSize:32,byteSize:4,slot:13,name:"bailout",structure:n},{...e,type:2,isRequired:!1,bitOffset:1024,bitSize:32,byteSize:4,slot:14,name:"iterations",structure:o},{...e,type:2,isRequired:!1,bitOffset:1056,bitSize:32,byteSize:4,slot:15,name:"iterationsOffset",structure:o},{...e,type:2,isRequired:!1,bitOffset:1088,bitSize:32,byteSize:4,slot:16,name:"colorMode",structure:o},{...e,type:1,isRequired:!1,bitOffset:1376,bitSize:1,byteSize:1,slot:17,name:"hsbColor",structure:c},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:96,byteSize:16,slot:18,name:"color1",structure:U},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:96,byteSize:16,slot:19,name:"color2",structure:U},{...e,type:6,isRequired:!1,bitOffset:256,bitSize:96,byteSize:16,slot:20,name:"colorBackground",structure:U},{...e,type:4,isRequired:!1,bitOffset:1120,bitSize:32,byteSize:4,slot:21,name:"colorCycle",structure:n},{...e,type:4,isRequired:!1,bitOffset:1152,bitSize:32,byteSize:4,slot:22,name:"colorCycleOffset",structure:n},{...e,type:1,isRequired:!1,bitOffset:1384,bitSize:1,byteSize:1,slot:23,name:"colorCycleMirror",structure:c},{...e,type:4,isRequired:!1,bitOffset:1184,bitSize:32,byteSize:4,slot:24,name:"colorScale",structure:n},{...e,type:6,isRequired:!1,bitOffset:384,bitSize:96,byteSize:16,slot:25,name:"colorAlpha",structure:U},{...e,type:4,isRequired:!1,bitOffset:1216,bitSize:32,byteSize:4,slot:26,name:"iterationColorBlend",structure:n},{...e,type:4,isRequired:!1,bitOffset:1248,bitSize:32,byteSize:4,slot:27,name:"rotate",structure:n},{...e,type:6,isRequired:!1,bitOffset:768,bitSize:64,byteSize:8,slot:28,name:"size",structure:or},{...e,type:4,isRequired:!1,bitOffset:1280,bitSize:32,byteSize:4,slot:29,name:"zoom",structure:n},{...e,type:4,isRequired:!1,bitOffset:1312,bitSize:32,byteSize:4,slot:30,name:"zoomFineTune",structure:n}],methods:[],template:{memory:{array:iu}}},slot:33});Object.assign(Cr,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(fractal-explorer.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:107});Object.assign(Pr,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(fractal-explorer.createOutput)).Fn.return_type.?).ErrorUnion.error_set!fractal-explorer.KernelOutput(u8,fractal-explorer.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:be},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Cr}],methods:[],template:null},slot:40});Object.assign(Ir,{...t,type:3,name:"createOutput",length:1,byteSize:224,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:1408,bitSize:32,byteSize:4,slot:0,name:"0",structure:z},{...e,type:3,bitOffset:1440,bitSize:32,byteSize:4,slot:1,name:"1",structure:z},{...e,type:6,bitOffset:1792,bitSize:0,byteSize:0,slot:2,name:"2",structure:fe},{...e,type:6,bitOffset:0,bitSize:1408,byteSize:176,slot:3,name:"3",structure:he},{...e,type:6,bitOffset:1472,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Pr}],methods:[],template:null},slot:38});Object.assign(Tr,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(fractal-explorer.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:108});Object.assign(kr,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(fractal-explorer.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!fractal-explorer.KernelOutput(u8,fractal-explorer.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:be},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Tr}],methods:[],template:null},slot:41});Object.assign(Fr,{...t,type:3,name:"createPartialOutput",length:1,byteSize:224,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:1408,bitSize:32,byteSize:4,slot:0,name:"0",structure:z},{...e,type:3,bitOffset:1440,bitSize:32,byteSize:4,slot:1,name:"1",structure:z},{...e,type:3,bitOffset:1472,bitSize:32,byteSize:4,slot:2,name:"2",structure:z},{...e,type:3,bitOffset:1504,bitSize:32,byteSize:4,slot:3,name:"3",structure:z},{...e,type:6,bitOffset:1792,bitSize:0,byteSize:0,slot:4,name:"4",structure:fe},{...e,type:6,bitOffset:0,bitSize:1408,byteSize:176,slot:5,name:"5",structure:he},{...e,type:6,bitOffset:1536,bitSize:224,byteSize:28,slot:6,name:"retval",structure:kr}],methods:[],template:null},slot:39});const nu={argStruct:Ir,thunk:8,name:"createOutput"},cu={argStruct:Fr,thunk:2,name:"createPartialOutput"};Object.assign(Mr,{...t,type:2,name:"fractal-explorer",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ea}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:Or},{...e,type:7,isRequired:!1,name:"Input",structure:fe},{...e,type:7,isRequired:!1,name:"Output",structure:be},{...e,type:7,isRequired:!1,name:"Parameters",structure:he}],methods:[nu,cu],template:null},slot:0});const uu=[i,H,T,qe,Dt,Bt,Re,o,D,Y,ee,M,Nt,Et,Ue,m,te,se,B,vt,we,n,R,a,s,Kt,Ae,Lt,Oe,J,x,re,ae,N,Zt,je,me,E,oe,v,$t,Gt,xe,Ht,Ce,Jt,Qt,Pe,Wt,Xt,Ie,A,O,g,ie,ne,K,Yt,Te,c,S,es,ts,ke,ss,Fe,rs,as,Me,ms,De,os,is,Be,ns,Ne,cs,us,Ee,ls,ve,ps,Ke,ys,ds,Le,fs,Ze,bs,$e,hs,Ge,gs,He,Ss,Je,Q,W,C,Vs,Qe,zs,_s,We,qs,Xe,Rs,Us,Ye,ws,et,As,Os,tt,js,st,xs,Cs,rt,Ps,at,ce,ue,L,Is,Ts,mt,ks,Fs,ot,Ms,it,Ds,Bs,nt,Ns,ct,U,P,V,w,b,le,pe,Z,Es,ut,vs,lt,Ks,pt,Ls,Zs,yt,$s,dt,ye,de,$,Gs,ft,Hs,bt,Js,ht,Qs,Ws,gt,Xs,St,Ys,er,Vt,tr,zt,sr,rr,_t,ar,qt,G,mr,Rt,or,ir,Ut,nr,wt,cr,At,ur,lr,Ot,pr,jt,yr,xt,dr,Ct,fr,Pt,br,It,hr,Tt,gr,kt,Or,fe,Sr,Vr,zr,z,jr,Ft,xr,Mt,be,he,Cr,Pr,Ir,Tr,kr,Fr,Mr],lu=za(uu),pu=Mr.constructor,yu=(async()=>{const y=new URL("fractal-explorer-3cff4f00.wasm",import.meta.url).href;return fetch(y)})();_a(yu,{...lu,writeBack:!0});const{createOutput:zu,createPartialOutput:du,kernel:Ar,Input:fu,Output:_u,Parameters:qu}=pu;function bu(y,f,l,u,p={},k={}){if(Array.isArray(p)){const j=p;p={};for(const[q,F]of Object.keys(Ar.inputImages).entries())p[F]=j[q]}const Se=new fu(void 0),Ve=Object.keys(Ar.inputImages),d=[];let X;for(const j of Ve){let q=p[j];if(q||(Ve.length===1&&["data","width","height"].every(F=>!!p[F])?q=p:d.push(j)),Se[j]=q,X){if(q.colorSpace!==X)throw new Error(`Input images must all use the same color space: ${X}`)}else X=q.colorSpace}if(d.length>0)throw new Error(`Missing input image${d.length>1?"s":""}: ${d.join(", ")}`);const _r=du(y,f,l,u,Se,k),vr=j=>{const q=Object.keys(j),F={};for(const Kr of q){const{data:{typedArray:ze},width:Lr,height:sa}=j[Kr];let _e;if(typeof ImageData=="function"){const ra=new Uint8ClampedArray(ze.buffer,ze.byteOffset,ze.byteLength);_e=new ImageData(ra,Lr,u,{colorSpace:X})}else _e={data:ze,width:Lr,height:sa};if(q.length===1)return _e;F[Kr]=_e}return F};return _r[Symbol.toStringTag]==="Promise"?_r.then(vr):vr(_r)}function hu(){const y={};for(let[f,l]of Object.entries(Ar)){if(f==="parameters"){const u={};for(const[p,k]of Object.entries(l)){const Se=u[p]={};for(let[Ve,d]of Object.entries(k))typeof d=="object"?"string"in d?d=d.string:d=ta(d):typeof d=="function"&&(d=gu(d.name)),Se[Ve]=d}l=u}else typeof l=="object"&&("string"in l?l=l.string:l=l.valueOf());y[f]=l}return y}function ta(y){const f=[];for(let[l,u]of Object.entries(y))typeof u=="object"&&(u=ta(u)),f[l]=u;return f}function gu(y){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[y]}onmessage=y=>{const[f,l,...u]=y.data;Su(f,u).then(([p,k])=>{postMessage([f,l,p],{transfer:k})}).catch(p=>{postMessage(["error",l,p])})};async function Su(y,f){switch(y){case"getKernelInfo":return[hu(...f)];case"createPartialImageData":const u=await bu(...f),p=[];if("data"in u&&"width"in u&&"height"in u)p.push(u.data.buffer);else for(const k of Object.entries(u))p.push(u.data.buffer);return[u,p];default:throw new Error(`Unknown function: ${y}`)}}
