import{u as rs,a as ms,b as as,c as is,d as os,e as cs,f as ns,g as us,h as ls,i as ps,j as ys,k as fs,l as ds,m as bs,n as hs,o as gs,p as zs,q as Ss,r as _s}from"./index-778418ea.js";rs();ms();as();is();os();cs();ns();us();ls();ps();ys();fs();ds();bs();hs();gs();zs();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},l={},Ee={},Ke={},Z={},Fe={},Te={},ee={},b={},V={},Me={},$e={},te={},d={},u={},m={},s={},R={},f={},O={},g={},Be={},se={},Le={},Ge={},re={},He={},me={},Je={},ae={},$={},B={},P={},Ne={},ie={},Qe={},oe={},We={},ce={},Xe={},ne={},Ye={},Ze={},ue={},et={},le={},tt={},pe={},st={},ye={},C={},S={},L={},G={},v={},rt={},fe={},mt={},at={},de={},it={},be={},ot={},he={},ct={},ge={},nt={},ut={},ze={},lt={},Se={},pt={},yt={},_e={},ft={},Ve={},dt={},bt={},qe={},ht={},Re={},gt={},E={},j={},zt={},we={},St={},Oe={},_t={},Ae={},Vt={},Ue={},qt={},je={},Rt={},xe={},wt={},Pe={},Ce={},k={},_={},Ot={},ve={},At={},ke={},Dt={},I={},K={},F={},y={},Ut={},T={},M={},jt={},x={},H={},xt={},Pt={},Ie={},J={},N={},Et={},Kt={},Ft={},Tt={},Mt={},$t={},Bt={};Object.assign(l,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:l}],methods:[],template:null},slot:5});Object.assign(Ee,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:l}],methods:[],template:null},slot:4});Object.assign(Ke,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ee}],methods:[],template:null},slot:3});Object.assign(Z,{...t,type:11,name:"**const [13:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ke}],methods:[],template:null},slot:2});Object.assign(Fe,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:l}],methods:[],template:null},slot:8});Object.assign(Te,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Fe}],methods:[],template:null},slot:7});Object.assign(ee,{...t,type:11,name:"**const [14:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Te}],methods:[],template:null},slot:6});Object.assign(b,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:10});Object.assign(V,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:b}],methods:[],template:null},slot:9});Object.assign(Me,{...t,type:1,name:"[35:0]u8",length:35,byteSize:36,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:l}],methods:[],template:null},slot:13});Object.assign($e,{...t,type:11,name:"*const [35:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Me}],methods:[],template:null},slot:12});Object.assign(te,{...t,type:11,name:"**const [35:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$e}],methods:[],template:null},slot:11});Object.assign(d,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:d}],methods:[],template:null},slot:34});Object.assign(u,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:d}],methods:[],template:null},slot:33});Object.assign(m,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:m}],methods:[],template:null},slot:96});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:95});const Vs=new Uint8Array([]),qs=new Uint8Array([144,30,16,0]),Jt=new Uint8Array([0,0,0,0,0,192,114,192]),Rs=new Uint8Array([144,30,16,0]);Object.assign(R,{...t,type:2,name:"struct{comptime comptime_float = -300, comptime comptime_float = -300}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Vs},slots:{0:{structure:s,memory:{array:qs},slots:{0:{structure:m,memory:{array:Jt},address:1056400}}},1:{structure:s,memory:{array:Rs},slots:{0:{structure:m,memory:{array:Jt},address:1056400}}}}}},slot:66});Object.assign(f,{...t,type:11,name:"*const struct{comptime comptime_float = -300, comptime comptime_float = -300}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:65});const ws=new Uint8Array([]),Os=new Uint8Array([136,30,16,0]),Nt=new Uint8Array([0,0,0,0,0,32,140,64]),As=new Uint8Array([136,30,16,0]);Object.assign(O,{...t,type:2,name:"struct{comptime comptime_float = 900, comptime comptime_float = 900}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:ws},slots:{0:{structure:s,memory:{array:Os},slots:{0:{structure:m,memory:{array:Nt},address:1056392}}},1:{structure:s,memory:{array:As},slots:{0:{structure:m,memory:{array:Nt},address:1056392}}}}}},slot:68});Object.assign(g,{...t,type:11,name:"*const struct{comptime comptime_float = 900, comptime comptime_float = 900}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:O}],methods:[],template:null},slot:67});const Us=new Uint8Array([]),js=new Uint8Array([128,30,16,0]),xs=new Uint8Array([0,0,0,0,0,0,73,64]),Ps=new Uint8Array([96,30,16,0]),Ct=new Uint8Array([0,0,0,0,0,0,105,64]);Object.assign(Be,{...t,type:2,name:"struct{comptime comptime_float = 50, comptime comptime_float = 200}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Us},slots:{0:{structure:s,memory:{array:js},slots:{0:{structure:m,memory:{array:xs},address:1056384}}},1:{structure:s,memory:{array:Ps},slots:{0:{structure:m,memory:{array:Ct},address:1056352}}}}}},slot:70});Object.assign(se,{...t,type:11,name:"*const struct{comptime comptime_float = 50, comptime comptime_float = 200}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Be}],methods:[],template:null},slot:69});Object.assign(Le,{...t,type:1,name:"[31:0]u8",length:31,byteSize:32,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:l}],methods:[],template:null},slot:73});Object.assign(Ge,{...t,type:11,name:"*const [31:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Le}],methods:[],template:null},slot:72});Object.assign(re,{...t,type:11,name:"*const *const [31:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ge}],methods:[],template:null},slot:71});const Cs=new Uint8Array([]),vs=new Uint8Array([170,170,170,170]),r=new Uint8Array([]),ks=new Uint8Array([170,170,170,170]),Is=new Uint8Array([170,170,170,170]),Ds=new Uint8Array([196,30,16,0]),Es=new Uint8Array([57,32,16,0]),Ks=new Uint8Array([115,116,97,114,116,32,112,111,105,110,116,32,102,111,114,32,98,101,122,105,101,114,32,115,101,113,117,101,110,99,101,0]);Object.assign(He,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 900, comptime comptime_float = 900} = .{900, 900}, comptime defaultValue: struct{comptime comptime_float = 50, comptime comptime_float = 200} = .{50, 200}, comptime description: *const [31:0]u8 = "start point for bezier sequence"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:f},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:g},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:se},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:re}],methods:[],template:{memory:{array:Cs},slots:{0:{structure:f,memory:{array:vs},slots:{0:{structure:R,memory:{array:r},address:-1431655766}}},1:{structure:g,memory:{array:ks},slots:{0:{structure:O,memory:{array:r},address:-1431655766}}},2:{structure:se,memory:{array:Is},slots:{0:{structure:Be,memory:{array:r},address:-1431655766}}},3:{structure:re,memory:{array:Ds},slots:{0:{structure:Ge,memory:{array:Es},address:1056452,slots:{0:{structure:Le,memory:{array:Ks},address:1056825}}}}}}}},slot:41});Object.assign(me,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 900, comptime comptime_float = 900} = .{900, 900}, comptime defaultValue: struct{comptime comptime_float = 50, comptime comptime_float = 200} = .{50, 200}, comptime description: *const [31:0]u8 = "start point for bezier sequence"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:He}],methods:[],template:null},slot:40});const Fs=new Uint8Array([]),Ts=new Uint8Array([96,30,16,0]),Ms=new Uint8Array([120,30,16,0]),$s=new Uint8Array([0,0,0,0,0,0,89,64]);Object.assign(Je,{...t,type:2,name:"struct{comptime comptime_float = 200, comptime comptime_float = 100}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Fs},slots:{0:{structure:s,memory:{array:Ts},slots:{0:{structure:m,memory:{array:Ct},address:1056352}}},1:{structure:s,memory:{array:Ms},slots:{0:{structure:m,memory:{array:$s},address:1056376}}}}}},slot:75});Object.assign(ae,{...t,type:11,name:"*const struct{comptime comptime_float = 200, comptime comptime_float = 100}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Je}],methods:[],template:null},slot:74});Object.assign($,{...t,type:1,name:"[39:0]u8",length:39,byteSize:40,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:l}],methods:[],template:null},slot:78});Object.assign(B,{...t,type:11,name:"*const [39:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:77});Object.assign(P,{...t,type:11,name:"*const *const [39:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:76});const Bs=new Uint8Array([]),Ls=new Uint8Array([170,170,170,170]),Gs=new Uint8Array([170,170,170,170]),Hs=new Uint8Array([170,170,170,170]),Js=new Uint8Array([192,30,16,0]),Yt=new Uint8Array([17,32,16,0]),Zt=new Uint8Array([102,105,114,115,116,32,99,111,110,116,114,111,108,32,112,111,105,110,116,32,102,111,114,32,98,101,122,105,101,114,32,115,101,113,117,101,110,99,101,0]);Object.assign(Ne,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 900, comptime comptime_float = 900} = .{900, 900}, comptime defaultValue: struct{comptime comptime_float = 200, comptime comptime_float = 100} = .{200, 100}, comptime description: *const [39:0]u8 = "first control point for bezier sequence"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:f},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:g},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:ae},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:P}],methods:[],template:{memory:{array:Bs},slots:{0:{structure:f,memory:{array:Ls},slots:{0:{structure:R,memory:{array:r},address:-1431655766}}},1:{structure:g,memory:{array:Gs},slots:{0:{structure:O,memory:{array:r},address:-1431655766}}},2:{structure:ae,memory:{array:Hs},slots:{0:{structure:Je,memory:{array:r},address:-1431655766}}},3:{structure:P,memory:{array:Js},slots:{0:{structure:B,memory:{array:Yt},address:1056448,slots:{0:{structure:$,memory:{array:Zt},address:1056785}}}}}}}},slot:43});Object.assign(ie,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 900, comptime comptime_float = 900} = .{900, 900}, comptime defaultValue: struct{comptime comptime_float = 200, comptime comptime_float = 100} = .{200, 100}, comptime description: *const [39:0]u8 = "first control point for bezier sequence"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ne}],methods:[],template:null},slot:42});const Ns=new Uint8Array([]),Qs=new Uint8Array([112,30,16,0]),Ws=new Uint8Array([0,0,0,0,0,0,121,64]),Xs=new Uint8Array([72,30,16,0]),kt=new Uint8Array([0,0,0,0,0,192,114,64]);Object.assign(Qe,{...t,type:2,name:"struct{comptime comptime_float = 400, comptime comptime_float = 300}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Ns},slots:{0:{structure:s,memory:{array:Qs},slots:{0:{structure:m,memory:{array:Ws},address:1056368}}},1:{structure:s,memory:{array:Xs},slots:{0:{structure:m,memory:{array:kt},address:1056328}}}}}},slot:80});Object.assign(oe,{...t,type:11,name:"*const struct{comptime comptime_float = 400, comptime comptime_float = 300}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Qe}],methods:[],template:null},slot:79});const Ys=new Uint8Array([]),Zs=new Uint8Array([170,170,170,170]),er=new Uint8Array([170,170,170,170]),tr=new Uint8Array([170,170,170,170]),sr=new Uint8Array([192,30,16,0]);Object.assign(We,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 900, comptime comptime_float = 900} = .{900, 900}, comptime defaultValue: struct{comptime comptime_float = 400, comptime comptime_float = 300} = .{400, 300}, comptime description: *const [39:0]u8 = "first control point for bezier sequence"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:f},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:g},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:oe},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:P}],methods:[],template:{memory:{array:Ys},slots:{0:{structure:f,memory:{array:Zs},slots:{0:{structure:R,memory:{array:r},address:-1431655766}}},1:{structure:g,memory:{array:er},slots:{0:{structure:O,memory:{array:r},address:-1431655766}}},2:{structure:oe,memory:{array:tr},slots:{0:{structure:Qe,memory:{array:r},address:-1431655766}}},3:{structure:P,memory:{array:sr},slots:{0:{structure:B,memory:{array:Yt},address:1056448,slots:{0:{structure:$,memory:{array:Zt},address:1056785}}}}}}}},slot:45});Object.assign(ce,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 900, comptime comptime_float = 900} = .{900, 900}, comptime defaultValue: struct{comptime comptime_float = 400, comptime comptime_float = 300} = .{400, 300}, comptime description: *const [39:0]u8 = "first control point for bezier sequence"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:We}],methods:[],template:null},slot:44});const rr=new Uint8Array([]),mr=new Uint8Array([104,30,16,0]),ar=new Uint8Array([0,0,0,0,0,48,129,64]),ir=new Uint8Array([96,30,16,0]);Object.assign(Xe,{...t,type:2,name:"struct{comptime comptime_float = 550, comptime comptime_float = 200}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:rr},slots:{0:{structure:s,memory:{array:mr},slots:{0:{structure:m,memory:{array:ar},address:1056360}}},1:{structure:s,memory:{array:ir},slots:{0:{structure:m,memory:{array:Ct},address:1056352}}}}}},slot:82});Object.assign(ne,{...t,type:11,name:"*const struct{comptime comptime_float = 550, comptime comptime_float = 200}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Xe}],methods:[],template:null},slot:81});Object.assign(Ye,{...t,type:1,name:"[29:0]u8",length:29,byteSize:30,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:l}],methods:[],template:null},slot:85});Object.assign(Ze,{...t,type:11,name:"*const [29:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ye}],methods:[],template:null},slot:84});Object.assign(ue,{...t,type:11,name:"*const *const [29:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ze}],methods:[],template:null},slot:83});const or=new Uint8Array([]),cr=new Uint8Array([170,170,170,170]),nr=new Uint8Array([170,170,170,170]),ur=new Uint8Array([170,170,170,170]),lr=new Uint8Array([188,30,16,0]),pr=new Uint8Array([243,31,16,0]),yr=new Uint8Array([101,110,100,32,112,111,105,110,116,32,102,111,114,32,98,101,122,105,101,114,32,115,101,113,117,101,110,99,101,0]);Object.assign(et,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 900, comptime comptime_float = 900} = .{900, 900}, comptime defaultValue: struct{comptime comptime_float = 550, comptime comptime_float = 200} = .{550, 200}, comptime description: *const [29:0]u8 = "end point for bezier sequence"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:f},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:g},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:ne},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:ue}],methods:[],template:{memory:{array:or},slots:{0:{structure:f,memory:{array:cr},slots:{0:{structure:R,memory:{array:r},address:-1431655766}}},1:{structure:g,memory:{array:nr},slots:{0:{structure:O,memory:{array:r},address:-1431655766}}},2:{structure:ne,memory:{array:ur},slots:{0:{structure:Xe,memory:{array:r},address:-1431655766}}},3:{structure:ue,memory:{array:lr},slots:{0:{structure:Ze,memory:{array:pr},address:1056444,slots:{0:{structure:Ye,memory:{array:yr},address:1056755}}}}}}}},slot:47});Object.assign(le,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 900, comptime comptime_float = 900} = .{900, 900}, comptime defaultValue: struct{comptime comptime_float = 550, comptime comptime_float = 200} = .{550, 200}, comptime description: *const [29:0]u8 = "end point for bezier sequence"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:et}],methods:[],template:null},slot:46});const fr=new Uint8Array([]),dr=new Uint8Array([88,30,16,0]),Qt=new Uint8Array([0,0,0,0,0,0,224,63]),br=new Uint8Array([88,30,16,0]);Object.assign(tt,{...t,type:2,name:"struct{comptime comptime_float = 0.5, comptime comptime_float = 0.5}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:fr},slots:{0:{structure:s,memory:{array:dr},slots:{0:{structure:m,memory:{array:Qt},address:1056344}}},1:{structure:s,memory:{array:br},slots:{0:{structure:m,memory:{array:Qt},address:1056344}}}}}},slot:87});Object.assign(pe,{...t,type:11,name:"*const struct{comptime comptime_float = 0.5, comptime comptime_float = 0.5}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:tt}],methods:[],template:null},slot:86});const hr=new Uint8Array([]),gr=new Uint8Array([80,30,16,0]),Wt=new Uint8Array([0,0,0,0,0,0,4,64]),zr=new Uint8Array([80,30,16,0]);Object.assign(st,{...t,type:2,name:"struct{comptime comptime_float = 2.5, comptime comptime_float = 2.5}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:hr},slots:{0:{structure:s,memory:{array:gr},slots:{0:{structure:m,memory:{array:Wt},address:1056336}}},1:{structure:s,memory:{array:zr},slots:{0:{structure:m,memory:{array:Wt},address:1056336}}}}}},slot:89});Object.assign(ye,{...t,type:11,name:"*const struct{comptime comptime_float = 2.5, comptime comptime_float = 2.5}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:st}],methods:[],template:null},slot:88});const Sr=new Uint8Array([]),_r=new Uint8Array([48,30,16,0]),w=new Uint8Array([0,0,0,0,0,0,240,63]),Vr=new Uint8Array([48,30,16,0]);Object.assign(C,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Sr},slots:{0:{structure:s,memory:{array:_r},slots:{0:{structure:m,memory:{array:w},address:1056304}}},1:{structure:s,memory:{array:Vr},slots:{0:{structure:m,memory:{array:w},address:1056304}}}}}},slot:91});Object.assign(S,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:C}],methods:[],template:null},slot:90});Object.assign(L,{...t,type:1,name:"[24:0]u8",length:24,byteSize:25,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:l}],methods:[],template:null},slot:94});Object.assign(G,{...t,type:11,name:"*const [24:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:93});Object.assign(v,{...t,type:11,name:"*const *const [24:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:92});const qr=new Uint8Array([]),Rr=new Uint8Array([170,170,170,170]),wr=new Uint8Array([170,170,170,170]),Or=new Uint8Array([170,170,170,170]),Ar=new Uint8Array([184,30,16,0]),Ur=new Uint8Array([218,31,16,0]),jr=new Uint8Array([83,99,97,108,101,115,32,116,104,101,32,116,101,120,116,117,114,101,32,105,109,97,103,101,0]);Object.assign(rt,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0.5, comptime comptime_float = 0.5} = .{0.5, 0.5}, comptime maxValue: struct{comptime comptime_float = 2.5, comptime comptime_float = 2.5} = .{2.5, 2.5}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime description: *const [24:0]u8 = "Scales the texture image"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:pe},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:ye},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:S},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:v}],methods:[],template:{memory:{array:qr},slots:{0:{structure:pe,memory:{array:Rr},slots:{0:{structure:tt,memory:{array:r},address:-1431655766}}},1:{structure:ye,memory:{array:wr},slots:{0:{structure:st,memory:{array:r},address:-1431655766}}},2:{structure:S,memory:{array:Or},slots:{0:{structure:C,memory:{array:r},address:-1431655766}}},3:{structure:v,memory:{array:Ar},slots:{0:{structure:G,memory:{array:Ur},address:1056440,slots:{0:{structure:L,memory:{array:jr},address:1056730}}}}}}}},slot:49});Object.assign(fe,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0.5, comptime comptime_float = 0.5} = .{0.5, 0.5}, comptime maxValue: struct{comptime comptime_float = 2.5, comptime comptime_float = 2.5} = .{2.5, 2.5}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime description: *const [24:0]u8 = "Scales the texture image"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:rt}],methods:[],template:null},slot:48});Object.assign(mt,{...t,type:1,name:"[42:0]u8",length:42,byteSize:43,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:l}],methods:[],template:null},slot:99});Object.assign(at,{...t,type:11,name:"*const [42:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:mt}],methods:[],template:null},slot:98});Object.assign(de,{...t,type:11,name:"*const *const [42:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:at}],methods:[],template:null},slot:97});const xr=new Uint8Array([]),Pr=new Uint8Array([56,30,16,0]),q=new Uint8Array([0,0,0,0,0,0,0,0]),Cr=new Uint8Array([176,30,16,0]),vr=new Uint8Array([0,0,0,0,0,64,127,64]),kr=new Uint8Array([96,30,16,0]),Ir=new Uint8Array([172,30,16,0]),Dr=new Uint8Array([175,31,16,0]),Er=new Uint8Array([105,109,97,103,101,119,105,100,116,104,58,32,104,111,119,32,119,105,100,101,32,116,104,101,32,114,101,112,101,97,116,105,110,103,32,112,97,114,116,32,105,115,0]);Object.assign(it,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 500, comptime defaultValue: comptime_float = 200, comptime description: *const [42:0]u8 = "imagewidth: how wide the repeating part is"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:de}],methods:[],template:{memory:{array:xr},slots:{0:{structure:s,memory:{array:Pr},slots:{0:{structure:m,memory:{array:q},address:1056312}}},1:{structure:s,memory:{array:Cr},slots:{0:{structure:m,memory:{array:vr},address:1056432}}},2:{structure:s,memory:{array:kr},slots:{0:{structure:m,memory:{array:Ct},address:1056352}}},3:{structure:de,memory:{array:Ir},slots:{0:{structure:at,memory:{array:Dr},address:1056428,slots:{0:{structure:mt,memory:{array:Er},address:1056687}}}}}}}},slot:51});Object.assign(be,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 500, comptime defaultValue: comptime_float = 200, comptime description: *const [42:0]u8 = "imagewidth: how wide the repeating part is"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:it}],methods:[],template:null},slot:50});const Kr=new Uint8Array([]),Fr=new Uint8Array([72,30,16,0]),Tr=new Uint8Array([72,30,16,0]);Object.assign(ot,{...t,type:2,name:"struct{comptime comptime_float = 300, comptime comptime_float = 300}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Kr},slots:{0:{structure:s,memory:{array:Fr},slots:{0:{structure:m,memory:{array:kt},address:1056328}}},1:{structure:s,memory:{array:Tr},slots:{0:{structure:m,memory:{array:kt},address:1056328}}}}}},slot:101});Object.assign(he,{...t,type:11,name:"*const struct{comptime comptime_float = 300, comptime comptime_float = 300}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ot}],methods:[],template:null},slot:100});const Mr=new Uint8Array([]),$r=new Uint8Array([56,30,16,0]),Br=new Uint8Array([56,30,16,0]);Object.assign(ct,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Mr},slots:{0:{structure:s,memory:{array:$r},slots:{0:{structure:m,memory:{array:q},address:1056312}}},1:{structure:s,memory:{array:Br},slots:{0:{structure:m,memory:{array:q},address:1056312}}}}}},slot:103});Object.assign(ge,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ct}],methods:[],template:null},slot:102});Object.assign(nt,{...t,type:1,name:"[87:0]u8",length:87,byteSize:88,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:l}],methods:[],template:null},slot:106});Object.assign(ut,{...t,type:11,name:"*const [87:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:nt}],methods:[],template:null},slot:105});Object.assign(ze,{...t,type:11,name:"*const *const [87:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ut}],methods:[],template:null},slot:104});const Lr=new Uint8Array([]),Gr=new Uint8Array([170,170,170,170]),Hr=new Uint8Array([170,170,170,170]),Jr=new Uint8Array([170,170,170,170]),Nr=new Uint8Array([168,30,16,0]),Qr=new Uint8Array([87,31,16,0]),Wr=new Uint8Array([111,102,102,115,101,116,46,120,61,68,105,115,112,108,97,99,101,109,101,110,116,32,97,108,111,110,103,32,116,104,101,32,99,117,114,118,101,44,32,111,102,102,115,101,116,46,121,61,68,105,115,112,108,97,99,101,109,101,110,116,32,112,101,114,112,101,110,100,105,99,117,108,97,114,32,116,111,32,116,104,101,32,99,117,114,118,101,0]);Object.assign(lt,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 300, comptime comptime_float = 300} = .{300, 300}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [87:0]u8 = "offset.x=Displacement along the curve, offset.y=Displacement perpendicular to the curve"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:f},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:he},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:ge},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:ze}],methods:[],template:{memory:{array:Lr},slots:{0:{structure:f,memory:{array:Gr},slots:{0:{structure:R,memory:{array:r},address:-1431655766}}},1:{structure:he,memory:{array:Hr},slots:{0:{structure:ot,memory:{array:r},address:-1431655766}}},2:{structure:ge,memory:{array:Jr},slots:{0:{structure:ct,memory:{array:r},address:-1431655766}}},3:{structure:ze,memory:{array:Nr},slots:{0:{structure:ut,memory:{array:Qr},address:1056424,slots:{0:{structure:nt,memory:{array:Wr},address:1056599}}}}}}}},slot:53});Object.assign(Se,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 300, comptime comptime_float = 300} = .{300, 300}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [87:0]u8 = "offset.x=Displacement along the curve, offset.y=Displacement perpendicular to the curve"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:lt}],methods:[],template:null},slot:52});Object.assign(pt,{...t,type:1,name:"[61:0]u8",length:61,byteSize:62,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:l}],methods:[],template:null},slot:109});Object.assign(yt,{...t,type:11,name:"*const [61:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pt}],methods:[],template:null},slot:108});Object.assign(_e,{...t,type:11,name:"*const *const [61:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:yt}],methods:[],template:null},slot:107});const Xr=new Uint8Array([]),Yr=new Uint8Array([56,30,16,0]),Zr=new Uint8Array([48,30,16,0]),em=new Uint8Array([56,30,16,0]),tm=new Uint8Array([164,30,16,0]),sm=new Uint8Array([25,31,16,0]),rm=new Uint8Array([116,104,101,32,100,101,102,97,117,108,116,32,48,32,109,101,97,110,115,32,116,104,97,116,32,116,104,101,32,99,117,114,118,101,32,115,116,97,114,116,115,32,102,114,111,109,32,116,104,101,32,115,116,97,114,116,112,111,105,110,116,0]);Object.assign(ft,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [61:0]u8 = "the default 0 means that the curve starts from the startpoint"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:_e}],methods:[],template:{memory:{array:Xr},slots:{0:{structure:s,memory:{array:Yr},slots:{0:{structure:m,memory:{array:q},address:1056312}}},1:{structure:s,memory:{array:Zr},slots:{0:{structure:m,memory:{array:w},address:1056304}}},2:{structure:s,memory:{array:em},slots:{0:{structure:m,memory:{array:q},address:1056312}}},3:{structure:_e,memory:{array:tm},slots:{0:{structure:yt,memory:{array:sm},address:1056420,slots:{0:{structure:pt,memory:{array:rm},address:1056537}}}}}}}},slot:55});Object.assign(Ve,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [61:0]u8 = "the default 0 means that the curve starts from the startpoint"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ft}],methods:[],template:null},slot:54});Object.assign(dt,{...t,type:1,name:"[55:0]u8",length:55,byteSize:56,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:l}],methods:[],template:null},slot:112});Object.assign(bt,{...t,type:11,name:"*const [55:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:dt}],methods:[],template:null},slot:111});Object.assign(qe,{...t,type:11,name:"*const *const [55:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:bt}],methods:[],template:null},slot:110});const mm=new Uint8Array([]),am=new Uint8Array([56,30,16,0]),im=new Uint8Array([48,30,16,0]),om=new Uint8Array([48,30,16,0]),cm=new Uint8Array([160,30,16,0]),nm=new Uint8Array([225,30,16,0]),um=new Uint8Array([116,104,101,32,100,101,102,97,117,108,116,32,49,32,109,101,97,110,115,32,116,104,97,116,32,116,104,101,32,99,117,114,118,101,32,101,110,100,115,32,97,116,32,116,104,101,32,101,110,100,112,111,105,110,116,0]);Object.assign(ht,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [55:0]u8 = "the default 1 means that the curve ends at the endpoint"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:qe}],methods:[],template:{memory:{array:mm},slots:{0:{structure:s,memory:{array:am},slots:{0:{structure:m,memory:{array:q},address:1056312}}},1:{structure:s,memory:{array:im},slots:{0:{structure:m,memory:{array:w},address:1056304}}},2:{structure:s,memory:{array:om},slots:{0:{structure:m,memory:{array:w},address:1056304}}},3:{structure:qe,memory:{array:cm},slots:{0:{structure:bt,memory:{array:nm},address:1056416,slots:{0:{structure:dt,memory:{array:um},address:1056481}}}}}}}},slot:57});Object.assign(Re,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [55:0]u8 = "the default 1 means that the curve ends at the endpoint"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ht}],methods:[],template:null},slot:56});Object.assign(gt,{...t,type:1,name:"[2]@Vector(2, f32)",length:2,byteSize:16,align:3,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,structure:u}],methods:[],template:null},slot:35});const lm=new Uint8Array([]),pm=new Uint8Array([64,30,16,0]),Xt=new Uint8Array([0,0,0,0,0,0,240,191]),ym=new Uint8Array([64,30,16,0]);Object.assign(E,{...t,type:2,name:"struct{comptime comptime_float = -1, comptime comptime_float = -1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:lm},slots:{0:{structure:s,memory:{array:pm},slots:{0:{structure:m,memory:{array:Xt},address:1056320}}},1:{structure:s,memory:{array:ym},slots:{0:{structure:m,memory:{array:Xt},address:1056320}}}}}},slot:121});Object.assign(j,{...t,type:11,name:"*const struct{comptime comptime_float = -1, comptime comptime_float = -1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:E}],methods:[],template:null},slot:120});const fm=new Uint8Array([]),dm=new Uint8Array([170,170,170,170]),bm=new Uint8Array([170,170,170,170]);Object.assign(zt,{...t,type:2,name:"struct{comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:j},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:j}],methods:[],template:{memory:{array:fm},slots:{0:{structure:j,memory:{array:dm},slots:{0:{structure:E,memory:{array:r},address:-1431655766}}},1:{structure:j,memory:{array:bm},slots:{0:{structure:E,memory:{array:r},address:-1431655766}}}}}},slot:114});Object.assign(we,{...t,type:11,name:"*const struct{comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:zt}],methods:[],template:null},slot:113});const hm=new Uint8Array([]),gm=new Uint8Array([170,170,170,170]),zm=new Uint8Array([170,170,170,170]);Object.assign(St,{...t,type:2,name:"struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:S},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:S}],methods:[],template:{memory:{array:hm},slots:{0:{structure:S,memory:{array:gm},slots:{0:{structure:C,memory:{array:r},address:-1431655766}}},1:{structure:S,memory:{array:zm},slots:{0:{structure:C,memory:{array:r},address:-1431655766}}}}}},slot:116});Object.assign(Oe,{...t,type:11,name:"*const struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:St}],methods:[],template:null},slot:115});const Sm=new Uint8Array([]),_m=new Uint8Array([48,30,16,0]),Vm=new Uint8Array([56,30,16,0]);Object.assign(_t,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Sm},slots:{0:{structure:s,memory:{array:_m},slots:{0:{structure:m,memory:{array:w},address:1056304}}},1:{structure:s,memory:{array:Vm},slots:{0:{structure:m,memory:{array:q},address:1056312}}}}}},slot:123});Object.assign(Ae,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_t}],methods:[],template:null},slot:122});const qm=new Uint8Array([]),Rm=new Uint8Array([56,30,16,0]),wm=new Uint8Array([48,30,16,0]);Object.assign(Vt,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:qm},slots:{0:{structure:s,memory:{array:Rm},slots:{0:{structure:m,memory:{array:q},address:1056312}}},1:{structure:s,memory:{array:wm},slots:{0:{structure:m,memory:{array:w},address:1056304}}}}}},slot:125});Object.assign(Ue,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Vt}],methods:[],template:null},slot:124});const Om=new Uint8Array([]),Am=new Uint8Array([170,170,170,170]),Um=new Uint8Array([170,170,170,170]);Object.assign(qt,{...t,type:2,name:"struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 0} = .{1, 0}, comptime struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:Ae},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:Ue}],methods:[],template:{memory:{array:Om},slots:{0:{structure:Ae,memory:{array:Am},slots:{0:{structure:_t,memory:{array:r},address:-1431655766}}},1:{structure:Ue,memory:{array:Um},slots:{0:{structure:Vt,memory:{array:r},address:-1431655766}}}}}},slot:118});Object.assign(je,{...t,type:11,name:"*const struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 0} = .{1, 0}, comptime struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:qt}],methods:[],template:null},slot:117});const jm=new Uint8Array([]),xm=new Uint8Array([170,170,170,170]),Pm=new Uint8Array([170,170,170,170]),Cm=new Uint8Array([170,170,170,170]),vm=new Uint8Array([156,30,16,0]),km=new Uint8Array([200,30,16,0]),Im=new Uint8Array([82,111,116,97,116,105,111,110,32,97,114,111,117,110,100,32,116,104,101,32,97,120,105,115,0]);Object.assign(Rt,{...t,type:2,name:'struct{comptime type: type = [2]@Vector(2, f32), comptime minValue: struct{comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}} = .{.{-1, -1}, .{-1, -1}}, comptime maxValue: struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}} = .{.{1, 1}, .{1, 1}}, comptime defaultValue: struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 0} = .{1, 0}, comptime struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}} = .{.{1, 0}, .{0, 1}}, comptime description: *const [24:0]u8 = "Rotation around the axis"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:gt},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:we},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:Oe},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:je},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:v}],methods:[],template:{memory:{array:jm},slots:{0:{structure:we,memory:{array:xm},slots:{0:{structure:zt,memory:{array:r},address:-1431655766}}},1:{structure:Oe,memory:{array:Pm},slots:{0:{structure:St,memory:{array:r},address:-1431655766}}},2:{structure:je,memory:{array:Cm},slots:{0:{structure:qt,memory:{array:r},address:-1431655766}}},3:{structure:v,memory:{array:vm},slots:{0:{structure:G,memory:{array:km},address:1056412,slots:{0:{structure:L,memory:{array:Im},address:1056456}}}}}}}},slot:59});Object.assign(xe,{...t,type:11,name:'*const struct{comptime type: type = [2]@Vector(2, f32), comptime minValue: struct{comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}} = .{.{-1, -1}, .{-1, -1}}, comptime maxValue: struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}} = .{.{1, 1}, .{1, 1}}, comptime defaultValue: struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 0} = .{1, 0}, comptime struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}} = .{.{1, 0}, .{0, 1}}, comptime description: *const [24:0]u8 = "Rotation around the axis"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Rt}],methods:[],template:null},slot:58});const Dm=new Uint8Array([]),Em=new Uint8Array([170,170,170,170]),Km=new Uint8Array([170,170,170,170]),Fm=new Uint8Array([170,170,170,170]),Tm=new Uint8Array([170,170,170,170]),Mm=new Uint8Array([170,170,170,170]),$m=new Uint8Array([170,170,170,170]),Bm=new Uint8Array([170,170,170,170]),Lm=new Uint8Array([170,170,170,170]),Gm=new Uint8Array([170,170,170,170]),Hm=new Uint8Array([170,170,170,170]);Object.assign(wt,{...t,type:2,name:'struct{comptime startpoint: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 900, comptime comptime_float = 900} = .{900, 900}, comptime defaultValue: struct{comptime comptime_float = 50, comptime comptime_float = 200} = .{50, 200}, comptime description: *const [31:0]u8 = "start point for bezier sequence"} = .{.type = @Vector(2, f32), .minValue = .{-300, -300}, .maxValue = .{900, 900}, .defaultValue = .{50, 200}, .description = "start point for bezier sequence"}, comptime control1: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 900, comptime comptime_float = 900} = .{900, 900}, comptime defaultValue: struct{comptime comptime_float = 200, comptime comptime_float = 100} = .{200, 100}, comptime description: *const [39:0]u8 = "first control point for bezier sequence"} = .{.type = @Vector(2, f32), .minValue = .{-300, -300}, .maxValue = .{900, 900}, .defaultValue = .{200, 100}, .description = "first control point for bezier sequence"}, comptime control2: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 900, comptime comptime_float = 900} = .{900, 900}, comptime defaultValue: struct{comptime comptime_float = 400, comptime comptime_float = 300} = .{400, 300}, comptime description: *const [39:0]u8 = "first control point for bezier sequence"} = .{.type = @Vector(2, f32), .minValue = .{-300, -300}, .maxValue = .{900, 900}, .defaultValue = .{400, 300}, .description = "first control point for bezier sequence"}, comptime endpoint: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 900, comptime comptime_float = 900} = .{900, 900}, comptime defaultValue: struct{comptime comptime_float = 550, comptime comptime_float = 200} = .{550, 200}, comptime description: *const [29:0]u8 = "end point for bezier sequence"} = .{.type = @Vector(2, f32), .minValue = .{-300, -300}, .maxValue = .{900, 900}, .defaultValue = .{550, 200}, .description = "end point for bezier sequence"}, comptime scale: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0.5, comptime comptime_float = 0.5} = .{0.5, 0.5}, comptime maxValue: struct{comptime comptime_float = 2.5, comptime comptime_float = 2.5} = .{2.5, 2.5}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime description: *const [24:0]u8 = "Scales the texture image"} = .{.type = @Vector(2, f32), .minValue = .{0.5, 0.5}, .maxValue = .{2.5, 2.5}, .defaultValue = .{1, 1}, .description = "Scales the texture image"}, comptime imagewidth: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 500, comptime defaultValue: comptime_float = 200, comptime description: *const [42:0]u8 = "imagewidth: how wide the repeating part is"} = .{.type = f32, .minValue = 0, .maxValue = 500, .defaultValue = 200, .description = "imagewidth: how wide the repeating part is"}, comptime offset: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 300, comptime comptime_float = 300} = .{300, 300}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [87:0]u8 = "offset.x=Displacement along the curve, offset.y=Displacement perpendicular to the curve"} = .{.type = @Vector(2, f32), .minValue = .{-300, -300}, .maxValue = .{300, 300}, .defaultValue = .{0, 0}, .description = "offset.x=Displacement along the curve, offset.y=Displacement perpendicular to the curve"}, comptime tstart: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [61:0]u8 = "the default 0 means that the curve starts from the startpoint"} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0, .description = "the default 0 means that the curve starts from the startpoint"}, comptime tend: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [55:0]u8 = "the default 1 means that the curve ends at the endpoint"} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 1, .description = "the default 1 means that the curve ends at the endpoint"}, comptime rotation: struct{comptime type: type = [2]@Vector(2, f32), comptime minValue: struct{comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}} = .{.{-1, -1}, .{-1, -1}}, comptime maxValue: struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}} = .{.{1, 1}, .{1, 1}}, comptime defaultValue: struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 0} = .{1, 0}, comptime struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}} = .{.{1, 0}, .{0, 1}}, comptime description: *const [24:0]u8 = "Rotation around the axis"} = .{.type = [2]@Vector(2, f32), .minValue = .{.{-1, -1}, .{-1, -1}}, .maxValue = .{.{1, 1}, .{1, 1}}, .defaultValue = .{.{1, 0}, .{0, 1}}, .description = "Rotation around the axis"}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"startpoint",structure:me},{...e,type:8,isRequired:!1,slot:1,name:"control1",structure:ie},{...e,type:8,isRequired:!1,slot:2,name:"control2",structure:ce},{...e,type:8,isRequired:!1,slot:3,name:"endpoint",structure:le},{...e,type:8,isRequired:!1,slot:4,name:"scale",structure:fe},{...e,type:8,isRequired:!1,slot:5,name:"imagewidth",structure:be},{...e,type:8,isRequired:!1,slot:6,name:"offset",structure:Se},{...e,type:8,isRequired:!1,slot:7,name:"tstart",structure:Ve},{...e,type:8,isRequired:!1,slot:8,name:"tend",structure:Re},{...e,type:8,isRequired:!1,slot:9,name:"rotation",structure:xe}],methods:[],template:{memory:{array:Dm},slots:{0:{structure:me,memory:{array:Em},slots:{0:{structure:He,memory:{array:r},address:-1431655766}}},1:{structure:ie,memory:{array:Km},slots:{0:{structure:Ne,memory:{array:r},address:-1431655766}}},2:{structure:ce,memory:{array:Fm},slots:{0:{structure:We,memory:{array:r},address:-1431655766}}},3:{structure:le,memory:{array:Tm},slots:{0:{structure:et,memory:{array:r},address:-1431655766}}},4:{structure:fe,memory:{array:Mm},slots:{0:{structure:rt,memory:{array:r},address:-1431655766}}},5:{structure:be,memory:{array:$m},slots:{0:{structure:it,memory:{array:r},address:-1431655766}}},6:{structure:Se,memory:{array:Bm},slots:{0:{structure:lt,memory:{array:r},address:-1431655766}}},7:{structure:Ve,memory:{array:Lm},slots:{0:{structure:ft,memory:{array:r},address:-1431655766}}},8:{structure:Re,memory:{array:Gm},slots:{0:{structure:ht,memory:{array:r},address:-1431655766}}},9:{structure:xe,memory:{array:Hm},slots:{0:{structure:Rt,memory:{array:r},address:-1431655766}}}}}},slot:15});Object.assign(Pe,{...t,type:11,name:'*struct{comptime startpoint: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 900, comptime comptime_float = 900} = .{900, 900}, comptime defaultValue: struct{comptime comptime_float = 50, comptime comptime_float = 200} = .{50, 200}, comptime description: *const [31:0]u8 = "start point for bezier sequence"} = .{.type = @Vector(2, f32), .minValue = .{-300, -300}, .maxValue = .{900, 900}, .defaultValue = .{50, 200}, .description = "start point for bezier sequence"}, comptime control1: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 900, comptime comptime_float = 900} = .{900, 900}, comptime defaultValue: struct{comptime comptime_float = 200, comptime comptime_float = 100} = .{200, 100}, comptime description: *const [39:0]u8 = "first control point for bezier sequence"} = .{.type = @Vector(2, f32), .minValue = .{-300, -300}, .maxValue = .{900, 900}, .defaultValue = .{200, 100}, .description = "first control point for bezier sequence"}, comptime control2: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 900, comptime comptime_float = 900} = .{900, 900}, comptime defaultValue: struct{comptime comptime_float = 400, comptime comptime_float = 300} = .{400, 300}, comptime description: *const [39:0]u8 = "first control point for bezier sequence"} = .{.type = @Vector(2, f32), .minValue = .{-300, -300}, .maxValue = .{900, 900}, .defaultValue = .{400, 300}, .description = "first control point for bezier sequence"}, comptime endpoint: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 900, comptime comptime_float = 900} = .{900, 900}, comptime defaultValue: struct{comptime comptime_float = 550, comptime comptime_float = 200} = .{550, 200}, comptime description: *const [29:0]u8 = "end point for bezier sequence"} = .{.type = @Vector(2, f32), .minValue = .{-300, -300}, .maxValue = .{900, 900}, .defaultValue = .{550, 200}, .description = "end point for bezier sequence"}, comptime scale: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0.5, comptime comptime_float = 0.5} = .{0.5, 0.5}, comptime maxValue: struct{comptime comptime_float = 2.5, comptime comptime_float = 2.5} = .{2.5, 2.5}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime description: *const [24:0]u8 = "Scales the texture image"} = .{.type = @Vector(2, f32), .minValue = .{0.5, 0.5}, .maxValue = .{2.5, 2.5}, .defaultValue = .{1, 1}, .description = "Scales the texture image"}, comptime imagewidth: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 500, comptime defaultValue: comptime_float = 200, comptime description: *const [42:0]u8 = "imagewidth: how wide the repeating part is"} = .{.type = f32, .minValue = 0, .maxValue = 500, .defaultValue = 200, .description = "imagewidth: how wide the repeating part is"}, comptime offset: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -300, comptime comptime_float = -300} = .{-300, -300}, comptime maxValue: struct{comptime comptime_float = 300, comptime comptime_float = 300} = .{300, 300}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [87:0]u8 = "offset.x=Displacement along the curve, offset.y=Displacement perpendicular to the curve"} = .{.type = @Vector(2, f32), .minValue = .{-300, -300}, .maxValue = .{300, 300}, .defaultValue = .{0, 0}, .description = "offset.x=Displacement along the curve, offset.y=Displacement perpendicular to the curve"}, comptime tstart: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [61:0]u8 = "the default 0 means that the curve starts from the startpoint"} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0, .description = "the default 0 means that the curve starts from the startpoint"}, comptime tend: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [55:0]u8 = "the default 1 means that the curve ends at the endpoint"} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 1, .description = "the default 1 means that the curve ends at the endpoint"}, comptime rotation: struct{comptime type: type = [2]@Vector(2, f32), comptime minValue: struct{comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}} = .{.{-1, -1}, .{-1, -1}}, comptime maxValue: struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}} = .{.{1, 1}, .{1, 1}}, comptime defaultValue: struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 0} = .{1, 0}, comptime struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}} = .{.{1, 0}, .{0, 1}}, comptime description: *const [24:0]u8 = "Rotation around the axis"} = .{.type = [2]@Vector(2, f32), .minValue = .{.{-1, -1}, .{-1, -1}}, .maxValue = .{.{1, 1}, .{1, 1}}, .defaultValue = .{.{1, 0}, .{0, 1}}, .description = "Rotation around the axis"}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:wt}],methods:[],template:null},slot:14});Object.assign(Ce,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:b}],methods:[],template:null},slot:119});const Jm=new Uint8Array([]),Nm=new Uint8Array([152,30,16,0]),Qm=new Uint8Array([4,0,0,0]);Object.assign(k,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:Ce}],methods:[],template:{memory:{array:Jm},slots:{0:{structure:Ce,memory:{array:Nm},slots:{0:{structure:b,memory:{array:Qm},address:1056408}}}}}},slot:61});Object.assign(_,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:k}],methods:[],template:null},slot:60});const Wm=new Uint8Array([]),Xm=new Uint8Array([170,170,170,170]),Ym=new Uint8Array([170,170,170,170]);Object.assign(Ot,{...t,type:2,name:"struct{comptime background: struct{comptime channels: comptime_int = 4} = .{.channels = 4}, comptime texture: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"background",structure:_},{...e,type:8,isRequired:!1,slot:1,name:"texture",structure:_}],methods:[],template:{memory:{array:Wm},slots:{0:{structure:_,memory:{array:Xm},slots:{0:{structure:k,memory:{array:r},address:-1431655766}}},1:{structure:_,memory:{array:Ym},slots:{0:{structure:k,memory:{array:r},address:-1431655766}}}}}},slot:17});Object.assign(ve,{...t,type:11,name:"*struct{comptime background: struct{comptime channels: comptime_int = 4} = .{.channels = 4}, comptime texture: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ot}],methods:[],template:null},slot:16});const Zm=new Uint8Array([]),ea=new Uint8Array([170,170,170,170]);Object.assign(At,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:_}],methods:[],template:{memory:{array:Zm},slots:{0:{structure:_,memory:{array:ea},slots:{0:{structure:k,memory:{array:r},address:-1431655766}}}}}},slot:19});Object.assign(ke,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:At}],methods:[],template:null},slot:18});const ta=new Uint8Array([]),sa=new Uint8Array([]),ra=new Uint8Array([12,251,15,0]),ma=new Uint8Array([49,136,16,0]),aa=new Uint8Array([66,101,122,105,101,114,65,108,105,103,110,101,114,0]),ia=new Uint8Array([76,251,15,0]),oa=new Uint8Array([34,136,16,0]),ca=new Uint8Array([80,101,116,114,105,32,76,101,115,107,105,110,101,110,0]),na=new Uint8Array([140,251,15,0]),ua=new Uint8Array([1,0,0,0]),la=new Uint8Array([228,251,15,0]),pa=new Uint8Array([254,135,16,0]),ya=new Uint8Array([68,114,97,119,115,32,97,110,32,73,109,97,103,101,32,97,108,111,110,103,32,97,32,66,101,122,105,101,114,32,67,117,114,118,101,0]),fa=new Uint8Array([170,170,170,170]),da=new Uint8Array([170,170,170,170]),ba=new Uint8Array([170,170,170,170]);Object.assign(Dt,{...t,type:2,name:"bezier-aligner.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ta}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:Z},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:ee},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:V},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:te},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:Pe},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:ve},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:ke}],methods:[],template:{memory:{array:sa},slots:{0:{structure:Z,memory:{array:ra},slots:{0:{structure:Ke,memory:{array:ma},slots:{0:{structure:Ee,memory:{array:aa},address:1083441}}}}},1:{structure:ee,memory:{array:ia},slots:{0:{structure:Te,memory:{array:oa},slots:{0:{structure:Fe,memory:{array:ca},address:1083426}}}}},2:{structure:V,memory:{array:na},slots:{0:{structure:b,memory:{array:ua}}}},3:{structure:te,memory:{array:la},slots:{0:{structure:$e,memory:{array:pa},slots:{0:{structure:Me,memory:{array:ya},address:1083390}}}}},4:{structure:Pe,memory:{array:fa},slots:{0:{structure:wt,memory:{array:r},address:-1431655766}}},5:{structure:ve,memory:{array:da},slots:{0:{structure:Ot,memory:{array:r},address:-1431655766}}},6:{structure:ke,memory:{array:ba},slots:{0:{structure:At,memory:{array:r},address:-1431655766}}}}}},slot:1});Object.assign(I,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:l}],methods:[],template:null},slot:24});Object.assign(K,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:I}],methods:[],template:null},slot:23});Object.assign(F,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:K}],methods:[],template:null},slot:22});Object.assign(y,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:25});const ha=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Ut,{...t,type:9,name:"bezier-aligner.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:b},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:b}],methods:[],template:{memory:{array:ha}}},slot:26});Object.assign(T,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:T}],methods:[],template:null},slot:27});Object.assign(M,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:M}],methods:[],template:null},slot:28});Object.assign(jt,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:d}],methods:[],template:null},slot:62});const ga=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),za=new Uint8Array([]),Sa=new Uint8Array([168,252,15,0]),_a=new Uint8Array([4,0,0,0]);Object.assign(x,{...t,type:2,name:"bezier-aligner.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:F},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:y},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:y},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Ut},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:T},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:M}],methods:[],template:{memory:{array:ga}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:I},{...e,type:7,isRequired:!1,name:"FPixel",structure:jt},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:V}],methods:[],template:{memory:{array:za},slots:{0:{structure:V,memory:{array:Sa},slots:{0:{structure:b,memory:{array:_a}}}}}}},slot:21});const Va=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),qa=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ra=new Uint8Array([0,0,0,0,0,0,0,0]),De=new Uint8Array([]),wa=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Oa=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(H,{...t,type:2,name:"bezier-aligner.KernelInput(u8,bezier-aligner.kernel)",length:1,byteSize:48,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"background",structure:x},{...e,type:6,isRequired:!1,bitOffset:192,bitSize:192,byteSize:24,slot:1,name:"texture",structure:x}],methods:[],template:{memory:{array:Va},slots:{0:{structure:x,memory:{array:qa},slots:{0:{structure:F,memory:{array:Ra},slots:{0:{structure:K,memory:{array:De}}}}}},1:{structure:x,memory:{array:wa},slots:{0:{structure:F,memory:{array:Oa},slots:{0:{structure:K,memory:{array:De}}}}}}}}},slot:20});Object.assign(xt,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:I}],methods:[],template:null},slot:23});Object.assign(Pt,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:xt}],methods:[],template:null},slot:31});const Aa=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ua=new Uint8Array([]),ja=new Uint8Array([104,253,15,0]),xa=new Uint8Array([4,0,0,0]);Object.assign(Ie,{...t,type:2,name:"bezier-aligner.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Pt},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:y},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:y},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Ut},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:T},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:M}],methods:[],template:{memory:{array:Aa}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:I},{...e,type:7,isRequired:!1,name:"FPixel",structure:jt},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:V}],methods:[],template:{memory:{array:Ua},slots:{0:{structure:V,memory:{array:ja},slots:{0:{structure:b,memory:{array:xa}}}}}}},slot:30});const Pa=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ca=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),va=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(J,{...t,type:2,name:"bezier-aligner.KernelOutput(u8,bezier-aligner.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:Ie}],methods:[],template:{memory:{array:Pa},slots:{0:{structure:Ie,memory:{array:Ca},slots:{0:{structure:Pt,memory:{array:va},slots:{0:{structure:xt,memory:{array:De}}}}}}}}},slot:29});const ka=new Uint8Array([0,0,72,66,0,0,72,67,0,0,72,67,0,0,200,66,0,0,200,67,0,0,150,67,0,128,9,68,0,0,72,67,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,72,67,0,0,0,0,0,0,128,63,0,0,0,0]);Object.assign(N,{...t,type:2,name:"bezier-aligner.KernelParameters(bezier-aligner.kernel)",length:1,byteSize:80,align:3,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"startpoint",structure:u},{...e,type:6,isRequired:!1,bitOffset:64,bitSize:64,byteSize:8,slot:1,name:"control1",structure:u},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:64,byteSize:8,slot:2,name:"control2",structure:u},{...e,type:6,isRequired:!1,bitOffset:192,bitSize:64,byteSize:8,slot:3,name:"endpoint",structure:u},{...e,type:6,isRequired:!1,bitOffset:256,bitSize:64,byteSize:8,slot:4,name:"scale",structure:u},{...e,type:4,isRequired:!1,bitOffset:512,bitSize:32,byteSize:4,slot:5,name:"imagewidth",structure:d},{...e,type:6,isRequired:!1,bitOffset:320,bitSize:64,byteSize:8,slot:6,name:"offset",structure:u},{...e,type:4,isRequired:!1,bitOffset:544,bitSize:32,byteSize:4,slot:7,name:"tstart",structure:d},{...e,type:4,isRequired:!1,bitOffset:576,bitSize:32,byteSize:4,slot:8,name:"tend",structure:d},{...e,type:6,isRequired:!1,bitOffset:384,bitSize:128,byteSize:16,slot:9,name:"rotation",structure:gt}],methods:[],template:{memory:{array:ka}}},slot:32});Object.assign(Et,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(bezier-aligner.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:63});Object.assign(Kt,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(bezier-aligner.createOutput)).Fn.return_type.?).ErrorUnion.error_set!bezier-aligner.KernelOutput(u8,bezier-aligner.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:J},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Et}],methods:[],template:null},slot:38});Object.assign(Ft,{...t,type:3,name:"createOutput",length:1,byteSize:168,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:640,bitSize:32,byteSize:4,slot:0,name:"0",structure:y},{...e,type:3,bitOffset:672,bitSize:32,byteSize:4,slot:1,name:"1",structure:y},{...e,type:6,bitOffset:704,bitSize:384,byteSize:48,slot:2,name:"2",structure:H},{...e,type:6,bitOffset:0,bitSize:640,byteSize:80,slot:3,name:"3",structure:N},{...e,type:6,bitOffset:1088,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Kt}],methods:[],template:null},slot:36});Object.assign(Tt,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(bezier-aligner.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:64});Object.assign(Mt,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(bezier-aligner.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!bezier-aligner.KernelOutput(u8,bezier-aligner.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:J},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Tt}],methods:[],template:null},slot:39});Object.assign($t,{...t,type:3,name:"createPartialOutput",length:1,byteSize:176,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:640,bitSize:32,byteSize:4,slot:0,name:"0",structure:y},{...e,type:3,bitOffset:672,bitSize:32,byteSize:4,slot:1,name:"1",structure:y},{...e,type:3,bitOffset:704,bitSize:32,byteSize:4,slot:2,name:"2",structure:y},{...e,type:3,bitOffset:736,bitSize:32,byteSize:4,slot:3,name:"3",structure:y},{...e,type:6,bitOffset:768,bitSize:384,byteSize:48,slot:4,name:"4",structure:H},{...e,type:6,bitOffset:0,bitSize:640,byteSize:80,slot:5,name:"5",structure:N},{...e,type:6,bitOffset:1152,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Mt}],methods:[],template:null},slot:37});const Ia={argStruct:Ft,thunk:4,name:"createOutput"},Da={argStruct:$t,thunk:9,name:"createPartialOutput"};Object.assign(Bt,{...t,type:2,name:"bezier-aligner",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:De}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:Dt},{...e,type:7,isRequired:!1,name:"Input",structure:H},{...e,type:7,isRequired:!1,name:"Output",structure:J},{...e,type:7,isRequired:!1,name:"Parameters",structure:N}],methods:[Ia,Da],template:null},slot:0});const Ea=[l,Ee,Ke,Z,Fe,Te,ee,b,V,Me,$e,te,d,u,m,s,R,f,O,g,Be,se,Le,Ge,re,He,me,Je,ae,$,B,P,Ne,ie,Qe,oe,We,ce,Xe,ne,Ye,Ze,ue,et,le,tt,pe,st,ye,C,S,L,G,v,rt,fe,mt,at,de,it,be,ot,he,ct,ge,nt,ut,ze,lt,Se,pt,yt,_e,ft,Ve,dt,bt,qe,ht,Re,gt,E,j,zt,we,St,Oe,_t,Ae,Vt,Ue,qt,je,Rt,xe,wt,Pe,Ce,k,_,Ot,ve,At,ke,Dt,I,K,F,y,Ut,T,M,jt,x,H,xt,Pt,Ie,J,N,Et,Kt,Ft,Tt,Mt,$t,Bt],Ka=Ss(Ea),Fa=Bt.constructor,Ta=(async()=>{const c=new URL("bezier-aligner-3943e5f5.wasm",import.meta.url).href;return fetch(c)})();_s(Ta,{...Ka,writeBack:!0});const{createOutput:Na,createPartialOutput:Ma,kernel:It,Input:$a,Output:Qa,Parameters:Wa}=Fa;function Ba(c,p,i,a,o={},A={}){if(Array.isArray(o)){const z=o;o={};for(const[h,U]of Object.keys(It.inputImages).entries())o[U]=z[h]}const Q=new $a(void 0),W=Object.keys(It.inputImages),n=[];let D;for(const z of W){let h=o[z];if(h||(W.length===1&&["data","width","height"].every(U=>!!o[U])?h=o:n.push(z)),Q[z]=h,D){if(h.colorSpace!==D)throw new Error(`Input images must all use the same color space: ${D}`)}else D=h.colorSpace}if(n.length>0)throw new Error(`Missing input image${n.length>1?"s":""}: ${n.join(", ")}`);const vt=Ma(c,p,i,a,Q,A),Lt=z=>{const h=Object.keys(z),U={};for(const Gt of h){const{data:{typedArray:X},width:Ht,height:ts}=z[Gt];let Y;if(typeof ImageData=="function"){const ss=new Uint8ClampedArray(X.buffer,X.byteOffset,X.byteLength);Y=new ImageData(ss,Ht,a,{colorSpace:D})}else Y={data:X,width:Ht,height:ts};if(h.length===1)return Y;U[Gt]=Y}return U};return vt[Symbol.toStringTag]==="Promise"?vt.then(Lt):Lt(vt)}function La(){const c={};for(let[p,i]of Object.entries(It)){if(p==="parameters"){const a={};for(const[o,A]of Object.entries(i)){const Q=a[o]={};for(let[W,n]of Object.entries(A))typeof n=="object"?"string"in n?n=n.string:n=es(n):typeof n=="function"&&(n=Ga(n.name)),Q[W]=n}i=a}else typeof i=="object"&&("string"in i?i=i.string:i=i.valueOf());c[p]=i}return c}function es(c){const p=[];for(let[i,a]of Object.entries(c))typeof a=="object"&&(a=es(a)),p[i]=a;return p}function Ga(c){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[c]}onmessage=c=>{const[p,i,...a]=c.data;Ha(p,a).then(([o,A])=>{postMessage([p,i,o],{transfer:A})}).catch(o=>{postMessage(["error",i,o])})};async function Ha(c,p){switch(c){case"getKernelInfo":return[La(...p)];case"createPartialImageData":const a=await Ba(...p),o=[];if("data"in a&&"width"in a&&"height"in a)o.push(a.data.buffer);else for(const A of Object.entries(a))o.push(a.data.buffer);return[a,o];default:throw new Error(`Unknown function: ${c}`)}}
