import{u as qe,a as we,b as Ae,d as Ue,c as je,e as Ve,f as Pe,g as _e,h as xe,i as Ie,j as ke,k as Ce,l as ve,n as Ee,o as Ke,m as Fe,p as De,q as Te,r as Me}from"./index-778418ea.js";qe();we();Ae();Ue();je();Ve();Pe();_e();xe();Ie();ke();Ce();ve();Ee();Ke();Fe();De();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},d={},G={},H={},C={},J={},N={},v={},s={},f={},Q={},W={},E={},n={},X={},K={},Y={},F={},Z={},D={},g={},p={},ee={},T={},te={},M={},ue={},O={},q={},w={},l={},se={},A={},U={},$={},re={},z={},j={},ie={},ae={},B={},V={},P={},oe={},le={},ce={},ye={},pe={},be={},fe={};Object.assign(d,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:5});Object.assign(G,{...t,type:1,name:"[24:0]u8",length:24,byteSize:25,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:4});Object.assign(H,{...t,type:11,name:"*const [24:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:3});Object.assign(C,{...t,type:11,name:"**const [24:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:2});Object.assign(J,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:8});Object.assign(N,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:7});Object.assign(v,{...t,type:11,name:"**const [13:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:6});Object.assign(s,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:s}],methods:[],template:null},slot:10});Object.assign(f,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:s}],methods:[],template:null},slot:9});Object.assign(Q,{...t,type:1,name:"[69:0]u8",length:69,byteSize:70,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:13});Object.assign(W,{...t,type:11,name:"*const [69:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:12});Object.assign(E,{...t,type:11,name:"**const [69:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:11});Object.assign(n,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:s}],methods:[],template:null},slot:47});const $e=new Uint8Array([]),Be=new Uint8Array([60,30,16,0]),ze=new Uint8Array([1,0,0,0]),Le=new Uint8Array([68,30,16,0]),Ge=new Uint8Array([32,0,0,0]),He=new Uint8Array([64,30,16,0]),Je=new Uint8Array([8,0,0,0]);Object.assign(X,{...t,type:2,name:"struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 32, comptime defaultValue: comptime_int = 8}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:s},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:n},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:n},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:n}],methods:[],template:{memory:{array:$e},slots:{0:{structure:n,memory:{array:Be},slots:{0:{structure:s,memory:{array:ze},address:1056316}}},1:{structure:n,memory:{array:Le},slots:{0:{structure:s,memory:{array:Ge},address:1056324}}},2:{structure:n,memory:{array:He},slots:{0:{structure:s,memory:{array:Je},address:1056320}}}}}},slot:38});Object.assign(K,{...t,type:11,name:"*const struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 32, comptime defaultValue: comptime_int = 8}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:37});const Ne=new Uint8Array([]),Qe=new Uint8Array([60,30,16,0]),We=new Uint8Array([56,30,16,0]),Xe=new Uint8Array([0,2,0,0]),Ye=new Uint8Array([52,30,16,0]),Ze=new Uint8Array([0,1,0,0]);Object.assign(Y,{...t,type:2,name:"struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 512, comptime defaultValue: comptime_int = 256}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:s},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:n},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:n},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:n}],methods:[],template:{memory:{array:Ne},slots:{0:{structure:n,memory:{array:Qe},slots:{0:{structure:s,memory:{array:ze},address:1056316}}},1:{structure:n,memory:{array:We},slots:{0:{structure:s,memory:{array:Xe},address:1056312}}},2:{structure:n,memory:{array:Ye},slots:{0:{structure:s,memory:{array:Ze},address:1056308}}}}}},slot:40});Object.assign(F,{...t,type:11,name:"*const struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 512, comptime defaultValue: comptime_int = 256}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:39});const et=new Uint8Array([]),tt=new Uint8Array([170,170,170,170]),b=new Uint8Array([]),st=new Uint8Array([170,170,170,170]);Object.assign(Z,{...t,type:2,name:"struct{comptime size: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 32, comptime defaultValue: comptime_int = 8} = .{.type = i32, .minValue = 1, .maxValue = 32, .defaultValue = 8}, comptime charCount: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 512, comptime defaultValue: comptime_int = 256} = .{.type = i32, .minValue = 1, .maxValue = 512, .defaultValue = 256}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"size",structure:K},{...e,type:8,isRequired:!1,slot:1,name:"charCount",structure:F}],methods:[],template:{memory:{array:et},slots:{0:{structure:K,memory:{array:tt},slots:{0:{structure:X,memory:{array:b},address:-1431655766}}},1:{structure:F,memory:{array:st},slots:{0:{structure:Y,memory:{array:b},address:-1431655766}}}}}},slot:15});Object.assign(D,{...t,type:11,name:"*struct{comptime size: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 32, comptime defaultValue: comptime_int = 8} = .{.type = i32, .minValue = 1, .maxValue = 32, .defaultValue = 8}, comptime charCount: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 512, comptime defaultValue: comptime_int = 256} = .{.type = i32, .minValue = 1, .maxValue = 512, .defaultValue = 256}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:14});const rt=new Uint8Array([]),it=new Uint8Array([48,30,16,0]),at=new Uint8Array([4,0,0,0]);Object.assign(g,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:n}],methods:[],template:{memory:{array:rt},slots:{0:{structure:n,memory:{array:it},slots:{0:{structure:s,memory:{array:at},address:1056304}}}}}},slot:42});Object.assign(p,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:g}],methods:[],template:null},slot:41});const nt=new Uint8Array([]),mt=new Uint8Array([170,170,170,170]),ut=new Uint8Array([170,170,170,170]);Object.assign(ee,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}, comptime text: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:p},{...e,type:8,isRequired:!1,slot:1,name:"text",structure:p}],methods:[],template:{memory:{array:nt},slots:{0:{structure:p,memory:{array:mt},slots:{0:{structure:g,memory:{array:b},address:-1431655766}}},1:{structure:p,memory:{array:ut},slots:{0:{structure:g,memory:{array:b},address:-1431655766}}}}}},slot:17});Object.assign(T,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}, comptime text: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:16});const ot=new Uint8Array([]),lt=new Uint8Array([170,170,170,170]);Object.assign(te,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:p}],methods:[],template:{memory:{array:ot},slots:{0:{structure:p,memory:{array:lt},slots:{0:{structure:g,memory:{array:b},address:-1431655766}}}}}},slot:19});Object.assign(M,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:18});const ct=new Uint8Array([]),yt=new Uint8Array([]),pt=new Uint8Array([12,250,15,0]),bt=new Uint8Array([150,44,16,0]),ft=new Uint8Array([99,111,109,46,103,114,101,121,98,111,120,119,97,114,101,46,97,115,99,105,105,109,105,105,0]),dt=new Uint8Array([76,250,15,0]),ht=new Uint8Array([136,44,16,0]),St=new Uint8Array([82,105,99,104,97,114,100,32,90,117,114,97,100,0]),zt=new Uint8Array([140,250,15,0]),gt=new Uint8Array([1,0,0,0]),Ot=new Uint8Array([228,250,15,0]),Rt=new Uint8Array([66,44,16,0]),qt=new Uint8Array([70,105,108,116,101,114,32,116,111,32,109,105,109,105,99,32,116,104,101,32,84,69,88,84,112,32,101,102,102,101,99,116,32,102,114,111,109,32,89,111,117,84,117,98,101,39,115,32,50,48,49,48,32,65,112,114,105,108,32,70,111,111,108,115,32,106,111,107,101,0]),wt=new Uint8Array([170,170,170,170]),At=new Uint8Array([170,170,170,170]),Ut=new Uint8Array([170,170,170,170]);Object.assign(ue,{...t,type:2,name:"asciimii.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ct}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:C},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:v},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:f},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:E},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:D},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:T},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:M}],methods:[],template:{memory:{array:yt},slots:{0:{structure:C,memory:{array:pt},slots:{0:{structure:H,memory:{array:bt},slots:{0:{structure:G,memory:{array:ft},address:1059990}}}}},1:{structure:v,memory:{array:dt},slots:{0:{structure:N,memory:{array:ht},slots:{0:{structure:J,memory:{array:St},address:1059976}}}}},2:{structure:f,memory:{array:zt},slots:{0:{structure:s,memory:{array:gt}}}},3:{structure:E,memory:{array:Ot},slots:{0:{structure:W,memory:{array:Rt},slots:{0:{structure:Q,memory:{array:qt},address:1059906}}}}},4:{structure:D,memory:{array:wt},slots:{0:{structure:Z,memory:{array:b},address:-1431655766}}},5:{structure:T,memory:{array:At},slots:{0:{structure:ee,memory:{array:b},address:-1431655766}}},6:{structure:M,memory:{array:Ut},slots:{0:{structure:te,memory:{array:b},address:-1431655766}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:24});Object.assign(q,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(w,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:q}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const jt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(se,{...t,type:9,name:"asciimii.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:s},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:s}],methods:[],template:{memory:{array:jt}}},slot:26});Object.assign(A,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:A}],methods:[],template:null},slot:27});Object.assign(U,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:U}],methods:[],template:null},slot:28});Object.assign($,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:$}],methods:[],template:null},slot:46});Object.assign(re,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:$}],methods:[],template:null},slot:43});const Vt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Pt=new Uint8Array([]),_t=new Uint8Array([168,252,15,0]),xt=new Uint8Array([4,0,0,0]);Object.assign(z,{...t,type:2,name:"asciimii.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:w},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:se},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:A},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:U}],methods:[],template:{memory:{array:Vt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:re},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:f}],methods:[],template:{memory:{array:Pt},slots:{0:{structure:f,memory:{array:_t},slots:{0:{structure:s,memory:{array:xt}}}}}}},slot:21});const It=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),kt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ct=new Uint8Array([0,0,0,0,0,0,0,0]),L=new Uint8Array([]),vt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Et=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(j,{...t,type:2,name:"asciimii.KernelInput(u8,asciimii.kernel)",length:1,byteSize:48,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:z},{...e,type:6,isRequired:!1,bitOffset:192,bitSize:192,byteSize:24,slot:1,name:"text",structure:z}],methods:[],template:{memory:{array:It},slots:{0:{structure:z,memory:{array:kt},slots:{0:{structure:w,memory:{array:Ct},slots:{0:{structure:q,memory:{array:L}}}}}},1:{structure:z,memory:{array:vt},slots:{0:{structure:w,memory:{array:Et},slots:{0:{structure:q,memory:{array:L}}}}}}}}},slot:20});Object.assign(ie,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(ae,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ie}],methods:[],template:null},slot:31});const Kt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ft=new Uint8Array([]),Dt=new Uint8Array([104,253,15,0]),Tt=new Uint8Array([4,0,0,0]);Object.assign(B,{...t,type:2,name:"asciimii.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ae},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:se},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:A},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:U}],methods:[],template:{memory:{array:Kt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:re},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:f}],methods:[],template:{memory:{array:Ft},slots:{0:{structure:f,memory:{array:Dt},slots:{0:{structure:s,memory:{array:Tt}}}}}}},slot:30});const Mt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),$t=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Bt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(V,{...t,type:2,name:"asciimii.KernelOutput(u8,asciimii.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:B}],methods:[],template:{memory:{array:Mt},slots:{0:{structure:B,memory:{array:$t},slots:{0:{structure:ae,memory:{array:Bt},slots:{0:{structure:ie,memory:{array:L}}}}}}}}},slot:29});const Lt=new Uint8Array([8,0,0,0,0,1,0,0]);Object.assign(P,{...t,type:2,name:"asciimii.KernelParameters(asciimii.kernel)",length:1,byteSize:8,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"size",structure:s},{...e,type:2,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"charCount",structure:s}],methods:[],template:{memory:{array:Lt}}},slot:32});Object.assign(oe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(asciimii.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:44});Object.assign(le,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(asciimii.createOutput)).Fn.return_type.?).ErrorUnion.error_set!asciimii.KernelOutput(u8,asciimii.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:V},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:oe}],methods:[],template:null},slot:35});Object.assign(ce,{...t,type:3,name:"createOutput",length:1,byteSize:92,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:64,bitSize:384,byteSize:48,slot:2,name:"2",structure:j},{...e,type:6,bitOffset:448,bitSize:64,byteSize:8,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:4,name:"retval",structure:le}],methods:[],template:null},slot:33});Object.assign(ye,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(asciimii.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:45});Object.assign(pe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(asciimii.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!asciimii.KernelOutput(u8,asciimii.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:V},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ye}],methods:[],template:null},slot:36});Object.assign(be,{...t,type:3,name:"createPartialOutput",length:1,byteSize:100,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:128,bitSize:384,byteSize:48,slot:4,name:"4",structure:j},{...e,type:6,bitOffset:512,bitSize:64,byteSize:8,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:576,bitSize:224,byteSize:28,slot:6,name:"retval",structure:pe}],methods:[],template:null},slot:34});const Gt={argStruct:ce,thunk:6,name:"createOutput"},Ht={argStruct:be,thunk:2,name:"createPartialOutput"};Object.assign(fe,{...t,type:2,name:"asciimii",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:L}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ue},{...e,type:7,isRequired:!1,name:"Input",structure:j},{...e,type:7,isRequired:!1,name:"Output",structure:V},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[Gt,Ht],template:null},slot:0});const Jt=[d,G,H,C,J,N,v,s,f,Q,W,E,n,X,K,Y,F,Z,D,g,p,ee,T,te,M,ue,O,q,w,l,se,A,U,$,re,z,j,ie,ae,B,V,P,oe,le,ce,ye,pe,be,fe],Nt=Te(Jt),Qt=fe.constructor,Wt=(async()=>{const m=new URL("asciimii-4062cae9.wasm",import.meta.url).href;return fetch(m)})();Me(Wt,{...Nt,writeBack:!0});const{createOutput:is,createPartialOutput:Xt,kernel:me,Input:Yt,Output:as,Parameters:ns}=Qt;function Zt(m,o,i,r,a={},h={}){if(Array.isArray(a)){const y=a;a={};for(const[c,S]of Object.keys(me.inputImages).entries())a[S]=y[c]}const _=new Yt(void 0),x=Object.keys(me.inputImages),u=[];let R;for(const y of x){let c=a[y];if(c||(x.length===1&&["data","width","height"].every(S=>!!a[S])?c=a:u.push(y)),_[y]=c,R){if(c.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=c.colorSpace}if(u.length>0)throw new Error(`Missing input image${u.length>1?"s":""}: ${u.join(", ")}`);const ne=Xt(m,o,i,r,_,h),de=y=>{const c=Object.keys(y),S={};for(const he of c){const{data:{typedArray:I},width:Se,height:Oe}=y[he];let k;if(typeof ImageData=="function"){const Re=new Uint8ClampedArray(I.buffer,I.byteOffset,I.byteLength);k=new ImageData(Re,Se,r,{colorSpace:R})}else k={data:I,width:Se,height:Oe};if(c.length===1)return k;S[he]=k}return S};return ne[Symbol.toStringTag]==="Promise"?ne.then(de):de(ne)}function es(){const m={};for(let[o,i]of Object.entries(me)){if(o==="parameters"){const r={};for(const[a,h]of Object.entries(i)){const _=r[a]={};for(let[x,u]of Object.entries(h))typeof u=="object"?"string"in u?u=u.string:u=ge(u):typeof u=="function"&&(u=ts(u.name)),_[x]=u}i=r}else typeof i=="object"&&("string"in i?i=i.string:i=i.valueOf());m[o]=i}return m}function ge(m){const o=[];for(let[i,r]of Object.entries(m))typeof r=="object"&&(r=ge(r)),o[i]=r;return o}function ts(m){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[m]}onmessage=m=>{const[o,i,...r]=m.data;ss(o,r).then(([a,h])=>{postMessage([o,i,a],{transfer:h})}).catch(a=>{postMessage(["error",i,a])})};async function ss(m,o){switch(m){case"getKernelInfo":return[es(...o)];case"createPartialImageData":const r=await Zt(...o),a=[];if("data"in r&&"width"in r&&"height"in r)a.push(r.data.buffer);else for(const h of Object.entries(r))a.push(r.data.buffer);return[r,a];default:throw new Error(`Unknown function: ${m}`)}}
