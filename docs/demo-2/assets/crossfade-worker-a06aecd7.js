import{u as he,a as ge,b as ze,c as Oe,d as we,e as Re,f as qe,g as Ae,h as Ue,i as je,j as Pe,k as Ie,l as ke,m as Ve,o as Ce,n as ve,p as Ee,q as xe}from"./index-076239a4.js";he();ge();ze();Oe();we();Re();qe();Ae();Ue();je();Pe();Ie();ke();Ve();Ce();ve();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},d={},$={},B={},E={},L={},G={},x={},m={},c={},H={},J={},K={},z={},p={},b={},N={},D={},Q={},F={},O={},f={},W={},M={},X={},_={},ae={},w={},q={},A={},u={},Y={},U={},Z={},g={},j={},ee={},te={},T={},P={},I={},ne={},ie={},oe={},ue={},le={},me={},ce={};Object.assign(d,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:5});Object.assign($,{...t,type:1,name:"[3:0]u8",length:3,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:4});Object.assign(B,{...t,type:11,name:"*const [3:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:3});Object.assign(E,{...t,type:11,name:"*const *const [3:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:2});Object.assign(L,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:8});Object.assign(G,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:7});Object.assign(x,{...t,type:11,name:"*const *const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:6});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:10});Object.assign(c,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:9});Object.assign(H,{...t,type:1,name:"[28:0]u8",length:28,byteSize:29,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:13});Object.assign(J,{...t,type:11,name:"*const [28:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:12});Object.assign(K,{...t,type:11,name:"*const *const [28:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:11});Object.assign(z,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:32});Object.assign(p,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:p}],methods:[],template:null},slot:45});Object.assign(b,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:44});const Ke=new Uint8Array,De=new Uint8Array([248,252,15,0]),Fe=new Uint8Array([0,0,0,0,0,0,0,0]),Me=new Uint8Array([32,253,15,0]),_e=new Uint8Array([0,0,0,0,0,0,240,63]),Te=new Uint8Array([88,253,15,0]),$e=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(N,{...t,type:2,name:"Struct0008",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:z},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:b},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:b}],methods:[],template:{memory:{array:Ke},slots:{0:{structure:b,memory:{array:De},slots:{0:{structure:p,memory:{array:Fe}}}},1:{structure:b,memory:{array:Me},slots:{0:{structure:p,memory:{array:_e}}}},2:{structure:b,memory:{array:Te},slots:{0:{structure:p,memory:{array:$e}}}}}}},slot:38});Object.assign(D,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:37});const Be=new Uint8Array,Le=new Uint8Array([170,170,170,170]),Ge=new Uint8Array;Object.assign(Q,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"intensity",structure:D}],methods:[],template:{memory:{array:Be},slots:{0:{structure:D,memory:{array:Le},slots:{0:{structure:N,memory:{array:Ge}}}}}}},slot:15});Object.assign(F,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:14});const He=new Uint8Array,Je=new Uint8Array([160,249,15,0]),Ne=new Uint8Array([4,0,0,0]);Object.assign(O,{...t,type:2,name:"Struct0009",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:He},slots:{0:{structure:c,memory:{array:Je},slots:{0:{structure:m,memory:{array:Ne}}}}}}},slot:40});Object.assign(f,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:O}],methods:[],template:null},slot:39});const Qe=new Uint8Array,We=new Uint8Array([170,170,170,170]),Xe=new Uint8Array,Ye=new Uint8Array([170,170,170,170]),Ze=new Uint8Array;Object.assign(W,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"frontImage",structure:f},{...e,type:8,isRequired:!1,slot:1,name:"backImage",structure:f}],methods:[],template:{memory:{array:Qe},slots:{0:{structure:f,memory:{array:We},slots:{0:{structure:O,memory:{array:Xe}}}},1:{structure:f,memory:{array:Ye},slots:{0:{structure:O,memory:{array:Ze}}}}}}},slot:17});Object.assign(M,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:16});const et=new Uint8Array,tt=new Uint8Array([170,170,170,170]),st=new Uint8Array;Object.assign(X,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:f}],methods:[],template:{memory:{array:et},slots:{0:{structure:f,memory:{array:tt},slots:{0:{structure:O,memory:{array:st}}}}}}},slot:19});Object.assign(_,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:18});const rt=new Uint8Array,at=new Uint8Array,nt=new Uint8Array([212,35,16,0]),it=new Uint8Array([143,35,16,0]),ot=new Uint8Array([65,73,70,0]),ut=new Uint8Array([208,35,16,0]),lt=new Uint8Array([118,35,16,0]),mt=new Uint8Array([65,100,111,98,101,32,83,121,115,116,101,109,115,0]),ct=new Uint8Array([204,35,16,0]),yt=new Uint8Array([2,0,0,0]),bt=new Uint8Array([200,35,16,0]),ft=new Uint8Array([72,35,16,0]),pt=new Uint8Array([67,114,111,115,115,102,97,100,101,32,98,101,116,119,101,101,110,32,116,119,111,32,105,109,97,103,101,115,0]),dt=new Uint8Array([170,170,170,170]),St=new Uint8Array,ht=new Uint8Array([170,170,170,170]),gt=new Uint8Array,zt=new Uint8Array([170,170,170,170]),Ot=new Uint8Array;Object.assign(ae,{...t,type:2,name:"crossfade.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:rt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:E},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:x},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:c},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:K},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:F},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:M},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:_}],methods:[],template:{memory:{array:at},slots:{0:{structure:E,memory:{array:nt},slots:{0:{structure:B,memory:{array:it},slots:{0:{structure:$,memory:{array:ot}}}}}},1:{structure:x,memory:{array:ut},slots:{0:{structure:G,memory:{array:lt},slots:{0:{structure:L,memory:{array:mt}}}}}},2:{structure:c,memory:{array:ct},slots:{0:{structure:m,memory:{array:yt}}}},3:{structure:K,memory:{array:bt},slots:{0:{structure:J,memory:{array:ft},slots:{0:{structure:H,memory:{array:pt}}}}}},4:{structure:F,memory:{array:dt},slots:{0:{structure:Q,memory:{array:St}}}},5:{structure:M,memory:{array:ht},slots:{0:{structure:W,memory:{array:gt}}}},6:{structure:_,memory:{array:zt},slots:{0:{structure:X,memory:{array:Ot}}}}}}},slot:1});Object.assign(w,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:24});Object.assign(q,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(A,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:q}],methods:[],template:null},slot:22});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:25});const wt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Y,{...t,type:9,name:"crossfade.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:wt}}},slot:26});Object.assign(U,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:U}],methods:[],template:null},slot:27});Object.assign(Z,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:41});const Rt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),qt=new Uint8Array,At=new Uint8Array([16,35,16,0]),Ut=new Uint8Array([4,0,0,0]);Object.assign(g,{...t,type:2,name:"crossfade.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:A},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Y},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:U}],methods:[],template:{memory:{array:Rt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:Z},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:qt},slots:{0:{structure:c,memory:{array:At},slots:{0:{structure:m,memory:{array:Ut}}}}}}},slot:21});const jt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Pt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),It=new Uint8Array([0,0,0,0,0,0,0,0]),kt=new Uint8Array,Vt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ct=new Uint8Array([0,0,0,0,0,0,0,0]),vt=new Uint8Array;Object.assign(j,{...t,type:2,name:"crossfade.KernelInput(u8,crossfade.kernel)",length:1,byteSize:48,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"frontImage",structure:g},{...e,type:6,isRequired:!1,bitOffset:192,bitSize:192,byteSize:24,slot:1,name:"backImage",structure:g}],methods:[],template:{memory:{array:jt},slots:{0:{structure:g,memory:{array:Pt},slots:{0:{structure:A,memory:{array:It},address:1047936,slots:{0:{structure:q,memory:{array:kt},address:0}}}}},1:{structure:g,memory:{array:Vt},slots:{0:{structure:A,memory:{array:Ct},address:1047960,slots:{0:{structure:q,memory:{array:vt},address:0}}}}}}}},slot:20});Object.assign(ee,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(te,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ee}],methods:[],template:null},slot:30});const Et=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),xt=new Uint8Array,Kt=new Uint8Array([16,35,16,0]),Dt=new Uint8Array([4,0,0,0]);Object.assign(T,{...t,type:2,name:"crossfade.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:te},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Y},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:U}],methods:[],template:{memory:{array:Et}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:Z},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:xt},slots:{0:{structure:c,memory:{array:Kt},slots:{0:{structure:m,memory:{array:Dt}}}}}}},slot:29});const Ft=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Mt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),_t=new Uint8Array([0,0,0,0,0,0,0,0]),Tt=new Uint8Array;Object.assign(P,{...t,type:2,name:"crossfade.KernelOutput(u8,crossfade.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:T}],methods:[],template:{memory:{array:Ft},slots:{0:{structure:T,memory:{array:Mt},slots:{0:{structure:te,memory:{array:_t},address:1047568,slots:{0:{structure:ee,memory:{array:Tt},address:0}}}}}}}},slot:28});const $t=new Uint8Array([0,0,0,0]);Object.assign(I,{...t,type:2,name:"crossfade.KernelParameters(crossfade.kernel)",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"intensity",structure:z}],methods:[],template:{memory:{array:$t}}},slot:31});Object.assign(ne,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(crossfade.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:42});Object.assign(ie,{...t,type:7,name:"ErrorSet0000!crossfade.KernelOutput(u8,crossfade.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ne}],methods:[],template:null},slot:35});Object.assign(oe,{...t,type:3,name:"createOutput",length:1,byteSize:88,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:64,bitSize:384,byteSize:48,slot:2,name:"2",structure:j},{...e,type:6,bitOffset:448,bitSize:32,byteSize:4,slot:3,name:"3",structure:I},{...e,type:6,bitOffset:480,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ie}],methods:[],template:null},slot:33});Object.assign(ue,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(crossfade.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:43});Object.assign(le,{...t,type:7,name:"ErrorSet0001!crossfade.KernelOutput(u8,crossfade.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ue}],methods:[],template:null},slot:36});Object.assign(me,{...t,type:3,name:"createPartialOutput",length:1,byteSize:96,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:128,bitSize:384,byteSize:48,slot:4,name:"4",structure:j},{...e,type:6,bitOffset:512,bitSize:32,byteSize:4,slot:5,name:"5",structure:I},{...e,type:6,bitOffset:544,bitSize:224,byteSize:28,slot:6,name:"retval",structure:le}],methods:[],template:null},slot:34});const Bt=new Uint8Array,Lt={argStruct:oe,thunk:8,name:"createOutput"},Gt={argStruct:me,thunk:2,name:"createPartialOutput"};Object.assign(ce,{...t,type:2,name:"crossfade",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Bt}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ae},{...e,type:7,isRequired:!1,name:"Input",structure:j},{...e,type:7,isRequired:!1,name:"Output",structure:P},{...e,type:7,isRequired:!1,name:"Parameters",structure:I}],methods:[Lt,Gt],template:null},slot:0});const Ht=[d,$,B,E,L,G,x,m,c,H,J,K,z,p,b,N,D,Q,F,O,f,W,M,X,_,ae,w,q,A,u,Y,U,Z,g,j,ee,te,T,P,I,ne,ie,oe,ue,le,me,ce],Jt=Ee(Ht),Nt=ce.constructor,Qt=(async()=>{const n=new URL("crossfade-fc30f374.wasm",import.meta.url).href;return fetch(n)})();xe(Qt,{...Jt,writeBack:!0});const{createOutput:rs,createPartialOutput:Wt,kernel:re,Input:Xt,Output:as,Parameters:ns}=Nt;function Yt(n,o,r,s,a={},S={}){if(Array.isArray(a)){const y=a;a={};for(const[l,h]of Object.keys(re.inputImages).entries())a[h]=y[l]}const k=new Xt(void 0),V=Object.keys(re.inputImages),i=[];let R;for(const y of V){let l=a[y];if(l||(V.length===1&&["data","width","height"].every(h=>!!a[h])?l=a:i.push(y)),k[y]=l,R){if(l.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=l.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const se=Wt(n,o,r,s,k,S),ye=y=>{const l=Object.keys(y),h={};for(const be of l){const{data:{typedArray:C},width:fe,height:de}=y[be];let v;if(typeof ImageData=="function"){const Se=new Uint8ClampedArray(C.buffer,C.byteOffset,C.byteLength);v=new ImageData(Se,fe,s,{colorSpace:R})}else v={data:C,width:fe,height:de};if(l.length===1)return v;h[be]=v}return h};return se[Symbol.toStringTag]==="Promise"?se.then(ye):ye(se)}function Zt(){const n={};for(let[o,r]of Object.entries(re)){if(o==="parameters"){const s={};for(const[a,S]of Object.entries(r)){const k=s[a]={};for(let[V,i]of Object.entries(S))typeof i=="object"?"string"in i?i=i.string:i=pe(i):typeof i=="function"&&(i=es(i.name)),k[V]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[o]=r}return n}function pe(n){const o=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=pe(s)),o[r]=s;return o}function es(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,r,...s]=n.data;ts(o,s).then(([a,S])=>{postMessage([o,r,a],{transfer:S})}).catch(a=>{postMessage(["error",r,a])})};async function ts(n,o){switch(n){case"getKernelInfo":return[Zt(...o)];case"createPartialImageData":const s=await Yt(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const S of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
