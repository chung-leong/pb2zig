import{u as Us,a as Ps,b as Vs,c as Rs,d as ks,e as qs,f as Is,g as vs,h as Es,i as xs,j as Ts,k as Ks,l as Cs,m as Ds,n as Ms,o as Fs,p as _s,q as $s}from"./index-031d01ca.js";Us();Ks();Cs();Ps();Vs();Ds();Ms();Fs();_s();Rs();ks();qs();Is();$s();vs();Es();xs();const e={constructor:null,typedArray:null,type:0,name:void 0,byteSize:0,align:0,isConst:!1,isTuple:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null}},t={type:0,isRequired:!1},s={},S={},_={},$={},L={},B={},r={},m={},G={},H={},i={},O={},J={},N={},Q={},R={},W={},X={},Y={},Z={},tt={},F={},et={},st={},rt={},f={},nt={},at={},lt={},q={},it={},U={},u={},g={},k={},pt={},A={},I={},ot={},v={},ct={},E={},x={},h={},gt={},Ot={},w={},ft={},St={},jt={},Xt={},zt={},Yt={},dt={},Zt={},te={},ht={},ee={},wt={},se={},re={},At={},ne={},Ut={},ae={},ie={},Pt={},oe={},Vt={},Rt={},kt={},ce={},qt={},ue={},It={},me={},ye={},vt={},be={},Et={},le={},pe={},xt={},ge={},Tt={},Oe={},fe={},Kt={},Se={},Ct={},Dt={},Mt={},je={},Ft={},_t={},ze={},T={},de={},he={},$t={},Lt={},we={},Bt={},Ae={},Ue={},Pe={},Ve={},Re={},ke={},qe={},Ie={},ve={},Ee={},xe={},Te={},Ke={},Ce={},De={},Me={},Fe={},ut={},_e={},$e={},Gt={},Le={},Ht={},Be={},Ge={},He={},Je={},Ne={},Qe={},We={},Xe={},Ye={},Jt={},Ze={},ts={},es={},ss={},rs={},ns={},as={},is={},os={},cs={},us={},ms={},ys={},bs={},ls={},ps={},gs={},Os={},fs={},Ss={},js={},zs={},Ls=new Uint8Array,Bs=new Uint8Array([0,0,0,0,0,0,89,192]),Gs=new Uint8Array,Hs=new Uint8Array([0,0,0,0,0,0,89,192]),Js=new Uint8Array,Ns=new Uint8Array([0,0,0,0,0,0,89,64]),Qs=new Uint8Array,Ws=new Uint8Array([0,0,0,0,0,0,89,64]),Xs=new Uint8Array,Ys=new Uint8Array([0,0,0,0,0,0,0,0]),Zs=new Uint8Array,tr=new Uint8Array([0,0,0,0,0,0,0,0]),er=new Uint8Array,sr=new Uint8Array,rr=new Uint8Array,nr=new Uint8Array,ar=new Uint8Array,ir=new Uint8Array([0]),or=new Uint8Array,cr=new Uint8Array([0]),ur=new Uint8Array,mr=new Uint8Array([3]),yr=new Uint8Array,br=new Uint8Array([3]),lr=new Uint8Array,pr=new Uint8Array([0]),gr=new Uint8Array,Or=new Uint8Array([1]),fr=new Uint8Array,Sr=new Uint8Array,jr=new Uint8Array,zr=new Uint8Array,dr=new Uint8Array,hr=new Uint8Array,wr=new Uint8Array,Ar=new Uint8Array([4]),Ur=new Uint8Array,Pr=new Uint8Array,Vr=new Uint8Array,Rr=new Uint8Array([248,4,0,1]),kr=new Uint8Array([110,101,116,46,110,105,99,111,112,116,101,114,101,46,102,105,108,116,101,114,115,0]),qr=new Uint8Array([25,5,0,1]),Ir=new Uint8Array([110,105,99,111,112,116,101,114,101,0]),vr=new Uint8Array,Er=new Uint8Array([1]),xr=new Uint8Array([52,5,0,1]),Tr=new Uint8Array([100,105,115,112,108,97,99,101,0]),Kr=new Uint8Array,Cr=new Uint8Array,Dr=new Uint8Array,Mr=new Uint8Array([0]),Fr=new Uint8Array([1]),ds=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),_r=new Uint8Array,$r=new Uint8Array,Lr=new Uint8Array,Br=new Uint8Array,Gr=new Uint8Array([4]),K=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),hs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Hr=new Uint8Array,Jr=new Uint8Array,Nr=new Uint8Array,Qr=new Uint8Array,Wr=new Uint8Array([4]),Nt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Xr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0]),Yr=new Uint8Array([27,0]),Zr=new Uint8Array([27,0]),tn=new Uint8Array,en=new Uint8Array,sn=new Uint8Array,rn=new Uint8Array;Object.assign(Xt,{slots:{0:zt,1:dt}});Object.assign(zt,{structure:i,memory:{array:Ls},const:!0,slots:{0:Yt}});Object.assign(Yt,{structure:O,memory:{array:Bs},const:!0});Object.assign(dt,{structure:i,memory:{array:Gs},const:!0,slots:{0:Zt}});Object.assign(Zt,{structure:O,memory:{array:Hs},const:!0});Object.assign(te,{slots:{0:ht,1:wt}});Object.assign(ht,{structure:i,memory:{array:Js},const:!0,slots:{0:ee}});Object.assign(ee,{structure:O,memory:{array:Ns},const:!0});Object.assign(wt,{structure:i,memory:{array:Qs},const:!0,slots:{0:se}});Object.assign(se,{structure:O,memory:{array:Ws},const:!0});Object.assign(re,{slots:{0:At,1:Ut}});Object.assign(At,{structure:i,memory:{array:Xs},const:!0,slots:{0:ne}});Object.assign(ne,{structure:O,memory:{array:Ys},const:!0});Object.assign(Ut,{structure:i,memory:{array:Zs},const:!0,slots:{0:ae}});Object.assign(ae,{structure:O,memory:{array:tr},const:!0});Object.assign(ie,{slots:{0:Pt,1:Vt,2:Rt,3:kt}});Object.assign(Pt,{structure:s,memory:{array:er},const:!0,slots:{0:oe}});Object.assign(oe,{structure:W});Object.assign(Vt,{structure:J,memory:{array:sr},const:!0,slots:{0:zt,1:dt}});Object.assign(Rt,{structure:N,memory:{array:rr},const:!0,slots:{0:ht,1:wt}});Object.assign(kt,{structure:Q,memory:{array:nr},const:!0,slots:{0:At,1:Ut}});Object.assign(ce,{slots:{0:qt,1:It}});Object.assign(qt,{structure:r,memory:{array:ar},const:!0,slots:{0:ue}});Object.assign(ue,{structure:m,memory:{array:ir},const:!0});Object.assign(It,{structure:r,memory:{array:or},const:!0,slots:{0:me}});Object.assign(me,{structure:m,memory:{array:cr},const:!0});Object.assign(ye,{slots:{0:vt,1:Et}});Object.assign(vt,{structure:r,memory:{array:ur},const:!0,slots:{0:be}});Object.assign(be,{structure:m,memory:{array:mr},const:!0});Object.assign(Et,{structure:r,memory:{array:yr},const:!0,slots:{0:le}});Object.assign(le,{structure:m,memory:{array:br},const:!0});Object.assign(pe,{slots:{0:xt,1:Tt}});Object.assign(xt,{structure:r,memory:{array:lr},const:!0,slots:{0:ge}});Object.assign(ge,{structure:m,memory:{array:pr},const:!0});Object.assign(Tt,{structure:r,memory:{array:gr},const:!0,slots:{0:Oe}});Object.assign(Oe,{structure:m,memory:{array:Or},const:!0});Object.assign(fe,{slots:{0:Kt,1:Ct,2:Dt,3:Mt}});Object.assign(Kt,{structure:s,memory:{array:fr},const:!0,slots:{0:Se}});Object.assign(Se,{structure:et});Object.assign(Ct,{structure:Y,memory:{array:Sr},const:!0,slots:{0:qt,1:It}});Object.assign(Dt,{structure:Z,memory:{array:jr},const:!0,slots:{0:vt,1:Et}});Object.assign(Mt,{structure:tt,memory:{array:zr},const:!0,slots:{0:xt,1:Tt}});Object.assign(je,{slots:{0:Ft,1:_t}});Object.assign(Ft,{structure:X,memory:{array:dr},const:!0,slots:{0:Pt,1:Vt,2:Rt,3:kt}});Object.assign(_t,{structure:st,memory:{array:hr},const:!0,slots:{0:Kt,1:Ct,2:Dt,3:Mt}});Object.assign(ze,{slots:{0:T}});Object.assign(T,{structure:r,memory:{array:wr},const:!0,slots:{0:de}});Object.assign(de,{structure:m,memory:{array:Ar},const:!0});Object.assign(he,{slots:{0:$t,1:Lt}});Object.assign($t,{structure:f,memory:{array:Ur},const:!0,slots:{0:T}});Object.assign(Lt,{structure:f,memory:{array:Pr},const:!0,slots:{0:T}});Object.assign(we,{slots:{0:Bt}});Object.assign(Bt,{structure:f,memory:{array:Vr},const:!0,slots:{0:T}});Object.assign(Ae,{slots:{0:Ue,1:Ve,2:ke,3:Ie,4:Ee,5:xe,6:Te}});Object.assign(Ue,{structure:$,memory:{array:Rr},const:!0,slots:{0:Pe}});Object.assign(Pe,{structure:_,memory:{array:kr},reloc:16778488});Object.assign(Ve,{structure:B,memory:{array:qr},const:!0,slots:{0:Re}});Object.assign(Re,{structure:L,memory:{array:Ir},reloc:16778521});Object.assign(ke,{structure:r,memory:{array:vr},const:!0,slots:{0:qe}});Object.assign(qe,{structure:m,memory:{array:Er},const:!0});Object.assign(Ie,{structure:H,memory:{array:xr},const:!0,slots:{0:ve}});Object.assign(ve,{structure:G,memory:{array:Tr},reloc:16778548});Object.assign(Ee,{structure:rt,memory:{array:Kr},const:!0,slots:{0:Ft,1:_t}});Object.assign(xe,{structure:nt,memory:{array:Cr},const:!0,slots:{0:$t,1:Lt}});Object.assign(Te,{structure:at,memory:{array:Dr},const:!0,slots:{0:Bt}});Object.assign(Ke,{slots:{0:Ce,1:De}});Object.assign(Ce,{structure:g,memory:{array:Mr},const:!0});Object.assign(De,{structure:g,memory:{array:Fr},const:!0});Object.assign(Me,{memory:{array:ds},slots:{0:Fe}});Object.assign(Fe,{structure:U,memory:{array:ds,offset:0,length:8},slots:{0:ut}});Object.assign(ut,{structure:it,memory:{array:_r},reloc:0});Object.assign(_e,{slots:{0:$e,1:Le,2:Be}});Object.assign($e,{structure:s,memory:{array:$r},const:!0,slots:{0:Gt}});Object.assign(Gt,{structure:q});Object.assign(Le,{structure:s,memory:{array:Lr},const:!0,slots:{0:Ht}});Object.assign(Ht,{structure:pt});Object.assign(Be,{structure:r,memory:{array:Br},const:!0,slots:{0:Ge}});Object.assign(Ge,{structure:m,memory:{array:Gr},const:!0});Object.assign(He,{memory:{array:K},slots:{0:Je,1:Qe}});Object.assign(Je,{structure:A,memory:{array:K,offset:0,length:24},slots:{0:Ne}});Object.assign(Ne,{structure:U,memory:{array:K,offset:0,length:8},slots:{0:ut}});Object.assign(Qe,{structure:A,memory:{array:K,offset:24,length:24},slots:{0:We}});Object.assign(We,{structure:U,memory:{array:K,offset:24,length:8},slots:{0:ut}});Object.assign(Xe,{memory:{array:hs},slots:{0:Ye}});Object.assign(Ye,{structure:v,memory:{array:hs,offset:0,length:8},slots:{0:Jt}});Object.assign(Jt,{structure:ot,memory:{array:Hr},reloc:0});Object.assign(Ze,{slots:{0:ts,1:es,2:ss}});Object.assign(ts,{structure:s,memory:{array:Jr},const:!0,slots:{0:Gt}});Object.assign(es,{structure:s,memory:{array:Nr},const:!0,slots:{0:Ht}});Object.assign(ss,{structure:r,memory:{array:Qr},const:!0,slots:{0:rs}});Object.assign(rs,{structure:m,memory:{array:Wr},const:!0});Object.assign(ns,{memory:{array:Nt},slots:{0:as}});Object.assign(as,{structure:ct,memory:{array:Nt},slots:{0:is}});Object.assign(is,{structure:v,memory:{array:Nt,offset:0,length:8},slots:{0:Jt}});Object.assign(os,{memory:{array:Xr}});Object.assign(cs,{slots:{0:us}});Object.assign(us,{structure:h,memory:{array:Yr},const:!0});Object.assign(ms,{slots:{0:ys}});Object.assign(ys,{structure:w,memory:{array:Zr},const:!0});Object.assign(bs,{slots:{0:ls,1:gs,2:fs,3:js}});Object.assign(ls,{structure:s,memory:{array:tn},const:!0,slots:{0:ps}});Object.assign(ps,{structure:lt});Object.assign(gs,{structure:s,memory:{array:en},const:!0,slots:{0:Os}});Object.assign(Os,{structure:I});Object.assign(fs,{structure:s,memory:{array:sn},const:!0,slots:{0:Ss}});Object.assign(Ss,{structure:E});Object.assign(js,{structure:s,memory:{array:rn},const:!0,slots:{0:zs}});Object.assign(zs,{structure:x});const nn={argStruct:Ot,thunkId:2,name:"createOutput"},an={argStruct:St,thunkId:3,name:"createPartialOutput"};Object.assign(s,{...e,name:"type",align:1,instance:{members:[{...t,type:6,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:s}],methods:[]}});Object.assign(S,{...e,name:"u8",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(_,{...e,type:1,name:"[21:0]u8",length:21,byteSize:22,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign($,{...e,type:13,name:"*const [21:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:_}],methods:[]}});Object.assign(L,{...e,type:1,name:"[9:0]u8",length:9,byteSize:10,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(B,{...e,type:13,name:"*const [9:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[]}});Object.assign(r,{...e,name:"comptime_int",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:r}],methods:[]}});Object.assign(m,{...e,name:"i8",byteSize:1,align:1,instance:{members:[{...t,type:2,bitOffset:0,bitSize:8,byteSize:1,structure:m}],methods:[]}});Object.assign(G,{...e,type:1,name:"[8:0]u8",length:8,byteSize:9,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(H,{...e,type:13,name:"*const [8:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[]}});Object.assign(i,{...e,name:"comptime_float",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:i}],methods:[]}});Object.assign(O,{...e,name:"f64",byteSize:8,align:8,instance:{members:[{...t,type:4,bitOffset:0,bitSize:64,byteSize:8,structure:O}],methods:[]}});Object.assign(J,{...e,type:2,name:"Struct909833941",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:i},{...t,type:7,slot:1,name:"1",structure:i}],methods:[],template:Xt}});Object.assign(N,{...e,type:2,name:"Struct2155520631",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:i},{...t,type:7,slot:1,name:"1",structure:i}],methods:[],template:te}});Object.assign(Q,{...e,type:2,name:"Struct738220547",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:i},{...t,type:7,slot:1,name:"1",structure:i}],methods:[],template:re}});Object.assign(R,{...e,name:"f32",byteSize:4,align:4,instance:{members:[{...t,type:4,bitOffset:0,bitSize:32,byteSize:4,structure:R}],methods:[]}});Object.assign(W,{...e,type:15,name:"@Vector(2, f32)",length:2,byteSize:8,align:8,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:R}],methods:[]}});Object.assign(X,{...e,type:2,name:"Struct16988915",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:J},{...t,type:7,slot:2,name:"maxValue",structure:N},{...t,type:7,slot:3,name:"defaultValue",structure:Q}],methods:[],template:ie}});Object.assign(Y,{...e,type:2,name:"Struct3865421952",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:r},{...t,type:7,slot:1,name:"1",structure:r}],methods:[],template:ce}});Object.assign(Z,{...e,type:2,name:"Struct2193710746",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:r},{...t,type:7,slot:1,name:"1",structure:r}],methods:[],template:ye}});Object.assign(tt,{...e,type:2,name:"Struct2120481315",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:r},{...t,type:7,slot:1,name:"1",structure:r}],methods:[],template:pe}});Object.assign(F,{...e,name:"i32",byteSize:4,align:4,instance:{members:[{...t,type:2,bitOffset:0,bitSize:32,byteSize:4,structure:F}],methods:[]}});Object.assign(et,{...e,type:15,name:"@Vector(2, i32)",length:2,byteSize:8,align:8,instance:{members:[{...t,type:2,bitSize:32,byteSize:4,structure:F}],methods:[]}});Object.assign(st,{...e,type:2,name:"Struct3745769591",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:Y},{...t,type:7,slot:2,name:"maxValue",structure:Z},{...t,type:7,slot:3,name:"defaultValue",structure:tt}],methods:[],template:fe}});Object.assign(rt,{...e,type:2,name:"Struct1852027982",align:1,instance:{members:[{...t,type:7,slot:0,name:"amplitude",structure:X},{...t,type:7,slot:1,name:"channels",structure:st}],methods:[],template:je}});Object.assign(f,{...e,type:2,name:"Struct3832472641",align:1,instance:{members:[{...t,type:7,slot:0,name:"channels",structure:r}],methods:[],template:ze}});Object.assign(nt,{...e,type:2,name:"Struct2237388294",align:1,instance:{members:[{...t,type:7,slot:0,name:"src",structure:f},{...t,type:7,slot:1,name:"src1",structure:f}],methods:[],template:he}});Object.assign(at,{...e,type:2,name:"Struct172100005",align:1,instance:{members:[{...t,type:7,slot:0,name:"dst",structure:f}],methods:[],template:we}});Object.assign(lt,{...e,type:2,name:"displace.kernel",align:1,static:{members:[{...t,type:7,slot:0,name:"namespace",structure:$},{...t,type:7,slot:1,name:"vendor",structure:B},{...t,type:7,slot:2,name:"version",structure:r},{...t,type:7,slot:3,name:"description",structure:H},{...t,type:7,slot:4,name:"parameters",structure:rt},{...t,type:7,slot:5,name:"inputImages",structure:nt},{...t,type:7,slot:6,name:"outputImages",structure:at}],methods:[],template:Ae}});Object.assign(q,{...e,type:15,name:"@Vector(4, u8)",length:4,byteSize:4,align:4,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(it,{...e,type:14,name:"[_]const @Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:q}],methods:[]}});Object.assign(U,{...e,type:13,name:"[]const @Vector(4, u8)",byteSize:8,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:it}],methods:[]}});Object.assign(u,{...e,name:"u32",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[]}});Object.assign(g,{...e,type:11,name:"displace.ColorSpace",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:1,byteSize:1,structure:g}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"srgb",structure:g},{...t,type:7,slot:1,name:"display-p3",structure:g}],methods:[],template:Ke}});Object.assign(k,{...e,name:"usize",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:k}],methods:[]}});Object.assign(pt,{...e,type:15,name:"@Vector(4, f32)",length:4,byteSize:16,align:16,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:R}],methods:[]}});Object.assign(A,{...e,type:2,name:"displace.Image(u8,4,false)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:U},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:g},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:k}],methods:[],template:Me},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:r}],methods:[],template:_e}});Object.assign(I,{...e,type:2,name:"displace.KernelInput(u8,displace.kernel)",byteSize:48,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:A},{...t,type:5,bitOffset:192,bitSize:192,byteSize:24,slot:1,name:"src1",structure:A}],methods:[],template:He}});Object.assign(ot,{...e,type:14,name:"[_]@Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:q}],methods:[]}});Object.assign(v,{...e,type:13,name:"[]@Vector(4, u8)",byteSize:8,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:ot}],methods:[]}});Object.assign(ct,{...e,type:2,name:"displace.Image(u8,4,true)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:v},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:g},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:k}],methods:[],template:Xe},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:r}],methods:[],template:Ze}});Object.assign(E,{...e,type:2,name:"displace.KernelOutput(u8,displace.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:ct}],methods:[],template:ns}});Object.assign(x,{...e,type:2,name:"displace.KernelParameters(displace.kernel)",byteSize:16,align:8,instance:{members:[{...t,type:5,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"amplitude",structure:W},{...t,type:5,bitOffset:64,bitSize:64,byteSize:8,slot:1,name:"channels",structure:et}],methods:[],template:os}});Object.assign(h,{...e,type:10,name:"ErrorSet605087019",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:h}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:h}],methods:[],template:cs}});Object.assign(gt,{...e,type:9,name:"ErrorSet605087019!displace.KernelOutput(u8,displace.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:E},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:h}],methods:[]}});Object.assign(Ot,{...e,type:5,name:"createOutput",byteSize:104,align:8,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:128,bitSize:32,byteSize:4,slot:3,name:"0",structure:u},{...t,type:3,isRequired:!0,bitOffset:160,bitSize:32,byteSize:4,slot:4,name:"1",structure:u},{...t,type:5,isRequired:!0,bitOffset:192,bitSize:384,byteSize:48,slot:0,name:"2",structure:I},{...t,type:5,isRequired:!0,bitOffset:0,bitSize:128,byteSize:16,slot:1,name:"3",structure:x},{...t,type:5,isRequired:!0,bitOffset:576,bitSize:224,byteSize:28,slot:2,name:"retval",structure:gt}],methods:[]}});Object.assign(w,{...e,type:10,name:"ErrorSet4233426922",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:w}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:w}],methods:[],template:ms}});Object.assign(ft,{...e,type:9,name:"ErrorSet4233426922!displace.KernelOutput(u8,displace.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:E},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:w}],methods:[]}});Object.assign(St,{...e,type:5,name:"createPartialOutput",byteSize:112,align:8,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:128,bitSize:32,byteSize:4,slot:3,name:"0",structure:u},{...t,type:3,isRequired:!0,bitOffset:160,bitSize:32,byteSize:4,slot:4,name:"1",structure:u},{...t,type:3,isRequired:!0,bitOffset:192,bitSize:32,byteSize:4,slot:5,name:"2",structure:u},{...t,type:3,isRequired:!0,bitOffset:224,bitSize:32,byteSize:4,slot:6,name:"3",structure:u},{...t,type:5,isRequired:!0,bitOffset:256,bitSize:384,byteSize:48,slot:0,name:"4",structure:I},{...t,type:5,isRequired:!0,bitOffset:0,bitSize:128,byteSize:16,slot:1,name:"5",structure:x},{...t,type:5,isRequired:!0,bitOffset:640,bitSize:224,byteSize:28,slot:2,name:"retval",structure:ft}],methods:[]}});Object.assign(jt,{...e,type:2,name:"displace",align:1,static:{members:[{...t,type:7,slot:0,name:"kernel",structure:s},{...t,type:7,slot:1,name:"Input",structure:s},{...t,type:7,slot:2,name:"Output",structure:s},{...t,type:7,slot:3,name:"Parameters",structure:s}],methods:[nn,an],template:bs}});const on=[s,S,_,$,L,B,r,m,G,H,i,O,J,N,Q,R,W,X,Y,Z,tt,F,et,st,rt,f,nt,at,lt,q,it,U,u,g,k,pt,A,I,ot,v,ct,E,x,h,gt,Ot,w,ft,St,jt],cn=jt,un={runtimeSafety:!1,littleEndian:!0},mt=Ts();mt.getSpecialExports();mt.recreateStructures(on,un);const mn=(async()=>{const o=new URL("displace-e1884b6f.wasm",import.meta.url).href;return fetch(o)})();mt.loadModule(mn);mt.linkVariables(!0);const{constructor:yn}=cn,{createPartialOutput:bn,Input:ln,kernel:bt}=yn;function pn(o,y,c,a,n={},j={}){const z=[];for(const[l]of bt.inputImages)z.push(l);const P=[];for(const[l]of bt.outputImages)P.push(l);if(Array.isArray(n)){const l=n;n={};for(const[p,d]of z.entries())n[d]=l[p]}const b=new ln(void 0),C=[];let V;for(const l of z){let p=n[l];if(p||(z.length===1&&["data","width","height"].every(d=>!!n[d])?p=n:C.push(l)),b[l]=p,V){if(p.colorSpace!==V)throw new Error(`Input images must all use the same color space: ${V}`)}else V=p.colorSpace}if(C.length>0)throw new Error(`Missing input image${C.length>1?"s":""}: ${C.join(", ")}`);const yt=bn(o,y,c,a,b,j),Qt=l=>{const p={};for(const d of P){const{data:{typedArray:D},width:Wt,height:ws}=l[d];let M;if(typeof ImageData=="function"){const As=new Uint8ClampedArray(D.buffer,D.byteOffset,D.byteLength);M=new ImageData(As,Wt,a,{colorSpace:V})}else M={data:D,width:Wt,height:ws};if(P.length===1)return M;p[d]=M}return p};return yt[Symbol.toStringTag]==="Promise"?yt.then(Qt):Qt(yt)}function gn(){const o={};for(let[y,c]of bt){if(y==="parameters"){const a={};for(const[n,j]of c){const z=a[n]={};for(let[P,b]of j)typeof b=="object"?b=b.string??b.valueOf():typeof b=="function"&&(b=On(b.name)),z[P]=b}c=a}else typeof c=="object"&&(c=c.string??c.valueOf());o[y]=c}return o}function On(o){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[o]}onmessage=o=>{const[y,c,...a]=o.data;fn(y,a).then(([n,j])=>{postMessage([y,c,n],{transfer:j})}).catch(n=>{postMessage(["error",c,n])})};async function fn(o,y){switch(o){case"getKernelInfo":return[gn(...y)];case"createPartialImageData":const a=await pn(...y),n=[];if("data"in a&&"width"in a&&"height"in a)n.push(a.data.buffer);else for(const j of Object.entries(a))n.push(a.data.buffer);return[a,n];default:throw new Error(`Unknown function: ${o}`)}}
