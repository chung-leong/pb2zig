import{u as Se,a as ze,b as he,c as je,d as de,e as we,f as Ae,g as Ue,h as Pe,i as Ie,j as Re,k as ke,l as qe,m as Ve,n as ve,o as Ee,p as xe,q as Ke,r as Ce,s as De}from"./index-6ff6e058.js";Se();Re();ke();ze();he();qe();Ve();ve();je();de();we();Ae();Ee();xe();De();Ue();Ke();Pe();Ie();const e={constructor:null,typedArray:null,type:0,name:void 0,byteSize:0,align:0,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null}},t={type:0,isRequired:!1},r={},z={},I={},h={},y={},g={},M={},T={},$={},f={},L={},B={},Y={},R={},G={},d={},c={},l={},U={},_={},Z={},j={},k={},H={},q={},J={},V={},v={},P={},tt={},et={},F={},st={},rt={},nt={},gt={},E={},pt={},Ot={},at={},it={},St={},ot={},zt={},ht={},jt={},dt={},wt={},At={},Ut={},Pt={},It={},Rt={},kt={},qt={},Vt={},vt={},Et={},xt={},Kt={},N={},Ct={},Dt={},ut={},_t={},ct={},Ft={},Mt={},Tt={},$t={},Lt={},Bt={},Gt={},Ht={},Jt={},mt={},Nt={},Qt={},Wt={},Xt={},Yt={},Zt={},te={},ee={},se={},yt={},re={},ne={},ae={},ie={},oe={},ue={},ce={},me={},ye={},be={},_e=new Uint8Array,Fe=new Uint8Array([4]),Me=new Uint8Array,Te=new Uint8Array,$e=new Uint8Array,Le=new Uint8Array([240,4,0,1]),Be=new Uint8Array([70,108,97,109,101,0]),Ge=new Uint8Array([1,5,0,1]),He=new Uint8Array([65,100,111,98,101,0]),Je=new Uint8Array,Ne=new Uint8Array([1]),Qe=new Uint8Array([24,5,0,1]),We=new Uint8Array([83,111,102,116,76,105,103,104,116,32,98,108,101,110,100,32,109,111,100,101,0]),Xe=new Uint8Array,Ye=new Uint8Array,Ze=new Uint8Array,ts=new Uint8Array([0]),es=new Uint8Array([1]),le=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ss=new Uint8Array,rs=new Uint8Array,ns=new Uint8Array,as=new Uint8Array,is=new Uint8Array([4]),x=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),fe=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),os=new Uint8Array,us=new Uint8Array,cs=new Uint8Array,ms=new Uint8Array,ys=new Uint8Array([4]),bt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),bs=new Uint8Array([27,0]),ls=new Uint8Array,fs=new Uint8Array,gs=new Uint8Array,ps=new Uint8Array;Object.assign(gt,{slots:{0:E}});Object.assign(E,{structure:y,memory:{array:_e},slots:{0:pt}});Object.assign(pt,{structure:g,memory:{array:Fe}});Object.assign(Ot,{slots:{0:at,1:it}});Object.assign(at,{structure:f,memory:{array:Me},slots:{0:E}});Object.assign(it,{structure:f,memory:{array:Te},slots:{0:E}});Object.assign(St,{slots:{0:ot}});Object.assign(ot,{structure:f,memory:{array:$e},slots:{0:E}});Object.assign(zt,{slots:{0:ht,1:dt,2:At,3:Pt,4:Rt,5:kt,6:qt}});Object.assign(ht,{structure:h,memory:{array:Le},slots:{0:jt}});Object.assign(jt,{structure:I,memory:{array:Be},reloc:16778480,const:!0});Object.assign(dt,{structure:h,memory:{array:Ge},slots:{0:wt}});Object.assign(wt,{structure:I,memory:{array:He},reloc:16778497,const:!0});Object.assign(At,{structure:y,memory:{array:Je},slots:{0:Ut}});Object.assign(Ut,{structure:g,memory:{array:Ne}});Object.assign(Pt,{structure:T,memory:{array:Qe},slots:{0:It}});Object.assign(It,{structure:M,memory:{array:We},reloc:16778520,const:!0});Object.assign(Rt,{structure:$,memory:{array:Xe}});Object.assign(kt,{structure:L,memory:{array:Ye},slots:{0:at,1:it}});Object.assign(qt,{structure:B,memory:{array:Ze},slots:{0:ot}});Object.assign(Vt,{slots:{0:vt,1:Et}});Object.assign(vt,{structure:l,memory:{array:ts}});Object.assign(Et,{structure:l,memory:{array:es}});Object.assign(xt,{memory:{array:le},slots:{0:Kt}});Object.assign(Kt,{structure:d,memory:{array:le,offset:0,length:8},slots:{0:N}});Object.assign(N,{structure:G,memory:{array:ss},reloc:0,const:!0});Object.assign(Ct,{slots:{0:Dt,1:_t,2:Ft}});Object.assign(Dt,{structure:r,memory:{array:rs},slots:{0:ut}});Object.assign(ut,{structure:R});Object.assign(_t,{structure:r,memory:{array:ns},slots:{0:ct}});Object.assign(ct,{structure:Z});Object.assign(Ft,{structure:y,memory:{array:as},slots:{0:Mt}});Object.assign(Mt,{structure:g,memory:{array:is}});Object.assign(Tt,{memory:{array:x},slots:{0:$t,1:Bt}});Object.assign($t,{structure:j,memory:{array:x,offset:0,length:24},slots:{0:Lt}});Object.assign(Lt,{structure:d,memory:{array:x,offset:0,length:8},slots:{0:N}});Object.assign(Bt,{structure:j,memory:{array:x,offset:24,length:24},slots:{0:Gt}});Object.assign(Gt,{structure:d,memory:{array:x,offset:24,length:8},slots:{0:N}});Object.assign(Ht,{memory:{array:fe},slots:{0:Jt}});Object.assign(Jt,{structure:q,memory:{array:fe,offset:0,length:8},slots:{0:mt}});Object.assign(mt,{structure:H,memory:{array:os},reloc:0});Object.assign(Nt,{slots:{0:Qt,1:Wt,2:Xt}});Object.assign(Qt,{structure:r,memory:{array:us},slots:{0:ut}});Object.assign(Wt,{structure:r,memory:{array:cs},slots:{0:ct}});Object.assign(Xt,{structure:y,memory:{array:ms},slots:{0:Yt}});Object.assign(Yt,{structure:g,memory:{array:ys}});Object.assign(Zt,{memory:{array:bt},slots:{0:te}});Object.assign(te,{structure:J,memory:{array:bt},slots:{0:ee}});Object.assign(ee,{structure:q,memory:{array:bt,offset:0,length:8},slots:{0:mt}});Object.assign(se,{slots:{0:yt}});Object.assign(yt,{structure:P,memory:{array:bs}});Object.assign(re,{slots:{0:yt}});Object.assign(ne,{slots:{0:ae,1:oe,2:ce,3:ye}});Object.assign(ae,{structure:r,memory:{array:ls},slots:{0:ie}});Object.assign(ie,{structure:Y});Object.assign(oe,{structure:r,memory:{array:fs},slots:{0:ue}});Object.assign(ue,{structure:k});Object.assign(ce,{structure:r,memory:{array:gs},slots:{0:me}});Object.assign(me,{structure:V});Object.assign(ye,{structure:r,memory:{array:ps},slots:{0:be}});Object.assign(be,{structure:v});const Os={argStruct:et,thunkId:2,name:"createOutput"},Ss={argStruct:rt,thunkId:3,name:"createPartialOutput"};Object.assign(r,{...e,name:"type",align:1,instance:{members:[{...t,type:8,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:r}],methods:[]}});Object.assign(z,{...e,name:"u8",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:8,byteSize:1,structure:z}],methods:[]}});Object.assign(I,{...e,type:1,name:"[5:0]u8",length:5,byteSize:6,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:z}],methods:[]}});Object.assign(h,{...e,type:13,name:"*const [5:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:7,bitSize:32,byteSize:4,slot:0,structure:I}],methods:[]}});Object.assign(y,{...e,name:"comptime_int",align:1,instance:{members:[{...t,type:9,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:y}],methods:[]}});Object.assign(g,{...e,name:"i8",byteSize:1,align:1,instance:{members:[{...t,type:2,bitOffset:0,bitSize:8,byteSize:1,structure:g}],methods:[]}});Object.assign(M,{...e,type:1,name:"[20:0]u8",length:20,byteSize:21,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:z}],methods:[]}});Object.assign(T,{...e,type:13,name:"*const [20:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:7,bitSize:32,byteSize:4,slot:0,structure:M}],methods:[]}});Object.assign($,{...e,type:2,name:"Struct2871943947",align:1});Object.assign(f,{...e,type:2,name:"Struct3832472641",align:1,instance:{members:[{...t,type:9,slot:0,name:"channels",structure:y}],methods:[],template:gt}});Object.assign(L,{...e,type:2,name:"Struct1092737995",align:1,instance:{members:[{...t,type:9,slot:0,name:"dst",structure:f},{...t,type:9,slot:1,name:"src",structure:f}],methods:[],template:Ot}});Object.assign(B,{...e,type:2,name:"Struct1039671274",align:1,instance:{members:[{...t,type:9,slot:0,name:"result",structure:f}],methods:[],template:St}});Object.assign(Y,{...e,type:2,name:"soft-light.kernel",align:1,static:{members:[{...t,type:9,slot:0,name:"namespace",structure:h},{...t,type:9,slot:1,name:"vendor",structure:h},{...t,type:9,slot:2,name:"version",structure:y},{...t,type:9,slot:3,name:"description",structure:T},{...t,type:9,slot:4,name:"parameters",structure:$},{...t,type:9,slot:5,name:"inputImages",structure:L},{...t,type:9,slot:6,name:"outputImages",structure:B}],methods:[],template:zt}});Object.assign(R,{...e,type:15,name:"@Vector(4, u8)",length:4,byteSize:4,align:4,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:z}],methods:[]}});Object.assign(G,{...e,type:14,name:"[_]const @Vector(4, u8)",length:0,byteSize:4,align:4,instance:{members:[{...t,type:7,bitSize:32,byteSize:4,structure:R}],methods:[]}});Object.assign(d,{...e,type:13,name:"[]const @Vector(4, u8)",byteSize:8,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:7,bitSize:64,byteSize:8,slot:0,structure:G}],methods:[]}});Object.assign(c,{...e,name:"u32",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[]}});Object.assign(l,{...e,type:11,name:"soft-light.ColorSpace",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:8,byteSize:1}],methods:[]},static:{members:[{...t,type:9,slot:0,name:"srgb",structure:l},{...t,type:9,slot:1,name:"display-p3",structure:l}],methods:[],template:Vt}});Object.assign(U,{...e,name:"usize",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:U}],methods:[]}});Object.assign(_,{...e,name:"f32",byteSize:4,align:4,instance:{members:[{...t,type:4,bitOffset:0,bitSize:32,byteSize:4,structure:_}],methods:[]}});Object.assign(Z,{...e,type:15,name:"@Vector(4, f32)",length:4,byteSize:16,align:16,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:_}],methods:[]}});Object.assign(j,{...e,type:2,name:"soft-light.Image(u8,4,false)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:7,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:d},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...t,type:5,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:l},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:U}],methods:[],template:xt},static:{members:[{...t,type:9,slot:0,name:"Pixel",structure:r},{...t,type:9,slot:1,name:"FPixel",structure:r},{...t,type:9,slot:2,name:"channels",structure:y}],methods:[],template:Ct}});Object.assign(k,{...e,type:2,name:"soft-light.KernelInput(u8,soft-light.kernel)",byteSize:48,align:4,hasPointer:!0,instance:{members:[{...t,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:j},{...t,type:7,bitOffset:192,bitSize:192,byteSize:24,slot:1,name:"src",structure:j}],methods:[],template:Tt}});Object.assign(H,{...e,type:14,name:"[_]@Vector(4, u8)",length:0,byteSize:4,align:4,instance:{members:[{...t,type:7,bitSize:32,byteSize:4,structure:R}],methods:[]}});Object.assign(q,{...e,type:13,name:"[]@Vector(4, u8)",byteSize:8,align:4,hasPointer:!0,instance:{members:[{...t,type:7,bitSize:64,byteSize:8,slot:0,structure:H}],methods:[]}});Object.assign(J,{...e,type:2,name:"soft-light.Image(u8,4,true)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:7,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:q},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...t,type:5,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:l},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:U}],methods:[],template:Ht},static:{members:[{...t,type:9,slot:0,name:"Pixel",structure:r},{...t,type:9,slot:1,name:"FPixel",structure:r},{...t,type:9,slot:2,name:"channels",structure:y}],methods:[],template:Nt}});Object.assign(V,{...e,type:2,name:"soft-light.KernelOutput(u8,soft-light.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"result",structure:J}],methods:[],template:Zt}});Object.assign(v,{...e,type:2,name:"soft-light.KernelParameters(soft-light.kernel)",align:1});Object.assign(P,{...e,type:10,name:"@typeInfo(@typeInfo(@TypeOf(soft-light.createOutput)).Fn.return_type.?).ErrorUnion.error_set",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2}],methods:[]},static:{members:[{...t,type:9,slot:0,name:"OutOfMemory",structure:P}],methods:[],template:se}});Object.assign(tt,{...e,type:9,name:"ErrorSet404975142!soft-light.KernelOutput(u8,soft-light.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:V},{...t,type:6,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:P}],methods:[]}});Object.assign(et,{...e,type:5,name:"createOutput",byteSize:84,align:4,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:0,bitSize:32,byteSize:4,slot:3,name:"0",structure:c},{...t,type:3,isRequired:!0,bitOffset:32,bitSize:32,byteSize:4,slot:4,name:"1",structure:c},{...t,type:7,isRequired:!0,bitOffset:64,bitSize:384,byteSize:48,slot:0,name:"2",structure:k},{...t,type:7,isRequired:!0,bitOffset:672,bitSize:0,byteSize:0,slot:1,name:"3",structure:v},{...t,type:7,isRequired:!0,bitOffset:448,bitSize:224,byteSize:28,slot:2,name:"retval",structure:tt}],methods:[]}});Object.assign(F,{...e,type:10,name:"@typeInfo(@typeInfo(@TypeOf(soft-light.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2}],methods:[]},static:{members:[{...t,type:9,slot:0,name:"OutOfMemory",structure:F}],methods:[],template:re}});Object.assign(st,{...e,type:9,name:"ErrorSet2506670067!soft-light.KernelOutput(u8,soft-light.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:V},{...t,type:6,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:F}],methods:[]}});Object.assign(rt,{...e,type:5,name:"createPartialOutput",byteSize:92,align:4,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:0,bitSize:32,byteSize:4,slot:3,name:"0",structure:c},{...t,type:3,isRequired:!0,bitOffset:32,bitSize:32,byteSize:4,slot:4,name:"1",structure:c},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:5,name:"2",structure:c},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:6,name:"3",structure:c},{...t,type:7,isRequired:!0,bitOffset:128,bitSize:384,byteSize:48,slot:0,name:"4",structure:k},{...t,type:7,isRequired:!0,bitOffset:736,bitSize:0,byteSize:0,slot:1,name:"5",structure:v},{...t,type:7,isRequired:!0,bitOffset:512,bitSize:224,byteSize:28,slot:2,name:"retval",structure:st}],methods:[]}});Object.assign(nt,{...e,type:2,name:"soft-light",align:1,static:{members:[{...t,type:9,slot:0,name:"kernel",structure:r},{...t,type:9,slot:1,name:"Input",structure:r},{...t,type:9,slot:2,name:"Output",structure:r},{...t,type:9,slot:3,name:"Parameters",structure:r}],methods:[Os,Ss],template:ne}});const zs=[r,z,I,h,y,g,M,T,$,f,L,B,Y,R,G,d,c,l,U,_,Z,j,k,H,q,J,V,v,P,tt,et,F,st,rt,nt],hs=nt,js={runtimeSafety:!1,littleEndian:!0},Q=Ce();Q.getControlObject();Q.recreateStructures(zs,js);const ds=(async()=>{const i=new URL("soft-light-2d238187.wasm",import.meta.url).href;return fetch(i)})();Q.loadModule(ds);Q.linkVariables(!0);const{constructor:ws}=hs,{createPartialOutput:As,Input:Us,kernel:X}=ws;function Ps(i,o,n,s,a={},p={}){const O=[];for(const[m]of X.inputImages)O.push(m);const w=[];for(const[m]of X.outputImages)w.push(m);if(Array.isArray(a)){const m=a;a={};for(const[b,S]of O.entries())a[S]=m[b]}const u=new Us(void 0),K=[];let A;for(const m of O){let b=a[m];if(b||(O.length===1&&["data","width","height"].every(S=>!!a[S])?b=a:K.push(m)),u[m]=b,A){if(b.colorSpace!==A)throw new Error(`Input images must all use the same color space: ${A}`)}else A=b.colorSpace}if(K.length>0)throw new Error(`Missing input image${K.length>1?"s":""}: ${K.join(", ")}`);const W=As(i,o,n,s,u,p),lt=m=>{const b={};for(const S of w){const{data:{typedArray:C},width:ft,height:pe}=m[S];let D;if(typeof ImageData=="function"){const Oe=new Uint8ClampedArray(C.buffer,C.byteOffset,C.byteLength);D=new ImageData(Oe,ft,s,{colorSpace:A})}else D={data:C,width:ft,height:pe};if(w.length===1)return D;b[S]=D}return b};return W[Symbol.toStringTag]==="Promise"?W.then(lt):lt(W)}function Is(){const i={};for(let[o,n]of X){if(o==="parameters"){const s={};for(const[a,p]of n){const O=s[a]={};for(let[w,u]of p)typeof u=="object"?"string"in u?u=u.string:u=ge(u):typeof u=="function"&&(u=Rs(u.name)),O[w]=u}n=s}else typeof n=="object"&&("string"in n?n=n.string:n=n.valueOf());i[o]=n}return i}function ge(i){const o=[];for(let[n,s]of i)typeof s=="object"&&(s=ge(s)),o[n]=s;return o}function Rs(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[o,n,...s]=i.data;ks(o,s).then(([a,p])=>{postMessage([o,n,a],{transfer:p})}).catch(a=>{postMessage(["error",n,a])})};async function ks(i,o){switch(i){case"getKernelInfo":return[Is(...o)];case"createPartialImageData":const s=await Ps(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const p of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${i}`)}}
