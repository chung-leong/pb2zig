import{u as Ke,a as Ce,b as Me,c as De,d as Fe,e as Te,f as _e,g as $e,h as Le,i as Be,j as Ge,k as He,l as Je,m as Ne,n as Qe,o as We,p as Xe,q as Ye}from"./index-28027c9b.js";Ke();He();Je();Ce();Me();Ne();Qe();We();Xe();De();Fe();Te();_e();Ye();$e();Le();Be();const e={constructor:null,typedArray:null,type:0,name:void 0,byteSize:0,align:0,isConst:!1,isTuple:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null}},t={type:0,isRequired:!1},s={},p={},T={},_={},$={},L={},y={},O={},B={},G={},f={},w={},A={},H={},J={},g={},N={},Q={},rt={},R={},W={},P={},o={},l={},k={},at={},U={},q={},X={},v={},Y={},E={},x={},j={},nt={},it={},h={},ot={},ct={},ut={},At={},mt={},Ut={},yt={},Pt={},bt={},It={},lt={},Vt={},kt={},ft={},Rt={},K={},qt={},vt={},gt={},pt={},Et={},Ot={},xt={},Kt={},Ct={},Mt={},Dt={},Ft={},Tt={},_t={},$t={},Lt={},Bt={},Gt={},Ht={},Jt={},Nt={},Qt={},Wt={},Z={},Xt={},Yt={},St={},Zt={},zt={},te={},ee={},se={},re={},ae={},ne={},ie={},oe={},ce={},dt={},ue={},me={},ye={},be={},le={},fe={},ge={},pe={},Oe={},Se={},ze={},de={},je={},he={},we={},Ae={},Ue={},Pe={},Ie={},Ve={},ke={},Re={},Ze=new Uint8Array,ts=new Uint8Array,es=new Uint8Array([0,0,0,0,0,0,0,0]),ss=new Uint8Array,rs=new Uint8Array([0,0,0,0,0,0,240,63]),as=new Uint8Array,ns=new Uint8Array([0,0,0,0,0,0,0,0]),is=new Uint8Array,os=new Uint8Array,cs=new Uint8Array([4]),us=new Uint8Array,ms=new Uint8Array,ys=new Uint8Array,bs=new Uint8Array([250,4,0,1]),ls=new Uint8Array([65,73,70,0]),fs=new Uint8Array([9,5,0,1]),gs=new Uint8Array([65,100,111,98,101,32,83,121,115,116,101,109,115,0]),ps=new Uint8Array,Os=new Uint8Array([2]),Ss=new Uint8Array([40,5,0,1]),zs=new Uint8Array([67,114,111,115,115,102,97,100,101,32,98,101,116,119,101,101,110,32,116,119,111,32,105,109,97,103,101,115,0]),ds=new Uint8Array,js=new Uint8Array,hs=new Uint8Array,ws=new Uint8Array([0]),As=new Uint8Array([1]),qe=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Us=new Uint8Array,Ps=new Uint8Array,Is=new Uint8Array,Vs=new Uint8Array,ks=new Uint8Array([4]),C=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ve=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Rs=new Uint8Array,qs=new Uint8Array,vs=new Uint8Array,Es=new Uint8Array,xs=new Uint8Array([4]),jt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ks=new Uint8Array([0,0,0,0]),Cs=new Uint8Array([27,0]),Ms=new Uint8Array([27,0]),Ds=new Uint8Array,Fs=new Uint8Array,Ts=new Uint8Array,_s=new Uint8Array;Object.assign(At,{slots:{0:mt,1:yt,2:bt,3:lt}});Object.assign(mt,{structure:s,memory:{array:Ze},const:!0,slots:{0:Ut}});Object.assign(Ut,{structure:w});Object.assign(yt,{structure:f,memory:{array:ts},const:!0,slots:{0:Pt}});Object.assign(Pt,{structure:A,memory:{array:es},const:!0});Object.assign(bt,{structure:f,memory:{array:ss},const:!0,slots:{0:It}});Object.assign(It,{structure:A,memory:{array:rs},const:!0});Object.assign(lt,{structure:f,memory:{array:as},const:!0,slots:{0:Vt}});Object.assign(Vt,{structure:A,memory:{array:ns},const:!0});Object.assign(kt,{slots:{0:ft}});Object.assign(ft,{structure:H,memory:{array:is},const:!0,slots:{0:mt,1:yt,2:bt,3:lt}});Object.assign(Rt,{slots:{0:K}});Object.assign(K,{structure:y,memory:{array:os},const:!0,slots:{0:qt}});Object.assign(qt,{structure:O,memory:{array:cs},const:!0});Object.assign(vt,{slots:{0:gt,1:pt}});Object.assign(gt,{structure:g,memory:{array:us},const:!0,slots:{0:K}});Object.assign(pt,{structure:g,memory:{array:ms},const:!0,slots:{0:K}});Object.assign(Et,{slots:{0:Ot}});Object.assign(Ot,{structure:g,memory:{array:ys},const:!0,slots:{0:K}});Object.assign(xt,{slots:{0:Kt,1:Mt,2:Ft,3:_t,4:Lt,5:Bt,6:Gt}});Object.assign(Kt,{structure:_,memory:{array:bs},const:!0,slots:{0:Ct}});Object.assign(Ct,{structure:T,memory:{array:ls},reloc:16778490});Object.assign(Mt,{structure:L,memory:{array:fs},const:!0,slots:{0:Dt}});Object.assign(Dt,{structure:$,memory:{array:gs},reloc:16778505});Object.assign(Ft,{structure:y,memory:{array:ps},const:!0,slots:{0:Tt}});Object.assign(Tt,{structure:O,memory:{array:Os},const:!0});Object.assign(_t,{structure:G,memory:{array:Ss},const:!0,slots:{0:$t}});Object.assign($t,{structure:B,memory:{array:zs},reloc:16778536});Object.assign(Lt,{structure:J,memory:{array:ds},const:!0,slots:{0:ft}});Object.assign(Bt,{structure:N,memory:{array:js},const:!0,slots:{0:gt,1:pt}});Object.assign(Gt,{structure:Q,memory:{array:hs},const:!0,slots:{0:Ot}});Object.assign(Ht,{slots:{0:Jt,1:Nt}});Object.assign(Jt,{structure:l,memory:{array:ws},const:!0});Object.assign(Nt,{structure:l,memory:{array:As},const:!0});Object.assign(Qt,{memory:{array:qe},slots:{0:Wt}});Object.assign(Wt,{structure:P,memory:{array:qe,offset:0,length:8},slots:{0:Z}});Object.assign(Z,{structure:W,memory:{array:Us},reloc:0});Object.assign(Xt,{slots:{0:Yt,1:Zt,2:te}});Object.assign(Yt,{structure:s,memory:{array:Ps},const:!0,slots:{0:St}});Object.assign(St,{structure:R});Object.assign(Zt,{structure:s,memory:{array:Is},const:!0,slots:{0:zt}});Object.assign(zt,{structure:at});Object.assign(te,{structure:y,memory:{array:Vs},const:!0,slots:{0:ee}});Object.assign(ee,{structure:O,memory:{array:ks},const:!0});Object.assign(se,{memory:{array:C},slots:{0:re,1:ne}});Object.assign(re,{structure:U,memory:{array:C,offset:0,length:24},slots:{0:ae}});Object.assign(ae,{structure:P,memory:{array:C,offset:0,length:8},slots:{0:Z}});Object.assign(ne,{structure:U,memory:{array:C,offset:24,length:24},slots:{0:ie}});Object.assign(ie,{structure:P,memory:{array:C,offset:24,length:8},slots:{0:Z}});Object.assign(oe,{memory:{array:ve},slots:{0:ce}});Object.assign(ce,{structure:v,memory:{array:ve,offset:0,length:8},slots:{0:dt}});Object.assign(dt,{structure:X,memory:{array:Rs},reloc:0});Object.assign(ue,{slots:{0:me,1:ye,2:be}});Object.assign(me,{structure:s,memory:{array:qs},const:!0,slots:{0:St}});Object.assign(ye,{structure:s,memory:{array:vs},const:!0,slots:{0:zt}});Object.assign(be,{structure:y,memory:{array:Es},const:!0,slots:{0:le}});Object.assign(le,{structure:O,memory:{array:xs},const:!0});Object.assign(fe,{memory:{array:jt},slots:{0:ge}});Object.assign(ge,{structure:Y,memory:{array:jt},slots:{0:pe}});Object.assign(pe,{structure:v,memory:{array:jt,offset:0,length:8},slots:{0:dt}});Object.assign(Oe,{memory:{array:Ks}});Object.assign(Se,{slots:{0:ze}});Object.assign(ze,{structure:j,memory:{array:Cs},const:!0});Object.assign(de,{slots:{0:je}});Object.assign(je,{structure:h,memory:{array:Ms},const:!0});Object.assign(he,{slots:{0:we,1:Ue,2:Ie,3:ke}});Object.assign(we,{structure:s,memory:{array:Ds},const:!0,slots:{0:Ae}});Object.assign(Ae,{structure:rt});Object.assign(Ue,{structure:s,memory:{array:Fs},const:!0,slots:{0:Pe}});Object.assign(Pe,{structure:q});Object.assign(Ie,{structure:s,memory:{array:Ts},const:!0,slots:{0:Ve}});Object.assign(Ve,{structure:E});Object.assign(ke,{structure:s,memory:{array:_s},const:!0,slots:{0:Re}});Object.assign(Re,{structure:x});const $s={argStruct:it,thunkId:2,name:"createOutput"},Ls={argStruct:ct,thunkId:3,name:"createPartialOutput"};Object.assign(s,{...e,name:"type",align:1,instance:{members:[{...t,type:6,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:s}],methods:[]}});Object.assign(p,{...e,name:"u8",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(T,{...e,type:1,name:"[3:0]u8",length:3,byteSize:4,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(_,{...e,type:13,name:"*const [3:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[]}});Object.assign($,{...e,type:1,name:"[13:0]u8",length:13,byteSize:14,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(L,{...e,type:13,name:"*const [13:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[]}});Object.assign(y,{...e,name:"comptime_int",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:y}],methods:[]}});Object.assign(O,{...e,name:"i8",byteSize:1,align:1,instance:{members:[{...t,type:2,bitOffset:0,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(B,{...e,type:1,name:"[28:0]u8",length:28,byteSize:29,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(G,{...e,type:13,name:"*const [28:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[]}});Object.assign(f,{...e,name:"comptime_float",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:f}],methods:[]}});Object.assign(w,{...e,name:"f32",byteSize:4,align:4,instance:{members:[{...t,type:4,bitOffset:0,bitSize:32,byteSize:4,structure:w}],methods:[]}});Object.assign(A,{...e,name:"f64",byteSize:8,align:8,instance:{members:[{...t,type:4,bitOffset:0,bitSize:64,byteSize:8,structure:A}],methods:[]}});Object.assign(H,{...e,type:2,name:"Struct2890073165",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:f},{...t,type:7,slot:2,name:"maxValue",structure:f},{...t,type:7,slot:3,name:"defaultValue",structure:f}],methods:[],template:At}});Object.assign(J,{...e,type:2,name:"Struct1446025373",align:1,instance:{members:[{...t,type:7,slot:0,name:"intensity",structure:H}],methods:[],template:kt}});Object.assign(g,{...e,type:2,name:"Struct3832472641",align:1,instance:{members:[{...t,type:7,slot:0,name:"channels",structure:y}],methods:[],template:Rt}});Object.assign(N,{...e,type:2,name:"Struct432787472",align:1,instance:{members:[{...t,type:7,slot:0,name:"frontImage",structure:g},{...t,type:7,slot:1,name:"backImage",structure:g}],methods:[],template:vt}});Object.assign(Q,{...e,type:2,name:"Struct172100005",align:1,instance:{members:[{...t,type:7,slot:0,name:"dst",structure:g}],methods:[],template:Et}});Object.assign(rt,{...e,type:2,name:"crossfade.kernel",align:1,static:{members:[{...t,type:7,slot:0,name:"namespace",structure:_},{...t,type:7,slot:1,name:"vendor",structure:L},{...t,type:7,slot:2,name:"version",structure:y},{...t,type:7,slot:3,name:"description",structure:G},{...t,type:7,slot:4,name:"parameters",structure:J},{...t,type:7,slot:5,name:"inputImages",structure:N},{...t,type:7,slot:6,name:"outputImages",structure:Q}],methods:[],template:xt}});Object.assign(R,{...e,type:15,name:"@Vector(4, u8)",length:4,byteSize:4,align:4,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(W,{...e,type:14,name:"[_]const @Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:R}],methods:[]}});Object.assign(P,{...e,type:13,name:"[]const @Vector(4, u8)",byteSize:8,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:W}],methods:[]}});Object.assign(o,{...e,name:"u32",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:o}],methods:[]}});Object.assign(l,{...e,type:11,name:"crossfade.ColorSpace",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:1,byteSize:1,structure:l}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"srgb",structure:l},{...t,type:7,slot:1,name:"display-p3",structure:l}],methods:[],template:Ht}});Object.assign(k,{...e,name:"usize",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:k}],methods:[]}});Object.assign(at,{...e,type:15,name:"@Vector(4, f32)",length:4,byteSize:16,align:16,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:w}],methods:[]}});Object.assign(U,{...e,type:2,name:"crossfade.Image(u8,4,false)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:P},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:o},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:o},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:l},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:k}],methods:[],template:Qt},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:y}],methods:[],template:Xt}});Object.assign(q,{...e,type:2,name:"crossfade.KernelInput(u8,crossfade.kernel)",byteSize:48,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"frontImage",structure:U},{...t,type:5,bitOffset:192,bitSize:192,byteSize:24,slot:1,name:"backImage",structure:U}],methods:[],template:se}});Object.assign(X,{...e,type:14,name:"[_]@Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:R}],methods:[]}});Object.assign(v,{...e,type:13,name:"[]@Vector(4, u8)",byteSize:8,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:X}],methods:[]}});Object.assign(Y,{...e,type:2,name:"crossfade.Image(u8,4,true)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:v},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:o},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:o},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:l},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:k}],methods:[],template:oe},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:y}],methods:[],template:ue}});Object.assign(E,{...e,type:2,name:"crossfade.KernelOutput(u8,crossfade.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:Y}],methods:[],template:fe}});Object.assign(x,{...e,type:2,name:"crossfade.KernelParameters(crossfade.kernel)",byteSize:4,align:4,instance:{members:[{...t,type:4,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"intensity",structure:w}],methods:[],template:Oe}});Object.assign(j,{...e,type:10,name:"ErrorSet3122465681",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:j}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:j}],methods:[],template:Se}});Object.assign(nt,{...e,type:9,name:"ErrorSet3122465681!crossfade.KernelOutput(u8,crossfade.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:E},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:j}],methods:[]}});Object.assign(it,{...e,type:5,name:"createOutput",byteSize:88,align:4,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:0,bitSize:32,byteSize:4,slot:3,name:"0",structure:o},{...t,type:3,isRequired:!0,bitOffset:32,bitSize:32,byteSize:4,slot:4,name:"1",structure:o},{...t,type:5,isRequired:!0,bitOffset:64,bitSize:384,byteSize:48,slot:0,name:"2",structure:q},{...t,type:5,isRequired:!0,bitOffset:448,bitSize:32,byteSize:4,slot:1,name:"3",structure:x},{...t,type:5,isRequired:!0,bitOffset:480,bitSize:224,byteSize:28,slot:2,name:"retval",structure:nt}],methods:[]}});Object.assign(h,{...e,type:10,name:"ErrorSet2634510467",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:h}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:h}],methods:[],template:de}});Object.assign(ot,{...e,type:9,name:"ErrorSet2634510467!crossfade.KernelOutput(u8,crossfade.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:E},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:h}],methods:[]}});Object.assign(ct,{...e,type:5,name:"createPartialOutput",byteSize:96,align:4,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:0,bitSize:32,byteSize:4,slot:3,name:"0",structure:o},{...t,type:3,isRequired:!0,bitOffset:32,bitSize:32,byteSize:4,slot:4,name:"1",structure:o},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:5,name:"2",structure:o},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:6,name:"3",structure:o},{...t,type:5,isRequired:!0,bitOffset:128,bitSize:384,byteSize:48,slot:0,name:"4",structure:q},{...t,type:5,isRequired:!0,bitOffset:512,bitSize:32,byteSize:4,slot:1,name:"5",structure:x},{...t,type:5,isRequired:!0,bitOffset:544,bitSize:224,byteSize:28,slot:2,name:"retval",structure:ot}],methods:[]}});Object.assign(ut,{...e,type:2,name:"crossfade",align:1,static:{members:[{...t,type:7,slot:0,name:"kernel",structure:s},{...t,type:7,slot:1,name:"Input",structure:s},{...t,type:7,slot:2,name:"Output",structure:s},{...t,type:7,slot:3,name:"Parameters",structure:s}],methods:[$s,Ls],template:he}});const Bs=[s,p,T,_,$,L,y,O,B,G,f,w,A,H,J,g,N,Q,rt,R,W,P,o,l,k,at,U,q,X,v,Y,E,x,j,nt,it,h,ot,ct,ut],Gs=ut,Hs={runtimeSafety:!1,littleEndian:!0},tt=Ge();tt.getSpecialExports();tt.recreateStructures(Bs,Hs);const Js=(async()=>{const n=new URL("crossfade-a9b59e21.wasm",import.meta.url).href;return fetch(n)})();tt.loadModule(Js);tt.linkVariables(!0);const{constructor:Ns}=Gs,{createPartialOutput:Qs,Input:Ws,kernel:st}=Ns;function Xs(n,c,i,a,r={},S={}){const z=[];for(const[m]of st.inputImages)z.push(m);const I=[];for(const[m]of st.outputImages)I.push(m);if(Array.isArray(r)){const m=r;r={};for(const[b,d]of z.entries())r[d]=m[b]}const u=new Ws(void 0),M=[];let V;for(const m of z){let b=r[m];if(b||(z.length===1&&["data","width","height"].every(d=>!!r[d])?b=r:M.push(m)),u[m]=b,V){if(b.colorSpace!==V)throw new Error(`Input images must all use the same color space: ${V}`)}else V=b.colorSpace}if(M.length>0)throw new Error(`Missing input image${M.length>1?"s":""}: ${M.join(", ")}`);const et=Qs(n,c,i,a,u,S),ht=m=>{const b={};for(const d of I){const{data:{typedArray:D},width:wt,height:Ee}=m[d];let F;if(typeof ImageData=="function"){const xe=new Uint8ClampedArray(D.buffer,D.byteOffset,D.byteLength);F=new ImageData(xe,wt,a,{colorSpace:V})}else F={data:D,width:wt,height:Ee};if(I.length===1)return F;b[d]=F}return b};return et[Symbol.toStringTag]==="Promise"?et.then(ht):ht(et)}function Ys(){const n={};for(let[c,i]of st){if(c==="parameters"){const a={};for(const[r,S]of i){const z=a[r]={};for(let[I,u]of S)typeof u=="object"?u=u.string??u.valueOf():typeof u=="function"&&(u=Zs(u.name)),z[I]=u}i=a}else typeof i=="object"&&(i=i.string??i.valueOf());n[c]=i}return n}function Zs(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=async n=>{if(!Array.isArray(n.data))return;const[c,i,...a]=n.data;try{const[r,S]=await tr(c,a);postMessage([c,i,r],{transfer:S})}catch(r){postMessage(["error",i,r])}};async function tr(n,c){switch(n){case"getKernelInfo":return[Ys(...c)];case"createPartialImageData":const a=await Xs(...c),r=[];if("data"in a&&"width"in a&&"height"in a)r.push(a.data.buffer);else for(const S of Object.entries(a))r.push(a.data.buffer);return[a,r];default:throw new Error(`Unknown function: ${n}`)}}postMessage("ready");
