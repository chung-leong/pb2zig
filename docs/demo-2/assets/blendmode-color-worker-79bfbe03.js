import{u as de,a as Se,b as he,c as ge,d as ze,e as Oe,f as we,g as Re,h as qe,i as je,j as Ae,k as Ue,l as Pe,m as ke,n as Ie,o as Ve,p as Ce,q as ve}from"./index-ccb3eb7b.js";de();Se();he();ge();ze();Oe();we();Re();qe();je();Ae();Ue();Pe();ke();Ie();Ve();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},p={},T={},$={},C={},B={},L={},v={},m={},c={},G={},H={},E={},J={},x={},g={},b={},N={},K={},Q={},D={},se={},z={},w={},R={},u={},W={},q={},F={},X={},S={},j={},Y={},Z={},M={},A={},U={},re={},ae={},ne={},ie={},oe={},ue={},le={};Object.assign(p,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:5});Object.assign(T,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:4});Object.assign($,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[],template:null},slot:3});Object.assign(C,{...t,type:11,name:"*const *const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:2});Object.assign(B,{...t,type:1,name:"[10:0]u8",length:10,byteSize:11,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:8});Object.assign(L,{...t,type:11,name:"*const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:7});Object.assign(v,{...t,type:11,name:"*const *const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:6});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:10});Object.assign(c,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:9});Object.assign(G,{...t,type:1,name:"[15:0]u8",length:15,byteSize:16,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:13});Object.assign(H,{...t,type:11,name:"*const [15:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:12});Object.assign(E,{...t,type:11,name:"*const *const [15:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:11});const Ee=new Uint8Array([]);Object.assign(J,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ee}}},slot:15});Object.assign(x,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:14});const xe=new Uint8Array([]),Ke=new Uint8Array([160,250,15,0]),De=new Uint8Array([4,0,0,0]);Object.assign(g,{...t,type:2,name:"Struct0007",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:xe},slots:{0:{structure:c,memory:{array:Ke},slots:{0:{structure:m,memory:{array:De}}}}}}},slot:37});Object.assign(b,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:g}],methods:[],template:null},slot:36});const Fe=new Uint8Array([]),Me=new Uint8Array([170,170,170,170]),h=new Uint8Array([]),_e=new Uint8Array([170,170,170,170]);Object.assign(N,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src1",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"src2",structure:b}],methods:[],template:{memory:{array:Fe},slots:{0:{structure:b,memory:{array:Me},slots:{0:{structure:g,memory:{array:h},address:-1431655766}}},1:{structure:b,memory:{array:_e},slots:{0:{structure:g,memory:{array:h},address:-1431655766}}}}}},slot:17});Object.assign(K,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:16});const Te=new Uint8Array([]),$e=new Uint8Array([170,170,170,170]);Object.assign(Q,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:b}],methods:[],template:{memory:{array:Te},slots:{0:{structure:b,memory:{array:$e},slots:{0:{structure:g,memory:{array:h},address:-1431655766}}}}}},slot:19});Object.assign(D,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:18});const Be=new Uint8Array([]),Le=new Uint8Array([]),Ge=new Uint8Array([252,250,15,0]),He=new Uint8Array([174,35,16,0]),Je=new Uint8Array([99,111,109,46,113,117,97,115,105,109,111,110,100,111,0]),Ne=new Uint8Array([60,251,15,0]),Qe=new Uint8Array([163,35,16,0]),We=new Uint8Array([81,117,97,115,105,109,111,110,100,111,0]),Xe=new Uint8Array([124,251,15,0]),Ye=new Uint8Array([1,0,0,0]),Ze=new Uint8Array([212,251,15,0]),et=new Uint8Array([147,35,16,0]),tt=new Uint8Array([67,111,108,111,114,32,66,108,101,110,100,109,111,100,101,0]),st=new Uint8Array([170,170,170,170]),rt=new Uint8Array([170,170,170,170]),at=new Uint8Array([170,170,170,170]);Object.assign(se,{...t,type:2,name:"blendmode-color.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Be}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:C},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:v},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:c},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:E},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:x},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:K},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:D}],methods:[],template:{memory:{array:Le},slots:{0:{structure:C,memory:{array:Ge},slots:{0:{structure:$,memory:{array:He},slots:{0:{structure:T,memory:{array:Je},address:1057710}}}}},1:{structure:v,memory:{array:Ne},slots:{0:{structure:L,memory:{array:Qe},slots:{0:{structure:B,memory:{array:We},address:1057699}}}}},2:{structure:c,memory:{array:Xe},slots:{0:{structure:m,memory:{array:Ye}}}},3:{structure:E,memory:{array:Ze},slots:{0:{structure:H,memory:{array:et},slots:{0:{structure:G,memory:{array:tt},address:1057683}}}}},4:{structure:x,memory:{array:st},slots:{0:{structure:J,memory:{array:h},address:-1431655766}}},5:{structure:K,memory:{array:rt},slots:{0:{structure:N,memory:{array:h},address:-1431655766}}},6:{structure:D,memory:{array:at},slots:{0:{structure:Q,memory:{array:h},address:-1431655766}}}}}},slot:1});Object.assign(z,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:24});Object.assign(w,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:23});Object.assign(R,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:w}],methods:[],template:null},slot:22});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:25});const nt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(W,{...t,type:9,name:"blendmode-color.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:nt}}},slot:26});Object.assign(q,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:27});Object.assign(F,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:F}],methods:[],template:null},slot:41});Object.assign(X,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:F}],methods:[],template:null},slot:38});const it=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ot=new Uint8Array([]),ut=new Uint8Array([136,252,15,0]),lt=new Uint8Array([4,0,0,0]);Object.assign(S,{...t,type:2,name:"blendmode-color.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:R},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:W},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:q}],methods:[],template:{memory:{array:it}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:z},{...e,type:7,isRequired:!1,name:"FPixel",structure:X},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:ot},slots:{0:{structure:c,memory:{array:ut},slots:{0:{structure:m,memory:{array:lt}}}}}}},slot:21});const mt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ct=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),yt=new Uint8Array([0,0,0,0,0,0,0,0]),_=new Uint8Array([]),bt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),pt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(j,{...t,type:2,name:"blendmode-color.KernelInput(u8,blendmode-color.kernel)",length:1,byteSize:48,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src1",structure:S},{...e,type:6,isRequired:!1,bitOffset:192,bitSize:192,byteSize:24,slot:1,name:"src2",structure:S}],methods:[],template:{memory:{array:mt},slots:{0:{structure:S,memory:{array:ct},slots:{0:{structure:R,memory:{array:yt},slots:{0:{structure:w,memory:{array:_}}}}}},1:{structure:S,memory:{array:bt},slots:{0:{structure:R,memory:{array:pt},slots:{0:{structure:w,memory:{array:_}}}}}}}}},slot:20});Object.assign(Y,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:23});Object.assign(Z,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Y}],methods:[],template:null},slot:30});const ft=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),dt=new Uint8Array([]),St=new Uint8Array([72,253,15,0]),ht=new Uint8Array([4,0,0,0]);Object.assign(M,{...t,type:2,name:"blendmode-color.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Z},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:W},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:q}],methods:[],template:{memory:{array:ft}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:z},{...e,type:7,isRequired:!1,name:"FPixel",structure:X},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:dt},slots:{0:{structure:c,memory:{array:St},slots:{0:{structure:m,memory:{array:ht}}}}}}},slot:29});const gt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),zt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ot=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(A,{...t,type:2,name:"blendmode-color.KernelOutput(u8,blendmode-color.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:M}],methods:[],template:{memory:{array:gt},slots:{0:{structure:M,memory:{array:zt},slots:{0:{structure:Z,memory:{array:Ot},slots:{0:{structure:Y,memory:{array:_}}}}}}}}},slot:28});const wt=new Uint8Array([]);Object.assign(U,{...t,type:2,name:"blendmode-color.KernelParameters(blendmode-color.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:wt}}},slot:31});Object.assign(re,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(blendmode-color.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:39});Object.assign(ae,{...t,type:7,name:"ErrorSet0000!blendmode-color.KernelOutput(u8,blendmode-color.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:A},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:re}],methods:[],template:null},slot:34});Object.assign(ne,{...t,type:3,name:"createOutput",length:1,byteSize:84,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:64,bitSize:384,byteSize:48,slot:2,name:"2",structure:j},{...e,type:6,bitOffset:672,bitSize:0,byteSize:0,slot:3,name:"3",structure:U},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ae}],methods:[],template:null},slot:32});Object.assign(ie,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(blendmode-color.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:40});Object.assign(oe,{...t,type:7,name:"ErrorSet0001!blendmode-color.KernelOutput(u8,blendmode-color.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:A},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ie}],methods:[],template:null},slot:35});Object.assign(ue,{...t,type:3,name:"createPartialOutput",length:1,byteSize:92,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:128,bitSize:384,byteSize:48,slot:4,name:"4",structure:j},{...e,type:6,bitOffset:736,bitSize:0,byteSize:0,slot:5,name:"5",structure:U},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:6,name:"retval",structure:oe}],methods:[],template:null},slot:33});const Rt={argStruct:ne,thunk:5,name:"createOutput"},qt={argStruct:ue,thunk:9,name:"createPartialOutput"};Object.assign(le,{...t,type:2,name:"blendmode-color",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:_}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:se},{...e,type:7,isRequired:!1,name:"Input",structure:j},{...e,type:7,isRequired:!1,name:"Output",structure:A},{...e,type:7,isRequired:!1,name:"Parameters",structure:U}],methods:[Rt,qt],template:null},slot:0});const jt=[p,T,$,C,B,L,v,m,c,G,H,E,J,x,g,b,N,K,Q,D,se,z,w,R,u,W,q,F,X,S,j,Y,Z,M,A,U,re,ae,ne,ie,oe,ue,le],At=Ce(jt),Ut=le.constructor,Pt=(async()=>{const n=new URL("blendmode-color-c8700afd.wasm",import.meta.url).href;return fetch(n)})();ve(Pt,{...At,writeBack:!0});const{createOutput:Kt,createPartialOutput:kt,kernel:te,Input:It,Output:Dt,Parameters:Ft}=Ut;function Vt(n,o,r,s,a={},f={}){if(Array.isArray(a)){const y=a;a={};for(const[l,d]of Object.keys(te.inputImages).entries())a[d]=y[l]}const P=new It(void 0),k=Object.keys(te.inputImages),i=[];let O;for(const y of k){let l=a[y];if(l||(k.length===1&&["data","width","height"].every(d=>!!a[d])?l=a:i.push(y)),P[y]=l,O){if(l.colorSpace!==O)throw new Error(`Input images must all use the same color space: ${O}`)}else O=l.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const ee=kt(n,o,r,s,P,f),me=y=>{const l=Object.keys(y),d={};for(const ce of l){const{data:{typedArray:I},width:ye,height:pe}=y[ce];let V;if(typeof ImageData=="function"){const fe=new Uint8ClampedArray(I.buffer,I.byteOffset,I.byteLength);V=new ImageData(fe,ye,s,{colorSpace:O})}else V={data:I,width:ye,height:pe};if(l.length===1)return V;d[ce]=V}return d};return ee[Symbol.toStringTag]==="Promise"?ee.then(me):me(ee)}function Ct(){const n={};for(let[o,r]of Object.entries(te)){if(o==="parameters"){const s={};for(const[a,f]of Object.entries(r)){const P=s[a]={};for(let[k,i]of Object.entries(f))typeof i=="object"?"string"in i?i=i.string:i=be(i):typeof i=="function"&&(i=vt(i.name)),P[k]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[o]=r}return n}function be(n){const o=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=be(s)),o[r]=s;return o}function vt(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,r,...s]=n.data;Et(o,s).then(([a,f])=>{postMessage([o,r,a],{transfer:f})}).catch(a=>{postMessage(["error",r,a])})};async function Et(n,o){switch(n){case"getKernelInfo":return[Ct(...o)];case"createPartialImageData":const s=await Vt(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const f of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
