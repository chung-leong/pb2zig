import{u as qe,a as we,b as je,d as Ae,c as Ue,e as Pe,f as Ve,g as Ie,h as _e,i as ke,j as xe,k as ve,l as Ce,m as Ee,n as Ke,o as Fe,p as De,q as Te,r as Me}from"./index-778418ea.js";qe();we();je();Ae();Ue();Pe();Ve();Ie();_e();ke();xe();ve();Ce();Ee();Ke();Fe();De();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},h={},H={},J={},E={},N={},Q={},K={},u={},b={},W={},X={},F={},O={},f={},y={},Y={},D={},Z={},T={},M={},R={},p={},ee={},$={},te={},B={},me={},q={},j={},A={},m={},se={},U={},P={},re={},z={},V={},ae={},ne={},L={},I={},_={},ue={},le={},ce={},ye={},pe={},be={},fe={};Object.assign(h,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:5});Object.assign(H,{...t,type:1,name:"[3:0]u8",length:3,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:4});Object.assign(J,{...t,type:11,name:"*const [3:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:3});Object.assign(E,{...t,type:11,name:"**const [3:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:2});Object.assign(N,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:8});Object.assign(Q,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:7});Object.assign(K,{...t,type:11,name:"**const [13:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:6});Object.assign(u,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:10});Object.assign(b,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:9});Object.assign(W,{...t,type:1,name:"[28:0]u8",length:28,byteSize:29,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:13});Object.assign(X,{...t,type:11,name:"*const [28:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:12});Object.assign(F,{...t,type:11,name:"**const [28:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:11});Object.assign(O,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:33});Object.assign(f,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:f}],methods:[],template:null},slot:46});Object.assign(y,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:f}],methods:[],template:null},slot:45});const $e=new Uint8Array([]),Be=new Uint8Array([56,30,16,0]),ge=new Uint8Array([0,0,0,0,0,0,0,0]),Le=new Uint8Array([64,30,16,0]),Ge=new Uint8Array([0,0,0,0,0,0,240,63]),He=new Uint8Array([56,30,16,0]);Object.assign(Y,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:O},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:y},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:y},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:y}],methods:[],template:{memory:{array:$e},slots:{0:{structure:y,memory:{array:Be},slots:{0:{structure:f,memory:{array:ge},address:1056312}}},1:{structure:y,memory:{array:Le},slots:{0:{structure:f,memory:{array:Ge},address:1056320}}},2:{structure:y,memory:{array:He},slots:{0:{structure:f,memory:{array:ge},address:1056312}}}}}},slot:39});Object.assign(D,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:38});const Je=new Uint8Array([]),Ne=new Uint8Array([170,170,170,170]),d=new Uint8Array([]);Object.assign(Z,{...t,type:2,name:"struct{comptime intensity: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"intensity",structure:D}],methods:[],template:{memory:{array:Je},slots:{0:{structure:D,memory:{array:Ne},slots:{0:{structure:Y,memory:{array:d},address:-1431655766}}}}}},slot:15});Object.assign(T,{...t,type:11,name:"*struct{comptime intensity: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:14});Object.assign(M,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:47});const Qe=new Uint8Array([]),We=new Uint8Array([48,30,16,0]),Xe=new Uint8Array([4,0,0,0]);Object.assign(R,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:M}],methods:[],template:{memory:{array:Qe},slots:{0:{structure:M,memory:{array:We},slots:{0:{structure:u,memory:{array:Xe},address:1056304}}}}}},slot:41});Object.assign(p,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:40});const Ye=new Uint8Array([]),Ze=new Uint8Array([170,170,170,170]),et=new Uint8Array([170,170,170,170]);Object.assign(ee,{...t,type:2,name:"struct{comptime frontImage: struct{comptime channels: comptime_int = 4} = .{.channels = 4}, comptime backImage: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"frontImage",structure:p},{...e,type:8,isRequired:!1,slot:1,name:"backImage",structure:p}],methods:[],template:{memory:{array:Ye},slots:{0:{structure:p,memory:{array:Ze},slots:{0:{structure:R,memory:{array:d},address:-1431655766}}},1:{structure:p,memory:{array:et},slots:{0:{structure:R,memory:{array:d},address:-1431655766}}}}}},slot:17});Object.assign($,{...t,type:11,name:"*struct{comptime frontImage: struct{comptime channels: comptime_int = 4} = .{.channels = 4}, comptime backImage: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:16});const tt=new Uint8Array([]),st=new Uint8Array([170,170,170,170]);Object.assign(te,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:p}],methods:[],template:{memory:{array:tt},slots:{0:{structure:p,memory:{array:st},slots:{0:{structure:R,memory:{array:d},address:-1431655766}}}}}},slot:19});Object.assign(B,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:18});const rt=new Uint8Array([]),at=new Uint8Array([]),nt=new Uint8Array([44,250,15,0]),it=new Uint8Array([133,41,16,0]),ot=new Uint8Array([65,73,70,0]),mt=new Uint8Array([108,250,15,0]),ut=new Uint8Array([119,41,16,0]),lt=new Uint8Array([65,100,111,98,101,32,83,121,115,116,101,109,115,0]),ct=new Uint8Array([172,250,15,0]),yt=new Uint8Array([2,0,0,0]),pt=new Uint8Array([4,251,15,0]),bt=new Uint8Array([90,41,16,0]),ft=new Uint8Array([67,114,111,115,115,102,97,100,101,32,98,101,116,119,101,101,110,32,116,119,111,32,105,109,97,103,101,115,0]),dt=new Uint8Array([170,170,170,170]),ht=new Uint8Array([170,170,170,170]),St=new Uint8Array([170,170,170,170]);Object.assign(me,{...t,type:2,name:"crossfade.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:rt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:E},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:K},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:b},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:F},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:T},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:$},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:B}],methods:[],template:{memory:{array:at},slots:{0:{structure:E,memory:{array:nt},slots:{0:{structure:J,memory:{array:it},slots:{0:{structure:H,memory:{array:ot},address:1059205}}}}},1:{structure:K,memory:{array:mt},slots:{0:{structure:Q,memory:{array:ut},slots:{0:{structure:N,memory:{array:lt},address:1059191}}}}},2:{structure:b,memory:{array:ct},slots:{0:{structure:u,memory:{array:yt}}}},3:{structure:F,memory:{array:pt},slots:{0:{structure:X,memory:{array:bt},slots:{0:{structure:W,memory:{array:ft},address:1059162}}}}},4:{structure:T,memory:{array:dt},slots:{0:{structure:Z,memory:{array:d},address:-1431655766}}},5:{structure:$,memory:{array:ht},slots:{0:{structure:ee,memory:{array:d},address:-1431655766}}},6:{structure:B,memory:{array:St},slots:{0:{structure:te,memory:{array:d},address:-1431655766}}}}}},slot:1});Object.assign(q,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:24});Object.assign(j,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:23});Object.assign(A,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:j}],methods:[],template:null},slot:22});Object.assign(m,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:25});const gt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(se,{...t,type:9,name:"crossfade.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:u},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:u}],methods:[],template:{memory:{array:gt}}},slot:26});Object.assign(U,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:U}],methods:[],template:null},slot:27});Object.assign(P,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:P}],methods:[],template:null},slot:28});Object.assign(re,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:42});const zt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ot=new Uint8Array([]),Rt=new Uint8Array([168,252,15,0]),qt=new Uint8Array([4,0,0,0]);Object.assign(z,{...t,type:2,name:"crossfade.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:A},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:se},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:U},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:P}],methods:[],template:{memory:{array:zt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:q},{...e,type:7,isRequired:!1,name:"FPixel",structure:re},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:Ot},slots:{0:{structure:b,memory:{array:Rt},slots:{0:{structure:u,memory:{array:qt}}}}}}},slot:21});const wt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),jt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),At=new Uint8Array([0,0,0,0,0,0,0,0]),G=new Uint8Array([]),Ut=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Pt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(V,{...t,type:2,name:"crossfade.KernelInput(u8,crossfade.kernel)",length:1,byteSize:48,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"frontImage",structure:z},{...e,type:6,isRequired:!1,bitOffset:192,bitSize:192,byteSize:24,slot:1,name:"backImage",structure:z}],methods:[],template:{memory:{array:wt},slots:{0:{structure:z,memory:{array:jt},slots:{0:{structure:A,memory:{array:At},slots:{0:{structure:j,memory:{array:G}}}}}},1:{structure:z,memory:{array:Ut},slots:{0:{structure:A,memory:{array:Pt},slots:{0:{structure:j,memory:{array:G}}}}}}}}},slot:20});Object.assign(ae,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:23});Object.assign(ne,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ae}],methods:[],template:null},slot:31});const Vt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),It=new Uint8Array([]),_t=new Uint8Array([104,253,15,0]),kt=new Uint8Array([4,0,0,0]);Object.assign(L,{...t,type:2,name:"crossfade.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ne},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:se},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:U},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:P}],methods:[],template:{memory:{array:Vt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:q},{...e,type:7,isRequired:!1,name:"FPixel",structure:re},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:It},slots:{0:{structure:b,memory:{array:_t},slots:{0:{structure:u,memory:{array:kt}}}}}}},slot:30});const xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),vt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ct=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(I,{...t,type:2,name:"crossfade.KernelOutput(u8,crossfade.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:L}],methods:[],template:{memory:{array:xt},slots:{0:{structure:L,memory:{array:vt},slots:{0:{structure:ne,memory:{array:Ct},slots:{0:{structure:ae,memory:{array:G}}}}}}}}},slot:29});const Et=new Uint8Array([0,0,0,0]);Object.assign(_,{...t,type:2,name:"crossfade.KernelParameters(crossfade.kernel)",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"intensity",structure:O}],methods:[],template:{memory:{array:Et}}},slot:32});Object.assign(ue,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(crossfade.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:43});Object.assign(le,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(crossfade.createOutput)).Fn.return_type.?).ErrorUnion.error_set!crossfade.KernelOutput(u8,crossfade.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:I},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ue}],methods:[],template:null},slot:36});Object.assign(ce,{...t,type:3,name:"createOutput",length:1,byteSize:88,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:6,bitOffset:64,bitSize:384,byteSize:48,slot:2,name:"2",structure:V},{...e,type:6,bitOffset:448,bitSize:32,byteSize:4,slot:3,name:"3",structure:_},{...e,type:6,bitOffset:480,bitSize:224,byteSize:28,slot:4,name:"retval",structure:le}],methods:[],template:null},slot:34});Object.assign(ye,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(crossfade.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:44});Object.assign(pe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(crossfade.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!crossfade.KernelOutput(u8,crossfade.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:I},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ye}],methods:[],template:null},slot:37});Object.assign(be,{...t,type:3,name:"createPartialOutput",length:1,byteSize:96,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:m},{...e,type:6,bitOffset:128,bitSize:384,byteSize:48,slot:4,name:"4",structure:V},{...e,type:6,bitOffset:512,bitSize:32,byteSize:4,slot:5,name:"5",structure:_},{...e,type:6,bitOffset:544,bitSize:224,byteSize:28,slot:6,name:"retval",structure:pe}],methods:[],template:null},slot:35});const Kt={argStruct:ce,thunk:8,name:"createOutput"},Ft={argStruct:be,thunk:2,name:"createPartialOutput"};Object.assign(fe,{...t,type:2,name:"crossfade",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:G}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:me},{...e,type:7,isRequired:!1,name:"Input",structure:V},{...e,type:7,isRequired:!1,name:"Output",structure:I},{...e,type:7,isRequired:!1,name:"Parameters",structure:_}],methods:[Kt,Ft],template:null},slot:0});const Dt=[h,H,J,E,N,Q,K,u,b,W,X,F,O,f,y,Y,D,Z,T,M,R,p,ee,$,te,B,me,q,j,A,m,se,U,P,re,z,V,ae,ne,L,I,_,ue,le,ce,ye,pe,be,fe],Tt=Te(Dt),Mt=fe.constructor,$t=(async()=>{const n=new URL("crossfade-51778458.wasm",import.meta.url).href;return fetch(n)})();Me($t,{...Tt,writeBack:!0});const{createOutput:Wt,createPartialOutput:Bt,kernel:oe,Input:Lt,Output:Xt,Parameters:Yt}=Mt;function Gt(n,o,r,s,a={},S={}){if(Array.isArray(a)){const c=a;a={};for(const[l,g]of Object.keys(oe.inputImages).entries())a[g]=c[l]}const k=new Lt(void 0),x=Object.keys(oe.inputImages),i=[];let w;for(const c of x){let l=a[c];if(l||(x.length===1&&["data","width","height"].every(g=>!!a[g])?l=a:i.push(c)),k[c]=l,w){if(l.colorSpace!==w)throw new Error(`Input images must all use the same color space: ${w}`)}else w=l.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const ie=Bt(n,o,r,s,k,S),de=c=>{const l=Object.keys(c),g={};for(const he of l){const{data:{typedArray:v},width:Se,height:Oe}=c[he];let C;if(typeof ImageData=="function"){const Re=new Uint8ClampedArray(v.buffer,v.byteOffset,v.byteLength);C=new ImageData(Re,Se,s,{colorSpace:w})}else C={data:v,width:Se,height:Oe};if(l.length===1)return C;g[he]=C}return g};return ie[Symbol.toStringTag]==="Promise"?ie.then(de):de(ie)}function Ht(){const n={};for(let[o,r]of Object.entries(oe)){if(o==="parameters"){const s={};for(const[a,S]of Object.entries(r)){const k=s[a]={};for(let[x,i]of Object.entries(S))typeof i=="object"?"string"in i?i=i.string:i=ze(i):typeof i=="function"&&(i=Jt(i.name)),k[x]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[o]=r}return n}function ze(n){const o=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=ze(s)),o[r]=s;return o}function Jt(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,r,...s]=n.data;Nt(o,s).then(([a,S])=>{postMessage([o,r,a],{transfer:S})}).catch(a=>{postMessage(["error",r,a])})};async function Nt(n,o){switch(n){case"getKernelInfo":return[Ht(...o)];case"createPartialImageData":const s=await Gt(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const S of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
