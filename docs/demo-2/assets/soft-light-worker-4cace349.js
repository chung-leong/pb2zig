import{u as ye,a as ce,b as be,c as fe,d as pe,e as he,f as ge,g as Se,h as de,i as ze,j as Oe,k as we,l as Ae,m as Re,n as qe,o as Ue,p as je,q as Pe}from"./index-076239a4.js";ye();ce();be();fe();pe();he();ge();Se();de();ze();Oe();we();Ae();Re();qe();Ue();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},S={},w={},A={},h={},m={},y={},_={},T={},E={},$={},x={},d={},b={},B={},K={},L={},D={},X={},z={},R={},q={},u={},G={},U={},F={},H={},g={},j={},J={},N={},M={},P={},k={},Y={},Z={},ee={},te={},se={},re={},ae={};Object.assign(S,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:5});Object.assign(w,{...t,type:1,name:"[5:0]u8",length:5,byteSize:6,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:4});Object.assign(A,{...t,type:11,name:"*const [5:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:w}],methods:[],template:null},slot:3});Object.assign(h,{...t,type:11,name:"*const *const [5:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:2});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:7});Object.assign(y,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:6});Object.assign(_,{...t,type:1,name:"[20:0]u8",length:20,byteSize:21,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:10});Object.assign(T,{...t,type:11,name:"*const [20:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_}],methods:[],template:null},slot:9});Object.assign(E,{...t,type:11,name:"*const *const [20:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[],template:null},slot:8});const ke=new Uint8Array;Object.assign($,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ke}}},slot:12});Object.assign(x,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:11});const Ie=new Uint8Array,Ve=new Uint8Array([208,251,15,0]),ve=new Uint8Array([4,0,0,0]);Object.assign(d,{...t,type:2,name:"Struct0007",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:y}],methods:[],template:{memory:{array:Ie},slots:{0:{structure:y,memory:{array:Ve},slots:{0:{structure:m,memory:{array:ve}}}}}}},slot:34});Object.assign(b,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:d}],methods:[],template:null},slot:33});const Ce=new Uint8Array,Ee=new Uint8Array([170,170,170,170]),xe=new Uint8Array,Ke=new Uint8Array([170,170,170,170]),De=new Uint8Array;Object.assign(B,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"src",structure:b}],methods:[],template:{memory:{array:Ce},slots:{0:{structure:b,memory:{array:Ee},slots:{0:{structure:d,memory:{array:xe}}}},1:{structure:b,memory:{array:Ke},slots:{0:{structure:d,memory:{array:De}}}}}}},slot:14});Object.assign(K,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:13});const Fe=new Uint8Array,Me=new Uint8Array([170,170,170,170]),_e=new Uint8Array;Object.assign(L,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"result",structure:b}],methods:[],template:{memory:{array:Fe},slots:{0:{structure:b,memory:{array:Me},slots:{0:{structure:d,memory:{array:_e}}}}}}},slot:16});Object.assign(D,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:15});const Te=new Uint8Array,$e=new Uint8Array,Be=new Uint8Array([60,35,16,0]),Le=new Uint8Array([243,34,16,0]),Ge=new Uint8Array([70,108,97,109,101,0]),He=new Uint8Array([56,35,16,0]),Je=new Uint8Array([226,34,16,0]),Ne=new Uint8Array([65,100,111,98,101,0]),Qe=new Uint8Array([52,35,16,0]),We=new Uint8Array([1,0,0,0]),Xe=new Uint8Array([48,35,16,0]),Ye=new Uint8Array([188,34,16,0]),Ze=new Uint8Array([83,111,102,116,76,105,103,104,116,32,98,108,101,110,100,32,109,111,100,101,0]),et=new Uint8Array([170,170,170,170]),tt=new Uint8Array,st=new Uint8Array([170,170,170,170]),rt=new Uint8Array,at=new Uint8Array([170,170,170,170]),nt=new Uint8Array;Object.assign(X,{...t,type:2,name:"soft-light.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Te}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:h},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:h},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:y},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:E},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:x},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:K},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:D}],methods:[],template:{memory:{array:$e},slots:{0:{structure:h,memory:{array:Be},slots:{0:{structure:A,memory:{array:Le},slots:{0:{structure:w,memory:{array:Ge}}}}}},1:{structure:h,memory:{array:He},slots:{0:{structure:A,memory:{array:Je},slots:{0:{structure:w,memory:{array:Ne}}}}}},2:{structure:y,memory:{array:Qe},slots:{0:{structure:m,memory:{array:We}}}},3:{structure:E,memory:{array:Xe},slots:{0:{structure:T,memory:{array:Ye},slots:{0:{structure:_,memory:{array:Ze}}}}}},4:{structure:x,memory:{array:et},slots:{0:{structure:$,memory:{array:tt}}}},5:{structure:K,memory:{array:st},slots:{0:{structure:B,memory:{array:rt}}}},6:{structure:D,memory:{array:at},slots:{0:{structure:L,memory:{array:nt}}}}}}},slot:1});Object.assign(z,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:21});Object.assign(R,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:20});Object.assign(q,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:R}],methods:[],template:null},slot:19});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:22});const it=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(G,{...t,type:9,name:"soft-light.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:it}}},slot:23});Object.assign(U,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:U}],methods:[],template:null},slot:24});Object.assign(F,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:F}],methods:[],template:null},slot:38});Object.assign(H,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:F}],methods:[],template:null},slot:35});const ot=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ut=new Uint8Array,lt=new Uint8Array([132,34,16,0]),mt=new Uint8Array([4,0,0,0]);Object.assign(g,{...t,type:2,name:"soft-light.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:q},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:G},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:U}],methods:[],template:{memory:{array:ot}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:z},{...e,type:7,isRequired:!1,name:"FPixel",structure:H},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:y}],methods:[],template:{memory:{array:ut},slots:{0:{structure:y,memory:{array:lt},slots:{0:{structure:m,memory:{array:mt}}}}}}},slot:18});const yt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ct=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),bt=new Uint8Array([0,0,0,0,0,0,0,0]),ft=new Uint8Array,pt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ht=new Uint8Array([0,0,0,0,0,0,0,0]),gt=new Uint8Array;Object.assign(j,{...t,type:2,name:"soft-light.KernelInput(u8,soft-light.kernel)",length:1,byteSize:48,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:g},{...e,type:6,isRequired:!1,bitOffset:192,bitSize:192,byteSize:24,slot:1,name:"src",structure:g}],methods:[],template:{memory:{array:yt},slots:{0:{structure:g,memory:{array:ct},slots:{0:{structure:q,memory:{array:bt},address:1047472,slots:{0:{structure:R,memory:{array:ft},address:0}}}}},1:{structure:g,memory:{array:pt},slots:{0:{structure:q,memory:{array:ht},address:1047496,slots:{0:{structure:R,memory:{array:gt},address:0}}}}}}}},slot:17});Object.assign(J,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:20});Object.assign(N,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:J}],methods:[],template:null},slot:27});const St=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),dt=new Uint8Array,zt=new Uint8Array([132,34,16,0]),Ot=new Uint8Array([4,0,0,0]);Object.assign(M,{...t,type:2,name:"soft-light.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:N},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:G},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:U}],methods:[],template:{memory:{array:St}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:z},{...e,type:7,isRequired:!1,name:"FPixel",structure:H},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:y}],methods:[],template:{memory:{array:dt},slots:{0:{structure:y,memory:{array:zt},slots:{0:{structure:m,memory:{array:Ot}}}}}}},slot:26});const wt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),At=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Rt=new Uint8Array([0,0,0,0,0,0,0,0]),qt=new Uint8Array;Object.assign(P,{...t,type:2,name:"soft-light.KernelOutput(u8,soft-light.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"result",structure:M}],methods:[],template:{memory:{array:wt},slots:{0:{structure:M,memory:{array:At},slots:{0:{structure:N,memory:{array:Rt},address:1047104,slots:{0:{structure:J,memory:{array:qt},address:0}}}}}}}},slot:25});const Ut=new Uint8Array;Object.assign(k,{...t,type:2,name:"soft-light.KernelParameters(soft-light.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ut}}},slot:28});Object.assign(Y,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(soft-light.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:36});Object.assign(Z,{...t,type:7,name:"ErrorSet0000!soft-light.KernelOutput(u8,soft-light.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Y}],methods:[],template:null},slot:31});Object.assign(ee,{...t,type:3,name:"createOutput",length:1,byteSize:84,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:64,bitSize:384,byteSize:48,slot:2,name:"2",structure:j},{...e,type:6,bitOffset:672,bitSize:0,byteSize:0,slot:3,name:"3",structure:k},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Z}],methods:[],template:null},slot:29});Object.assign(te,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(soft-light.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:37});Object.assign(se,{...t,type:7,name:"ErrorSet0001!soft-light.KernelOutput(u8,soft-light.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:te}],methods:[],template:null},slot:32});Object.assign(re,{...t,type:3,name:"createPartialOutput",length:1,byteSize:92,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:128,bitSize:384,byteSize:48,slot:4,name:"4",structure:j},{...e,type:6,bitOffset:736,bitSize:0,byteSize:0,slot:5,name:"5",structure:k},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:6,name:"retval",structure:se}],methods:[],template:null},slot:30});const jt=new Uint8Array,Pt={argStruct:ee,thunk:5,name:"createOutput"},kt={argStruct:re,thunk:1,name:"createPartialOutput"};Object.assign(ae,{...t,type:2,name:"soft-light",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:jt}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:X},{...e,type:7,isRequired:!1,name:"Input",structure:j},{...e,type:7,isRequired:!1,name:"Output",structure:P},{...e,type:7,isRequired:!1,name:"Parameters",structure:k}],methods:[Pt,kt],template:null},slot:0});const It=[S,w,A,h,m,y,_,T,E,$,x,d,b,B,K,L,D,X,z,R,q,u,G,U,F,H,g,j,J,N,M,P,k,Y,Z,ee,te,se,re,ae],Vt=je(It),vt=ae.constructor,Ct=(async()=>{const n=new URL("soft-light-8db8ace5.wasm",import.meta.url).href;return fetch(n)})();Pe(Ct,{...Vt,writeBack:!0});const{createOutput:Tt,createPartialOutput:Et,kernel:W,Input:xt,Output:$t,Parameters:Bt}=vt;function Kt(n,o,r,s,a={},f={}){if(Array.isArray(a)){const c=a;a={};for(const[l,p]of Object.keys(W.inputImages).entries())a[p]=c[l]}const I=new xt(void 0),V=Object.keys(W.inputImages),i=[];let O;for(const c of V){let l=a[c];if(l||(V.length===1&&["data","width","height"].every(p=>!!a[p])?l=a:i.push(c)),I[c]=l,O){if(l.colorSpace!==O)throw new Error(`Input images must all use the same color space: ${O}`)}else O=l.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const Q=Et(n,o,r,s,I,f),ne=c=>{const l=Object.keys(c),p={};for(const ie of l){const{data:{typedArray:v},width:oe,height:le}=c[ie];let C;if(typeof ImageData=="function"){const me=new Uint8ClampedArray(v.buffer,v.byteOffset,v.byteLength);C=new ImageData(me,oe,s,{colorSpace:O})}else C={data:v,width:oe,height:le};if(l.length===1)return C;p[ie]=C}return p};return Q[Symbol.toStringTag]==="Promise"?Q.then(ne):ne(Q)}function Dt(){const n={};for(let[o,r]of Object.entries(W)){if(o==="parameters"){const s={};for(const[a,f]of Object.entries(r)){const I=s[a]={};for(let[V,i]of Object.entries(f))typeof i=="object"?"string"in i?i=i.string:i=ue(i):typeof i=="function"&&(i=Ft(i.name)),I[V]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[o]=r}return n}function ue(n){const o=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=ue(s)),o[r]=s;return o}function Ft(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,r,...s]=n.data;Mt(o,s).then(([a,f])=>{postMessage([o,r,a],{transfer:f})}).catch(a=>{postMessage(["error",r,a])})};async function Mt(n,o){switch(n){case"getKernelInfo":return[Dt(...o)];case"createPartialImageData":const s=await Kt(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const f of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
