import{u as Ot,a as Rt,b as _t,d as qt,c as At,e as Ut,f as jt,g as xt,h as Pt,i as Ct,j as Tt,k as vt,l as It,n as kt,m as Et,o as Bt,p as Kt,q as Ft,r as Dt}from"./index-778418ea.js";Ot();Rt();_t();qt();At();Ut();jt();xt();Pt();Ct();Tt();vt();It();kt();Et();Bt();Kt();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},p={},he={},ge={},G={},Se={},ze={},M={},a={},S={},we={},Ve={},$={},c={},Oe={},Re={},L={},_e={},H={},f={},z={},J={},r={},s={},qe={},N={},Ae={},Q={},Ue={},je={},W={},xe={},X={},Pe={},Y={},x={},O={},Ce={},Te={},Z={},ve={},ee={},Ie={},ke={},te={},Ee={},se={},Be={},Ke={},re={},Fe={},ae={},De={},Ge={},ie={},Me={},me={},$e={},Le={},oe={},He={},ne={},Je={},Ne={},ce={},Qe={},ue={},We={},le={},q={},g={},Xe={},pe={},Ye={},ye={},it={},A={},P={},C={},d={},Ze={},T={},v={},et={},R={},I={},tt={},st={},fe={},k={},E={},mt={},ot={},nt={},ct={},ut={},lt={},pt={};Object.assign(p,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:5});Object.assign(he,{...t,type:1,name:"[10:0]u8",length:10,byteSize:11,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:4});Object.assign(ge,{...t,type:11,name:"*const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:he}],methods:[],template:null},slot:3});Object.assign(G,{...t,type:11,name:"**const [10:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ge}],methods:[],template:null},slot:2});Object.assign(Se,{...t,type:1,name:"[12:0]u8",length:12,byteSize:13,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:8});Object.assign(ze,{...t,type:11,name:"*const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Se}],methods:[],template:null},slot:7});Object.assign(M,{...t,type:11,name:"**const [12:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ze}],methods:[],template:null},slot:6});Object.assign(a,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:a}],methods:[],template:null},slot:10});Object.assign(S,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:a}],methods:[],template:null},slot:9});Object.assign(we,{...t,type:1,name:"[56:0]u8",length:56,byteSize:57,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:13});Object.assign(Ve,{...t,type:11,name:"*const [56:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:we}],methods:[],template:null},slot:12});Object.assign($,{...t,type:11,name:"**const [56:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ve}],methods:[],template:null},slot:11});Object.assign(c,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:a}],methods:[],template:null},slot:60});Object.assign(Oe,{...t,type:1,name:"[65:0]u8",length:65,byteSize:66,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:63});Object.assign(Re,{...t,type:11,name:"*const [65:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Oe}],methods:[],template:null},slot:62});Object.assign(L,{...t,type:11,name:"*const *const [65:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Re}],methods:[],template:null},slot:61});const Gt=new Uint8Array([]),Mt=new Uint8Array([168,30,16,0]),gt=new Uint8Array([0,0,0,0]),$t=new Uint8Array([164,30,16,0]),de=new Uint8Array([1,0,0,0]),Lt=new Uint8Array([164,30,16,0]),Ht=new Uint8Array([208,30,16,0]),Jt=new Uint8Array([112,32,16,0]),Nt=new Uint8Array([79,110,108,121,32,119,104,105,108,101,32,111,110,32,105,115,32,49,44,32,116,104,101,32,115,104,97,100,101,114,32,119,105,108,108,32,98,101,32,97,112,112,108,105,101,100,32,116,111,32,116,104,101,32,105,110,112,117,116,32,105,109,97,103,101,0]);Object.assign(_e,{...t,type:2,name:'struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 1, comptime description: *const [65:0]u8 = "Only while on is 1, the shader will be applied to the input image"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:c},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:c},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:c},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:L}],methods:[],template:{memory:{array:Gt},slots:{0:{structure:c,memory:{array:Mt},slots:{0:{structure:a,memory:{array:gt},address:1056424}}},1:{structure:c,memory:{array:$t},slots:{0:{structure:a,memory:{array:de},address:1056420}}},2:{structure:c,memory:{array:Lt},slots:{0:{structure:a,memory:{array:de},address:1056420}}},3:{structure:L,memory:{array:Ht},slots:{0:{structure:Re,memory:{array:Jt},address:1056464,slots:{0:{structure:Oe,memory:{array:Nt},address:1056880}}}}}}}},slot:40});Object.assign(H,{...t,type:11,name:'*const struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 1, comptime description: *const [65:0]u8 = "Only while on is 1, the shader will be applied to the input image"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_e}],methods:[],template:null},slot:39});Object.assign(f,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:34});Object.assign(z,{...t,type:13,name:"@Vector(3, f32)",length:3,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:33});Object.assign(J,{...t,type:11,name:"*const @Vector(3, f32)",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:z}],methods:[],template:null},slot:64});Object.assign(r,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:r}],methods:[],template:null},slot:80});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:r}],methods:[],template:null},slot:79});const Qt=new Uint8Array([]),Wt=new Uint8Array([88,30,16,0]),bt=new Uint8Array([0,0,0,0,0,0,164,64]),Xt=new Uint8Array([88,30,16,0]),Yt=new Uint8Array([80,30,16,0]),St=new Uint8Array([0,0,0,0,0,136,195,64]);Object.assign(qe,{...t,type:2,name:"struct{comptime comptime_float = 2560, comptime comptime_float = 2560, comptime comptime_float = 10000}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Qt},slots:{0:{structure:s,memory:{array:Wt},slots:{0:{structure:r,memory:{array:bt},address:1056344}}},1:{structure:s,memory:{array:Xt},slots:{0:{structure:r,memory:{array:bt},address:1056344}}},2:{structure:s,memory:{array:Yt},slots:{0:{structure:r,memory:{array:St},address:1056336}}}}}},slot:66});Object.assign(N,{...t,type:11,name:"*const struct{comptime comptime_float = 2560, comptime comptime_float = 2560, comptime comptime_float = 10000}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:qe}],methods:[],template:null},slot:65});const Zt=new Uint8Array([]),es=new Uint8Array([72,30,16,0]),ht=new Uint8Array([0,0,0,0,0,64,111,64]),ts=new Uint8Array([72,30,16,0]),ss=new Uint8Array([64,30,16,0]),rs=new Uint8Array([0,0,0,0,0,0,137,64]);Object.assign(Ae,{...t,type:2,name:"struct{comptime comptime_float = 250, comptime comptime_float = 250, comptime comptime_float = 800}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Zt},slots:{0:{structure:s,memory:{array:es},slots:{0:{structure:r,memory:{array:ht},address:1056328}}},1:{structure:s,memory:{array:ts},slots:{0:{structure:r,memory:{array:ht},address:1056328}}},2:{structure:s,memory:{array:ss},slots:{0:{structure:r,memory:{array:rs},address:1056320}}}}}},slot:68});Object.assign(Q,{...t,type:11,name:"*const struct{comptime comptime_float = 250, comptime comptime_float = 250, comptime comptime_float = 800}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ae}],methods:[],template:null},slot:67});Object.assign(Ue,{...t,type:1,name:"[103:0]u8",length:103,byteSize:104,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:71});Object.assign(je,{...t,type:11,name:"*const [103:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ue}],methods:[],template:null},slot:70});Object.assign(W,{...t,type:11,name:"*const *const [103:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:je}],methods:[],template:null},slot:69});const as=new Uint8Array([]),is=new Uint8Array([192,30,16,0]),ms=new Uint8Array([0,0,32,197,0,0,32,197,0,64,28,198,0,0,0,0]),os=new Uint8Array([170,170,170,170]),m=new Uint8Array([]),ns=new Uint8Array([170,170,170,170]),cs=new Uint8Array([188,30,16,0]),us=new Uint8Array([8,32,16,0]),ls=new Uint8Array([84,104,101,32,108,105,103,104,116,32,99,111,111,114,100,105,110,97,116,101,115,32,40,120,44,121,44,122,41,46,32,84,104,101,32,122,45,99,111,111,114,100,105,110,97,116,101,32,97,108,119,97,121,115,32,110,101,101,100,115,32,116,111,32,98,101,32,112,111,115,105,116,105,118,101,32,116,111,32,98,101,32,105,110,32,102,114,111,110,116,32,111,102,32,116,104,101,32,105,109,97,103,101,0]);Object.assign(xe,{...t,type:2,name:'struct{comptime type: type = @Vector(3, f32), comptime minValue: @Vector(3, f32) = .{ -2560, -2560, -10000 }, comptime maxValue: struct{comptime comptime_float = 2560, comptime comptime_float = 2560, comptime comptime_float = 10000} = .{2560, 2560, 10000}, comptime defaultValue: struct{comptime comptime_float = 250, comptime comptime_float = 250, comptime comptime_float = 800} = .{250, 250, 800}, comptime description: *const [103:0]u8 = "The light coordinates (x,y,z). The z-coordinate always needs to be positive to be in front of the image"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:z},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:J},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:N},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:Q},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:W}],methods:[],template:{memory:{array:as},slots:{0:{structure:J,memory:{array:is},slots:{0:{structure:z,memory:{array:ms},address:1056448}}},1:{structure:N,memory:{array:os},slots:{0:{structure:qe,memory:{array:m},address:-1431655766}}},2:{structure:Q,memory:{array:ns},slots:{0:{structure:Ae,memory:{array:m},address:-1431655766}}},3:{structure:W,memory:{array:cs},slots:{0:{structure:je,memory:{array:us},address:1056444,slots:{0:{structure:Ue,memory:{array:ls},address:1056776}}}}}}}},slot:42});Object.assign(X,{...t,type:11,name:'*const struct{comptime type: type = @Vector(3, f32), comptime minValue: @Vector(3, f32) = .{ -2560, -2560, -10000 }, comptime maxValue: struct{comptime comptime_float = 2560, comptime comptime_float = 2560, comptime comptime_float = 10000} = .{2560, 2560, 10000}, comptime defaultValue: struct{comptime comptime_float = 250, comptime comptime_float = 250, comptime comptime_float = 800} = .{250, 250, 800}, comptime description: *const [103:0]u8 = "The light coordinates (x,y,z). The z-coordinate always needs to be positive to be in front of the image"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:xe}],methods:[],template:null},slot:41});const ps=new Uint8Array([]),ys=new Uint8Array([56,30,16,0]),_=new Uint8Array([0,0,0,0,0,0,0,0]),fs=new Uint8Array([56,30,16,0]),ds=new Uint8Array([56,30,16,0]);Object.assign(Pe,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:ps},slots:{0:{structure:s,memory:{array:ys},slots:{0:{structure:r,memory:{array:_},address:1056312}}},1:{structure:s,memory:{array:fs},slots:{0:{structure:r,memory:{array:_},address:1056312}}},2:{structure:s,memory:{array:ds},slots:{0:{structure:r,memory:{array:_},address:1056312}}}}}},slot:73});Object.assign(Y,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Pe}],methods:[],template:null},slot:72});const bs=new Uint8Array([]),hs=new Uint8Array([48,30,16,0]),j=new Uint8Array([0,0,0,0,0,0,240,63]),gs=new Uint8Array([48,30,16,0]),Ss=new Uint8Array([48,30,16,0]);Object.assign(x,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:bs},slots:{0:{structure:s,memory:{array:hs},slots:{0:{structure:r,memory:{array:j},address:1056304}}},1:{structure:s,memory:{array:gs},slots:{0:{structure:r,memory:{array:j},address:1056304}}},2:{structure:s,memory:{array:Ss},slots:{0:{structure:r,memory:{array:j},address:1056304}}}}}},slot:75});Object.assign(O,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:x}],methods:[],template:null},slot:74});Object.assign(Ce,{...t,type:1,name:"[33:0]u8",length:33,byteSize:34,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:78});Object.assign(Te,{...t,type:11,name:"*const [33:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ce}],methods:[],template:null},slot:77});Object.assign(Z,{...t,type:11,name:"*const *const [33:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Te}],methods:[],template:null},slot:76});const zs=new Uint8Array([]),ws=new Uint8Array([170,170,170,170]),Vs=new Uint8Array([170,170,170,170]),Os=new Uint8Array([170,170,170,170]),Rs=new Uint8Array([184,30,16,0]),_s=new Uint8Array([230,31,16,0]),qs=new Uint8Array([67,111,108,111,114,32,111,102,32,116,104,101,32,108,105,103,104,116,32,115,111,117,114,99,101,32,91,82,44,71,44,66,93,0]);Object.assign(ve,{...t,type:2,name:'struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime description: *const [33:0]u8 = "Color of the light source [R,G,B]"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:z},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:Y},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:O},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:O},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Z}],methods:[],template:{memory:{array:zs},slots:{0:{structure:Y,memory:{array:ws},slots:{0:{structure:Pe,memory:{array:m},address:-1431655766}}},1:{structure:O,memory:{array:Vs},slots:{0:{structure:x,memory:{array:m},address:-1431655766}}},2:{structure:O,memory:{array:Os},slots:{0:{structure:x,memory:{array:m},address:-1431655766}}},3:{structure:Z,memory:{array:Rs},slots:{0:{structure:Te,memory:{array:_s},address:1056440,slots:{0:{structure:Ce,memory:{array:qs},address:1056742}}}}}}}},slot:44});Object.assign(ee,{...t,type:11,name:'*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime description: *const [33:0]u8 = "Color of the light source [R,G,B]"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ve}],methods:[],template:null},slot:43});Object.assign(Ie,{...t,type:1,name:"[62:0]u8",length:62,byteSize:63,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:83});Object.assign(ke,{...t,type:11,name:"*const [62:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ie}],methods:[],template:null},slot:82});Object.assign(te,{...t,type:11,name:"*const *const [62:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ke}],methods:[],template:null},slot:81});const As=new Uint8Array([]),Us=new Uint8Array([48,30,16,0]),js=new Uint8Array([176,30,16,0]),xs=new Uint8Array([0,0,0,0,0,0,36,64]),Ps=new Uint8Array([48,30,16,0]),Cs=new Uint8Array([172,30,16,0]),Ts=new Uint8Array([167,31,16,0]),vs=new Uint8Array([65,32,102,97,99,116,111,114,32,98,121,32,119,104,105,99,104,32,116,104,101,32,104,101,105,103,104,116,109,97,112,32,100,105,102,102,101,114,101,110,99,101,115,32,119,105,108,108,32,98,101,32,109,117,108,116,105,112,108,105,101,100,0]);Object.assign(Ee,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1, comptime description: *const [62:0]u8 = "A factor by which the heightmap differences will be multiplied"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:te}],methods:[],template:{memory:{array:As},slots:{0:{structure:s,memory:{array:Us},slots:{0:{structure:r,memory:{array:j},address:1056304}}},1:{structure:s,memory:{array:js},slots:{0:{structure:r,memory:{array:xs},address:1056432}}},2:{structure:s,memory:{array:Ps},slots:{0:{structure:r,memory:{array:j},address:1056304}}},3:{structure:te,memory:{array:Cs},slots:{0:{structure:ke,memory:{array:Ts},address:1056428,slots:{0:{structure:Ie,memory:{array:vs},address:1056679}}}}}}}},slot:46});Object.assign(se,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1, comptime description: *const [62:0]u8 = "A factor by which the heightmap differences will be multiplied"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ee}],methods:[],template:null},slot:45});Object.assign(Be,{...t,type:1,name:"[16:0]u8",length:16,byteSize:17,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:86});Object.assign(Ke,{...t,type:11,name:"*const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Be}],methods:[],template:null},slot:85});Object.assign(re,{...t,type:11,name:"*const *const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ke}],methods:[],template:null},slot:84});const Is=new Uint8Array([]),ks=new Uint8Array([168,30,16,0]),Es=new Uint8Array([164,30,16,0]),Bs=new Uint8Array([164,30,16,0]),Ks=new Uint8Array([160,30,16,0]),Fs=new Uint8Array([150,31,16,0]),Ds=new Uint8Array([73,110,118,101,114,116,32,104,101,105,103,104,116,109,97,112,0]);Object.assign(Fe,{...t,type:2,name:'struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 1, comptime description: *const [16:0]u8 = "Invert heightmap"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:c},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:c},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:c},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:re}],methods:[],template:{memory:{array:Is},slots:{0:{structure:c,memory:{array:ks},slots:{0:{structure:a,memory:{array:gt},address:1056424}}},1:{structure:c,memory:{array:Es},slots:{0:{structure:a,memory:{array:de},address:1056420}}},2:{structure:c,memory:{array:Bs},slots:{0:{structure:a,memory:{array:de},address:1056420}}},3:{structure:re,memory:{array:Ks},slots:{0:{structure:Ke,memory:{array:Fs},address:1056416,slots:{0:{structure:Be,memory:{array:Ds},address:1056662}}}}}}}},slot:48});Object.assign(ae,{...t,type:11,name:'*const struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 1, comptime description: *const [16:0]u8 = "Invert heightmap"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Fe}],methods:[],template:null},slot:47});Object.assign(De,{...t,type:1,name:"[39:0]u8",length:39,byteSize:40,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:89});Object.assign(Ge,{...t,type:11,name:"*const [39:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:De}],methods:[],template:null},slot:88});Object.assign(ie,{...t,type:11,name:"*const *const [39:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ge}],methods:[],template:null},slot:87});const Gs=new Uint8Array([]),Ms=new Uint8Array([56,30,16,0]),$s=new Uint8Array([80,30,16,0]),Ls=new Uint8Array([152,30,16,0]),Hs=new Uint8Array([0,0,0,0,0,80,148,64]),Js=new Uint8Array([144,30,16,0]),Ns=new Uint8Array([110,31,16,0]),Qs=new Uint8Array([84,104,101,32,109,97,120,105,109,117,109,32,114,101,97,99,104,47,108,101,110,103,116,104,32,111,102,32,97,32,108,105,103,104,116,32,114,97,121,0]);Object.assign(Me,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10000, comptime defaultValue: comptime_float = 1300, comptime description: *const [39:0]u8 = "The maximum reach/length of a light ray"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:ie}],methods:[],template:{memory:{array:Gs},slots:{0:{structure:s,memory:{array:Ms},slots:{0:{structure:r,memory:{array:_},address:1056312}}},1:{structure:s,memory:{array:$s},slots:{0:{structure:r,memory:{array:St},address:1056336}}},2:{structure:s,memory:{array:Ls},slots:{0:{structure:r,memory:{array:Hs},address:1056408}}},3:{structure:ie,memory:{array:Js},slots:{0:{structure:Ge,memory:{array:Ns},address:1056400,slots:{0:{structure:De,memory:{array:Qs},address:1056622}}}}}}}},slot:50});Object.assign(me,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10000, comptime defaultValue: comptime_float = 1300, comptime description: *const [39:0]u8 = "The maximum reach/length of a light ray"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Me}],methods:[],template:null},slot:49});Object.assign($e,{...t,type:1,name:"[38:0]u8",length:38,byteSize:39,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:92});Object.assign(Le,{...t,type:11,name:"*const [38:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$e}],methods:[],template:null},slot:91});Object.assign(oe,{...t,type:11,name:"*const *const [38:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Le}],methods:[],template:null},slot:90});const Ws=new Uint8Array([]),Xs=new Uint8Array([56,30,16,0]),Ys=new Uint8Array([136,30,16,0]),Zs=new Uint8Array([0,0,0,0,0,0,0,64]),er=new Uint8Array([128,30,16,0]),tr=new Uint8Array([51,51,51,51,51,51,227,63]),sr=new Uint8Array([120,30,16,0]),rr=new Uint8Array([71,31,16,0]),ar=new Uint8Array([84,104,101,32,115,116,114,101,110,103,116,104,32,111,102,32,116,104,101,32,115,117,114,102,97,99,101,32,114,101,102,108,101,99,116,105,111,110,0]);Object.assign(He,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 0.6, comptime description: *const [38:0]u8 = "The strength of the surface reflection"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:oe}],methods:[],template:{memory:{array:Ws},slots:{0:{structure:s,memory:{array:Xs},slots:{0:{structure:r,memory:{array:_},address:1056312}}},1:{structure:s,memory:{array:Ys},slots:{0:{structure:r,memory:{array:Zs},address:1056392}}},2:{structure:s,memory:{array:er},slots:{0:{structure:r,memory:{array:tr},address:1056384}}},3:{structure:oe,memory:{array:sr},slots:{0:{structure:Le,memory:{array:rr},address:1056376,slots:{0:{structure:$e,memory:{array:ar},address:1056583}}}}}}}},slot:52});Object.assign(ne,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 0.6, comptime description: *const [38:0]u8 = "The strength of the surface reflection"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:He}],methods:[],template:null},slot:51});Object.assign(Je,{...t,type:1,name:"[114:0]u8",length:114,byteSize:115,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:95});Object.assign(Ne,{...t,type:11,name:"*const [114:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Je}],methods:[],template:null},slot:94});Object.assign(ce,{...t,type:11,name:"*const *const [114:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ne}],methods:[],template:null},slot:93});const ir=new Uint8Array([]),mr=new Uint8Array([56,30,16,0]),or=new Uint8Array([112,30,16,0]),nr=new Uint8Array([0,0,0,0,0,64,143,64]),cr=new Uint8Array([104,30,16,0]),ur=new Uint8Array([0,0,0,0,0,0,34,64]),lr=new Uint8Array([100,30,16,0]),pr=new Uint8Array([212,30,16,0]),yr=new Uint8Array([84,104,101,32,108,111,119,101,114,32,116,104,101,32,118,97,108,117,101,44,32,116,104,101,32,109,111,114,101,32,101,120,97,99,116,108,121,32,116,104,101,32,114,101,102,108,101,99,116,105,111,110,32,114,97,121,32,110,101,101,100,115,32,116,111,32,114,101,102,108,101,99,116,101,100,32,115,116,114,101,105,103,104,116,32,98,97,99,107,32,116,111,119,97,114,100,115,32,116,104,101,32,108,105,103,104,116,32,115,111,117,114,99,101,0]);Object.assign(Qe,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 9, comptime description: *const [114:0]u8 = "The lower the value, the more exactly the reflection ray needs to reflected streight back towards the light source"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:ce}],methods:[],template:{memory:{array:ir},slots:{0:{structure:s,memory:{array:mr},slots:{0:{structure:r,memory:{array:_},address:1056312}}},1:{structure:s,memory:{array:or},slots:{0:{structure:r,memory:{array:nr},address:1056368}}},2:{structure:s,memory:{array:cr},slots:{0:{structure:r,memory:{array:ur},address:1056360}}},3:{structure:ce,memory:{array:lr},slots:{0:{structure:Ne,memory:{array:pr},address:1056356,slots:{0:{structure:Je,memory:{array:yr},address:1056468}}}}}}}},slot:54});Object.assign(ue,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 9, comptime description: *const [114:0]u8 = "The lower the value, the more exactly the reflection ray needs to reflected streight back towards the light source"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Qe}],methods:[],template:null},slot:53});const fr=new Uint8Array([]),dr=new Uint8Array([170,170,170,170]),br=new Uint8Array([170,170,170,170]),hr=new Uint8Array([170,170,170,170]),gr=new Uint8Array([170,170,170,170]),Sr=new Uint8Array([170,170,170,170]),zr=new Uint8Array([170,170,170,170]),wr=new Uint8Array([170,170,170,170]),Vr=new Uint8Array([170,170,170,170]);Object.assign(We,{...t,type:2,name:'struct{comptime on: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 1, comptime description: *const [65:0]u8 = "Only while on is 1, the shader will be applied to the input image"} = .{.type = i32, .minValue = 0, .maxValue = 1, .defaultValue = 1, .description = "Only while on is 1, the shader will be applied to the input image"}, comptime light: struct{comptime type: type = @Vector(3, f32), comptime minValue: @Vector(3, f32) = .{ -2560, -2560, -10000 }, comptime maxValue: struct{comptime comptime_float = 2560, comptime comptime_float = 2560, comptime comptime_float = 10000} = .{2560, 2560, 10000}, comptime defaultValue: struct{comptime comptime_float = 250, comptime comptime_float = 250, comptime comptime_float = 800} = .{250, 250, 800}, comptime description: *const [103:0]u8 = "The light coordinates (x,y,z). The z-coordinate always needs to be positive to be in front of the image"} = .{.type = @Vector(3, f32), .minValue = .{ -2560, -2560, -10000 }, .maxValue = .{2560, 2560, 10000}, .defaultValue = .{250, 250, 800}, .description = "The light coordinates (x,y,z). The z-coordinate always needs to be positive to be in front of the image"}, comptime lightcolor: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime description: *const [33:0]u8 = "Color of the light source [R,G,B]"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{1, 1, 1}, .description = "Color of the light source [R,G,B]"}, comptime heightmap_multi: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1, comptime description: *const [62:0]u8 = "A factor by which the heightmap differences will be multiplied"} = .{.type = f32, .minValue = 1, .maxValue = 10, .defaultValue = 1, .description = "A factor by which the heightmap differences will be multiplied"}, comptime invert: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 1, comptime description: *const [16:0]u8 = "Invert heightmap"} = .{.type = i32, .minValue = 0, .maxValue = 1, .defaultValue = 1, .description = "Invert heightmap"}, comptime lightwidth: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10000, comptime defaultValue: comptime_float = 1300, comptime description: *const [39:0]u8 = "The maximum reach/length of a light ray"} = .{.type = f32, .minValue = 0, .maxValue = 10000, .defaultValue = 1300, .description = "The maximum reach/length of a light ray"}, comptime reflection: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 0.6, comptime description: *const [38:0]u8 = "The strength of the surface reflection"} = .{.type = f32, .minValue = 0, .maxValue = 2, .defaultValue = 0.6, .description = "The strength of the surface reflection"}, comptime refl_tolerance: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 9, comptime description: *const [114:0]u8 = "The lower the value, the more exactly the reflection ray needs to reflected streight back towards the light source"} = .{.type = f32, .minValue = 0, .maxValue = 1000, .defaultValue = 9, .description = "The lower the value, the more exactly the reflection ray needs to reflected streight back towards the light source"}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"on",structure:H},{...e,type:8,isRequired:!1,slot:1,name:"light",structure:X},{...e,type:8,isRequired:!1,slot:2,name:"lightcolor",structure:ee},{...e,type:8,isRequired:!1,slot:3,name:"heightmap_multi",structure:se},{...e,type:8,isRequired:!1,slot:4,name:"invert",structure:ae},{...e,type:8,isRequired:!1,slot:5,name:"lightwidth",structure:me},{...e,type:8,isRequired:!1,slot:6,name:"reflection",structure:ne},{...e,type:8,isRequired:!1,slot:7,name:"refl_tolerance",structure:ue}],methods:[],template:{memory:{array:fr},slots:{0:{structure:H,memory:{array:dr},slots:{0:{structure:_e,memory:{array:m},address:-1431655766}}},1:{structure:X,memory:{array:br},slots:{0:{structure:xe,memory:{array:m},address:-1431655766}}},2:{structure:ee,memory:{array:hr},slots:{0:{structure:ve,memory:{array:m},address:-1431655766}}},3:{structure:se,memory:{array:gr},slots:{0:{structure:Ee,memory:{array:m},address:-1431655766}}},4:{structure:ae,memory:{array:Sr},slots:{0:{structure:Fe,memory:{array:m},address:-1431655766}}},5:{structure:me,memory:{array:zr},slots:{0:{structure:Me,memory:{array:m},address:-1431655766}}},6:{structure:ne,memory:{array:wr},slots:{0:{structure:He,memory:{array:m},address:-1431655766}}},7:{structure:ue,memory:{array:Vr},slots:{0:{structure:Qe,memory:{array:m},address:-1431655766}}}}}},slot:15});Object.assign(le,{...t,type:11,name:'*struct{comptime on: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 1, comptime description: *const [65:0]u8 = "Only while on is 1, the shader will be applied to the input image"} = .{.type = i32, .minValue = 0, .maxValue = 1, .defaultValue = 1, .description = "Only while on is 1, the shader will be applied to the input image"}, comptime light: struct{comptime type: type = @Vector(3, f32), comptime minValue: @Vector(3, f32) = .{ -2560, -2560, -10000 }, comptime maxValue: struct{comptime comptime_float = 2560, comptime comptime_float = 2560, comptime comptime_float = 10000} = .{2560, 2560, 10000}, comptime defaultValue: struct{comptime comptime_float = 250, comptime comptime_float = 250, comptime comptime_float = 800} = .{250, 250, 800}, comptime description: *const [103:0]u8 = "The light coordinates (x,y,z). The z-coordinate always needs to be positive to be in front of the image"} = .{.type = @Vector(3, f32), .minValue = .{ -2560, -2560, -10000 }, .maxValue = .{2560, 2560, 10000}, .defaultValue = .{250, 250, 800}, .description = "The light coordinates (x,y,z). The z-coordinate always needs to be positive to be in front of the image"}, comptime lightcolor: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime description: *const [33:0]u8 = "Color of the light source [R,G,B]"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{1, 1, 1}, .description = "Color of the light source [R,G,B]"}, comptime heightmap_multi: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1, comptime description: *const [62:0]u8 = "A factor by which the heightmap differences will be multiplied"} = .{.type = f32, .minValue = 1, .maxValue = 10, .defaultValue = 1, .description = "A factor by which the heightmap differences will be multiplied"}, comptime invert: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 1, comptime description: *const [16:0]u8 = "Invert heightmap"} = .{.type = i32, .minValue = 0, .maxValue = 1, .defaultValue = 1, .description = "Invert heightmap"}, comptime lightwidth: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10000, comptime defaultValue: comptime_float = 1300, comptime description: *const [39:0]u8 = "The maximum reach/length of a light ray"} = .{.type = f32, .minValue = 0, .maxValue = 10000, .defaultValue = 1300, .description = "The maximum reach/length of a light ray"}, comptime reflection: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 0.6, comptime description: *const [38:0]u8 = "The strength of the surface reflection"} = .{.type = f32, .minValue = 0, .maxValue = 2, .defaultValue = 0.6, .description = "The strength of the surface reflection"}, comptime refl_tolerance: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 9, comptime description: *const [114:0]u8 = "The lower the value, the more exactly the reflection ray needs to reflected streight back towards the light source"} = .{.type = f32, .minValue = 0, .maxValue = 1000, .defaultValue = 9, .description = "The lower the value, the more exactly the reflection ray needs to reflected streight back towards the light source"}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:We}],methods:[],template:null},slot:14});const Or=new Uint8Array([]),Rr=new Uint8Array([96,30,16,0]),_r=new Uint8Array([4,0,0,0]);Object.assign(q,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:Or},slots:{0:{structure:c,memory:{array:Rr},slots:{0:{structure:a,memory:{array:_r},address:1056352}}}}}},slot:56});Object.assign(g,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:55});const qr=new Uint8Array([]),Ar=new Uint8Array([170,170,170,170]),Ur=new Uint8Array([170,170,170,170]);Object.assign(Xe,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}, comptime img: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:g},{...e,type:8,isRequired:!1,slot:1,name:"img",structure:g}],methods:[],template:{memory:{array:qr},slots:{0:{structure:g,memory:{array:Ar},slots:{0:{structure:q,memory:{array:m},address:-1431655766}}},1:{structure:g,memory:{array:Ur},slots:{0:{structure:q,memory:{array:m},address:-1431655766}}}}}},slot:17});Object.assign(pe,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}, comptime img: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Xe}],methods:[],template:null},slot:16});const jr=new Uint8Array([]),xr=new Uint8Array([170,170,170,170]);Object.assign(Ye,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:g}],methods:[],template:{memory:{array:jr},slots:{0:{structure:g,memory:{array:xr},slots:{0:{structure:q,memory:{array:m},address:-1431655766}}}}}},slot:19});Object.assign(ye,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ye}],methods:[],template:null},slot:18});const Pr=new Uint8Array([]),Cr=new Uint8Array([]),Tr=new Uint8Array([12,251,15,0]),vr=new Uint8Array([152,98,16,0]),Ir=new Uint8Array([99,111,109,46,115,104,97,100,101,114,0]),kr=new Uint8Array([76,251,15,0]),Er=new Uint8Array([139,98,16,0]),Br=new Uint8Array([69,108,105,97,115,32,83,116,101,104,108,101,0]),Kr=new Uint8Array([140,251,15,0]),Fr=new Uint8Array([1,0,0,0]),Dr=new Uint8Array([228,251,15,0]),Gr=new Uint8Array([82,98,16,0]),Mr=new Uint8Array([66,117,109,112,109,97,112,32,83,104,97,100,101,114,32,45,32,83,116,117,110,110,105,110,103,32,101,102,102,101,99,116,115,32,111,110,32,116,101,120,116,117,114,101,45,108,105,107,101,32,105,110,112,117,116,115,0]),$r=new Uint8Array([170,170,170,170]),Lr=new Uint8Array([170,170,170,170]),Hr=new Uint8Array([170,170,170,170]);Object.assign(it,{...t,type:2,name:"bumpmap.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Pr}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:G},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:M},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:S},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:$},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:le},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:pe},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:ye}],methods:[],template:{memory:{array:Cr},slots:{0:{structure:G,memory:{array:Tr},slots:{0:{structure:ge,memory:{array:vr},slots:{0:{structure:he,memory:{array:Ir},address:1073816}}}}},1:{structure:M,memory:{array:kr},slots:{0:{structure:ze,memory:{array:Er},slots:{0:{structure:Se,memory:{array:Br},address:1073803}}}}},2:{structure:S,memory:{array:Kr},slots:{0:{structure:a,memory:{array:Fr}}}},3:{structure:$,memory:{array:Dr},slots:{0:{structure:Ve,memory:{array:Gr},slots:{0:{structure:we,memory:{array:Mr},address:1073746}}}}},4:{structure:le,memory:{array:$r},slots:{0:{structure:We,memory:{array:m},address:-1431655766}}},5:{structure:pe,memory:{array:Lr},slots:{0:{structure:Xe,memory:{array:m},address:-1431655766}}},6:{structure:ye,memory:{array:Hr},slots:{0:{structure:Ye,memory:{array:m},address:-1431655766}}}}}},slot:1});Object.assign(A,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:24});Object.assign(P,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:23});Object.assign(C,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:P}],methods:[],template:null},slot:22});Object.assign(d,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:d}],methods:[],template:null},slot:25});const Jr=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Ze,{...t,type:9,name:"bumpmap.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:a},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:a}],methods:[],template:{memory:{array:Jr}}},slot:26});Object.assign(T,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:T}],methods:[],template:null},slot:27});Object.assign(v,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:v}],methods:[],template:null},slot:28});Object.assign(et,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:57});const Nr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Qr=new Uint8Array([]),Wr=new Uint8Array([168,252,15,0]),Xr=new Uint8Array([4,0,0,0]);Object.assign(R,{...t,type:2,name:"bumpmap.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:C},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:d},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:d},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Ze},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:T},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:v}],methods:[],template:{memory:{array:Nr}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:A},{...e,type:7,isRequired:!1,name:"FPixel",structure:et},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:S}],methods:[],template:{memory:{array:Qr},slots:{0:{structure:S,memory:{array:Wr},slots:{0:{structure:a,memory:{array:Xr}}}}}}},slot:21});const Yr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Zr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ea=new Uint8Array([0,0,0,0,0,0,0,0]),be=new Uint8Array([]),ta=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),sa=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(I,{...t,type:2,name:"bumpmap.KernelInput(u8,bumpmap.kernel)",length:1,byteSize:48,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:R},{...e,type:6,isRequired:!1,bitOffset:192,bitSize:192,byteSize:24,slot:1,name:"img",structure:R}],methods:[],template:{memory:{array:Yr},slots:{0:{structure:R,memory:{array:Zr},slots:{0:{structure:C,memory:{array:ea},slots:{0:{structure:P,memory:{array:be}}}}}},1:{structure:R,memory:{array:ta},slots:{0:{structure:C,memory:{array:sa},slots:{0:{structure:P,memory:{array:be}}}}}}}}},slot:20});Object.assign(tt,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:23});Object.assign(st,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:tt}],methods:[],template:null},slot:31});const ra=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),aa=new Uint8Array([]),ia=new Uint8Array([104,253,15,0]),ma=new Uint8Array([4,0,0,0]);Object.assign(fe,{...t,type:2,name:"bumpmap.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:st},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:d},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:d},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Ze},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:T},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:v}],methods:[],template:{memory:{array:ra}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:A},{...e,type:7,isRequired:!1,name:"FPixel",structure:et},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:S}],methods:[],template:{memory:{array:aa},slots:{0:{structure:S,memory:{array:ia},slots:{0:{structure:a,memory:{array:ma}}}}}}},slot:30});const oa=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),na=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ca=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(k,{...t,type:2,name:"bumpmap.KernelOutput(u8,bumpmap.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:fe}],methods:[],template:{memory:{array:oa},slots:{0:{structure:fe,memory:{array:na},slots:{0:{structure:st,memory:{array:ca},slots:{0:{structure:tt,memory:{array:be}}}}}}}}},slot:29});const ua=new Uint8Array([0,0,122,67,0,0,122,67,0,0,72,68,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,1,0,0,0,0,0,128,63,1,0,0,0,0,128,162,68,154,153,25,63,0,0,16,65,0,0,0,0,0,0,0,0]);Object.assign(E,{...t,type:2,name:"bumpmap.KernelParameters(bumpmap.kernel)",length:1,byteSize:64,align:4,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"on",structure:a},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:96,byteSize:16,slot:1,name:"light",structure:z},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:96,byteSize:16,slot:2,name:"lightcolor",structure:z},{...e,type:4,isRequired:!1,bitOffset:288,bitSize:32,byteSize:4,slot:3,name:"heightmap_multi",structure:f},{...e,type:2,isRequired:!1,bitOffset:320,bitSize:32,byteSize:4,slot:4,name:"invert",structure:a},{...e,type:4,isRequired:!1,bitOffset:352,bitSize:32,byteSize:4,slot:5,name:"lightwidth",structure:f},{...e,type:4,isRequired:!1,bitOffset:384,bitSize:32,byteSize:4,slot:6,name:"reflection",structure:f},{...e,type:4,isRequired:!1,bitOffset:416,bitSize:32,byteSize:4,slot:7,name:"refl_tolerance",structure:f}],methods:[],template:{memory:{array:ua}}},slot:32});Object.assign(mt,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(bumpmap.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:58});Object.assign(ot,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(bumpmap.createOutput)).Fn.return_type.?).ErrorUnion.error_set!bumpmap.KernelOutput(u8,bumpmap.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:mt}],methods:[],template:null},slot:37});Object.assign(nt,{...t,type:3,name:"createOutput",length:1,byteSize:160,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:512,bitSize:32,byteSize:4,slot:0,name:"0",structure:d},{...e,type:3,bitOffset:544,bitSize:32,byteSize:4,slot:1,name:"1",structure:d},{...e,type:6,bitOffset:576,bitSize:384,byteSize:48,slot:2,name:"2",structure:I},{...e,type:6,bitOffset:0,bitSize:512,byteSize:64,slot:3,name:"3",structure:E},{...e,type:6,bitOffset:960,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ot}],methods:[],template:null},slot:35});Object.assign(ct,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(bumpmap.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:59});Object.assign(ut,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(bumpmap.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!bumpmap.KernelOutput(u8,bumpmap.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ct}],methods:[],template:null},slot:38});Object.assign(lt,{...t,type:3,name:"createPartialOutput",length:1,byteSize:160,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:512,bitSize:32,byteSize:4,slot:0,name:"0",structure:d},{...e,type:3,bitOffset:544,bitSize:32,byteSize:4,slot:1,name:"1",structure:d},{...e,type:3,bitOffset:576,bitSize:32,byteSize:4,slot:2,name:"2",structure:d},{...e,type:3,bitOffset:608,bitSize:32,byteSize:4,slot:3,name:"3",structure:d},{...e,type:6,bitOffset:640,bitSize:384,byteSize:48,slot:4,name:"4",structure:I},{...e,type:6,bitOffset:0,bitSize:512,byteSize:64,slot:5,name:"5",structure:E},{...e,type:6,bitOffset:1024,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ut}],methods:[],template:null},slot:36});const la={argStruct:nt,thunk:4,name:"createOutput"},pa={argStruct:lt,thunk:9,name:"createPartialOutput"};Object.assign(pt,{...t,type:2,name:"bumpmap",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:be}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:it},{...e,type:7,isRequired:!1,name:"Input",structure:I},{...e,type:7,isRequired:!1,name:"Output",structure:k},{...e,type:7,isRequired:!1,name:"Parameters",structure:E}],methods:[la,pa],template:null},slot:0});const ya=[p,he,ge,G,Se,ze,M,a,S,we,Ve,$,c,Oe,Re,L,_e,H,f,z,J,r,s,qe,N,Ae,Q,Ue,je,W,xe,X,Pe,Y,x,O,Ce,Te,Z,ve,ee,Ie,ke,te,Ee,se,Be,Ke,re,Fe,ae,De,Ge,ie,Me,me,$e,Le,oe,He,ne,Je,Ne,ce,Qe,ue,We,le,q,g,Xe,pe,Ye,ye,it,A,P,C,d,Ze,T,v,et,R,I,tt,st,fe,k,E,mt,ot,nt,ct,ut,lt,pt],fa=Ft(ya),da=pt.constructor,ba=(async()=>{const u=new URL("bumpmap-b0758718.wasm",import.meta.url).href;return fetch(u)})();Dt(ba,{...fa,writeBack:!0});const{createOutput:Ra,createPartialOutput:ha,kernel:at,Input:ga,Output:_a,Parameters:qa}=da;function Sa(u,y,o,i,n={},w={}){if(Array.isArray(n)){const h=n;n={};for(const[b,V]of Object.keys(at.inputImages).entries())n[V]=h[b]}const B=new ga(void 0),K=Object.keys(at.inputImages),l=[];let U;for(const h of K){let b=n[h];if(b||(K.length===1&&["data","width","height"].every(V=>!!n[V])?b=n:l.push(h)),B[h]=b,U){if(b.colorSpace!==U)throw new Error(`Input images must all use the same color space: ${U}`)}else U=b.colorSpace}if(l.length>0)throw new Error(`Missing input image${l.length>1?"s":""}: ${l.join(", ")}`);const rt=ha(u,y,o,i,B,w),yt=h=>{const b=Object.keys(h),V={};for(const ft of b){const{data:{typedArray:F},width:dt,height:wt}=h[ft];let D;if(typeof ImageData=="function"){const Vt=new Uint8ClampedArray(F.buffer,F.byteOffset,F.byteLength);D=new ImageData(Vt,dt,i,{colorSpace:U})}else D={data:F,width:dt,height:wt};if(b.length===1)return D;V[ft]=D}return V};return rt[Symbol.toStringTag]==="Promise"?rt.then(yt):yt(rt)}function za(){const u={};for(let[y,o]of Object.entries(at)){if(y==="parameters"){const i={};for(const[n,w]of Object.entries(o)){const B=i[n]={};for(let[K,l]of Object.entries(w))typeof l=="object"?"string"in l?l=l.string:l=zt(l):typeof l=="function"&&(l=wa(l.name)),B[K]=l}o=i}else typeof o=="object"&&("string"in o?o=o.string:o=o.valueOf());u[y]=o}return u}function zt(u){const y=[];for(let[o,i]of Object.entries(u))typeof i=="object"&&(i=zt(i)),y[o]=i;return y}function wa(u){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[u]}onmessage=u=>{const[y,o,...i]=u.data;Va(y,i).then(([n,w])=>{postMessage([y,o,n],{transfer:w})}).catch(n=>{postMessage(["error",o,n])})};async function Va(u,y){switch(u){case"getKernelInfo":return[za(...y)];case"createPartialImageData":const i=await Sa(...y),n=[];if("data"in i&&"width"in i&&"height"in i)n.push(i.data.buffer);else for(const w of Object.entries(i))n.push(i.data.buffer);return[i,n];default:throw new Error(`Unknown function: ${u}`)}}
