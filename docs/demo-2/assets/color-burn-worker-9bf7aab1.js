import{u as fe,a as de,b as he,d as Se,c as ge,e as ze,f as Oe,g as we,h as Re,i as qe,j as je,k as Ae,l as Ue,o as Pe,m as Ie,p as ke,n as Ve,q as _e,r as ve}from"./index-778418ea.js";fe();de();he();Se();ge();ze();Oe();we();Re();qe();je();Ae();Ue();Pe();Ie();ke();Ve();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},g={},R={},q={},d={},l={},b={},L={},G={},K={},H={},T={},C={},z={},y={},J={},F={},N={},D={},te={},O={},j={},A={},u={},Q={},U={},P={},M={},W={},h={},I={},X={},Y={},$={},k={},V={},se={},re={},ne={},ae={},ie={},oe={},ue={};Object.assign(g,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:5});Object.assign(R,{...t,type:1,name:"[5:0]u8",length:5,byteSize:6,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:4});Object.assign(q,{...t,type:11,name:"*const [5:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:3});Object.assign(d,{...t,type:11,name:"**const [5:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:2});Object.assign(l,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:7});Object.assign(b,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:l}],methods:[],template:null},slot:6});Object.assign(L,{...t,type:1,name:"[20:0]u8",length:20,byteSize:21,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:10});Object.assign(G,{...t,type:11,name:"*const [20:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:9});Object.assign(K,{...t,type:11,name:"**const [20:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:8});const Ee=new Uint8Array([]);Object.assign(H,{...t,type:2,name:"@TypeOf(.{})",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ee}}},slot:12});Object.assign(T,{...t,type:11,name:"*@TypeOf(.{})",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:11});Object.assign(C,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:l}],methods:[],template:null},slot:40});const xe=new Uint8Array([]),Ke=new Uint8Array([48,30,16,0]),Te=new Uint8Array([4,0,0,0]);Object.assign(z,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:C}],methods:[],template:{memory:{array:xe},slots:{0:{structure:C,memory:{array:Ke},slots:{0:{structure:l,memory:{array:Te},address:1056304}}}}}},slot:35});Object.assign(y,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:z}],methods:[],template:null},slot:34});const Ce=new Uint8Array([]),Fe=new Uint8Array([170,170,170,170]),S=new Uint8Array([]),De=new Uint8Array([170,170,170,170]);Object.assign(J,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}, comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:y},{...e,type:8,isRequired:!1,slot:1,name:"src",structure:y}],methods:[],template:{memory:{array:Ce},slots:{0:{structure:y,memory:{array:Fe},slots:{0:{structure:z,memory:{array:S},address:-1431655766}}},1:{structure:y,memory:{array:De},slots:{0:{structure:z,memory:{array:S},address:-1431655766}}}}}},slot:14});Object.assign(F,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}, comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:13});const Me=new Uint8Array([]),$e=new Uint8Array([170,170,170,170]);Object.assign(N,{...t,type:2,name:"struct{comptime result: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"result",structure:y}],methods:[],template:{memory:{array:Me},slots:{0:{structure:y,memory:{array:$e},slots:{0:{structure:z,memory:{array:S},address:-1431655766}}}}}},slot:16});Object.assign(D,{...t,type:11,name:"*struct{comptime result: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:15});const Be=new Uint8Array([]),Le=new Uint8Array([]),Ge=new Uint8Array([236,252,15,0]),He=new Uint8Array([193,37,16,0]),Je=new Uint8Array([70,108,97,109,101,0]),Ne=new Uint8Array([36,253,15,0]),Qe=new Uint8Array([187,37,16,0]),We=new Uint8Array([65,100,111,98,101,0]),Xe=new Uint8Array([92,253,15,0]),Ye=new Uint8Array([1,0,0,0]),Ze=new Uint8Array([148,253,15,0]),et=new Uint8Array([166,37,16,0]),tt=new Uint8Array([67,111,108,111,114,66,117,114,110,32,98,108,101,110,100,32,109,111,100,101,0]),st=new Uint8Array([170,170,170,170]),rt=new Uint8Array([170,170,170,170]),nt=new Uint8Array([170,170,170,170]);Object.assign(te,{...t,type:2,name:"color-burn.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Be}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:d},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:d},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:b},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:K},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:T},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:F},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:D}],methods:[],template:{memory:{array:Le},slots:{0:{structure:d,memory:{array:Ge},slots:{0:{structure:q,memory:{array:He},slots:{0:{structure:R,memory:{array:Je},address:1058241}}}}},1:{structure:d,memory:{array:Ne},slots:{0:{structure:q,memory:{array:Qe},slots:{0:{structure:R,memory:{array:We},address:1058235}}}}},2:{structure:b,memory:{array:Xe},slots:{0:{structure:l,memory:{array:Ye}}}},3:{structure:K,memory:{array:Ze},slots:{0:{structure:G,memory:{array:et},slots:{0:{structure:L,memory:{array:tt},address:1058214}}}}},4:{structure:T,memory:{array:st},slots:{0:{structure:H,memory:{array:S},address:-1431655766}}},5:{structure:F,memory:{array:rt},slots:{0:{structure:J,memory:{array:S},address:-1431655766}}},6:{structure:D,memory:{array:nt},slots:{0:{structure:N,memory:{array:S},address:-1431655766}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:21});Object.assign(j,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:20});Object.assign(A,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:j}],methods:[],template:null},slot:19});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:22});const at=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Q,{...t,type:9,name:"color-burn.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:l},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:l}],methods:[],template:{memory:{array:at}}},slot:23});Object.assign(U,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:U}],methods:[],template:null},slot:24});Object.assign(P,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:P}],methods:[],template:null},slot:25});Object.assign(M,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:M}],methods:[],template:null},slot:39});Object.assign(W,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:M}],methods:[],template:null},slot:36});const it=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ot=new Uint8Array([]),ut=new Uint8Array([232,250,15,0]),lt=new Uint8Array([4,0,0,0]);Object.assign(h,{...t,type:2,name:"color-burn.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:A},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Q},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:U},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:P}],methods:[],template:{memory:{array:it}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:W},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:ot},slots:{0:{structure:b,memory:{array:ut},slots:{0:{structure:l,memory:{array:lt}}}}}}},slot:18});const mt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ct=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),yt=new Uint8Array([0,0,0,0,0,0,0,0]),B=new Uint8Array([]),bt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),pt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(I,{...t,type:2,name:"color-burn.KernelInput(u8,color-burn.kernel)",length:1,byteSize:48,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:h},{...e,type:6,isRequired:!1,bitOffset:192,bitSize:192,byteSize:24,slot:1,name:"src",structure:h}],methods:[],template:{memory:{array:mt},slots:{0:{structure:h,memory:{array:ct},slots:{0:{structure:A,memory:{array:yt},slots:{0:{structure:j,memory:{array:B}}}}}},1:{structure:h,memory:{array:bt},slots:{0:{structure:A,memory:{array:pt},slots:{0:{structure:j,memory:{array:B}}}}}}}}},slot:17});Object.assign(X,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:20});Object.assign(Y,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:X}],methods:[],template:null},slot:28});const ft=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),dt=new Uint8Array([]),ht=new Uint8Array([168,251,15,0]),St=new Uint8Array([4,0,0,0]);Object.assign($,{...t,type:2,name:"color-burn.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Y},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Q},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:U},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:P}],methods:[],template:{memory:{array:ft}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:W},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:dt},slots:{0:{structure:b,memory:{array:ht},slots:{0:{structure:l,memory:{array:St}}}}}}},slot:27});const gt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),zt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ot=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(k,{...t,type:2,name:"color-burn.KernelOutput(u8,color-burn.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"result",structure:$}],methods:[],template:{memory:{array:gt},slots:{0:{structure:$,memory:{array:zt},slots:{0:{structure:Y,memory:{array:Ot},slots:{0:{structure:X,memory:{array:B}}}}}}}}},slot:26});const wt=new Uint8Array([]);Object.assign(V,{...t,type:2,name:"color-burn.KernelParameters(color-burn.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:wt}}},slot:29});Object.assign(se,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(color-burn.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:37});Object.assign(re,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(color-burn.createOutput)).Fn.return_type.?).ErrorUnion.error_set!color-burn.KernelOutput(u8,color-burn.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:se}],methods:[],template:null},slot:32});Object.assign(ne,{...t,type:3,name:"createOutput",length:1,byteSize:84,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:64,bitSize:384,byteSize:48,slot:2,name:"2",structure:I},{...e,type:6,bitOffset:672,bitSize:0,byteSize:0,slot:3,name:"3",structure:V},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:4,name:"retval",structure:re}],methods:[],template:null},slot:30});Object.assign(ae,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(color-burn.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:38});Object.assign(ie,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(color-burn.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!color-burn.KernelOutput(u8,color-burn.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ae}],methods:[],template:null},slot:33});Object.assign(oe,{...t,type:3,name:"createPartialOutput",length:1,byteSize:92,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:128,bitSize:384,byteSize:48,slot:4,name:"4",structure:I},{...e,type:6,bitOffset:736,bitSize:0,byteSize:0,slot:5,name:"5",structure:V},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ie}],methods:[],template:null},slot:31});const Rt={argStruct:ne,thunk:5,name:"createOutput"},qt={argStruct:oe,thunk:2,name:"createPartialOutput"};Object.assign(ue,{...t,type:2,name:"color-burn",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:B}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:te},{...e,type:7,isRequired:!1,name:"Input",structure:I},{...e,type:7,isRequired:!1,name:"Output",structure:k},{...e,type:7,isRequired:!1,name:"Parameters",structure:V}],methods:[Rt,qt],template:null},slot:0});const jt=[g,R,q,d,l,b,L,G,K,H,T,C,z,y,J,F,N,D,te,O,j,A,u,Q,U,P,M,W,h,I,X,Y,$,k,V,se,re,ne,ae,ie,oe,ue],At=_e(jt),Ut=ue.constructor,Pt=(async()=>{const a=new URL("color-burn-a8aba913.wasm",import.meta.url).href;return fetch(a)})();ve(Pt,{...At,writeBack:!0});const{createOutput:Kt,createPartialOutput:It,kernel:ee,Input:kt,Output:Tt,Parameters:Ct}=Ut;function Vt(a,o,r,s,n={},p={}){if(Array.isArray(n)){const c=n;n={};for(const[m,f]of Object.keys(ee.inputImages).entries())n[f]=c[m]}const _=new kt(void 0),v=Object.keys(ee.inputImages),i=[];let w;for(const c of v){let m=n[c];if(m||(v.length===1&&["data","width","height"].every(f=>!!n[f])?m=n:i.push(c)),_[c]=m,w){if(m.colorSpace!==w)throw new Error(`Input images must all use the same color space: ${w}`)}else w=m.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const Z=It(a,o,r,s,_,p),le=c=>{const m=Object.keys(c),f={};for(const me of m){const{data:{typedArray:E},width:ce,height:be}=c[me];let x;if(typeof ImageData=="function"){const pe=new Uint8ClampedArray(E.buffer,E.byteOffset,E.byteLength);x=new ImageData(pe,ce,s,{colorSpace:w})}else x={data:E,width:ce,height:be};if(m.length===1)return x;f[me]=x}return f};return Z[Symbol.toStringTag]==="Promise"?Z.then(le):le(Z)}function _t(){const a={};for(let[o,r]of Object.entries(ee)){if(o==="parameters"){const s={};for(const[n,p]of Object.entries(r)){const _=s[n]={};for(let[v,i]of Object.entries(p))typeof i=="object"?"string"in i?i=i.string:i=ye(i):typeof i=="function"&&(i=vt(i.name)),_[v]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());a[o]=r}return a}function ye(a){const o=[];for(let[r,s]of Object.entries(a))typeof s=="object"&&(s=ye(s)),o[r]=s;return o}function vt(a){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[a]}onmessage=a=>{const[o,r,...s]=a.data;Et(o,s).then(([n,p])=>{postMessage([o,r,n],{transfer:p})}).catch(n=>{postMessage(["error",r,n])})};async function Et(a,o){switch(a){case"getKernelInfo":return[_t(...o)];case"createPartialImageData":const s=await Vt(...o),n=[];if("data"in s&&"width"in s&&"height"in s)n.push(s.data.buffer);else for(const p of Object.entries(s))n.push(s.data.buffer);return[s,n];default:throw new Error(`Unknown function: ${a}`)}}
