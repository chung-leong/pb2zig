import{u as Se,a as ge,b as ze,c as Oe,d as Re,e as qe,f as we,g as je,h as Ae,i as Ue,j as Pe,k as Ie,l as ke,n as Ve,o as _e,p as ve,m as Ee,q as xe,r as Ce}from"./index-334ebb77.js";Se();ge();ze();Oe();Re();qe();we();je();Ae();Ue();Pe();Ie();ke();Ve();_e();ve();Ee();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},p={},B={},L={},v={},G={},H={},E={},u={},b={},J={},N={},x={},Q={},C={},K={},g={},y={},W={},T={},X={},F={},ne={},z={},R={},q={},l={},Y={},w={},j={},D={},Z={},h={},A={},ee={},te={},M={},U={},P={},ae={},ie={},oe={},le={},ue={},me={},ce={};Object.assign(p,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:5});Object.assign(B,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:4});Object.assign(L,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:3});Object.assign(v,{...t,type:11,name:"**const [14:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:2});Object.assign(G,{...t,type:1,name:"[10:0]u8",length:10,byteSize:11,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:8});Object.assign(H,{...t,type:11,name:"*const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:7});Object.assign(E,{...t,type:11,name:"**const [10:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:6});Object.assign(u,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:10});Object.assign(b,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:9});Object.assign(J,{...t,type:1,name:"[15:0]u8",length:15,byteSize:16,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:13});Object.assign(N,{...t,type:11,name:"*const [15:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:12});Object.assign(x,{...t,type:11,name:"**const [15:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:11});const Ke=new Uint8Array([]);Object.assign(Q,{...t,type:2,name:"@TypeOf(.{})",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ke}}},slot:15});Object.assign(C,{...t,type:11,name:"*@TypeOf(.{})",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:14});Object.assign(K,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:43});const Te=new Uint8Array([]),Fe=new Uint8Array([48,30,16,0]),De=new Uint8Array([4,0,0,0]);Object.assign(g,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:K}],methods:[],template:{memory:{array:Te},slots:{0:{structure:K,memory:{array:Fe},slots:{0:{structure:u,memory:{array:De},address:1056304}}}}}},slot:38});Object.assign(y,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:g}],methods:[],template:null},slot:37});const Me=new Uint8Array([]),$e=new Uint8Array([170,170,170,170]),S=new Uint8Array([]),Be=new Uint8Array([170,170,170,170]);Object.assign(W,{...t,type:2,name:"struct{comptime src1: struct{comptime channels: comptime_int = 4} = .{.channels = 4}, comptime src2: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src1",structure:y},{...e,type:8,isRequired:!1,slot:1,name:"src2",structure:y}],methods:[],template:{memory:{array:Me},slots:{0:{structure:y,memory:{array:$e},slots:{0:{structure:g,memory:{array:S},address:-1431655766}}},1:{structure:y,memory:{array:Be},slots:{0:{structure:g,memory:{array:S},address:-1431655766}}}}}},slot:17});Object.assign(T,{...t,type:11,name:"*struct{comptime src1: struct{comptime channels: comptime_int = 4} = .{.channels = 4}, comptime src2: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:16});const Le=new Uint8Array([]),Ge=new Uint8Array([170,170,170,170]);Object.assign(X,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:y}],methods:[],template:{memory:{array:Le},slots:{0:{structure:y,memory:{array:Ge},slots:{0:{structure:g,memory:{array:S},address:-1431655766}}}}}},slot:19});Object.assign(F,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:18});const He=new Uint8Array([]),Je=new Uint8Array([]),Ne=new Uint8Array([12,251,15,0]),Qe=new Uint8Array([69,38,16,0]),We=new Uint8Array([99,111,109,46,113,117,97,115,105,109,111,110,100,111,0]),Xe=new Uint8Array([76,251,15,0]),Ye=new Uint8Array([58,38,16,0]),Ze=new Uint8Array([81,117,97,115,105,109,111,110,100,111,0]),et=new Uint8Array([140,251,15,0]),tt=new Uint8Array([1,0,0,0]),st=new Uint8Array([228,251,15,0]),rt=new Uint8Array([42,38,16,0]),nt=new Uint8Array([67,111,108,111,114,32,66,108,101,110,100,109,111,100,101,0]),at=new Uint8Array([170,170,170,170]),it=new Uint8Array([170,170,170,170]),ot=new Uint8Array([170,170,170,170]);Object.assign(ne,{...t,type:2,name:"blendmode-color.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:He}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:v},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:E},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:b},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:x},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:C},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:T},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:F}],methods:[],template:{memory:{array:Je},slots:{0:{structure:v,memory:{array:Ne},slots:{0:{structure:L,memory:{array:Qe},slots:{0:{structure:B,memory:{array:We},address:1058373}}}}},1:{structure:E,memory:{array:Xe},slots:{0:{structure:H,memory:{array:Ye},slots:{0:{structure:G,memory:{array:Ze},address:1058362}}}}},2:{structure:b,memory:{array:et},slots:{0:{structure:u,memory:{array:tt}}}},3:{structure:x,memory:{array:st},slots:{0:{structure:N,memory:{array:rt},slots:{0:{structure:J,memory:{array:nt},address:1058346}}}}},4:{structure:C,memory:{array:at},slots:{0:{structure:Q,memory:{array:S},address:-1431655766}}},5:{structure:T,memory:{array:it},slots:{0:{structure:W,memory:{array:S},address:-1431655766}}},6:{structure:F,memory:{array:ot},slots:{0:{structure:X,memory:{array:S},address:-1431655766}}}}}},slot:1});Object.assign(z,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:24});Object.assign(R,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:23});Object.assign(q,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:R}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const lt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Y,{...t,type:9,name:"blendmode-color.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:u},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:u}],methods:[],template:{memory:{array:lt}}},slot:26});Object.assign(w,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:w}],methods:[],template:null},slot:27});Object.assign(j,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:j}],methods:[],template:null},slot:28});Object.assign(D,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:D}],methods:[],template:null},slot:42});Object.assign(Z,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:D}],methods:[],template:null},slot:39});const ut=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),mt=new Uint8Array([]),ct=new Uint8Array([168,252,15,0]),yt=new Uint8Array([4,0,0,0]);Object.assign(h,{...t,type:2,name:"blendmode-color.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:q},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Y},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:w},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:j}],methods:[],template:{memory:{array:ut}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:z},{...e,type:7,isRequired:!1,name:"FPixel",structure:Z},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:mt},slots:{0:{structure:b,memory:{array:ct},slots:{0:{structure:u,memory:{array:yt}}}}}}},slot:21});const bt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),pt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ft=new Uint8Array([0,0,0,0,0,0,0,0]),$=new Uint8Array([]),dt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ht=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(A,{...t,type:2,name:"blendmode-color.KernelInput(u8,blendmode-color.kernel)",length:1,byteSize:48,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src1",structure:h},{...e,type:6,isRequired:!1,bitOffset:192,bitSize:192,byteSize:24,slot:1,name:"src2",structure:h}],methods:[],template:{memory:{array:bt},slots:{0:{structure:h,memory:{array:pt},slots:{0:{structure:q,memory:{array:ft},slots:{0:{structure:R,memory:{array:$}}}}}},1:{structure:h,memory:{array:dt},slots:{0:{structure:q,memory:{array:ht},slots:{0:{structure:R,memory:{array:$}}}}}}}}},slot:20});Object.assign(ee,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:23});Object.assign(te,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ee}],methods:[],template:null},slot:31});const St=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),gt=new Uint8Array([]),zt=new Uint8Array([104,253,15,0]),Ot=new Uint8Array([4,0,0,0]);Object.assign(M,{...t,type:2,name:"blendmode-color.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:te},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Y},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:w},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:j}],methods:[],template:{memory:{array:St}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:z},{...e,type:7,isRequired:!1,name:"FPixel",structure:Z},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:gt},slots:{0:{structure:b,memory:{array:zt},slots:{0:{structure:u,memory:{array:Ot}}}}}}},slot:30});const Rt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),qt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),wt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(U,{...t,type:2,name:"blendmode-color.KernelOutput(u8,blendmode-color.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:M}],methods:[],template:{memory:{array:Rt},slots:{0:{structure:M,memory:{array:qt},slots:{0:{structure:te,memory:{array:wt},slots:{0:{structure:ee,memory:{array:$}}}}}}}}},slot:29});const jt=new Uint8Array([]);Object.assign(P,{...t,type:2,name:"blendmode-color.KernelParameters(blendmode-color.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:jt}}},slot:32});Object.assign(ae,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(blendmode-color.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:40});Object.assign(ie,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(blendmode-color.createOutput)).Fn.return_type.?).ErrorUnion.error_set!blendmode-color.KernelOutput(u8,blendmode-color.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ae}],methods:[],template:null},slot:35});Object.assign(oe,{...t,type:3,name:"createOutput",length:1,byteSize:84,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:64,bitSize:384,byteSize:48,slot:2,name:"2",structure:A},{...e,type:6,bitOffset:672,bitSize:0,byteSize:0,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ie}],methods:[],template:null},slot:33});Object.assign(le,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(blendmode-color.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:41});Object.assign(ue,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(blendmode-color.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!blendmode-color.KernelOutput(u8,blendmode-color.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:le}],methods:[],template:null},slot:36});Object.assign(me,{...t,type:3,name:"createPartialOutput",length:1,byteSize:92,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:128,bitSize:384,byteSize:48,slot:4,name:"4",structure:A},{...e,type:6,bitOffset:736,bitSize:0,byteSize:0,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ue}],methods:[],template:null},slot:34});const At={argStruct:oe,thunk:5,name:"createOutput"},Ut={argStruct:me,thunk:9,name:"createPartialOutput"};Object.assign(ce,{...t,type:2,name:"blendmode-color",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:$}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ne},{...e,type:7,isRequired:!1,name:"Input",structure:A},{...e,type:7,isRequired:!1,name:"Output",structure:U},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[At,Ut],template:null},slot:0});const Pt=[p,B,L,v,G,H,E,u,b,J,N,x,Q,C,K,g,y,W,T,X,F,ne,z,R,q,l,Y,w,j,D,Z,h,A,ee,te,M,U,P,ae,ie,oe,le,ue,me,ce],It=xe(Pt),kt=ce.constructor,Vt=(async()=>{const a=new URL("blendmode-color-07d9ec70.wasm",import.meta.url).href;return fetch(a)})();Ce(Vt,{...It,writeBack:!0});const{createOutput:Ft,createPartialOutput:_t,kernel:re,Input:vt,Output:Dt,Parameters:Mt}=kt;function Et(a,o,r,s,n={},f={}){if(Array.isArray(n)){const c=n;n={};for(const[m,d]of Object.keys(re.inputImages).entries())n[d]=c[m]}const I=new vt(void 0),k=Object.keys(re.inputImages),i=[];let O;for(const c of k){let m=n[c];if(m||(k.length===1&&["data","width","height"].every(d=>!!n[d])?m=n:i.push(c)),I[c]=m,O){if(m.colorSpace!==O)throw new Error(`Input images must all use the same color space: ${O}`)}else O=m.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const se=_t(a,o,r,s,I,f),ye=c=>{const m=Object.keys(c),d={};for(const be of m){const{data:{typedArray:V},width:pe,height:de}=c[be];let _;if(typeof ImageData=="function"){const he=new Uint8ClampedArray(V.buffer,V.byteOffset,V.byteLength);_=new ImageData(he,pe,s,{colorSpace:O})}else _={data:V,width:pe,height:de};if(m.length===1)return _;d[be]=_}return d};return se[Symbol.toStringTag]==="Promise"?se.then(ye):ye(se)}function xt(){const a={};for(let[o,r]of Object.entries(re)){if(o==="parameters"){const s={};for(const[n,f]of Object.entries(r)){const I=s[n]={};for(let[k,i]of Object.entries(f))typeof i=="object"?"string"in i?i=i.string:i=fe(i):typeof i=="function"&&(i=Ct(i.name)),I[k]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());a[o]=r}return a}function fe(a){const o=[];for(let[r,s]of Object.entries(a))typeof s=="object"&&(s=fe(s)),o[r]=s;return o}function Ct(a){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[a]}onmessage=a=>{const[o,r,...s]=a.data;Kt(o,s).then(([n,f])=>{postMessage([o,r,n],{transfer:f})}).catch(n=>{postMessage(["error",r,n])})};async function Kt(a,o){switch(a){case"getKernelInfo":return[xt(...o)];case"createPartialImageData":const s=await Et(...o),n=[];if("data"in s&&"width"in s&&"height"in s)n.push(s.data.buffer);else for(const f of Object.entries(s))n.push(s.data.buffer);return[s,n];default:throw new Error(`Unknown function: ${a}`)}}
