import{u as ze,a as Oe,b as we,c as Re,d as qe,e as je,f as Ae,g as Ue,h as Pe,i as Ie,j as ke,k as Ve,l as Ce,m as ve,o as Ee,n as xe,p as Ke,q as De}from"./index-ccb3eb7b.js";ze();Oe();we();Re();qe();je();Ae();Ue();Pe();Ie();ke();Ve();Ce();ve();Ee();xe();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},S={},L={},G={},x={},H={},J={},K={},m={},c={},N={},Q={},D={},O={},p={},b={},W={},F={},X={},M={},w={},f={},Y={},_={},Z={},T={},ie={},R={},j={},A={},u={},ee={},U={},te={},z={},P={},se={},re={},$={},I={},k={},oe={},ue={},le={},me={},ce={},ye={},be={};Object.assign(S,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:5});Object.assign(L,{...t,type:1,name:"[3:0]u8",length:3,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:4});Object.assign(G,{...t,type:11,name:"*const [3:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:3});Object.assign(x,{...t,type:11,name:"*const *const [3:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:2});Object.assign(H,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:8});Object.assign(J,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:7});Object.assign(K,{...t,type:11,name:"*const *const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:6});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:10});Object.assign(c,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:9});Object.assign(N,{...t,type:1,name:"[28:0]u8",length:28,byteSize:29,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:13});Object.assign(Q,{...t,type:11,name:"*const [28:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:12});Object.assign(D,{...t,type:11,name:"*const *const [28:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:11});Object.assign(O,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:32});Object.assign(p,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:p}],methods:[],template:null},slot:45});Object.assign(b,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:44});const Fe=new Uint8Array([]),Me=new Uint8Array([248,252,15,0]),_e=new Uint8Array([0,0,0,0,0,0,0,0]),Te=new Uint8Array([32,253,15,0]),$e=new Uint8Array([0,0,0,0,0,0,240,63]),Be=new Uint8Array([88,253,15,0]),Le=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(W,{...t,type:2,name:"Struct0008",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:O},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:b},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:b}],methods:[],template:{memory:{array:Fe},slots:{0:{structure:b,memory:{array:Me},slots:{0:{structure:p,memory:{array:_e}}}},1:{structure:b,memory:{array:Te},slots:{0:{structure:p,memory:{array:$e}}}},2:{structure:b,memory:{array:Be},slots:{0:{structure:p,memory:{array:Le}}}}}}},slot:38});Object.assign(F,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:37});const Ge=new Uint8Array([]),He=new Uint8Array([170,170,170,170]),d=new Uint8Array([]);Object.assign(X,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"intensity",structure:F}],methods:[],template:{memory:{array:Ge},slots:{0:{structure:F,memory:{array:He},slots:{0:{structure:W,memory:{array:d},address:-1431655766}}}}}},slot:15});Object.assign(M,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:14});const Je=new Uint8Array([]),Ne=new Uint8Array([160,249,15,0]),Qe=new Uint8Array([4,0,0,0]);Object.assign(w,{...t,type:2,name:"Struct0009",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:Je},slots:{0:{structure:c,memory:{array:Ne},slots:{0:{structure:m,memory:{array:Qe}}}}}}},slot:40});Object.assign(f,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:w}],methods:[],template:null},slot:39});const We=new Uint8Array([]),Xe=new Uint8Array([170,170,170,170]),Ye=new Uint8Array([170,170,170,170]);Object.assign(Y,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"frontImage",structure:f},{...e,type:8,isRequired:!1,slot:1,name:"backImage",structure:f}],methods:[],template:{memory:{array:We},slots:{0:{structure:f,memory:{array:Xe},slots:{0:{structure:w,memory:{array:d},address:-1431655766}}},1:{structure:f,memory:{array:Ye},slots:{0:{structure:w,memory:{array:d},address:-1431655766}}}}}},slot:17});Object.assign(_,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:16});const Ze=new Uint8Array([]),et=new Uint8Array([170,170,170,170]);Object.assign(Z,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:f}],methods:[],template:{memory:{array:Ze},slots:{0:{structure:f,memory:{array:et},slots:{0:{structure:w,memory:{array:d},address:-1431655766}}}}}},slot:19});Object.assign(T,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:18});const tt=new Uint8Array([]),st=new Uint8Array([]),rt=new Uint8Array([212,249,15,0]),at=new Uint8Array([186,35,16,0]),nt=new Uint8Array([65,73,70,0]),it=new Uint8Array([20,250,15,0]),ot=new Uint8Array([172,35,16,0]),ut=new Uint8Array([65,100,111,98,101,32,83,121,115,116,101,109,115,0]),lt=new Uint8Array([84,250,15,0]),mt=new Uint8Array([2,0,0,0]),ct=new Uint8Array([172,250,15,0]),yt=new Uint8Array([143,35,16,0]),bt=new Uint8Array([67,114,111,115,115,102,97,100,101,32,98,101,116,119,101,101,110,32,116,119,111,32,105,109,97,103,101,115,0]),ft=new Uint8Array([170,170,170,170]),pt=new Uint8Array([170,170,170,170]),dt=new Uint8Array([170,170,170,170]);Object.assign(ie,{...t,type:2,name:"crossfade.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:tt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:x},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:K},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:c},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:D},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:M},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:_},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:T}],methods:[],template:{memory:{array:st},slots:{0:{structure:x,memory:{array:rt},slots:{0:{structure:G,memory:{array:at},slots:{0:{structure:L,memory:{array:nt},address:1057722}}}}},1:{structure:K,memory:{array:it},slots:{0:{structure:J,memory:{array:ot},slots:{0:{structure:H,memory:{array:ut},address:1057708}}}}},2:{structure:c,memory:{array:lt},slots:{0:{structure:m,memory:{array:mt}}}},3:{structure:D,memory:{array:ct},slots:{0:{structure:Q,memory:{array:yt},slots:{0:{structure:N,memory:{array:bt},address:1057679}}}}},4:{structure:M,memory:{array:ft},slots:{0:{structure:X,memory:{array:d},address:-1431655766}}},5:{structure:_,memory:{array:pt},slots:{0:{structure:Y,memory:{array:d},address:-1431655766}}},6:{structure:T,memory:{array:dt},slots:{0:{structure:Z,memory:{array:d},address:-1431655766}}}}}},slot:1});Object.assign(R,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:24});Object.assign(j,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:23});Object.assign(A,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:j}],methods:[],template:null},slot:22});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:25});const St=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ee,{...t,type:9,name:"crossfade.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:St}}},slot:26});Object.assign(U,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:U}],methods:[],template:null},slot:27});Object.assign(te,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:41});const ht=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),gt=new Uint8Array([]),zt=new Uint8Array([136,252,15,0]),Ot=new Uint8Array([4,0,0,0]);Object.assign(z,{...t,type:2,name:"crossfade.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:A},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ee},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:U}],methods:[],template:{memory:{array:ht}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:R},{...e,type:7,isRequired:!1,name:"FPixel",structure:te},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:gt},slots:{0:{structure:c,memory:{array:zt},slots:{0:{structure:m,memory:{array:Ot}}}}}}},slot:21});const wt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Rt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),qt=new Uint8Array([0,0,0,0,0,0,0,0]),B=new Uint8Array([]),jt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),At=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(P,{...t,type:2,name:"crossfade.KernelInput(u8,crossfade.kernel)",length:1,byteSize:48,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"frontImage",structure:z},{...e,type:6,isRequired:!1,bitOffset:192,bitSize:192,byteSize:24,slot:1,name:"backImage",structure:z}],methods:[],template:{memory:{array:wt},slots:{0:{structure:z,memory:{array:Rt},slots:{0:{structure:A,memory:{array:qt},slots:{0:{structure:j,memory:{array:B}}}}}},1:{structure:z,memory:{array:jt},slots:{0:{structure:A,memory:{array:At},slots:{0:{structure:j,memory:{array:B}}}}}}}}},slot:20});Object.assign(se,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:23});Object.assign(re,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:se}],methods:[],template:null},slot:30});const Ut=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Pt=new Uint8Array([]),It=new Uint8Array([72,253,15,0]),kt=new Uint8Array([4,0,0,0]);Object.assign($,{...t,type:2,name:"crossfade.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:re},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ee},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:U}],methods:[],template:{memory:{array:Ut}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:R},{...e,type:7,isRequired:!1,name:"FPixel",structure:te},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:Pt},slots:{0:{structure:c,memory:{array:It},slots:{0:{structure:m,memory:{array:kt}}}}}}},slot:29});const Vt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ct=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),vt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(I,{...t,type:2,name:"crossfade.KernelOutput(u8,crossfade.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:$}],methods:[],template:{memory:{array:Vt},slots:{0:{structure:$,memory:{array:Ct},slots:{0:{structure:re,memory:{array:vt},slots:{0:{structure:se,memory:{array:B}}}}}}}}},slot:28});const Et=new Uint8Array([0,0,0,0]);Object.assign(k,{...t,type:2,name:"crossfade.KernelParameters(crossfade.kernel)",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"intensity",structure:O}],methods:[],template:{memory:{array:Et}}},slot:31});Object.assign(oe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(crossfade.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:42});Object.assign(ue,{...t,type:7,name:"ErrorSet0000!crossfade.KernelOutput(u8,crossfade.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:I},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:oe}],methods:[],template:null},slot:35});Object.assign(le,{...t,type:3,name:"createOutput",length:1,byteSize:88,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:64,bitSize:384,byteSize:48,slot:2,name:"2",structure:P},{...e,type:6,bitOffset:448,bitSize:32,byteSize:4,slot:3,name:"3",structure:k},{...e,type:6,bitOffset:480,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ue}],methods:[],template:null},slot:33});Object.assign(me,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(crossfade.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:43});Object.assign(ce,{...t,type:7,name:"ErrorSet0001!crossfade.KernelOutput(u8,crossfade.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:I},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:me}],methods:[],template:null},slot:36});Object.assign(ye,{...t,type:3,name:"createPartialOutput",length:1,byteSize:96,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:128,bitSize:384,byteSize:48,slot:4,name:"4",structure:P},{...e,type:6,bitOffset:512,bitSize:32,byteSize:4,slot:5,name:"5",structure:k},{...e,type:6,bitOffset:544,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ce}],methods:[],template:null},slot:34});const xt={argStruct:le,thunk:7,name:"createOutput"},Kt={argStruct:ye,thunk:2,name:"createPartialOutput"};Object.assign(be,{...t,type:2,name:"crossfade",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:B}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ie},{...e,type:7,isRequired:!1,name:"Input",structure:P},{...e,type:7,isRequired:!1,name:"Output",structure:I},{...e,type:7,isRequired:!1,name:"Parameters",structure:k}],methods:[xt,Kt],template:null},slot:0});const Dt=[S,L,G,x,H,J,K,m,c,N,Q,D,O,p,b,W,F,X,M,w,f,Y,_,Z,T,ie,R,j,A,u,ee,U,te,z,P,se,re,$,I,k,oe,ue,le,me,ce,ye,be],Ft=Ke(Dt),Mt=be.constructor,_t=(async()=>{const n=new URL("crossfade-726f312e.wasm",import.meta.url).href;return fetch(n)})();De(_t,{...Ft,writeBack:!0});const{createOutput:Nt,createPartialOutput:Tt,kernel:ne,Input:$t,Output:Qt,Parameters:Wt}=Mt;function Bt(n,o,r,s,a={},h={}){if(Array.isArray(a)){const y=a;a={};for(const[l,g]of Object.keys(ne.inputImages).entries())a[g]=y[l]}const V=new $t(void 0),C=Object.keys(ne.inputImages),i=[];let q;for(const y of C){let l=a[y];if(l||(C.length===1&&["data","width","height"].every(g=>!!a[g])?l=a:i.push(y)),V[y]=l,q){if(l.colorSpace!==q)throw new Error(`Input images must all use the same color space: ${q}`)}else q=l.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const ae=Tt(n,o,r,s,V,h),fe=y=>{const l=Object.keys(y),g={};for(const pe of l){const{data:{typedArray:v},width:de,height:he}=y[pe];let E;if(typeof ImageData=="function"){const ge=new Uint8ClampedArray(v.buffer,v.byteOffset,v.byteLength);E=new ImageData(ge,de,s,{colorSpace:q})}else E={data:v,width:de,height:he};if(l.length===1)return E;g[pe]=E}return g};return ae[Symbol.toStringTag]==="Promise"?ae.then(fe):fe(ae)}function Lt(){const n={};for(let[o,r]of Object.entries(ne)){if(o==="parameters"){const s={};for(const[a,h]of Object.entries(r)){const V=s[a]={};for(let[C,i]of Object.entries(h))typeof i=="object"?"string"in i?i=i.string:i=Se(i):typeof i=="function"&&(i=Gt(i.name)),V[C]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[o]=r}return n}function Se(n){const o=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=Se(s)),o[r]=s;return o}function Gt(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,r,...s]=n.data;Ht(o,s).then(([a,h])=>{postMessage([o,r,a],{transfer:h})}).catch(a=>{postMessage(["error",r,a])})};async function Ht(n,o){switch(n){case"getKernelInfo":return[Lt(...o)];case"createPartialImageData":const s=await Bt(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const h of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
