import{u as Pe,a as xe,b as Ie,d as Ce,c as ve,e as Ee,f as Ke,g as Fe,h as De,i as Te,j as Me,k as $e,l as Be,m as Le,n as Ge,o as He,p as Je,q as Ne,r as Qe}from"./index-9f315e7a.js";Pe();xe();Ie();Ce();ve();Ee();Ke();Fe();De();Te();Me();$e();Be();Le();Ge();He();Je();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},h={},H={},J={},I={},N={},Q={},C={},y={},d={},W={},X={},v={},c={},Y={},Z={},E={},l={},r={},ee={},K={},te={},F={},se={},D={},re={},T={},M={},w={},z={},ae={},$={},ie={},B={},fe={},O={},ne={},me={},u={},oe={},q={},V={},ue={},L={},A={},le={},ce={},G={},U={},j={},be={},de={},he={},Se={},ge={},ze={},Oe={};Object.assign(h,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:5});Object.assign(H,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:4});Object.assign(J,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:3});Object.assign(I,{...t,type:11,name:"**const [14:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:2});Object.assign(N,{...t,type:1,name:"[10:0]u8",length:10,byteSize:11,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:8});Object.assign(Q,{...t,type:11,name:"*const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:7});Object.assign(C,{...t,type:11,name:"**const [10:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:6});Object.assign(y,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:10});Object.assign(d,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:9});Object.assign(W,{...t,type:1,name:"[41:0]u8",length:41,byteSize:42,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:13});Object.assign(X,{...t,type:11,name:"*const [41:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:12});Object.assign(v,{...t,type:11,name:"**const [41:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:11});Object.assign(c,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:34});Object.assign(Y,{...t,type:13,name:"@Vector(3, f32)",length:3,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:33});const We=new Uint8Array([]);Object.assign(Z,{...t,type:2,name:"struct{comptime type: type = @Vector(3, f32)}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:Y}],methods:[],template:{memory:{array:We}}},slot:40});Object.assign(E,{...t,type:11,name:"*const struct{comptime type: type = @Vector(3, f32)}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:39});Object.assign(l,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:l}],methods:[],template:null},slot:53});Object.assign(r,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:l}],methods:[],template:null},slot:52});const Xe=new Uint8Array([]),Ye=new Uint8Array([72,30,16,0]),Re=new Uint8Array([0,0,0,0,0,0,0,0]),Ze=new Uint8Array([96,30,16,0]),et=new Uint8Array([0,0,0,0,0,0,8,64]),tt=new Uint8Array([88,30,16,0]),st=new Uint8Array([123,20,174,71,225,122,148,63]);Object.assign(ee,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 3, comptime defaultValue: comptime_float = 0.02}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:Xe},slots:{0:{structure:r,memory:{array:Ye},slots:{0:{structure:l,memory:{array:Re},address:1056328}}},1:{structure:r,memory:{array:Ze},slots:{0:{structure:l,memory:{array:et},address:1056352}}},2:{structure:r,memory:{array:tt},slots:{0:{structure:l,memory:{array:st},address:1056344}}}}}},slot:42});Object.assign(K,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 3, comptime defaultValue: comptime_float = 0.02}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:41});const rt=new Uint8Array([]),at=new Uint8Array([72,30,16,0]),it=new Uint8Array([56,30,16,0]),Ue=new Uint8Array([0,0,0,0,0,0,240,63]),nt=new Uint8Array([80,30,16,0]),mt=new Uint8Array([123,20,174,71,225,122,116,63]);Object.assign(te,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.005}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:rt},slots:{0:{structure:r,memory:{array:at},slots:{0:{structure:l,memory:{array:Re},address:1056328}}},1:{structure:r,memory:{array:it},slots:{0:{structure:l,memory:{array:Ue},address:1056312}}},2:{structure:r,memory:{array:nt},slots:{0:{structure:l,memory:{array:mt},address:1056336}}}}}},slot:44});Object.assign(F,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.005}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:43});const ot=new Uint8Array([]),ut=new Uint8Array([72,30,16,0]),lt=new Uint8Array([64,30,16,0]),ct=new Uint8Array([0,0,0,0,0,0,36,64]),yt=new Uint8Array([56,30,16,0]);Object.assign(se,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:ot},slots:{0:{structure:r,memory:{array:ut},slots:{0:{structure:l,memory:{array:Re},address:1056328}}},1:{structure:r,memory:{array:lt},slots:{0:{structure:l,memory:{array:ct},address:1056320}}},2:{structure:r,memory:{array:yt},slots:{0:{structure:l,memory:{array:Ue},address:1056312}}}}}},slot:46});Object.assign(D,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:45});const pt=new Uint8Array([]),ft=new Uint8Array([170,170,170,170]),f=new Uint8Array([]),bt=new Uint8Array([170,170,170,170]),dt=new Uint8Array([170,170,170,170]),ht=new Uint8Array([170,170,170,170]);Object.assign(re,{...t,type:2,name:"struct{comptime keyColor: struct{comptime type: type = @Vector(3, f32)} = .{.type = @Vector(3, f32)}, comptime tolerance: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 3, comptime defaultValue: comptime_float = 0.02} = .{.type = f32, .minValue = 0, .maxValue = 3, .defaultValue = 0.02}, comptime ramp: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.005} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.005}, comptime gamma: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"keyColor",structure:E},{...e,type:8,isRequired:!1,slot:1,name:"tolerance",structure:K},{...e,type:8,isRequired:!1,slot:2,name:"ramp",structure:F},{...e,type:8,isRequired:!1,slot:3,name:"gamma",structure:D}],methods:[],template:{memory:{array:pt},slots:{0:{structure:E,memory:{array:ft},slots:{0:{structure:Z,memory:{array:f},address:-1431655766}}},1:{structure:K,memory:{array:bt},slots:{0:{structure:ee,memory:{array:f},address:-1431655766}}},2:{structure:F,memory:{array:dt},slots:{0:{structure:te,memory:{array:f},address:-1431655766}}},3:{structure:D,memory:{array:ht},slots:{0:{structure:se,memory:{array:f},address:-1431655766}}}}}},slot:15});Object.assign(T,{...t,type:11,name:"*struct{comptime keyColor: struct{comptime type: type = @Vector(3, f32)} = .{.type = @Vector(3, f32)}, comptime tolerance: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 3, comptime defaultValue: comptime_float = 0.02} = .{.type = f32, .minValue = 0, .maxValue = 3, .defaultValue = 0.02}, comptime ramp: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.005} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.005}, comptime gamma: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 1}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:14});Object.assign(M,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:54});const St=new Uint8Array([]),gt=new Uint8Array([48,30,16,0]),zt=new Uint8Array([4,0,0,0]);Object.assign(w,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:M}],methods:[],template:{memory:{array:St},slots:{0:{structure:M,memory:{array:gt},slots:{0:{structure:y,memory:{array:zt},address:1056304}}}}}},slot:48});Object.assign(z,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:w}],methods:[],template:null},slot:47});const Ot=new Uint8Array([]),Rt=new Uint8Array([170,170,170,170]);Object.assign(ae,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:z}],methods:[],template:{memory:{array:Ot},slots:{0:{structure:z,memory:{array:Rt},slots:{0:{structure:w,memory:{array:f},address:-1431655766}}}}}},slot:17});Object.assign($,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:16});const qt=new Uint8Array([]),Vt=new Uint8Array([170,170,170,170]);Object.assign(ie,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:z}],methods:[],template:{memory:{array:qt},slots:{0:{structure:z,memory:{array:Vt},slots:{0:{structure:w,memory:{array:f},address:-1431655766}}}}}},slot:19});Object.assign(B,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:18});const wt=new Uint8Array([]),At=new Uint8Array([]),Ut=new Uint8Array([204,249,15,0]),jt=new Uint8Array([31,49,16,0]),_t=new Uint8Array([99,111,109,46,113,117,97,115,105,109,111,110,100,111,0]),kt=new Uint8Array([12,250,15,0]),Pt=new Uint8Array([20,49,16,0]),xt=new Uint8Array([81,117,97,115,105,109,111,110,100,111,0]),It=new Uint8Array([76,250,15,0]),Ct=new Uint8Array([1,0,0,0]),vt=new Uint8Array([164,250,15,0]),Et=new Uint8Array([234,48,16,0]),Kt=new Uint8Array([65,32,115,105,109,112,108,101,32,100,105,102,102,101,114,101,110,99,101,32,107,101,121,32,102,111,114,32,99,104,114,111,109,97,32,107,101,121,105,110,103,0]),Ft=new Uint8Array([170,170,170,170]),Dt=new Uint8Array([170,170,170,170]),Tt=new Uint8Array([170,170,170,170]);Object.assign(fe,{...t,type:2,name:"difference-key.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:wt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:I},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:C},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:d},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:v},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:T},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:$},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:B}],methods:[],template:{memory:{array:At},slots:{0:{structure:I,memory:{array:Ut},slots:{0:{structure:J,memory:{array:jt},slots:{0:{structure:H,memory:{array:_t},address:1061151}}}}},1:{structure:C,memory:{array:kt},slots:{0:{structure:Q,memory:{array:Pt},slots:{0:{structure:N,memory:{array:xt},address:1061140}}}}},2:{structure:d,memory:{array:It},slots:{0:{structure:y,memory:{array:Ct}}}},3:{structure:v,memory:{array:vt},slots:{0:{structure:X,memory:{array:Et},slots:{0:{structure:W,memory:{array:Kt},address:1061098}}}}},4:{structure:T,memory:{array:Ft},slots:{0:{structure:re,memory:{array:f},address:-1431655766}}},5:{structure:$,memory:{array:Dt},slots:{0:{structure:ae,memory:{array:f},address:-1431655766}}},6:{structure:B,memory:{array:Tt},slots:{0:{structure:ie,memory:{array:f},address:-1431655766}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:24});Object.assign(ne,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(me,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ne}],methods:[],template:null},slot:22});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:25});const Mt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(oe,{...t,type:9,name:"difference-key.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:y},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:y}],methods:[],template:{memory:{array:Mt}}},slot:26});Object.assign(q,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:q}],methods:[],template:null},slot:27});Object.assign(V,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:V}],methods:[],template:null},slot:28});Object.assign(ue,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:49});const $t=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Bt=new Uint8Array([]),Lt=new Uint8Array([104,253,15,0]),Gt=new Uint8Array([4,0,0,0]);Object.assign(L,{...t,type:2,name:"difference-key.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:me},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:oe},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:q},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:V}],methods:[],template:{memory:{array:$t}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:ue},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Bt},slots:{0:{structure:d,memory:{array:Lt},slots:{0:{structure:y,memory:{array:Gt}}}}}}},slot:21});const Ht=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Jt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Nt=new Uint8Array([0,0,0,0,0,0,0,0]),qe=new Uint8Array([]);Object.assign(A,{...t,type:2,name:"difference-key.KernelInput(u8,difference-key.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:L}],methods:[],template:{memory:{array:Ht},slots:{0:{structure:L,memory:{array:Jt},slots:{0:{structure:me,memory:{array:Nt},slots:{0:{structure:ne,memory:{array:qe}}}}}}}}},slot:20});Object.assign(le,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(ce,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:le}],methods:[],template:null},slot:31});const Qt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Wt=new Uint8Array([]),Xt=new Uint8Array([104,253,15,0]),Yt=new Uint8Array([4,0,0,0]);Object.assign(G,{...t,type:2,name:"difference-key.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ce},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:oe},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:q},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:V}],methods:[],template:{memory:{array:Qt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:ue},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Wt},slots:{0:{structure:d,memory:{array:Xt},slots:{0:{structure:y,memory:{array:Yt}}}}}}},slot:30});const Zt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),es=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ts=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(U,{...t,type:2,name:"difference-key.KernelOutput(u8,difference-key.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:G}],methods:[],template:{memory:{array:Zt},slots:{0:{structure:G,memory:{array:es},slots:{0:{structure:ce,memory:{array:ts},slots:{0:{structure:le,memory:{array:qe}}}}}}}}},slot:29});const ss=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,215,163,60,10,215,163,59,0,0,128,63,0,0,0,0]);Object.assign(j,{...t,type:2,name:"difference-key.KernelParameters(difference-key.kernel)",length:1,byteSize:32,align:4,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:96,byteSize:16,slot:0,name:"keyColor",structure:Y},{...e,type:4,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:1,name:"tolerance",structure:c},{...e,type:4,isRequired:!1,bitOffset:160,bitSize:32,byteSize:4,slot:2,name:"ramp",structure:c},{...e,type:4,isRequired:!1,bitOffset:192,bitSize:32,byteSize:4,slot:3,name:"gamma",structure:c}],methods:[],template:{memory:{array:ss}}},slot:32});Object.assign(be,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(difference-key.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:50});Object.assign(de,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(difference-key.createOutput)).Fn.return_type.?).ErrorUnion.error_set!difference-key.KernelOutput(u8,difference-key.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:be}],methods:[],template:null},slot:37});Object.assign(he,{...t,type:3,name:"createOutput",length:1,byteSize:96,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:320,bitSize:192,byteSize:24,slot:2,name:"2",structure:A},{...e,type:6,bitOffset:0,bitSize:256,byteSize:32,slot:3,name:"3",structure:j},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:4,name:"retval",structure:de}],methods:[],template:null},slot:35});Object.assign(Se,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(difference-key.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:51});Object.assign(ge,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(difference-key.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!difference-key.KernelOutput(u8,difference-key.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Se}],methods:[],template:null},slot:38});Object.assign(ze,{...t,type:3,name:"createPartialOutput",length:1,byteSize:112,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:320,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:352,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:384,bitSize:192,byteSize:24,slot:4,name:"4",structure:A},{...e,type:6,bitOffset:0,bitSize:256,byteSize:32,slot:5,name:"5",structure:j},{...e,type:6,bitOffset:576,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ge}],methods:[],template:null},slot:36});const rs={argStruct:he,thunk:8,name:"createOutput"},as={argStruct:ze,thunk:2,name:"createPartialOutput"};Object.assign(Oe,{...t,type:2,name:"difference-key",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:qe}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:fe},{...e,type:7,isRequired:!1,name:"Input",structure:A},{...e,type:7,isRequired:!1,name:"Output",structure:U},{...e,type:7,isRequired:!1,name:"Parameters",structure:j}],methods:[rs,as],template:null},slot:0});const is=[h,H,J,I,N,Q,C,y,d,W,X,v,c,Y,Z,E,l,r,ee,K,te,F,se,D,re,T,M,w,z,ae,$,ie,B,fe,O,ne,me,u,oe,q,V,ue,L,A,le,ce,G,U,j,be,de,he,Se,ge,ze,Oe],ns=Ne(is),ms=Oe.constructor,os=(async()=>{const n=new URL("difference-key-a5d900b3.wasm",import.meta.url).href;return fetch(n)})();Qe(os,{...ns,writeBack:!0});const{createOutput:ds,createPartialOutput:us,kernel:pe,Input:ls,Output:hs,Parameters:Ss}=ms;function cs(n,o,a,s,i={},S={}){if(Array.isArray(i)){const b=i;i={};for(const[p,g]of Object.keys(pe.inputImages).entries())i[g]=b[p]}const _=new ls(void 0),k=Object.keys(pe.inputImages),m=[];let R;for(const b of k){let p=i[b];if(p||(k.length===1&&["data","width","height"].every(g=>!!i[g])?p=i:m.push(b)),_[b]=p,R){if(p.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=p.colorSpace}if(m.length>0)throw new Error(`Missing input image${m.length>1?"s":""}: ${m.join(", ")}`);const ye=us(n,o,a,s,_,S),Ve=b=>{const p=Object.keys(b),g={};for(const we of p){const{data:{typedArray:P},width:Ae,height:_e}=b[we];let x;if(typeof ImageData=="function"){const ke=new Uint8ClampedArray(P.buffer,P.byteOffset,P.byteLength);x=new ImageData(ke,Ae,s,{colorSpace:R})}else x={data:P,width:Ae,height:_e};if(p.length===1)return x;g[we]=x}return g};return ye[Symbol.toStringTag]==="Promise"?ye.then(Ve):Ve(ye)}function ys(){const n={};for(let[o,a]of Object.entries(pe)){if(o==="parameters"){const s={};for(const[i,S]of Object.entries(a)){const _=s[i]={};for(let[k,m]of Object.entries(S))typeof m=="object"?"string"in m?m=m.string:m=je(m):typeof m=="function"&&(m=ps(m.name)),_[k]=m}a=s}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());n[o]=a}return n}function je(n){const o=[];for(let[a,s]of Object.entries(n))typeof s=="object"&&(s=je(s)),o[a]=s;return o}function ps(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,a,...s]=n.data;fs(o,s).then(([i,S])=>{postMessage([o,a,i],{transfer:S})}).catch(i=>{postMessage(["error",a,i])})};async function fs(n,o){switch(n){case"getKernelInfo":return[ys(...o)];case"createPartialImageData":const s=await cs(...o),i=[];if("data"in s&&"width"in s&&"height"in s)i.push(s.data.buffer);else for(const S of Object.entries(s))i.push(s.data.buffer);return[s,i];default:throw new Error(`Unknown function: ${n}`)}}
