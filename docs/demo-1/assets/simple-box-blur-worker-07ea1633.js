import{u as Ot,a as St,b as zt,c as ht,d as jt,e as dt,f as wt,g as At,h as Ut,i as Pt,j as xt,k as It,l as Rt,m as kt,n as qt,o as Vt,p as vt,q as Et,r as Ct,s as Kt}from"./index-58d89d46.js";Ot();xt();It();St();zt();Rt();kt();qt();ht();jt();dt();wt();Vt();vt();Kt();At();Et();Ut();Pt();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:0,align:0,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null}},e={type:0,isRequired:!1},r={},p={},C={},K={},D={},_={},b={},f={},F={},M={},T={},z={},$={},L={},Y={},A={},B={},U={},c={},l={},d={},v={},Z={},G={},P={},H={},x={},J={},I={},R={},w={},ee={},te={},E={},se={},re={},ne={},ge={},N={},Oe={},Se={},ae={},ze={},ie={},he={},je={},de={},we={},Ae={},Ue={},Pe={},xe={},Ie={},Re={},ke={},qe={},Ve={},ve={},Ee={},Ce={},Ke={},oe={},De={},_e={},ue={},Fe={},ce={},Me={},Te={},$e={},Le={},Be={},Ge={},He={},me={},Je={},Ne={},Qe={},We={},Xe={},Ye={},Ze={},et={},tt={},be={},st={},rt={},nt={},at={},it={},ot={},ut={},ct={},mt={},bt={},Dt=new Uint8Array,_t=new Uint8Array([4]),Ft=new Uint8Array,Mt=new Uint8Array,Tt=new Uint8Array([250,4,0,1]),$t=new Uint8Array([65,73,70,0]),Lt=new Uint8Array([9,5,0,1]),Bt=new Uint8Array([65,100,111,98,101,32,83,121,115,116,101,109,115,0]),Gt=new Uint8Array,Ht=new Uint8Array([2]),Jt=new Uint8Array([40,5,0,1]),Nt=new Uint8Array([65,32,115,105,109,112,108,101,32,102,105,120,101,100,45,115,105,122,101,32,98,111,120,32,98,108,117,114,0]),Qt=new Uint8Array,Wt=new Uint8Array,Xt=new Uint8Array,Yt=new Uint8Array([0]),Zt=new Uint8Array([1]),yt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),es=new Uint8Array,ts=new Uint8Array,ss=new Uint8Array,rs=new Uint8Array,ns=new Uint8Array([4]),ye=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),lt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),as=new Uint8Array,is=new Uint8Array,os=new Uint8Array,us=new Uint8Array,cs=new Uint8Array([4]),le=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ms=new Uint8Array([27,0]),bs=new Uint8Array,ys=new Uint8Array,ls=new Uint8Array,ps=new Uint8Array;Object.assign(ge,{slots:{0:N}});Object.assign(N,{structure:b,memory:{array:Dt},slots:{0:Oe}});Object.assign(Oe,{structure:f,memory:{array:_t}});Object.assign(Se,{slots:{0:ae}});Object.assign(ae,{structure:z,memory:{array:Ft},slots:{0:N}});Object.assign(ze,{slots:{0:ie}});Object.assign(ie,{structure:z,memory:{array:Mt},slots:{0:N}});Object.assign(he,{slots:{0:je,1:we,2:Ue,3:xe,4:Re,5:ke,6:qe}});Object.assign(je,{structure:K,memory:{array:Tt},slots:{0:de}});Object.assign(de,{structure:C,memory:{array:$t},reloc:16778490,const:!0});Object.assign(we,{structure:_,memory:{array:Lt},slots:{0:Ae}});Object.assign(Ae,{structure:D,memory:{array:Bt},reloc:16778505,const:!0});Object.assign(Ue,{structure:b,memory:{array:Gt},slots:{0:Pe}});Object.assign(Pe,{structure:f,memory:{array:Ht}});Object.assign(xe,{structure:M,memory:{array:Jt},slots:{0:Ie}});Object.assign(Ie,{structure:F,memory:{array:Nt},reloc:16778536,const:!0});Object.assign(Re,{structure:T,memory:{array:Qt}});Object.assign(ke,{structure:$,memory:{array:Wt},slots:{0:ae}});Object.assign(qe,{structure:L,memory:{array:Xt},slots:{0:ie}});Object.assign(Ve,{slots:{0:ve,1:Ee}});Object.assign(ve,{structure:l,memory:{array:Yt}});Object.assign(Ee,{structure:l,memory:{array:Zt}});Object.assign(Ce,{memory:{array:yt},slots:{0:Ke}});Object.assign(Ke,{structure:U,memory:{array:yt,offset:0,length:8},slots:{0:oe}});Object.assign(oe,{structure:B,memory:{array:es},reloc:0,const:!0});Object.assign(De,{slots:{0:_e,1:Fe,2:Me}});Object.assign(_e,{structure:r,memory:{array:ts},slots:{0:ue}});Object.assign(ue,{structure:A});Object.assign(Fe,{structure:r,memory:{array:ss},slots:{0:ce}});Object.assign(ce,{structure:Z});Object.assign(Me,{structure:b,memory:{array:rs},slots:{0:Te}});Object.assign(Te,{structure:f,memory:{array:ns}});Object.assign($e,{memory:{array:ye},slots:{0:Le}});Object.assign(Le,{structure:G,memory:{array:ye},slots:{0:Be}});Object.assign(Be,{structure:U,memory:{array:ye,offset:0,length:8},slots:{0:oe}});Object.assign(Ge,{memory:{array:lt},slots:{0:He}});Object.assign(He,{structure:x,memory:{array:lt,offset:0,length:8},slots:{0:me}});Object.assign(me,{structure:H,memory:{array:as},reloc:0});Object.assign(Je,{slots:{0:Ne,1:Qe,2:We}});Object.assign(Ne,{structure:r,memory:{array:is},slots:{0:ue}});Object.assign(Qe,{structure:r,memory:{array:os},slots:{0:ce}});Object.assign(We,{structure:b,memory:{array:us},slots:{0:Xe}});Object.assign(Xe,{structure:f,memory:{array:cs}});Object.assign(Ye,{memory:{array:le},slots:{0:Ze}});Object.assign(Ze,{structure:J,memory:{array:le},slots:{0:et}});Object.assign(et,{structure:x,memory:{array:le,offset:0,length:8},slots:{0:me}});Object.assign(tt,{slots:{0:be}});Object.assign(be,{structure:w,memory:{array:ms}});Object.assign(st,{slots:{0:be}});Object.assign(rt,{slots:{0:nt,1:it,2:ut,3:mt}});Object.assign(nt,{structure:r,memory:{array:bs},slots:{0:at}});Object.assign(at,{structure:Y});Object.assign(it,{structure:r,memory:{array:ys},slots:{0:ot}});Object.assign(ot,{structure:P});Object.assign(ut,{structure:r,memory:{array:ls},slots:{0:ct}});Object.assign(ct,{structure:I});Object.assign(mt,{structure:r,memory:{array:ps},slots:{0:bt}});Object.assign(bt,{structure:R});const fs={argStruct:te,thunkId:2,name:"createOutput"},gs={argStruct:re,thunkId:3,name:"createPartialOutput"};Object.assign(r,{...t,name:"type",align:1,instance:{members:[{...e,type:8,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:r}],methods:[]}});Object.assign(p,{...t,name:"u8",byteSize:1,align:1,instance:{members:[{...e,type:3,bitOffset:0,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(C,{...t,type:1,name:"[3:0]u8",length:3,byteSize:4,align:1,instance:{members:[{...e,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(K,{...t,type:13,name:"*const [3:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:7,bitSize:32,byteSize:4,slot:0,structure:C}],methods:[]}});Object.assign(D,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:1,instance:{members:[{...e,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(_,{...t,type:13,name:"*const [13:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:7,bitSize:32,byteSize:4,slot:0,structure:D}],methods:[]}});Object.assign(b,{...t,name:"comptime_int",align:1,instance:{members:[{...e,type:9,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:b}],methods:[]}});Object.assign(f,{...t,name:"i8",byteSize:1,align:1,instance:{members:[{...e,type:2,bitOffset:0,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign(F,{...t,type:1,name:"[28:0]u8",length:28,byteSize:29,align:1,instance:{members:[{...e,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(M,{...t,type:13,name:"*const [28:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:7,bitSize:32,byteSize:4,slot:0,structure:F}],methods:[]}});Object.assign(T,{...t,type:2,name:"Struct2871943947",align:1});Object.assign(z,{...t,type:2,name:"Struct3832472641",align:1,instance:{members:[{...e,type:9,slot:0,name:"channels",structure:b}],methods:[],template:ge}});Object.assign($,{...t,type:2,name:"Struct2242867897",align:1,instance:{members:[{...e,type:9,slot:0,name:"src",structure:z}],methods:[],template:Se}});Object.assign(L,{...t,type:2,name:"Struct172100005",align:1,instance:{members:[{...e,type:9,slot:0,name:"dst",structure:z}],methods:[],template:ze}});Object.assign(Y,{...t,type:2,name:"simple-box-blur.kernel",align:1,static:{members:[{...e,type:9,slot:0,name:"namespace",structure:K},{...e,type:9,slot:1,name:"vendor",structure:_},{...e,type:9,slot:2,name:"version",structure:b},{...e,type:9,slot:3,name:"description",structure:M},{...e,type:9,slot:4,name:"parameters",structure:T},{...e,type:9,slot:5,name:"inputImages",structure:$},{...e,type:9,slot:6,name:"outputImages",structure:L}],methods:[],template:he}});Object.assign(A,{...t,type:15,name:"@Vector(4, u8)",length:4,byteSize:4,align:4,instance:{members:[{...e,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(B,{...t,type:14,name:"[_]const @Vector(4, u8)",length:0,byteSize:4,align:4,instance:{members:[{...e,type:7,bitSize:32,byteSize:4,structure:A}],methods:[]}});Object.assign(U,{...t,type:13,name:"[]const @Vector(4, u8)",byteSize:8,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:7,bitSize:64,byteSize:8,slot:0,structure:B}],methods:[]}});Object.assign(c,{...t,name:"u32",byteSize:4,align:4,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[]}});Object.assign(l,{...t,type:11,name:"simple-box-blur.ColorSpace",byteSize:1,align:1,instance:{members:[{...e,type:3,bitOffset:0,bitSize:8,byteSize:1}],methods:[]},static:{members:[{...e,type:9,slot:0,name:"srgb",structure:l},{...e,type:9,slot:1,name:"display-p3",structure:l}],methods:[],template:Ve}});Object.assign(d,{...t,name:"usize",byteSize:4,align:4,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:d}],methods:[]}});Object.assign(v,{...t,name:"f32",byteSize:4,align:4,instance:{members:[{...e,type:4,bitOffset:0,bitSize:32,byteSize:4,structure:v}],methods:[]}});Object.assign(Z,{...t,type:15,name:"@Vector(4, f32)",length:4,byteSize:16,align:16,instance:{members:[{...e,type:4,bitSize:32,byteSize:4,structure:v}],methods:[]}});Object.assign(G,{...t,type:2,name:"simple-box-blur.Image(u8,4,false)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...e,type:7,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:U},{...e,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...e,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...e,type:5,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:l},{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:d}],methods:[],template:Ce},static:{members:[{...e,type:9,slot:0,name:"Pixel",structure:r},{...e,type:9,slot:1,name:"FPixel",structure:r},{...e,type:9,slot:2,name:"channels",structure:b}],methods:[],template:De}});Object.assign(P,{...t,type:2,name:"simple-box-blur.KernelInput(u8,simple-box-blur.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...e,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:G}],methods:[],template:$e}});Object.assign(H,{...t,type:14,name:"[_]@Vector(4, u8)",length:0,byteSize:4,align:4,instance:{members:[{...e,type:7,bitSize:32,byteSize:4,structure:A}],methods:[]}});Object.assign(x,{...t,type:13,name:"[]@Vector(4, u8)",byteSize:8,align:4,hasPointer:!0,instance:{members:[{...e,type:7,bitSize:64,byteSize:8,slot:0,structure:H}],methods:[]}});Object.assign(J,{...t,type:2,name:"simple-box-blur.Image(u8,4,true)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...e,type:7,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:x},{...e,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...e,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...e,type:5,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:l},{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:d}],methods:[],template:Ge},static:{members:[{...e,type:9,slot:0,name:"Pixel",structure:r},{...e,type:9,slot:1,name:"FPixel",structure:r},{...e,type:9,slot:2,name:"channels",structure:b}],methods:[],template:Je}});Object.assign(I,{...t,type:2,name:"simple-box-blur.KernelOutput(u8,simple-box-blur.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...e,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:J}],methods:[],template:Ye}});Object.assign(R,{...t,type:2,name:"simple-box-blur.KernelParameters(simple-box-blur.kernel)",align:1});Object.assign(w,{...t,type:10,name:"@typeInfo(@typeInfo(@TypeOf(simple-box-blur.createOutput)).Fn.return_type.?).ErrorUnion.error_set",byteSize:2,align:2,instance:{members:[{...e,type:3,bitOffset:0,bitSize:16,byteSize:2}],methods:[]},static:{members:[{...e,type:9,slot:0,name:"OutOfMemory",structure:w}],methods:[],template:tt}});Object.assign(ee,{...t,type:9,name:"ErrorSet2555685685!simple-box-blur.KernelOutput(u8,simple-box-blur.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...e,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:I},{...e,type:6,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:w}],methods:[]}});Object.assign(te,{...t,type:5,name:"createOutput",byteSize:60,align:4,hasPointer:!0,instance:{members:[{...e,type:3,isRequired:!0,bitOffset:0,bitSize:32,byteSize:4,slot:3,name:"0",structure:c},{...e,type:3,isRequired:!0,bitOffset:32,bitSize:32,byteSize:4,slot:4,name:"1",structure:c},{...e,type:7,isRequired:!0,bitOffset:64,bitSize:192,byteSize:24,slot:0,name:"2",structure:P},{...e,type:7,isRequired:!0,bitOffset:480,bitSize:0,byteSize:0,slot:1,name:"3",structure:R},{...e,type:7,isRequired:!0,bitOffset:256,bitSize:224,byteSize:28,slot:2,name:"retval",structure:ee}],methods:[]}});Object.assign(E,{...t,type:10,name:"@typeInfo(@typeInfo(@TypeOf(simple-box-blur.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",byteSize:2,align:2,instance:{members:[{...e,type:3,bitOffset:0,bitSize:16,byteSize:2}],methods:[]},static:{members:[{...e,type:9,slot:0,name:"OutOfMemory",structure:E}],methods:[],template:st}});Object.assign(se,{...t,type:9,name:"ErrorSet2195175974!simple-box-blur.KernelOutput(u8,simple-box-blur.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...e,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:I},{...e,type:6,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:E}],methods:[]}});Object.assign(re,{...t,type:5,name:"createPartialOutput",byteSize:68,align:4,hasPointer:!0,instance:{members:[{...e,type:3,isRequired:!0,bitOffset:0,bitSize:32,byteSize:4,slot:3,name:"0",structure:c},{...e,type:3,isRequired:!0,bitOffset:32,bitSize:32,byteSize:4,slot:4,name:"1",structure:c},{...e,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:5,name:"2",structure:c},{...e,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:6,name:"3",structure:c},{...e,type:7,isRequired:!0,bitOffset:128,bitSize:192,byteSize:24,slot:0,name:"4",structure:P},{...e,type:7,isRequired:!0,bitOffset:544,bitSize:0,byteSize:0,slot:1,name:"5",structure:R},{...e,type:7,isRequired:!0,bitOffset:320,bitSize:224,byteSize:28,slot:2,name:"retval",structure:se}],methods:[]}});Object.assign(ne,{...t,type:2,name:"simple-box-blur",align:1,static:{members:[{...e,type:9,slot:0,name:"kernel",structure:r},{...e,type:9,slot:1,name:"Input",structure:r},{...e,type:9,slot:2,name:"Output",structure:r},{...e,type:9,slot:3,name:"Parameters",structure:r}],methods:[fs,gs],template:rt}});const Os=[r,p,C,K,D,_,b,f,F,M,T,z,$,L,Y,A,B,U,c,l,d,v,Z,G,P,H,x,J,I,R,w,ee,te,E,se,re,ne],Ss=ne,zs={runtimeSafety:!1,littleEndian:!0},Q=Ct();Q.getControlObject();Q.recreateStructures(Os,zs);const hs=(async()=>{const i=new URL("simple-box-blur-a11d46b7.wasm",import.meta.url).href;return fetch(i)})();Q.loadModule(hs);Q.linkVariables(!0);const{constructor:js}=Ss,{createPartialOutput:ds,Input:ws,kernel:X}=js;function As(i,o,n,s,a={},g={}){const O=[];for(const[m]of X.inputImages)O.push(m);const h=[];for(const[m]of X.outputImages)h.push(m);if(Array.isArray(a)){const m=a;a={};for(const[y,S]of O.entries())a[S]=m[y]}const u=new ws(void 0),k=[];let j;for(const m of O){let y=a[m];if(y||(O.length===1&&["data","width","height"].every(S=>!!a[S])?y=a:k.push(m)),u[m]=y,j){if(y.colorSpace!==j)throw new Error(`Input images must all use the same color space: ${j}`)}else j=y.colorSpace}if(k.length>0)throw new Error(`Missing input image${k.length>1?"s":""}: ${k.join(", ")}`);const W=ds(i,o,n,s,u,g),pe=m=>{const y={};for(const S of h){const{data:{typedArray:q},width:fe,height:ft}=m[S];let V;if(typeof ImageData=="function"){const gt=new Uint8ClampedArray(q.buffer,q.byteOffset,q.byteLength);V=new ImageData(gt,fe,s,{colorSpace:j})}else V={data:q,width:fe,height:ft};if(h.length===1)return V;y[S]=V}return y};return W[Symbol.toStringTag]==="Promise"?W.then(pe):pe(W)}function Us(){const i={};for(let[o,n]of X){if(o==="parameters"){const s={};for(const[a,g]of n){const O=s[a]={};for(let[h,u]of g)typeof u=="object"?"string"in u?u=u.string:u=pt(u):typeof u=="function"&&(u=Ps(u.name)),O[h]=u}n=s}else typeof n=="object"&&("string"in n?n=n.string:n=n.valueOf());i[o]=n}return i}function pt(i){const o=[];for(let[n,s]of i)typeof s=="object"&&(s=pt(s)),o[n]=s;return o}function Ps(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[o,n,...s]=i.data;xs(o,s).then(([a,g])=>{postMessage([o,n,a],{transfer:g})}).catch(a=>{postMessage(["error",n,a])})};async function xs(i,o){switch(i){case"getKernelInfo":return[Us(...o)];case"createPartialImageData":const s=await As(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const g of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${i}`)}}
