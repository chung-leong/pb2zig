import{u as He,a as Je,b as Ne,c as Qe,d as We,e as Xe,f as Ye,g as Ze,h as et,i as tt,j as st,k as rt,l as at,m as mt,n as it,o as ot,p as nt,q as ut,r as lt}from"./index-9f315e7a.js";He();Je();Ne();Qe();We();Xe();Ye();Ze();et();tt();st();rt();at();mt();it();ot();nt();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},h={},ee={},te={},E={},se={},re={},v={},p={},d={},ae={},me={},F={},o={},r={},s={},ie={},D={},oe={},K={},ne={},B={},ue={},le={},T={},ce={},M={},ye={},G={},pe={},$={},fe={},L={},be={},H={},de={},J={},he={},N={},Q={},A={},z={},ge={},W={},Se={},X={},Ue={},_={},ze={},Ve={},y={},_e={},R={},q={},Oe={},Y={},U={},Re={},qe={},Z={},j={},x={},je={},xe={},Pe={},Ie={},Ce={},ke={},Ee={};Object.assign(h,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:5});Object.assign(ee,{...t,type:1,name:"[26:0]u8",length:26,byteSize:27,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:4});Object.assign(te,{...t,type:11,name:"*const [26:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:3});Object.assign(E,{...t,type:11,name:"**const [26:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:2});Object.assign(se,{...t,type:1,name:"[31:0]u8",length:31,byteSize:32,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:8});Object.assign(re,{...t,type:11,name:"*const [31:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:7});Object.assign(v,{...t,type:11,name:"**const [31:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:6});Object.assign(p,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:10});Object.assign(d,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:9});Object.assign(ae,{...t,type:1,name:"[58:0]u8",length:58,byteSize:59,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:13});Object.assign(me,{...t,type:11,name:"*const [58:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:12});Object.assign(F,{...t,type:11,name:"**const [58:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:11});Object.assign(o,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:o}],methods:[],template:null},slot:33});Object.assign(r,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:r}],methods:[],template:null},slot:59});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:r}],methods:[],template:null},slot:58});const ct=new Uint8Array([]),yt=new Uint8Array([48,30,16,0]),V=new Uint8Array([0,0,0,0,0,0,0,0]),pt=new Uint8Array([144,30,16,0]),ft=new Uint8Array([0,0,0,0,0,0,89,64]),bt=new Uint8Array([136,30,16,0]),Te=new Uint8Array([0,0,0,0,0,0,36,64]);Object.assign(ie,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 10}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:ct},slots:{0:{structure:s,memory:{array:yt},slots:{0:{structure:r,memory:{array:V},address:1056304}}},1:{structure:s,memory:{array:pt},slots:{0:{structure:r,memory:{array:ft},address:1056400}}},2:{structure:s,memory:{array:bt},slots:{0:{structure:r,memory:{array:Te},address:1056392}}}}}},slot:40});Object.assign(D,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 10}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:39});const dt=new Uint8Array([]),ht=new Uint8Array([48,30,16,0]),gt=new Uint8Array([136,30,16,0]),St=new Uint8Array([56,30,16,0]),w=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(oe,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:dt},slots:{0:{structure:s,memory:{array:ht},slots:{0:{structure:r,memory:{array:V},address:1056304}}},1:{structure:s,memory:{array:gt},slots:{0:{structure:r,memory:{array:Te},address:1056392}}},2:{structure:s,memory:{array:St},slots:{0:{structure:r,memory:{array:w},address:1056312}}}}}},slot:42});Object.assign(K,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:41});const zt=new Uint8Array([]),Vt=new Uint8Array([128,30,16,0]),_t=new Uint8Array([123,20,174,71,225,122,132,63]),Ot=new Uint8Array([120,30,16,0]),Rt=new Uint8Array([0,0,0,0,0,0,8,64]),qt=new Uint8Array([88,30,16,0]),Me=new Uint8Array([0,0,0,0,0,0,0,64]);Object.assign(ne,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 3, comptime defaultValue: comptime_float = 2}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:zt},slots:{0:{structure:s,memory:{array:Vt},slots:{0:{structure:r,memory:{array:_t},address:1056384}}},1:{structure:s,memory:{array:Ot},slots:{0:{structure:r,memory:{array:Rt},address:1056376}}},2:{structure:s,memory:{array:qt},slots:{0:{structure:r,memory:{array:Me},address:1056344}}}}}},slot:44});Object.assign(B,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 3, comptime defaultValue: comptime_float = 2}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:43});Object.assign(ue,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:o}],methods:[],template:null},slot:34});const wt=new Uint8Array([]),At=new Uint8Array([64,30,16,0]),Be=new Uint8Array([0,0,0,0,0,0,240,191]),Ut=new Uint8Array([64,30,16,0]);Object.assign(le,{...t,type:2,name:"struct{comptime comptime_float = -1, comptime comptime_float = -1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:wt},slots:{0:{structure:s,memory:{array:At},slots:{0:{structure:r,memory:{array:Be},address:1056320}}},1:{structure:s,memory:{array:Ut},slots:{0:{structure:r,memory:{array:Be},address:1056320}}}}}},slot:61});Object.assign(T,{...t,type:11,name:"*const struct{comptime comptime_float = -1, comptime comptime_float = -1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:60});const jt=new Uint8Array([]),xt=new Uint8Array([56,30,16,0]),Pt=new Uint8Array([56,30,16,0]);Object.assign(ce,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:jt},slots:{0:{structure:s,memory:{array:xt},slots:{0:{structure:r,memory:{array:w},address:1056312}}},1:{structure:s,memory:{array:Pt},slots:{0:{structure:r,memory:{array:w},address:1056312}}}}}},slot:63});Object.assign(M,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:62});const It=new Uint8Array([]),Ct=new Uint8Array([48,30,16,0]),kt=new Uint8Array([48,30,16,0]);Object.assign(ye,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:It},slots:{0:{structure:s,memory:{array:Ct},slots:{0:{structure:r,memory:{array:V},address:1056304}}},1:{structure:s,memory:{array:kt},slots:{0:{structure:r,memory:{array:V},address:1056304}}}}}},slot:65});Object.assign(G,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:64});const Et=new Uint8Array([]),vt=new Uint8Array([170,170,170,170]),l=new Uint8Array([]),Ft=new Uint8Array([170,170,170,170]),Dt=new Uint8Array([170,170,170,170]);Object.assign(pe,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:ue},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:T},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:M},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:G}],methods:[],template:{memory:{array:Et},slots:{0:{structure:T,memory:{array:vt},slots:{0:{structure:le,memory:{array:l},address:-1431655766}}},1:{structure:M,memory:{array:Ft},slots:{0:{structure:ce,memory:{array:l},address:-1431655766}}},2:{structure:G,memory:{array:Dt},slots:{0:{structure:ye,memory:{array:l},address:-1431655766}}}}}},slot:46});Object.assign($,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pe}],methods:[],template:null},slot:45});const Kt=new Uint8Array([]),Bt=new Uint8Array([112,30,16,0]),Tt=new Uint8Array([154,153,153,153,153,153,185,191]),Mt=new Uint8Array([104,30,16,0]),Gt=new Uint8Array([154,153,153,153,153,153,185,63]),$t=new Uint8Array([96,30,16,0]),Lt=new Uint8Array([123,20,174,71,225,122,148,63]);Object.assign(fe,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = -0.1, comptime maxValue: comptime_float = 0.1, comptime defaultValue: comptime_float = 0.02}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Kt},slots:{0:{structure:s,memory:{array:Bt},slots:{0:{structure:r,memory:{array:Tt},address:1056368}}},1:{structure:s,memory:{array:Mt},slots:{0:{structure:r,memory:{array:Gt},address:1056360}}},2:{structure:s,memory:{array:$t},slots:{0:{structure:r,memory:{array:Lt},address:1056352}}}}}},slot:48});Object.assign(L,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = -0.1, comptime maxValue: comptime_float = 0.1, comptime defaultValue: comptime_float = 0.02}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:47});const Ht=new Uint8Array([]),Jt=new Uint8Array([48,30,16,0]),Nt=new Uint8Array([88,30,16,0]),Qt=new Uint8Array([56,30,16,0]);Object.assign(be,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Ht},slots:{0:{structure:s,memory:{array:Jt},slots:{0:{structure:r,memory:{array:V},address:1056304}}},1:{structure:s,memory:{array:Nt},slots:{0:{structure:r,memory:{array:Me},address:1056344}}},2:{structure:s,memory:{array:Qt},slots:{0:{structure:r,memory:{array:w},address:1056312}}}}}},slot:50});Object.assign(H,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:49});const Wt=new Uint8Array([]),Xt=new Uint8Array([48,30,16,0]),Yt=new Uint8Array([80,30,16,0]),Zt=new Uint8Array([0,0,0,0,0,0,20,64]),es=new Uint8Array([56,30,16,0]);Object.assign(de,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Wt},slots:{0:{structure:s,memory:{array:Xt},slots:{0:{structure:r,memory:{array:V},address:1056304}}},1:{structure:s,memory:{array:Yt},slots:{0:{structure:r,memory:{array:Zt},address:1056336}}},2:{structure:s,memory:{array:es},slots:{0:{structure:r,memory:{array:w},address:1056312}}}}}},slot:52});Object.assign(J,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:de}],methods:[],template:null},slot:51});const ts=new Uint8Array([]),ss=new Uint8Array([170,170,170,170]),rs=new Uint8Array([170,170,170,170]),as=new Uint8Array([170,170,170,170]),ms=new Uint8Array([170,170,170,170]),is=new Uint8Array([170,170,170,170]),os=new Uint8Array([170,170,170,170]),ns=new Uint8Array([170,170,170,170]);Object.assign(he,{...t,type:2,name:"struct{comptime A_bias: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 10} = .{.type = f32, .minValue = 0, .maxValue = 100, .defaultValue = 10}, comptime B_radius: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 1}, comptime C_bleed: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 3, comptime defaultValue: comptime_float = 2} = .{.type = f32, .minValue = 0.01, .maxValue = 3, .defaultValue = 2}, comptime D_lightxy: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}} = .{.type = @Vector(2, f32), .minValue = .{-1, -1}, .maxValue = .{1, 1}, .defaultValue = .{0, 0}}, comptime E_noise: struct{comptime type: type = f32, comptime minValue: comptime_float = -0.1, comptime maxValue: comptime_float = 0.1, comptime defaultValue: comptime_float = 0.02} = .{.type = f32, .minValue = -0.1, .maxValue = 0.1, .defaultValue = 0.02}, comptime F_brightness: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 2, .defaultValue = 1}, comptime G_contrast: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 5, .defaultValue = 1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"A_bias",structure:D},{...e,type:8,isRequired:!1,slot:1,name:"B_radius",structure:K},{...e,type:8,isRequired:!1,slot:2,name:"C_bleed",structure:B},{...e,type:8,isRequired:!1,slot:3,name:"D_lightxy",structure:$},{...e,type:8,isRequired:!1,slot:4,name:"E_noise",structure:L},{...e,type:8,isRequired:!1,slot:5,name:"F_brightness",structure:H},{...e,type:8,isRequired:!1,slot:6,name:"G_contrast",structure:J}],methods:[],template:{memory:{array:ts},slots:{0:{structure:D,memory:{array:ss},slots:{0:{structure:ie,memory:{array:l},address:-1431655766}}},1:{structure:K,memory:{array:rs},slots:{0:{structure:oe,memory:{array:l},address:-1431655766}}},2:{structure:B,memory:{array:as},slots:{0:{structure:ne,memory:{array:l},address:-1431655766}}},3:{structure:$,memory:{array:ms},slots:{0:{structure:pe,memory:{array:l},address:-1431655766}}},4:{structure:L,memory:{array:is},slots:{0:{structure:fe,memory:{array:l},address:-1431655766}}},5:{structure:H,memory:{array:os},slots:{0:{structure:be,memory:{array:l},address:-1431655766}}},6:{structure:J,memory:{array:ns},slots:{0:{structure:de,memory:{array:l},address:-1431655766}}}}}},slot:15});Object.assign(N,{...t,type:11,name:"*struct{comptime A_bias: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 10} = .{.type = f32, .minValue = 0, .maxValue = 100, .defaultValue = 10}, comptime B_radius: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 1}, comptime C_bleed: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 3, comptime defaultValue: comptime_float = 2} = .{.type = f32, .minValue = 0.01, .maxValue = 3, .defaultValue = 2}, comptime D_lightxy: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}} = .{.type = @Vector(2, f32), .minValue = .{-1, -1}, .maxValue = .{1, 1}, .defaultValue = .{0, 0}}, comptime E_noise: struct{comptime type: type = f32, comptime minValue: comptime_float = -0.1, comptime maxValue: comptime_float = 0.1, comptime defaultValue: comptime_float = 0.02} = .{.type = f32, .minValue = -0.1, .maxValue = 0.1, .defaultValue = 0.02}, comptime F_brightness: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 2, .defaultValue = 1}, comptime G_contrast: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 5, .defaultValue = 1}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:he}],methods:[],template:null},slot:14});Object.assign(Q,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:66});const us=new Uint8Array([]),ls=new Uint8Array([72,30,16,0]),cs=new Uint8Array([4,0,0,0]);Object.assign(A,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:Q}],methods:[],template:{memory:{array:us},slots:{0:{structure:Q,memory:{array:ls},slots:{0:{structure:p,memory:{array:cs},address:1056328}}}}}},slot:54});Object.assign(z,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:53});const ys=new Uint8Array([]),ps=new Uint8Array([170,170,170,170]);Object.assign(ge,{...t,type:2,name:"struct{comptime depthmap: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"depthmap",structure:z}],methods:[],template:{memory:{array:ys},slots:{0:{structure:z,memory:{array:ps},slots:{0:{structure:A,memory:{array:l},address:-1431655766}}}}}},slot:17});Object.assign(W,{...t,type:11,name:"*struct{comptime depthmap: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ge}],methods:[],template:null},slot:16});const fs=new Uint8Array([]),bs=new Uint8Array([170,170,170,170]);Object.assign(Se,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:z}],methods:[],template:{memory:{array:fs},slots:{0:{structure:z,memory:{array:bs},slots:{0:{structure:A,memory:{array:l},address:-1431655766}}}}}},slot:19});Object.assign(X,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Se}],methods:[],template:null},slot:18});const ds=new Uint8Array([]),hs=new Uint8Array([]),gs=new Uint8Array([44,251,15,0]),Ss=new Uint8Array([253,65,16,0]),zs=new Uint8Array([99,111,109,46,115,109,97,114,116,45,112,97,103,101,45,110,101,116,46,115,104,97,100,101,114,115,0]),Vs=new Uint8Array([108,251,15,0]),_s=new Uint8Array([221,65,16,0]),Os=new Uint8Array([115,109,97,114,116,45,112,97,103,101,46,110,101,116,32,45,32,74,97,110,32,70,114,105,115,99,104,109,117,116,104,0]),Rs=new Uint8Array([172,251,15,0]),qs=new Uint8Array([2,0,0,0]),ws=new Uint8Array([4,252,15,0]),As=new Uint8Array([162,65,16,0]),Us=new Uint8Array([67,111,109,112,117,116,101,115,32,115,99,114,101,101,110,32,115,112,97,99,101,32,97,109,98,105,101,110,32,111,99,99,108,117,115,105,111,110,32,102,114,111,109,32,97,32,100,101,112,116,104,32,98,117,102,102,101,114,0]),js=new Uint8Array([170,170,170,170]),xs=new Uint8Array([170,170,170,170]),Ps=new Uint8Array([170,170,170,170]);Object.assign(Ue,{...t,type:2,name:"smart-ssao.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ds}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:E},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:v},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:d},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:F},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:N},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:W},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:X}],methods:[],template:{memory:{array:hs},slots:{0:{structure:E,memory:{array:gs},slots:{0:{structure:te,memory:{array:Ss},slots:{0:{structure:ee,memory:{array:zs},address:1065469}}}}},1:{structure:v,memory:{array:Vs},slots:{0:{structure:re,memory:{array:_s},slots:{0:{structure:se,memory:{array:Os},address:1065437}}}}},2:{structure:d,memory:{array:Rs},slots:{0:{structure:p,memory:{array:qs}}}},3:{structure:F,memory:{array:ws},slots:{0:{structure:me,memory:{array:As},slots:{0:{structure:ae,memory:{array:Us},address:1065378}}}}},4:{structure:N,memory:{array:js},slots:{0:{structure:he,memory:{array:l},address:-1431655766}}},5:{structure:W,memory:{array:xs},slots:{0:{structure:ge,memory:{array:l},address:-1431655766}}},6:{structure:X,memory:{array:Ps},slots:{0:{structure:Se,memory:{array:l},address:-1431655766}}}}}},slot:1});Object.assign(_,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:24});Object.assign(ze,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:_}],methods:[],template:null},slot:23});Object.assign(Ve,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ze}],methods:[],template:null},slot:22});Object.assign(y,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:25});const Is=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(_e,{...t,type:9,name:"smart-ssao.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:p},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:p}],methods:[],template:{memory:{array:Is}}},slot:26});Object.assign(R,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:R}],methods:[],template:null},slot:27});Object.assign(q,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:28});Object.assign(Oe,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:o}],methods:[],template:null},slot:55});const Cs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ks=new Uint8Array([]),Es=new Uint8Array([8,250,15,0]),vs=new Uint8Array([4,0,0,0]);Object.assign(Y,{...t,type:2,name:"smart-ssao.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Ve},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:y},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:y},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:_e},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:R},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:q}],methods:[],template:{memory:{array:Cs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:_},{...e,type:7,isRequired:!1,name:"FPixel",structure:Oe},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:ks},slots:{0:{structure:d,memory:{array:Es},slots:{0:{structure:p,memory:{array:vs}}}}}}},slot:21});const Fs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ds=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ks=new Uint8Array([0,0,0,0,0,0,0,0]),ve=new Uint8Array([]);Object.assign(U,{...t,type:2,name:"smart-ssao.KernelInput(u8,smart-ssao.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"depthmap",structure:Y}],methods:[],template:{memory:{array:Fs},slots:{0:{structure:Y,memory:{array:Ds},slots:{0:{structure:Ve,memory:{array:Ks},slots:{0:{structure:ze,memory:{array:ve}}}}}}}}},slot:20});Object.assign(Re,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:_}],methods:[],template:null},slot:23});Object.assign(qe,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Re}],methods:[],template:null},slot:31});const Bs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ts=new Uint8Array([]),Ms=new Uint8Array([8,250,15,0]),Gs=new Uint8Array([4,0,0,0]);Object.assign(Z,{...t,type:2,name:"smart-ssao.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:qe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:y},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:y},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:_e},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:R},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:q}],methods:[],template:{memory:{array:Bs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:_},{...e,type:7,isRequired:!1,name:"FPixel",structure:Oe},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Ts},slots:{0:{structure:d,memory:{array:Ms},slots:{0:{structure:p,memory:{array:Gs}}}}}}},slot:30});const $s=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ls=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Hs=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(j,{...t,type:2,name:"smart-ssao.KernelOutput(u8,smart-ssao.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:Z}],methods:[],template:{memory:{array:$s},slots:{0:{structure:Z,memory:{array:Ls},slots:{0:{structure:qe,memory:{array:Hs},slots:{0:{structure:Re,memory:{array:ve}}}}}}}}},slot:29});const Js=new Uint8Array([0,0,0,0,0,0,0,0,0,0,32,65,0,0,128,63,0,0,0,64,10,215,163,60,0,0,128,63,0,0,128,63]);Object.assign(x,{...t,type:2,name:"smart-ssao.KernelParameters(smart-ssao.kernel)",length:1,byteSize:32,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:0,name:"A_bias",structure:o},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:1,name:"B_radius",structure:o},{...e,type:4,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:2,name:"C_bleed",structure:o},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:3,name:"D_lightxy",structure:ue},{...e,type:4,isRequired:!1,bitOffset:160,bitSize:32,byteSize:4,slot:4,name:"E_noise",structure:o},{...e,type:4,isRequired:!1,bitOffset:192,bitSize:32,byteSize:4,slot:5,name:"F_brightness",structure:o},{...e,type:4,isRequired:!1,bitOffset:224,bitSize:32,byteSize:4,slot:6,name:"G_contrast",structure:o}],methods:[],template:{memory:{array:Js}}},slot:32});Object.assign(je,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(smart-ssao.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:56});Object.assign(xe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(smart-ssao.createOutput)).Fn.return_type.?).ErrorUnion.error_set!smart-ssao.KernelOutput(u8,smart-ssao.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:je}],methods:[],template:null},slot:37});Object.assign(Pe,{...t,type:3,name:"createOutput",length:1,byteSize:96,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"0",structure:y},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:1,name:"1",structure:y},{...e,type:6,bitOffset:320,bitSize:192,byteSize:24,slot:2,name:"2",structure:U},{...e,type:6,bitOffset:0,bitSize:256,byteSize:32,slot:3,name:"3",structure:x},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:4,name:"retval",structure:xe}],methods:[],template:null},slot:35});Object.assign(Ie,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(smart-ssao.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:57});Object.assign(Ce,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(smart-ssao.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!smart-ssao.KernelOutput(u8,smart-ssao.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Ie}],methods:[],template:null},slot:38});Object.assign(ke,{...t,type:3,name:"createPartialOutput",length:1,byteSize:104,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"0",structure:y},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:1,name:"1",structure:y},{...e,type:3,bitOffset:320,bitSize:32,byteSize:4,slot:2,name:"2",structure:y},{...e,type:3,bitOffset:352,bitSize:32,byteSize:4,slot:3,name:"3",structure:y},{...e,type:6,bitOffset:384,bitSize:192,byteSize:24,slot:4,name:"4",structure:U},{...e,type:6,bitOffset:0,bitSize:256,byteSize:32,slot:5,name:"5",structure:x},{...e,type:6,bitOffset:576,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Ce}],methods:[],template:null},slot:36});const Ns={argStruct:Pe,thunk:1,name:"createOutput"},Qs={argStruct:ke,thunk:6,name:"createPartialOutput"};Object.assign(Ee,{...t,type:2,name:"smart-ssao",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ve}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:Ue},{...e,type:7,isRequired:!1,name:"Input",structure:U},{...e,type:7,isRequired:!1,name:"Output",structure:j},{...e,type:7,isRequired:!1,name:"Parameters",structure:x}],methods:[Ns,Qs],template:null},slot:0});const Ws=[h,ee,te,E,se,re,v,p,d,ae,me,F,o,r,s,ie,D,oe,K,ne,B,ue,le,T,ce,M,ye,G,pe,$,fe,L,be,H,de,J,he,N,Q,A,z,ge,W,Se,X,Ue,_,ze,Ve,y,_e,R,q,Oe,Y,U,Re,qe,Z,j,x,je,xe,Pe,Ie,Ce,ke,Ee],Xs=ut(Ws),Ys=Ee.constructor,Zs=(async()=>{const n=new URL("smart-ssao-d439b71b.wasm",import.meta.url).href;return fetch(n)})();lt(Zs,{...Xs,writeBack:!0});const{createOutput:or,createPartialOutput:er,kernel:Ae,Input:tr,Output:nr,Parameters:ur}=Ys;function sr(n,c,m,a,i={},g={}){if(Array.isArray(i)){const b=i;i={};for(const[f,S]of Object.keys(Ae.inputImages).entries())i[S]=b[f]}const P=new tr(void 0),I=Object.keys(Ae.inputImages),u=[];let O;for(const b of I){let f=i[b];if(f||(I.length===1&&["data","width","height"].every(S=>!!i[S])?f=i:u.push(b)),P[b]=f,O){if(f.colorSpace!==O)throw new Error(`Input images must all use the same color space: ${O}`)}else O=f.colorSpace}if(u.length>0)throw new Error(`Missing input image${u.length>1?"s":""}: ${u.join(", ")}`);const we=er(n,c,m,a,P,g),Fe=b=>{const f=Object.keys(b),S={};for(const De of f){const{data:{typedArray:C},width:Ke,height:$e}=b[De];let k;if(typeof ImageData=="function"){const Le=new Uint8ClampedArray(C.buffer,C.byteOffset,C.byteLength);k=new ImageData(Le,Ke,a,{colorSpace:O})}else k={data:C,width:Ke,height:$e};if(f.length===1)return k;S[De]=k}return S};return we[Symbol.toStringTag]==="Promise"?we.then(Fe):Fe(we)}function rr(){const n={};for(let[c,m]of Object.entries(Ae)){if(c==="parameters"){const a={};for(const[i,g]of Object.entries(m)){const P=a[i]={};for(let[I,u]of Object.entries(g))typeof u=="object"?"string"in u?u=u.string:u=Ge(u):typeof u=="function"&&(u=ar(u.name)),P[I]=u}m=a}else typeof m=="object"&&("string"in m?m=m.string:m=m.valueOf());n[c]=m}return n}function Ge(n){const c=[];for(let[m,a]of Object.entries(n))typeof a=="object"&&(a=Ge(a)),c[m]=a;return c}function ar(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[c,m,...a]=n.data;mr(c,a).then(([i,g])=>{postMessage([c,m,i],{transfer:g})}).catch(i=>{postMessage(["error",m,i])})};async function mr(n,c){switch(n){case"getKernelInfo":return[rr(...c)];case"createPartialImageData":const a=await sr(...c),i=[];if("data"in a&&"width"in a&&"height"in a)i.push(a.data.buffer);else for(const g of Object.entries(a))i.push(a.data.buffer);return[a,i];default:throw new Error(`Unknown function: ${n}`)}}
