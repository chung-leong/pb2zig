import{u as De,a as Te,b as Me,c as Xe,d as Ye,e as $e,f as Be,g as Le,h as Ge,i as He,j as Je,k as Ne,l as Qe,m as We,n as Ze,o as et,p as tt,q as st,r as rt}from"./index-9f315e7a.js";De();Te();Me();Xe();Ye();$e();Be();Le();Ge();He();Je();Ne();Qe();We();Ze();et();tt();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},S={},te={},se={},M={},re={},ae={},X={},r={},g={},ie={},me={},Y={},h={},o={},s={},j={},V={},n={},ne={},$={},oe={},B={},ue={},ce={},L={},le={},G={},ye={},H={},pe={},J={},fe={},N={},q={},d={},be={},Q={},de={},W={},qe={},w={},P={},x={},p={},ge={},I={},v={},he={},_={},C={},Se={},ze={},Z={},k={},E={},we={},Ae={},Ue={},je={},Pe={},xe={},Ie={};Object.assign(S,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:5});Object.assign(te,{...t,type:1,name:"[17:0]u8",length:17,byteSize:18,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:4});Object.assign(se,{...t,type:11,name:"*const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:3});Object.assign(M,{...t,type:11,name:"**const [17:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:2});Object.assign(re,{...t,type:1,name:"[11:0]u8",length:11,byteSize:12,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:8});Object.assign(ae,{...t,type:11,name:"*const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:7});Object.assign(X,{...t,type:11,name:"**const [11:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:6});Object.assign(r,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:r}],methods:[],template:null},slot:10});Object.assign(g,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:r}],methods:[],template:null},slot:9});Object.assign(ie,{...t,type:1,name:"[39:0]u8",length:39,byteSize:40,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:13});Object.assign(me,{...t,type:11,name:"*const [39:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:12});Object.assign(Y,{...t,type:11,name:"**const [39:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:11});Object.assign(h,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:33});Object.assign(o,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:o}],methods:[],template:null},slot:53});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:o}],methods:[],template:null},slot:52});const at=new Uint8Array([]),it=new Uint8Array([48,30,16,0]),R=new Uint8Array([0,0,0,0,0,0,0,0]),mt=new Uint8Array([56,30,16,0]),U=new Uint8Array([0,0,0,0,0,0,240,63]),nt=new Uint8Array([80,30,16,0]),ot=new Uint8Array([0,0,0,0,0,0,224,63]);Object.assign(j,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.5}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:at},slots:{0:{structure:s,memory:{array:it},slots:{0:{structure:o,memory:{array:R},address:1056304}}},1:{structure:s,memory:{array:mt},slots:{0:{structure:o,memory:{array:U},address:1056312}}},2:{structure:s,memory:{array:nt},slots:{0:{structure:o,memory:{array:ot},address:1056336}}}}}},slot:40});Object.assign(V,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.5}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:j}],methods:[],template:null},slot:39});Object.assign(n,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:r}],methods:[],template:null},slot:54});const ut=new Uint8Array([]),ct=new Uint8Array([68,30,16,0]),Ve=new Uint8Array([0,0,0,0]),lt=new Uint8Array([72,30,16,0]),_e=new Uint8Array([1,0,0,0]),yt=new Uint8Array([72,30,16,0]);Object.assign(ne,{...t,type:2,name:"struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:r},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:n},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:n},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:n}],methods:[],template:{memory:{array:ut},slots:{0:{structure:n,memory:{array:ct},slots:{0:{structure:r,memory:{array:Ve},address:1056324}}},1:{structure:n,memory:{array:lt},slots:{0:{structure:r,memory:{array:_e},address:1056328}}},2:{structure:n,memory:{array:yt},slots:{0:{structure:r,memory:{array:_e},address:1056328}}}}}},slot:42});Object.assign($,{...t,type:11,name:"*const struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:41});const pt=new Uint8Array([]),ft=new Uint8Array([68,30,16,0]),bt=new Uint8Array([72,30,16,0]),dt=new Uint8Array([68,30,16,0]);Object.assign(oe,{...t,type:2,name:"struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:r},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:n},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:n},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:n}],methods:[],template:{memory:{array:pt},slots:{0:{structure:n,memory:{array:ft},slots:{0:{structure:r,memory:{array:Ve},address:1056324}}},1:{structure:n,memory:{array:bt},slots:{0:{structure:r,memory:{array:_e},address:1056328}}},2:{structure:n,memory:{array:dt},slots:{0:{structure:r,memory:{array:Ve},address:1056324}}}}}},slot:44});Object.assign(B,{...t,type:11,name:"*const struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:43});Object.assign(ue,{...t,type:13,name:"@Vector(3, f32)",length:3,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:34});const gt=new Uint8Array([]),ht=new Uint8Array([48,30,16,0]),St=new Uint8Array([48,30,16,0]),zt=new Uint8Array([48,30,16,0]);Object.assign(ce,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:gt},slots:{0:{structure:s,memory:{array:ht},slots:{0:{structure:o,memory:{array:R},address:1056304}}},1:{structure:s,memory:{array:St},slots:{0:{structure:o,memory:{array:R},address:1056304}}},2:{structure:s,memory:{array:zt},slots:{0:{structure:o,memory:{array:R},address:1056304}}}}}},slot:56});Object.assign(L,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:55});const Ot=new Uint8Array([]),Vt=new Uint8Array([56,30,16,0]),_t=new Uint8Array([56,30,16,0]),Rt=new Uint8Array([56,30,16,0]);Object.assign(le,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Ot},slots:{0:{structure:s,memory:{array:Vt},slots:{0:{structure:o,memory:{array:U},address:1056312}}},1:{structure:s,memory:{array:_t},slots:{0:{structure:o,memory:{array:U},address:1056312}}},2:{structure:s,memory:{array:Rt},slots:{0:{structure:o,memory:{array:U},address:1056312}}}}}},slot:58});Object.assign(G,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:57});const qt=new Uint8Array([]),wt=new Uint8Array([56,30,16,0]),At=new Uint8Array([48,30,16,0]),Ut=new Uint8Array([48,30,16,0]);Object.assign(ye,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:qt},slots:{0:{structure:s,memory:{array:wt},slots:{0:{structure:o,memory:{array:U},address:1056312}}},1:{structure:s,memory:{array:At},slots:{0:{structure:o,memory:{array:R},address:1056304}}},2:{structure:s,memory:{array:Ut},slots:{0:{structure:o,memory:{array:R},address:1056304}}}}}},slot:60});Object.assign(H,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:59});const jt=new Uint8Array([]),Pt=new Uint8Array([170,170,170,170]),y=new Uint8Array([]),xt=new Uint8Array([170,170,170,170]),It=new Uint8Array([170,170,170,170]);Object.assign(pe,{...t,type:2,name:"struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 0, comptime comptime_float = 0} = .{1, 0, 0}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:ue},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:L},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:G},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:H}],methods:[],template:{memory:{array:jt},slots:{0:{structure:L,memory:{array:Pt},slots:{0:{structure:ce,memory:{array:y},address:-1431655766}}},1:{structure:G,memory:{array:xt},slots:{0:{structure:le,memory:{array:y},address:-1431655766}}},2:{structure:H,memory:{array:It},slots:{0:{structure:ye,memory:{array:y},address:-1431655766}}}}}},slot:46});Object.assign(J,{...t,type:11,name:"*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 0, comptime comptime_float = 0} = .{1, 0, 0}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pe}],methods:[],template:null},slot:45});const vt=new Uint8Array([]),Ct=new Uint8Array([170,170,170,170]),kt=new Uint8Array([170,170,170,170]),Et=new Uint8Array([170,170,170,170]),Kt=new Uint8Array([170,170,170,170]),Ft=new Uint8Array([170,170,170,170]);Object.assign(fe,{...t,type:2,name:"struct{comptime curveX: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.5} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.5}, comptime curveY: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.5} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.5}, comptime useCurve: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 1} = .{.type = i32, .minValue = 0, .maxValue = 1, .defaultValue = 1}, comptime useSolidColor: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 0} = .{.type = i32, .minValue = 0, .maxValue = 1, .defaultValue = 0}, comptime solidColor: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 0, comptime comptime_float = 0} = .{1, 0, 0}} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{1, 0, 0}}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"curveX",structure:V},{...e,type:8,isRequired:!1,slot:1,name:"curveY",structure:V},{...e,type:8,isRequired:!1,slot:2,name:"useCurve",structure:$},{...e,type:8,isRequired:!1,slot:3,name:"useSolidColor",structure:B},{...e,type:8,isRequired:!1,slot:4,name:"solidColor",structure:J}],methods:[],template:{memory:{array:vt},slots:{0:{structure:V,memory:{array:Ct},slots:{0:{structure:j,memory:{array:y},address:-1431655766}}},1:{structure:V,memory:{array:kt},slots:{0:{structure:j,memory:{array:y},address:-1431655766}}},2:{structure:$,memory:{array:Et},slots:{0:{structure:ne,memory:{array:y},address:-1431655766}}},3:{structure:B,memory:{array:Kt},slots:{0:{structure:oe,memory:{array:y},address:-1431655766}}},4:{structure:J,memory:{array:Ft},slots:{0:{structure:pe,memory:{array:y},address:-1431655766}}}}}},slot:15});Object.assign(N,{...t,type:11,name:"*struct{comptime curveX: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.5} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.5}, comptime curveY: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.5} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.5}, comptime useCurve: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 1} = .{.type = i32, .minValue = 0, .maxValue = 1, .defaultValue = 1}, comptime useSolidColor: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 0} = .{.type = i32, .minValue = 0, .maxValue = 1, .defaultValue = 0}, comptime solidColor: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 0, comptime comptime_float = 0} = .{1, 0, 0}} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{1, 0, 0}}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:14});const Dt=new Uint8Array([]),Tt=new Uint8Array([64,30,16,0]),Mt=new Uint8Array([4,0,0,0]);Object.assign(q,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:n}],methods:[],template:{memory:{array:Dt},slots:{0:{structure:n,memory:{array:Tt},slots:{0:{structure:r,memory:{array:Mt},address:1056320}}}}}},slot:48});Object.assign(d,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:47});const Xt=new Uint8Array([]),Yt=new Uint8Array([170,170,170,170]),$t=new Uint8Array([170,170,170,170]);Object.assign(be,{...t,type:2,name:"struct{comptime liveVideo: struct{comptime channels: comptime_int = 4} = .{.channels = 4}, comptime baseImage: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"liveVideo",structure:d},{...e,type:8,isRequired:!1,slot:1,name:"baseImage",structure:d}],methods:[],template:{memory:{array:Xt},slots:{0:{structure:d,memory:{array:Yt},slots:{0:{structure:q,memory:{array:y},address:-1431655766}}},1:{structure:d,memory:{array:$t},slots:{0:{structure:q,memory:{array:y},address:-1431655766}}}}}},slot:17});Object.assign(Q,{...t,type:11,name:"*struct{comptime liveVideo: struct{comptime channels: comptime_int = 4} = .{.channels = 4}, comptime baseImage: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:16});const Bt=new Uint8Array([]),Lt=new Uint8Array([170,170,170,170]);Object.assign(de,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:d}],methods:[],template:{memory:{array:Bt},slots:{0:{structure:d,memory:{array:Lt},slots:{0:{structure:q,memory:{array:y},address:-1431655766}}}}}},slot:19});Object.assign(W,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:de}],methods:[],template:null},slot:18});const Gt=new Uint8Array([]),Ht=new Uint8Array([]),Jt=new Uint8Array([12,251,15,0]),Nt=new Uint8Array([198,60,16,0]),Qt=new Uint8Array([71,114,101,101,110,83,99,114,101,101,110,69,102,102,101,99,116,0]),Wt=new Uint8Array([76,251,15,0]),Zt=new Uint8Array([186,60,16,0]),es=new Uint8Array([76,101,101,32,70,101,108,97,114,99,97,0]),ts=new Uint8Array([140,251,15,0]),ss=new Uint8Array([1,0,0,0]),rs=new Uint8Array([228,251,15,0]),as=new Uint8Array([146,60,16,0]),is=new Uint8Array([65,32,103,114,101,101,110,32,115,99,114,101,101,110,32,47,32,99,104,114,111,109,97,32,107,101,121,45,108,105,107,101,32,101,102,102,101,99,116,0]),ms=new Uint8Array([170,170,170,170]),ns=new Uint8Array([170,170,170,170]),os=new Uint8Array([170,170,170,170]);Object.assign(qe,{...t,type:2,name:"green-screen-effect.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Gt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:M},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:X},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:g},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:Y},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:N},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:Q},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:W}],methods:[],template:{memory:{array:Ht},slots:{0:{structure:M,memory:{array:Jt},slots:{0:{structure:se,memory:{array:Nt},slots:{0:{structure:te,memory:{array:Qt},address:1064134}}}}},1:{structure:X,memory:{array:Wt},slots:{0:{structure:ae,memory:{array:Zt},slots:{0:{structure:re,memory:{array:es},address:1064122}}}}},2:{structure:g,memory:{array:ts},slots:{0:{structure:r,memory:{array:ss}}}},3:{structure:Y,memory:{array:rs},slots:{0:{structure:me,memory:{array:as},slots:{0:{structure:ie,memory:{array:is},address:1064082}}}}},4:{structure:N,memory:{array:ms},slots:{0:{structure:fe,memory:{array:y},address:-1431655766}}},5:{structure:Q,memory:{array:ns},slots:{0:{structure:be,memory:{array:y},address:-1431655766}}},6:{structure:W,memory:{array:os},slots:{0:{structure:de,memory:{array:y},address:-1431655766}}}}}},slot:1});Object.assign(w,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:24});Object.assign(P,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(x,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:P}],methods:[],template:null},slot:22});Object.assign(p,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:25});const us=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ge,{...t,type:9,name:"green-screen-effect.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:r},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:r}],methods:[],template:{memory:{array:us}}},slot:26});Object.assign(I,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:I}],methods:[],template:null},slot:27});Object.assign(v,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:v}],methods:[],template:null},slot:28});Object.assign(he,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:49});const cs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ls=new Uint8Array([]),ys=new Uint8Array([168,252,15,0]),ps=new Uint8Array([4,0,0,0]);Object.assign(_,{...t,type:2,name:"green-screen-effect.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:x},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:p},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:p},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ge},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:I},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:v}],methods:[],template:{memory:{array:cs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:he},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:g}],methods:[],template:{memory:{array:ls},slots:{0:{structure:g,memory:{array:ys},slots:{0:{structure:r,memory:{array:ps}}}}}}},slot:21});const fs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),bs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ds=new Uint8Array([0,0,0,0,0,0,0,0]),ee=new Uint8Array([]),gs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),hs=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(C,{...t,type:2,name:"green-screen-effect.KernelInput(u8,green-screen-effect.kernel)",length:1,byteSize:48,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"liveVideo",structure:_},{...e,type:6,isRequired:!1,bitOffset:192,bitSize:192,byteSize:24,slot:1,name:"baseImage",structure:_}],methods:[],template:{memory:{array:fs},slots:{0:{structure:_,memory:{array:bs},slots:{0:{structure:x,memory:{array:ds},slots:{0:{structure:P,memory:{array:ee}}}}}},1:{structure:_,memory:{array:gs},slots:{0:{structure:x,memory:{array:hs},slots:{0:{structure:P,memory:{array:ee}}}}}}}}},slot:20});Object.assign(Se,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(ze,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Se}],methods:[],template:null},slot:31});const Ss=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),zs=new Uint8Array([]),Os=new Uint8Array([104,253,15,0]),Vs=new Uint8Array([4,0,0,0]);Object.assign(Z,{...t,type:2,name:"green-screen-effect.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ze},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:p},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:p},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ge},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:I},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:v}],methods:[],template:{memory:{array:Ss}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:he},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:g}],methods:[],template:{memory:{array:zs},slots:{0:{structure:g,memory:{array:Os},slots:{0:{structure:r,memory:{array:Vs}}}}}}},slot:30});const _s=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Rs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),qs=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(k,{...t,type:2,name:"green-screen-effect.KernelOutput(u8,green-screen-effect.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:Z}],methods:[],template:{memory:{array:_s},slots:{0:{structure:Z,memory:{array:Rs},slots:{0:{structure:ze,memory:{array:qs},slots:{0:{structure:Se,memory:{array:ee}}}}}}}}},slot:29});const ws=new Uint8Array([0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,0,0,0,63,1,0,0,0,0,0,0,0]);Object.assign(E,{...t,type:2,name:"green-screen-effect.KernelParameters(green-screen-effect.kernel)",length:1,byteSize:32,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"curveX",structure:h},{...e,type:4,isRequired:!1,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"curveY",structure:h},{...e,type:2,isRequired:!1,bitOffset:192,bitSize:32,byteSize:4,slot:2,name:"useCurve",structure:r},{...e,type:2,isRequired:!1,bitOffset:224,bitSize:32,byteSize:4,slot:3,name:"useSolidColor",structure:r},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:96,byteSize:16,slot:4,name:"solidColor",structure:ue}],methods:[],template:{memory:{array:ws}}},slot:32});Object.assign(we,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(green-screen-effect.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:50});Object.assign(Ae,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(green-screen-effect.createOutput)).Fn.return_type.?).ErrorUnion.error_set!green-screen-effect.KernelOutput(u8,green-screen-effect.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:we}],methods:[],template:null},slot:37});Object.assign(Ue,{...t,type:3,name:"createOutput",length:1,byteSize:128,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"0",structure:p},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:1,name:"1",structure:p},{...e,type:6,bitOffset:320,bitSize:384,byteSize:48,slot:2,name:"2",structure:C},{...e,type:6,bitOffset:0,bitSize:256,byteSize:32,slot:3,name:"3",structure:E},{...e,type:6,bitOffset:704,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Ae}],methods:[],template:null},slot:35});Object.assign(je,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(green-screen-effect.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:51});Object.assign(Pe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(green-screen-effect.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!green-screen-effect.KernelOutput(u8,green-screen-effect.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:je}],methods:[],template:null},slot:38});Object.assign(xe,{...t,type:3,name:"createPartialOutput",length:1,byteSize:128,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"0",structure:p},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:1,name:"1",structure:p},{...e,type:3,bitOffset:320,bitSize:32,byteSize:4,slot:2,name:"2",structure:p},{...e,type:3,bitOffset:352,bitSize:32,byteSize:4,slot:3,name:"3",structure:p},{...e,type:6,bitOffset:384,bitSize:384,byteSize:48,slot:4,name:"4",structure:C},{...e,type:6,bitOffset:0,bitSize:256,byteSize:32,slot:5,name:"5",structure:E},{...e,type:6,bitOffset:768,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Pe}],methods:[],template:null},slot:36});const As={argStruct:Ue,thunk:3,name:"createOutput"},Us={argStruct:xe,thunk:9,name:"createPartialOutput"};Object.assign(Ie,{...t,type:2,name:"green-screen-effect",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ee}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:qe},{...e,type:7,isRequired:!1,name:"Input",structure:C},{...e,type:7,isRequired:!1,name:"Output",structure:k},{...e,type:7,isRequired:!1,name:"Parameters",structure:E}],methods:[As,Us],template:null},slot:0});const js=[S,te,se,M,re,ae,X,r,g,ie,me,Y,h,o,s,j,V,n,ne,$,oe,B,ue,ce,L,le,G,ye,H,pe,J,fe,N,q,d,be,Q,de,W,qe,w,P,x,p,ge,I,v,he,_,C,Se,ze,Z,k,E,we,Ae,Ue,je,Pe,xe,Ie],Ps=st(js),xs=Ie.constructor,Is=(async()=>{const u=new URL("green-screen-effect-e0b631fd.wasm",import.meta.url).href;return fetch(u)})();rt(Is,{...Ps,writeBack:!0});const{createOutput:Ts,createPartialOutput:vs,kernel:Re,Input:Cs,Output:Ms,Parameters:Xs}=xs;function ks(u,l,i,a,m={},z={}){if(Array.isArray(m)){const b=m;m={};for(const[f,O]of Object.keys(Re.inputImages).entries())m[O]=b[f]}const K=new Cs(void 0),F=Object.keys(Re.inputImages),c=[];let A;for(const b of F){let f=m[b];if(f||(F.length===1&&["data","width","height"].every(O=>!!m[O])?f=m:c.push(b)),K[b]=f,A){if(f.colorSpace!==A)throw new Error(`Input images must all use the same color space: ${A}`)}else A=f.colorSpace}if(c.length>0)throw new Error(`Missing input image${c.length>1?"s":""}: ${c.join(", ")}`);const Oe=vs(u,l,i,a,K,z),ve=b=>{const f=Object.keys(b),O={};for(const Ce of f){const{data:{typedArray:D},width:ke,height:Ke}=b[Ce];let T;if(typeof ImageData=="function"){const Fe=new Uint8ClampedArray(D.buffer,D.byteOffset,D.byteLength);T=new ImageData(Fe,ke,a,{colorSpace:A})}else T={data:D,width:ke,height:Ke};if(f.length===1)return T;O[Ce]=T}return O};return Oe[Symbol.toStringTag]==="Promise"?Oe.then(ve):ve(Oe)}function Es(){const u={};for(let[l,i]of Object.entries(Re)){if(l==="parameters"){const a={};for(const[m,z]of Object.entries(i)){const K=a[m]={};for(let[F,c]of Object.entries(z))typeof c=="object"?"string"in c?c=c.string:c=Ee(c):typeof c=="function"&&(c=Ks(c.name)),K[F]=c}i=a}else typeof i=="object"&&("string"in i?i=i.string:i=i.valueOf());u[l]=i}return u}function Ee(u){const l=[];for(let[i,a]of Object.entries(u))typeof a=="object"&&(a=Ee(a)),l[i]=a;return l}function Ks(u){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[u]}onmessage=u=>{const[l,i,...a]=u.data;Fs(l,a).then(([m,z])=>{postMessage([l,i,m],{transfer:z})}).catch(m=>{postMessage(["error",i,m])})};async function Fs(u,l){switch(u){case"getKernelInfo":return[Es(...l)];case"createPartialImageData":const a=await ks(...l),m=[];if("data"in a&&"width"in a&&"height"in a)m.push(a.data.buffer);else for(const z of Object.entries(a))m.push(a.data.buffer);return[a,m];default:throw new Error(`Unknown function: ${u}`)}}
