import{u as Ps,a as Is,b as Rs,c as ks,d as qs,e as vs,f as xs,g as Es,h as Cs,i as Ks,j as Ms,k as Ts,l as Ds,m as Fs,n as _s,o as $s,p as Ls,q as Bs}from"./index-67c7daa1.js";Ps();Ts();Ds();Is();Rs();Fs();_s();$s();Ls();ks();qs();vs();xs();Bs();Es();Cs();Ks();const e={constructor:null,typedArray:null,type:0,name:void 0,byteSize:0,align:0,isConst:!1,isTuple:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null}},t={type:0,isRequired:!1},s={},S={},T={},D={},F={},_={},a={},p={},$={},L={},r={},f={},i={},B={},G={},H={},J={},N={},Q={},W={},P={},X={},Y={},A={},Z={},tt={},ut={},R={},et={},k={},m={},O={},I={},mt={},st={},q={},rt={},v={},nt={},x={},E={},d={},yt={},bt={},w={},lt={},gt={},pt={},Zt={},Ot={},ft={},St={},te={},jt={},ee={},zt={},se={},re={},ht={},ne={},dt={},ae={},oe={},wt={},ie={},At={},ce={},ue={},Ut={},me={},Vt={},ye={},be={},Pt={},le={},It={},Rt={},kt={},ge={},qt={},vt={},pe={},xt={},Oe={},Et={},fe={},Se={},Ct={},je={},Kt={},ze={},Mt={},he={},Tt={},de={},we={},Dt={},Ft={},_t={},$t={},Ae={},at={},Ue={},Ve={},Lt={},Pe={},Bt={},Ie={},Re={},ke={},qe={},ve={},xe={},Ee={},Ce={},Ke={},Me={},Te={},De={},Fe={},_e={},$e={},Le={},Be={},Gt={},Ge={},He={},Ht={},Je={},Jt={},Ne={},Qe={},We={},Xe={},Ye={},Ze={},ts={},Nt={},es={},ss={},rs={},ns={},as={},os={},is={},cs={},us={},ms={},ys={},bs={},ls={},gs={},ps={},Os={},fs={},Ss={},js={},zs={},hs={},ds={},Gs=new Uint8Array,Hs=new Uint8Array,Js=new Uint8Array([154,153,153,153,153,153,185,63]),Ns=new Uint8Array,Qs=new Uint8Array([0,0,0,0,0,0,160,64]),Ws=new Uint8Array,Xs=new Uint8Array([0,0,0,0,0,0,36,64]),Ys=new Uint8Array,Zs=new Uint8Array([0,0,0,0,0,0,0,0]),tr=new Uint8Array,er=new Uint8Array([0,0,0,0,0,0,0,0]),sr=new Uint8Array,rr=new Uint8Array([0,0,0,0,0,0,160,64]),nr=new Uint8Array,ar=new Uint8Array([0,0,0,0,0,0,160,64]),or=new Uint8Array,ir=new Uint8Array([0,0,0,0,0,0,112,64]),cr=new Uint8Array,ur=new Uint8Array([0,0,0,0,0,0,112,64]),mr=new Uint8Array,yr=new Uint8Array,br=new Uint8Array,lr=new Uint8Array,gr=new Uint8Array,pr=new Uint8Array,Or=new Uint8Array([0,0,0,0,0,0,0,0]),fr=new Uint8Array,Sr=new Uint8Array([0,0,0,0,0,128,118,64]),jr=new Uint8Array,zr=new Uint8Array([0,0,0,0,0,128,86,64]),hr=new Uint8Array,dr=new Uint8Array,wr=new Uint8Array([0]),Ar=new Uint8Array,Ur=new Uint8Array([1]),Vr=new Uint8Array,Pr=new Uint8Array([0]),Ir=new Uint8Array,Rr=new Uint8Array,kr=new Uint8Array,qr=new Uint8Array,vr=new Uint8Array,xr=new Uint8Array([4]),Er=new Uint8Array,Cr=new Uint8Array,Kr=new Uint8Array([18,16,0,1]),Mr=new Uint8Array([80,105,120,101,108,32,66,101,110,100,101,114,32,83,97,109,112,108,101,115,0]),Tr=new Uint8Array([50,16,0,1]),Dr=new Uint8Array([65,100,111,98,101,32,83,121,115,116,101,109,115,0]),Fr=new Uint8Array,_r=new Uint8Array([2]),$r=new Uint8Array([81,16,0,1]),Lr=new Uint8Array([116,119,105,115,116,32,97,110,32,105,109,97,103,101,32,97,114,111,117,110,100,0]),Br=new Uint8Array,Gr=new Uint8Array,Hr=new Uint8Array,Jr=new Uint8Array([0]),Nr=new Uint8Array([1]),ws=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Qr=new Uint8Array,Wr=new Uint8Array,Xr=new Uint8Array,Yr=new Uint8Array,Zr=new Uint8Array([4]),Qt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),As=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),tn=new Uint8Array,en=new Uint8Array,sn=new Uint8Array,rn=new Uint8Array,nn=new Uint8Array([4]),Wt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),an=new Uint8Array([0,0,128,67,0,0,128,67,0,0,32,65,0,0,180,66,0,0,0,0,0,0,0,0]),on=new Uint8Array([27,0]),cn=new Uint8Array([27,0]),un=new Uint8Array,mn=new Uint8Array,yn=new Uint8Array,bn=new Uint8Array;Object.assign(Zt,{slots:{0:Ot,1:St,2:jt,3:zt}});Object.assign(Ot,{structure:s,memory:{array:Gs},const:!0,slots:{0:ft}});Object.assign(ft,{structure:f});Object.assign(St,{structure:r,memory:{array:Hs},const:!0,slots:{0:te}});Object.assign(te,{structure:i,memory:{array:Js},const:!0});Object.assign(jt,{structure:r,memory:{array:Ns},const:!0,slots:{0:ee}});Object.assign(ee,{structure:i,memory:{array:Qs},const:!0});Object.assign(zt,{structure:r,memory:{array:Ws},const:!0,slots:{0:se}});Object.assign(se,{structure:i,memory:{array:Xs},const:!0});Object.assign(re,{slots:{0:ht,1:dt}});Object.assign(ht,{structure:r,memory:{array:Ys},const:!0,slots:{0:ne}});Object.assign(ne,{structure:i,memory:{array:Zs},const:!0});Object.assign(dt,{structure:r,memory:{array:tr},const:!0,slots:{0:ae}});Object.assign(ae,{structure:i,memory:{array:er},const:!0});Object.assign(oe,{slots:{0:wt,1:At}});Object.assign(wt,{structure:r,memory:{array:sr},const:!0,slots:{0:ie}});Object.assign(ie,{structure:i,memory:{array:rr},const:!0});Object.assign(At,{structure:r,memory:{array:nr},const:!0,slots:{0:ce}});Object.assign(ce,{structure:i,memory:{array:ar},const:!0});Object.assign(ue,{slots:{0:Ut,1:Vt}});Object.assign(Ut,{structure:r,memory:{array:or},const:!0,slots:{0:me}});Object.assign(me,{structure:i,memory:{array:ir},const:!0});Object.assign(Vt,{structure:r,memory:{array:cr},const:!0,slots:{0:ye}});Object.assign(ye,{structure:i,memory:{array:ur},const:!0});Object.assign(be,{slots:{0:Pt,1:It,2:Rt,3:kt}});Object.assign(Pt,{structure:s,memory:{array:mr},const:!0,slots:{0:le}});Object.assign(le,{structure:N});Object.assign(It,{structure:G,memory:{array:yr},const:!0,slots:{0:ht,1:dt}});Object.assign(Rt,{structure:H,memory:{array:br},const:!0,slots:{0:wt,1:At}});Object.assign(kt,{structure:J,memory:{array:lr},const:!0,slots:{0:Ut,1:Vt}});Object.assign(ge,{slots:{0:qt,1:vt,2:xt,3:Et}});Object.assign(qt,{structure:s,memory:{array:gr},const:!0,slots:{0:ft}});Object.assign(vt,{structure:r,memory:{array:pr},const:!0,slots:{0:pe}});Object.assign(pe,{structure:i,memory:{array:Or},const:!0});Object.assign(xt,{structure:r,memory:{array:fr},const:!0,slots:{0:Oe}});Object.assign(Oe,{structure:i,memory:{array:Sr},const:!0});Object.assign(Et,{structure:r,memory:{array:jr},const:!0,slots:{0:fe}});Object.assign(fe,{structure:i,memory:{array:zr},const:!0});Object.assign(Se,{slots:{0:Ct,1:Kt,2:Mt,3:Tt}});Object.assign(Ct,{structure:s,memory:{array:hr},const:!0,slots:{0:je}});Object.assign(je,{structure:P});Object.assign(Kt,{structure:a,memory:{array:dr},const:!0,slots:{0:ze}});Object.assign(ze,{structure:p,memory:{array:wr},const:!0});Object.assign(Mt,{structure:a,memory:{array:Ar},const:!0,slots:{0:he}});Object.assign(he,{structure:p,memory:{array:Ur},const:!0});Object.assign(Tt,{structure:a,memory:{array:Vr},const:!0,slots:{0:de}});Object.assign(de,{structure:p,memory:{array:Pr},const:!0});Object.assign(we,{slots:{0:Dt,1:Ft,2:_t,3:$t}});Object.assign(Dt,{structure:B,memory:{array:Ir},const:!0,slots:{0:Ot,1:St,2:jt,3:zt}});Object.assign(Ft,{structure:Q,memory:{array:Rr},const:!0,slots:{0:Pt,1:It,2:Rt,3:kt}});Object.assign(_t,{structure:W,memory:{array:kr},const:!0,slots:{0:qt,1:vt,2:xt,3:Et}});Object.assign($t,{structure:X,memory:{array:qr},const:!0,slots:{0:Ct,1:Kt,2:Mt,3:Tt}});Object.assign(Ae,{slots:{0:at}});Object.assign(at,{structure:a,memory:{array:vr},const:!0,slots:{0:Ue}});Object.assign(Ue,{structure:p,memory:{array:xr},const:!0});Object.assign(Ve,{slots:{0:Lt}});Object.assign(Lt,{structure:A,memory:{array:Er},const:!0,slots:{0:at}});Object.assign(Pe,{slots:{0:Bt}});Object.assign(Bt,{structure:A,memory:{array:Cr},const:!0,slots:{0:at}});Object.assign(Ie,{slots:{0:Re,1:qe,2:xe,3:Ce,4:Me,5:Te,6:De}});Object.assign(Re,{structure:D,memory:{array:Kr},const:!0,slots:{0:ke}});Object.assign(ke,{structure:T,memory:{array:Mr},reloc:16781330});Object.assign(qe,{structure:_,memory:{array:Tr},const:!0,slots:{0:ve}});Object.assign(ve,{structure:F,memory:{array:Dr},reloc:16781362});Object.assign(xe,{structure:a,memory:{array:Fr},const:!0,slots:{0:Ee}});Object.assign(Ee,{structure:p,memory:{array:_r},const:!0});Object.assign(Ce,{structure:L,memory:{array:$r},const:!0,slots:{0:Ke}});Object.assign(Ke,{structure:$,memory:{array:Lr},reloc:16781393});Object.assign(Me,{structure:Y,memory:{array:Br},const:!0,slots:{0:Dt,1:Ft,2:_t,3:$t}});Object.assign(Te,{structure:Z,memory:{array:Gr},const:!0,slots:{0:Lt}});Object.assign(De,{structure:tt,memory:{array:Hr},const:!0,slots:{0:Bt}});Object.assign(Fe,{slots:{0:_e,1:$e}});Object.assign(_e,{structure:O,memory:{array:Jr},const:!0});Object.assign($e,{structure:O,memory:{array:Nr},const:!0});Object.assign(Le,{memory:{array:ws},slots:{0:Be}});Object.assign(Be,{structure:k,memory:{array:ws,offset:0,length:8},slots:{0:Gt}});Object.assign(Gt,{structure:et,memory:{array:Qr},reloc:0});Object.assign(Ge,{slots:{0:He,1:Je,2:Ne}});Object.assign(He,{structure:s,memory:{array:Wr},const:!0,slots:{0:Ht}});Object.assign(Ht,{structure:R});Object.assign(Je,{structure:s,memory:{array:Xr},const:!0,slots:{0:Jt}});Object.assign(Jt,{structure:mt});Object.assign(Ne,{structure:a,memory:{array:Yr},const:!0,slots:{0:Qe}});Object.assign(Qe,{structure:p,memory:{array:Zr},const:!0});Object.assign(We,{memory:{array:Qt},slots:{0:Xe}});Object.assign(Xe,{structure:st,memory:{array:Qt},slots:{0:Ye}});Object.assign(Ye,{structure:k,memory:{array:Qt,offset:0,length:8},slots:{0:Gt}});Object.assign(Ze,{memory:{array:As},slots:{0:ts}});Object.assign(ts,{structure:v,memory:{array:As,offset:0,length:8},slots:{0:Nt}});Object.assign(Nt,{structure:rt,memory:{array:tn},reloc:0});Object.assign(es,{slots:{0:ss,1:rs,2:ns}});Object.assign(ss,{structure:s,memory:{array:en},const:!0,slots:{0:Ht}});Object.assign(rs,{structure:s,memory:{array:sn},const:!0,slots:{0:Jt}});Object.assign(ns,{structure:a,memory:{array:rn},const:!0,slots:{0:as}});Object.assign(as,{structure:p,memory:{array:nn},const:!0});Object.assign(os,{memory:{array:Wt},slots:{0:is}});Object.assign(is,{structure:nt,memory:{array:Wt},slots:{0:cs}});Object.assign(cs,{structure:v,memory:{array:Wt,offset:0,length:8},slots:{0:Nt}});Object.assign(us,{memory:{array:an}});Object.assign(ms,{slots:{0:ys}});Object.assign(ys,{structure:d,memory:{array:on},const:!0});Object.assign(bs,{slots:{0:ls}});Object.assign(ls,{structure:w,memory:{array:cn},const:!0});Object.assign(gs,{slots:{0:ps,1:fs,2:js,3:hs}});Object.assign(ps,{structure:s,memory:{array:un},const:!0,slots:{0:Os}});Object.assign(Os,{structure:ut});Object.assign(fs,{structure:s,memory:{array:mn},const:!0,slots:{0:Ss}});Object.assign(Ss,{structure:q});Object.assign(js,{structure:s,memory:{array:yn},const:!0,slots:{0:zs}});Object.assign(zs,{structure:x});Object.assign(hs,{structure:s,memory:{array:bn},const:!0,slots:{0:ds}});Object.assign(ds,{structure:E});const ln={argStruct:bt,thunkId:2,name:"createOutput"},gn={argStruct:gt,thunkId:3,name:"createPartialOutput"};Object.assign(s,{...e,name:"type",align:1,instance:{members:[{...t,type:6,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:s}],methods:[]}});Object.assign(S,{...e,name:"u8",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(T,{...e,type:1,name:"[20:0]u8",length:20,byteSize:21,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(D,{...e,type:13,name:"*const [20:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[]}});Object.assign(F,{...e,type:1,name:"[13:0]u8",length:13,byteSize:14,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(_,{...e,type:13,name:"*const [13:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:F}],methods:[]}});Object.assign(a,{...e,name:"comptime_int",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:a}],methods:[]}});Object.assign(p,{...e,name:"i8",byteSize:1,align:1,instance:{members:[{...t,type:2,bitOffset:0,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign($,{...e,type:1,name:"[21:0]u8",length:21,byteSize:22,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(L,{...e,type:13,name:"*const [21:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[]}});Object.assign(r,{...e,name:"comptime_float",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:r}],methods:[]}});Object.assign(f,{...e,name:"f32",byteSize:4,align:4,instance:{members:[{...t,type:4,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[]}});Object.assign(i,{...e,name:"f64",byteSize:8,align:8,instance:{members:[{...t,type:4,bitOffset:0,bitSize:64,byteSize:8,structure:i}],methods:[]}});Object.assign(B,{...e,type:2,name:"Struct3251071098",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:r},{...t,type:7,slot:2,name:"maxValue",structure:r},{...t,type:7,slot:3,name:"defaultValue",structure:r}],methods:[],template:Zt}});Object.assign(G,{...e,type:2,name:"Struct738220547",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:r},{...t,type:7,slot:1,name:"1",structure:r}],methods:[],template:re}});Object.assign(H,{...e,type:2,name:"Struct3853790599",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:r},{...t,type:7,slot:1,name:"1",structure:r}],methods:[],template:oe}});Object.assign(J,{...e,type:2,name:"Struct1632360224",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:r},{...t,type:7,slot:1,name:"1",structure:r}],methods:[],template:ue}});Object.assign(N,{...e,type:15,name:"@Vector(2, f32)",length:2,byteSize:8,align:8,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:f}],methods:[]}});Object.assign(Q,{...e,type:2,name:"Struct2761480646",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:G},{...t,type:7,slot:2,name:"maxValue",structure:H},{...t,type:7,slot:3,name:"defaultValue",structure:J}],methods:[],template:be}});Object.assign(W,{...e,type:2,name:"Struct2033008198",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:r},{...t,type:7,slot:2,name:"maxValue",structure:r},{...t,type:7,slot:3,name:"defaultValue",structure:r}],methods:[],template:ge}});Object.assign(P,{...e,name:"i32",byteSize:4,align:4,instance:{members:[{...t,type:2,bitOffset:0,bitSize:32,byteSize:4,structure:P}],methods:[]}});Object.assign(X,{...e,type:2,name:"Struct152411989",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:a},{...t,type:7,slot:2,name:"maxValue",structure:a},{...t,type:7,slot:3,name:"defaultValue",structure:a}],methods:[],template:Se}});Object.assign(Y,{...e,type:2,name:"Struct1485110009",align:1,instance:{members:[{...t,type:7,slot:0,name:"radius",structure:B},{...t,type:7,slot:1,name:"center",structure:Q},{...t,type:7,slot:2,name:"twirlAngle",structure:W},{...t,type:7,slot:3,name:"gaussOrSinc",structure:X}],methods:[],template:we}});Object.assign(A,{...e,type:2,name:"Struct3832472641",align:1,instance:{members:[{...t,type:7,slot:0,name:"channels",structure:a}],methods:[],template:Ae}});Object.assign(Z,{...e,type:2,name:"Struct558158291",align:1,instance:{members:[{...t,type:7,slot:0,name:"oImage",structure:A}],methods:[],template:Ve}});Object.assign(tt,{...e,type:2,name:"Struct1549434608",align:1,instance:{members:[{...t,type:7,slot:0,name:"outputColor",structure:A}],methods:[],template:Pe}});Object.assign(ut,{...e,type:2,name:"twirl.kernel",align:1,static:{members:[{...t,type:7,slot:0,name:"namespace",structure:D},{...t,type:7,slot:1,name:"vendor",structure:_},{...t,type:7,slot:2,name:"version",structure:a},{...t,type:7,slot:3,name:"description",structure:L},{...t,type:7,slot:4,name:"parameters",structure:Y},{...t,type:7,slot:5,name:"inputImages",structure:Z},{...t,type:7,slot:6,name:"outputImages",structure:tt}],methods:[],template:Ie}});Object.assign(R,{...e,type:15,name:"@Vector(4, u8)",length:4,byteSize:4,align:4,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(et,{...e,type:14,name:"[_]const @Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:R}],methods:[]}});Object.assign(k,{...e,type:13,name:"[]const @Vector(4, u8)",byteSize:8,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:et}],methods:[]}});Object.assign(m,{...e,name:"u32",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[]}});Object.assign(O,{...e,type:11,name:"twirl.ColorSpace",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:1,byteSize:1,structure:O}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"srgb",structure:O},{...t,type:7,slot:1,name:"display-p3",structure:O}],methods:[],template:Fe}});Object.assign(I,{...e,name:"usize",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:I}],methods:[]}});Object.assign(mt,{...e,type:15,name:"@Vector(4, f32)",length:4,byteSize:16,align:16,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:f}],methods:[]}});Object.assign(st,{...e,type:2,name:"twirl.Image(u8,4,false)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:k},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:O},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:I}],methods:[],template:Le},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:a}],methods:[],template:Ge}});Object.assign(q,{...e,type:2,name:"twirl.KernelInput(u8,twirl.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"oImage",structure:st}],methods:[],template:We}});Object.assign(rt,{...e,type:14,name:"[_]@Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:R}],methods:[]}});Object.assign(v,{...e,type:13,name:"[]@Vector(4, u8)",byteSize:8,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:rt}],methods:[]}});Object.assign(nt,{...e,type:2,name:"twirl.Image(u8,4,true)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:v},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:O},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:I}],methods:[],template:Ze},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:a}],methods:[],template:es}});Object.assign(x,{...e,type:2,name:"twirl.KernelOutput(u8,twirl.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"outputColor",structure:nt}],methods:[],template:os}});Object.assign(E,{...e,type:2,name:"twirl.KernelParameters(twirl.kernel)",byteSize:24,align:8,instance:{members:[{...t,type:4,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"radius",structure:f},{...t,type:5,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"center",structure:N},{...t,type:4,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"twirlAngle",structure:f},{...t,type:2,bitOffset:128,bitSize:32,byteSize:4,slot:3,name:"gaussOrSinc",structure:P}],methods:[],template:us}});Object.assign(d,{...e,type:10,name:"ErrorSet2554407169",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:d}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:d}],methods:[],template:ms}});Object.assign(yt,{...e,type:9,name:"ErrorSet2554407169!twirl.KernelOutput(u8,twirl.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:x},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:d}],methods:[]}});Object.assign(bt,{...e,type:5,name:"createOutput",byteSize:88,align:8,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:192,bitSize:32,byteSize:4,slot:3,name:"0",structure:m},{...t,type:3,isRequired:!0,bitOffset:224,bitSize:32,byteSize:4,slot:4,name:"1",structure:m},{...t,type:5,isRequired:!0,bitOffset:256,bitSize:192,byteSize:24,slot:0,name:"2",structure:q},{...t,type:5,isRequired:!0,bitOffset:0,bitSize:192,byteSize:24,slot:1,name:"3",structure:E},{...t,type:5,isRequired:!0,bitOffset:448,bitSize:224,byteSize:28,slot:2,name:"retval",structure:yt}],methods:[]}});Object.assign(w,{...e,type:10,name:"ErrorSet3197891492",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:w}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:w}],methods:[],template:bs}});Object.assign(lt,{...e,type:9,name:"ErrorSet3197891492!twirl.KernelOutput(u8,twirl.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:x},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:w}],methods:[]}});Object.assign(gt,{...e,type:5,name:"createPartialOutput",byteSize:96,align:8,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:192,bitSize:32,byteSize:4,slot:3,name:"0",structure:m},{...t,type:3,isRequired:!0,bitOffset:224,bitSize:32,byteSize:4,slot:4,name:"1",structure:m},{...t,type:3,isRequired:!0,bitOffset:256,bitSize:32,byteSize:4,slot:5,name:"2",structure:m},{...t,type:3,isRequired:!0,bitOffset:288,bitSize:32,byteSize:4,slot:6,name:"3",structure:m},{...t,type:5,isRequired:!0,bitOffset:320,bitSize:192,byteSize:24,slot:0,name:"4",structure:q},{...t,type:5,isRequired:!0,bitOffset:0,bitSize:192,byteSize:24,slot:1,name:"5",structure:E},{...t,type:5,isRequired:!0,bitOffset:512,bitSize:224,byteSize:28,slot:2,name:"retval",structure:lt}],methods:[]}});Object.assign(pt,{...e,type:2,name:"twirl",align:1,static:{members:[{...t,type:7,slot:0,name:"kernel",structure:s},{...t,type:7,slot:1,name:"Input",structure:s},{...t,type:7,slot:2,name:"Output",structure:s},{...t,type:7,slot:3,name:"Parameters",structure:s}],methods:[ln,gn],template:gs}});const pn=[s,S,T,D,F,_,a,p,$,L,r,f,i,B,G,H,J,N,Q,W,P,X,Y,A,Z,tt,ut,R,et,k,m,O,I,mt,st,q,rt,v,nt,x,E,d,yt,bt,w,lt,gt,pt],On=pt,fn={runtimeSafety:!1,littleEndian:!0},ot=Ms();ot.getSpecialExports();ot.recreateStructures(pn,fn);const Sn=(async()=>{const c=new URL("twirl-0016319b.wasm",import.meta.url).href;return fetch(c)})();ot.loadModule(Sn);ot.linkVariables(!0);const{constructor:jn}=On,{createPartialOutput:zn,Input:hn,kernel:ct}=jn;function dn(c,y,u,o,n={},j={}){const z=[];for(const[l]of ct.inputImages)z.push(l);const U=[];for(const[l]of ct.outputImages)U.push(l);if(Array.isArray(n)){const l=n;n={};for(const[g,h]of z.entries())n[h]=l[g]}const b=new hn(void 0),C=[];let V;for(const l of z){let g=n[l];if(g||(z.length===1&&["data","width","height"].every(h=>!!n[h])?g=n:C.push(l)),b[l]=g,V){if(g.colorSpace!==V)throw new Error(`Input images must all use the same color space: ${V}`)}else V=g.colorSpace}if(C.length>0)throw new Error(`Missing input image${C.length>1?"s":""}: ${C.join(", ")}`);const it=zn(c,y,u,o,b,j),Xt=l=>{const g={};for(const h of U){const{data:{typedArray:K},width:Yt,height:Us}=l[h];let M;if(typeof ImageData=="function"){const Vs=new Uint8ClampedArray(K.buffer,K.byteOffset,K.byteLength);M=new ImageData(Vs,Yt,o,{colorSpace:V})}else M={data:K,width:Yt,height:Us};if(U.length===1)return M;g[h]=M}return g};return it[Symbol.toStringTag]==="Promise"?it.then(Xt):Xt(it)}function wn(){const c={};for(let[y,u]of ct){if(y==="parameters"){const o={};for(const[n,j]of u){const z=o[n]={};for(let[U,b]of j)typeof b=="object"?b=b.string??b.valueOf():typeof b=="function"&&(b=An(b.name)),z[U]=b}u=o}else typeof u=="object"&&(u=u.string??u.valueOf());c[y]=u}return c}function An(c){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[c]}onmessage=async c=>{if(!Array.isArray(c.data))return;const[y,u,...o]=c.data;try{const[n,j]=await Un(y,o);postMessage([y,u,n],{transfer:j})}catch(n){postMessage(["error",u,n])}};async function Un(c,y){switch(c){case"getKernelInfo":return[wn(...y)];case"createPartialImageData":const o=await dn(...y),n=[];if("data"in o&&"width"in o&&"height"in o)n.push(o.data.buffer);else for(const j of Object.entries(o))n.push(o.data.buffer);return[o,n];default:throw new Error(`Unknown function: ${c}`)}}postMessage("ready");
