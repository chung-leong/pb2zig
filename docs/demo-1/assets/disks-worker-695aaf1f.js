import{u as ut,a as lt,b as pt,c as yt,d as ft,e as bt,f as dt,g as ht,h as gt,i as St,j as zt,k as Ot,l as _t,m as Rt,n as wt,o as qt,p as At,q as Ut,r as Vt}from"./index-9f315e7a.js";ut();lt();pt();yt();ft();bt();dt();ht();gt();St();zt();Ot();_t();Rt();wt();qt();At();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},f={},ye={},fe={},T={},be={},de={},M={},p={},h={},k={},R={},$={},b={},r={},s={},L={},he={},G={},ge={},Se={},H={},ze={},J={},x={},Oe={},N={},_e={},Q={},Re={},W={},we={},qe={},X={},Ae={},Y={},Ue={},A={},z={},Ve={},Z={},U={},O={},je={},ee={},Pe={},te={},ke={},se={},xe={},re={},Ce={},Ie={},ae={},Be={},me={},ve={},ie={},oe={},C={},_={},Ee={},ne={},Ke={},ce={},Je={},w={},Fe={},De={},l={},Te={},V={},j={},Me={},ue={},I={},$e={},Le={},le={},B={},v={},Ne={},Qe={},We={},Xe={},Ye={},Ze={},et={};Object.assign(f,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:5});Object.assign(ye,{...t,type:1,name:"[5:0]u8",length:5,byteSize:6,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:4});Object.assign(fe,{...t,type:11,name:"*const [5:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:3});Object.assign(T,{...t,type:11,name:"**const [5:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:2});Object.assign(be,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:8});Object.assign(de,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:7});Object.assign(M,{...t,type:11,name:"**const [14:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:de}],methods:[],template:null},slot:6});Object.assign(p,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:10});Object.assign(h,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:9});Object.assign(k,{...t,type:1,name:"[12:0]u8",length:12,byteSize:13,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:13});Object.assign(R,{...t,type:11,name:"*const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:k}],methods:[],template:null},slot:12});Object.assign($,{...t,type:11,name:"**const [12:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:11});Object.assign(b,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:33});Object.assign(r,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:r}],methods:[],template:null},slot:54});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:r}],methods:[],template:null},slot:53});Object.assign(L,{...t,type:11,name:"*const *const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:55});const jt=new Uint8Array([]),Pt=new Uint8Array([128,2,16,0]),P=new Uint8Array([0,0,0,0,0,0,240,63]),kt=new Uint8Array([232,2,16,0]),xt=new Uint8Array([0,0,0,0,0,0,105,64]),Ct=new Uint8Array([224,2,16,0]),It=new Uint8Array([0,0,0,0,0,0,64,64]),Bt=new Uint8Array([216,2,16,0]),vt=new Uint8Array([66,3,16,0]),Et=new Uint8Array([80,97,116,116,101,114,110,32,83,105,122,101,0]);Object.assign(he,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 200, comptime defaultValue: comptime_float = 32, comptime description: *const [12:0]u8 = "Pattern Size"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:b},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:L}],methods:[],template:{memory:{array:jt},slots:{0:{structure:s,memory:{array:Pt},slots:{0:{structure:r,memory:{array:P},address:1049216}}},1:{structure:s,memory:{array:kt},slots:{0:{structure:r,memory:{array:xt},address:1049320}}},2:{structure:s,memory:{array:Ct},slots:{0:{structure:r,memory:{array:It},address:1049312}}},3:{structure:L,memory:{array:Bt},slots:{0:{structure:R,memory:{array:vt},address:1049304,slots:{0:{structure:k,memory:{array:Et},address:1049410}}}}}}}},slot:41});Object.assign(G,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 200, comptime defaultValue: comptime_float = 32, comptime description: *const [12:0]u8 = "Pattern Size"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:he}],methods:[],template:null},slot:40});Object.assign(ge,{...t,type:1,name:"[43:0]u8",length:43,byteSize:44,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:58});Object.assign(Se,{...t,type:11,name:"*const [43:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ge}],methods:[],template:null},slot:57});Object.assign(H,{...t,type:11,name:"*const *const [43:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Se}],methods:[],template:null},slot:56});const Kt=new Uint8Array([]),Ft=new Uint8Array([208,2,16,0]),Dt=new Uint8Array([154,153,153,153,153,153,185,63]),Tt=new Uint8Array([200,2,16,0]),Mt=new Uint8Array([154,153,153,153,153,153,17,64]),$t=new Uint8Array([192,2,16,0]),Lt=new Uint8Array([113,61,10,215,163,112,229,63]),Gt=new Uint8Array([188,2,16,0]),Ht=new Uint8Array([22,3,16,0]),Jt=new Uint8Array([114,97,100,105,117,115,58,32,104,111,119,32,109,117,99,104,32,97,32,100,105,115,107,115,32,102,105,108,108,115,32,117,112,32,105,116,115,32,115,112,97,99,101,0]);Object.assign(ze,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 4.4, comptime defaultValue: comptime_float = 0.67, comptime description: *const [43:0]u8 = "radius: how much a disks fills up its space"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:b},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:H}],methods:[],template:{memory:{array:Kt},slots:{0:{structure:s,memory:{array:Ft},slots:{0:{structure:r,memory:{array:Dt},address:1049296}}},1:{structure:s,memory:{array:Tt},slots:{0:{structure:r,memory:{array:Mt},address:1049288}}},2:{structure:s,memory:{array:$t},slots:{0:{structure:r,memory:{array:Lt},address:1049280}}},3:{structure:H,memory:{array:Gt},slots:{0:{structure:Se,memory:{array:Ht},address:1049276,slots:{0:{structure:ge,memory:{array:Jt},address:1049366}}}}}}}},slot:43});Object.assign(J,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 4.4, comptime defaultValue: comptime_float = 0.67, comptime description: *const [43:0]u8 = "radius: how much a disks fills up its space"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ze}],methods:[],template:null},slot:42});Object.assign(x,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:34});const Nt=new Uint8Array([]),Qt=new Uint8Array([168,2,16,0]),mt=new Uint8Array([0,0,0,0,0,0,105,192]),Wt=new Uint8Array([168,2,16,0]);Object.assign(Oe,{...t,type:2,name:"struct{comptime comptime_float = -200, comptime comptime_float = -200}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Nt},slots:{0:{structure:s,memory:{array:Qt},slots:{0:{structure:r,memory:{array:mt},address:1049256}}},1:{structure:s,memory:{array:Wt},slots:{0:{structure:r,memory:{array:mt},address:1049256}}}}}},slot:60});Object.assign(N,{...t,type:11,name:"*const struct{comptime comptime_float = -200, comptime comptime_float = -200}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Oe}],methods:[],template:null},slot:59});const Xt=new Uint8Array([]),Yt=new Uint8Array([160,2,16,0]),Zt=new Uint8Array([0,0,0,0,0,0,137,64]),es=new Uint8Array([152,2,16,0]),ts=new Uint8Array([0,0,0,0,0,64,127,64]);Object.assign(_e,{...t,type:2,name:"struct{comptime comptime_float = 800, comptime comptime_float = 500}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Xt},slots:{0:{structure:s,memory:{array:Yt},slots:{0:{structure:r,memory:{array:Zt},address:1049248}}},1:{structure:s,memory:{array:es},slots:{0:{structure:r,memory:{array:ts},address:1049240}}}}}},slot:62});Object.assign(Q,{...t,type:11,name:"*const struct{comptime comptime_float = 800, comptime comptime_float = 500}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_e}],methods:[],template:null},slot:61});const ss=new Uint8Array([]),rs=new Uint8Array([136,2,16,0]),pe=new Uint8Array([0,0,0,0,0,0,0,0]),as=new Uint8Array([136,2,16,0]);Object.assign(Re,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:ss},slots:{0:{structure:s,memory:{array:rs},slots:{0:{structure:r,memory:{array:pe},address:1049224}}},1:{structure:s,memory:{array:as},slots:{0:{structure:r,memory:{array:pe},address:1049224}}}}}},slot:64});Object.assign(W,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Re}],methods:[],template:null},slot:63});Object.assign(we,{...t,type:1,name:"[10:0]u8",length:10,byteSize:11,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:67});Object.assign(qe,{...t,type:11,name:"*const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:we}],methods:[],template:null},slot:66});Object.assign(X,{...t,type:11,name:"*const *const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:qe}],methods:[],template:null},slot:65});const ms=new Uint8Array([]),is=new Uint8Array([170,170,170,170]),a=new Uint8Array([]),os=new Uint8Array([170,170,170,170]),ns=new Uint8Array([170,170,170,170]),cs=new Uint8Array([184,2,16,0]),us=new Uint8Array([11,3,16,0]),ls=new Uint8Array([66,97,115,101,32,80,111,105,110,116,0]);Object.assign(Ae,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -200, comptime comptime_float = -200} = .{-200, -200}, comptime maxValue: struct{comptime comptime_float = 800, comptime comptime_float = 500} = .{800, 500}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [10:0]u8 = "Base Point"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:x},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:N},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:Q},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:W},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:X}],methods:[],template:{memory:{array:ms},slots:{0:{structure:N,memory:{array:is},slots:{0:{structure:Oe,memory:{array:a},address:-1431655766}}},1:{structure:Q,memory:{array:os},slots:{0:{structure:_e,memory:{array:a},address:-1431655766}}},2:{structure:W,memory:{array:ns},slots:{0:{structure:Re,memory:{array:a},address:-1431655766}}},3:{structure:X,memory:{array:cs},slots:{0:{structure:qe,memory:{array:us},address:1049272,slots:{0:{structure:we,memory:{array:ls},address:1049355}}}}}}}},slot:45});Object.assign(Y,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -200, comptime comptime_float = -200} = .{-200, -200}, comptime maxValue: struct{comptime comptime_float = 800, comptime comptime_float = 500} = .{800, 500}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [10:0]u8 = "Base Point"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ae}],methods:[],template:null},slot:44});Object.assign(Ue,{...t,type:1,name:"[2]@Vector(2, f32)",length:2,byteSize:16,align:3,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,structure:x}],methods:[],template:null},slot:35});const ps=new Uint8Array([]),ys=new Uint8Array([144,2,16,0]),it=new Uint8Array([0,0,0,0,0,0,240,191]),fs=new Uint8Array([144,2,16,0]);Object.assign(A,{...t,type:2,name:"struct{comptime comptime_float = -1, comptime comptime_float = -1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:ps},slots:{0:{structure:s,memory:{array:ys},slots:{0:{structure:r,memory:{array:it},address:1049232}}},1:{structure:s,memory:{array:fs},slots:{0:{structure:r,memory:{array:it},address:1049232}}}}}},slot:79});Object.assign(z,{...t,type:11,name:"*const struct{comptime comptime_float = -1, comptime comptime_float = -1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:78});const bs=new Uint8Array([]),ds=new Uint8Array([170,170,170,170]),hs=new Uint8Array([170,170,170,170]);Object.assign(Ve,{...t,type:2,name:"struct{comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:z},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:z}],methods:[],template:{memory:{array:bs},slots:{0:{structure:z,memory:{array:ds},slots:{0:{structure:A,memory:{array:a},address:-1431655766}}},1:{structure:z,memory:{array:hs},slots:{0:{structure:A,memory:{array:a},address:-1431655766}}}}}},slot:69});Object.assign(Z,{...t,type:11,name:"*const struct{comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ve}],methods:[],template:null},slot:68});const gs=new Uint8Array([]),Ss=new Uint8Array([128,2,16,0]),zs=new Uint8Array([128,2,16,0]);Object.assign(U,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:gs},slots:{0:{structure:s,memory:{array:Ss},slots:{0:{structure:r,memory:{array:P},address:1049216}}},1:{structure:s,memory:{array:zs},slots:{0:{structure:r,memory:{array:P},address:1049216}}}}}},slot:81});Object.assign(O,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:U}],methods:[],template:null},slot:80});const Os=new Uint8Array([]),_s=new Uint8Array([170,170,170,170]),Rs=new Uint8Array([170,170,170,170]);Object.assign(je,{...t,type:2,name:"struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:O},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:O}],methods:[],template:{memory:{array:Os},slots:{0:{structure:O,memory:{array:_s},slots:{0:{structure:U,memory:{array:a},address:-1431655766}}},1:{structure:O,memory:{array:Rs},slots:{0:{structure:U,memory:{array:a},address:-1431655766}}}}}},slot:71});Object.assign(ee,{...t,type:11,name:"*const struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:je}],methods:[],template:null},slot:70});const ws=new Uint8Array([]),qs=new Uint8Array([128,2,16,0]),As=new Uint8Array([136,2,16,0]);Object.assign(Pe,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:ws},slots:{0:{structure:s,memory:{array:qs},slots:{0:{structure:r,memory:{array:P},address:1049216}}},1:{structure:s,memory:{array:As},slots:{0:{structure:r,memory:{array:pe},address:1049224}}}}}},slot:83});Object.assign(te,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Pe}],methods:[],template:null},slot:82});const Us=new Uint8Array([]),Vs=new Uint8Array([136,2,16,0]),js=new Uint8Array([128,2,16,0]);Object.assign(ke,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Us},slots:{0:{structure:s,memory:{array:Vs},slots:{0:{structure:r,memory:{array:pe},address:1049224}}},1:{structure:s,memory:{array:js},slots:{0:{structure:r,memory:{array:P},address:1049216}}}}}},slot:85});Object.assign(se,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ke}],methods:[],template:null},slot:84});const Ps=new Uint8Array([]),ks=new Uint8Array([170,170,170,170]),xs=new Uint8Array([170,170,170,170]);Object.assign(xe,{...t,type:2,name:"struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 0} = .{1, 0}, comptime struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:te},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:se}],methods:[],template:{memory:{array:Ps},slots:{0:{structure:te,memory:{array:ks},slots:{0:{structure:Pe,memory:{array:a},address:-1431655766}}},1:{structure:se,memory:{array:xs},slots:{0:{structure:ke,memory:{array:a},address:-1431655766}}}}}},slot:73});Object.assign(re,{...t,type:11,name:"*const struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 0} = .{1, 0}, comptime struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:xe}],methods:[],template:null},slot:72});Object.assign(Ce,{...t,type:1,name:"[26:0]u8",length:26,byteSize:27,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:76});Object.assign(Ie,{...t,type:11,name:"*const [26:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ce}],methods:[],template:null},slot:75});Object.assign(ae,{...t,type:11,name:"*const *const [26:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ie}],methods:[],template:null},slot:74});const Cs=new Uint8Array([]),Is=new Uint8Array([170,170,170,170]),Bs=new Uint8Array([170,170,170,170]),vs=new Uint8Array([170,170,170,170]),Es=new Uint8Array([180,2,16,0]),Ks=new Uint8Array([240,2,16,0]),Fs=new Uint8Array([82,111,116,97,116,105,111,110,32,97,114,111,117,110,100,32,66,97,115,101,32,80,111,105,110,116,0]);Object.assign(Be,{...t,type:2,name:'struct{comptime type: type = [2]@Vector(2, f32), comptime minValue: struct{comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}} = .{.{-1, -1}, .{-1, -1}}, comptime maxValue: struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}} = .{.{1, 1}, .{1, 1}}, comptime defaultValue: struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 0} = .{1, 0}, comptime struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}} = .{.{1, 0}, .{0, 1}}, comptime description: *const [26:0]u8 = "Rotation around Base Point"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:Ue},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:Z},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:ee},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:re},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:ae}],methods:[],template:{memory:{array:Cs},slots:{0:{structure:Z,memory:{array:Is},slots:{0:{structure:Ve,memory:{array:a},address:-1431655766}}},1:{structure:ee,memory:{array:Bs},slots:{0:{structure:je,memory:{array:a},address:-1431655766}}},2:{structure:re,memory:{array:vs},slots:{0:{structure:xe,memory:{array:a},address:-1431655766}}},3:{structure:ae,memory:{array:Es},slots:{0:{structure:Ie,memory:{array:Ks},address:1049268,slots:{0:{structure:Ce,memory:{array:Fs},address:1049328}}}}}}}},slot:47});Object.assign(me,{...t,type:11,name:'*const struct{comptime type: type = [2]@Vector(2, f32), comptime minValue: struct{comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}} = .{.{-1, -1}, .{-1, -1}}, comptime maxValue: struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}} = .{.{1, 1}, .{1, 1}}, comptime defaultValue: struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 0} = .{1, 0}, comptime struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}} = .{.{1, 0}, .{0, 1}}, comptime description: *const [26:0]u8 = "Rotation around Base Point"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Be}],methods:[],template:null},slot:46});const Ds=new Uint8Array([]),Ts=new Uint8Array([170,170,170,170]),Ms=new Uint8Array([170,170,170,170]),$s=new Uint8Array([170,170,170,170]),Ls=new Uint8Array([170,170,170,170]);Object.assign(ve,{...t,type:2,name:'struct{comptime size: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 200, comptime defaultValue: comptime_float = 32, comptime description: *const [12:0]u8 = "Pattern Size"} = .{.type = f32, .minValue = 1, .maxValue = 200, .defaultValue = 32, .description = "Pattern Size"}, comptime radius: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 4.4, comptime defaultValue: comptime_float = 0.67, comptime description: *const [43:0]u8 = "radius: how much a disks fills up its space"} = .{.type = f32, .minValue = 0.1, .maxValue = 4.4, .defaultValue = 0.67, .description = "radius: how much a disks fills up its space"}, comptime base: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -200, comptime comptime_float = -200} = .{-200, -200}, comptime maxValue: struct{comptime comptime_float = 800, comptime comptime_float = 500} = .{800, 500}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [10:0]u8 = "Base Point"} = .{.type = @Vector(2, f32), .minValue = .{-200, -200}, .maxValue = .{800, 500}, .defaultValue = .{0, 0}, .description = "Base Point"}, comptime rotation: struct{comptime type: type = [2]@Vector(2, f32), comptime minValue: struct{comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}} = .{.{-1, -1}, .{-1, -1}}, comptime maxValue: struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}} = .{.{1, 1}, .{1, 1}}, comptime defaultValue: struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 0} = .{1, 0}, comptime struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}} = .{.{1, 0}, .{0, 1}}, comptime description: *const [26:0]u8 = "Rotation around Base Point"} = .{.type = [2]@Vector(2, f32), .minValue = .{.{-1, -1}, .{-1, -1}}, .maxValue = .{.{1, 1}, .{1, 1}}, .defaultValue = .{.{1, 0}, .{0, 1}}, .description = "Rotation around Base Point"}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"size",structure:G},{...e,type:8,isRequired:!1,slot:1,name:"radius",structure:J},{...e,type:8,isRequired:!1,slot:2,name:"base",structure:Y},{...e,type:8,isRequired:!1,slot:3,name:"rotation",structure:me}],methods:[],template:{memory:{array:Ds},slots:{0:{structure:G,memory:{array:Ts},slots:{0:{structure:he,memory:{array:a},address:-1431655766}}},1:{structure:J,memory:{array:Ms},slots:{0:{structure:ze,memory:{array:a},address:-1431655766}}},2:{structure:Y,memory:{array:$s},slots:{0:{structure:Ae,memory:{array:a},address:-1431655766}}},3:{structure:me,memory:{array:Ls},slots:{0:{structure:Be,memory:{array:a},address:-1431655766}}}}}},slot:15});Object.assign(ie,{...t,type:11,name:'*struct{comptime size: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 200, comptime defaultValue: comptime_float = 32, comptime description: *const [12:0]u8 = "Pattern Size"} = .{.type = f32, .minValue = 1, .maxValue = 200, .defaultValue = 32, .description = "Pattern Size"}, comptime radius: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 4.4, comptime defaultValue: comptime_float = 0.67, comptime description: *const [43:0]u8 = "radius: how much a disks fills up its space"} = .{.type = f32, .minValue = 0.1, .maxValue = 4.4, .defaultValue = 0.67, .description = "radius: how much a disks fills up its space"}, comptime base: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -200, comptime comptime_float = -200} = .{-200, -200}, comptime maxValue: struct{comptime comptime_float = 800, comptime comptime_float = 500} = .{800, 500}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [10:0]u8 = "Base Point"} = .{.type = @Vector(2, f32), .minValue = .{-200, -200}, .maxValue = .{800, 500}, .defaultValue = .{0, 0}, .description = "Base Point"}, comptime rotation: struct{comptime type: type = [2]@Vector(2, f32), comptime minValue: struct{comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}} = .{.{-1, -1}, .{-1, -1}}, comptime maxValue: struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}} = .{.{1, 1}, .{1, 1}}, comptime defaultValue: struct{comptime struct{comptime comptime_float = 1, comptime comptime_float = 0} = .{1, 0}, comptime struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}} = .{.{1, 0}, .{0, 1}}, comptime description: *const [26:0]u8 = "Rotation around Base Point"} = .{.type = [2]@Vector(2, f32), .minValue = .{.{-1, -1}, .{-1, -1}}, .maxValue = .{.{1, 1}, .{1, 1}}, .defaultValue = .{.{1, 0}, .{0, 1}}, .description = "Rotation around Base Point"}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ve}],methods:[],template:null},slot:14});Object.assign(oe,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:77});const Gs=new Uint8Array([]),Hs=new Uint8Array([176,2,16,0]),Js=new Uint8Array([4,0,0,0]);Object.assign(C,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:oe}],methods:[],template:{memory:{array:Gs},slots:{0:{structure:oe,memory:{array:Hs},slots:{0:{structure:p,memory:{array:Js},address:1049264}}}}}},slot:49});Object.assign(_,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:C}],methods:[],template:null},slot:48});const Ns=new Uint8Array([]),Qs=new Uint8Array([170,170,170,170]);Object.assign(Ee,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:_}],methods:[],template:{memory:{array:Ns},slots:{0:{structure:_,memory:{array:Qs},slots:{0:{structure:C,memory:{array:a},address:-1431655766}}}}}},slot:17});Object.assign(ne,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ee}],methods:[],template:null},slot:16});const Ws=new Uint8Array([]),Xs=new Uint8Array([170,170,170,170]);Object.assign(Ke,{...t,type:2,name:"struct{comptime pxlOut: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"pxlOut",structure:_}],methods:[],template:{memory:{array:Ws},slots:{0:{structure:_,memory:{array:Xs},slots:{0:{structure:C,memory:{array:a},address:-1431655766}}}}}},slot:19});Object.assign(ce,{...t,type:11,name:"*struct{comptime pxlOut: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ke}],methods:[],template:null},slot:18});const Ys=new Uint8Array([]),Zs=new Uint8Array([]),er=new Uint8Array([68,253,15,0]),tr=new Uint8Array([18,51,16,0]),sr=new Uint8Array([68,105,115,107,115,0]),rr=new Uint8Array([100,253,15,0]),ar=new Uint8Array([3,51,16,0]),mr=new Uint8Array([80,101,116,114,105,32,76,101,115,107,105,110,101,110,0]),ir=new Uint8Array([132,253,15,0]),or=new Uint8Array([1,0,0,0]),nr=new Uint8Array([188,253,15,0]),cr=new Uint8Array([246,50,16,0]),ur=new Uint8Array([68,105,115,107,32,116,105,108,105,110,103,32,0]),lr=new Uint8Array([170,170,170,170]),pr=new Uint8Array([170,170,170,170]),yr=new Uint8Array([170,170,170,170]);Object.assign(Je,{...t,type:2,name:"disks.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ys}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:T},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:M},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:h},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:$},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:ie},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:ne},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:ce}],methods:[],template:{memory:{array:Zs},slots:{0:{structure:T,memory:{array:er},slots:{0:{structure:fe,memory:{array:tr},slots:{0:{structure:ye,memory:{array:sr},address:1061650}}}}},1:{structure:M,memory:{array:rr},slots:{0:{structure:de,memory:{array:ar},slots:{0:{structure:be,memory:{array:mr},address:1061635}}}}},2:{structure:h,memory:{array:ir},slots:{0:{structure:p,memory:{array:or}}}},3:{structure:$,memory:{array:nr},slots:{0:{structure:R,memory:{array:cr},slots:{0:{structure:k,memory:{array:ur},address:1061622}}}}},4:{structure:ie,memory:{array:lr},slots:{0:{structure:ve,memory:{array:a},address:-1431655766}}},5:{structure:ne,memory:{array:pr},slots:{0:{structure:Ee,memory:{array:a},address:-1431655766}}},6:{structure:ce,memory:{array:yr},slots:{0:{structure:Ke,memory:{array:a},address:-1431655766}}}}}},slot:1});Object.assign(w,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:24});Object.assign(Fe,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(De,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Fe}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const fr=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Te,{...t,type:9,name:"disks.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:p},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:p}],methods:[],template:{memory:{array:fr}}},slot:26});Object.assign(V,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:V}],methods:[],template:null},slot:27});Object.assign(j,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:j}],methods:[],template:null},slot:28});Object.assign(Me,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:50});const br=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),dr=new Uint8Array([]),hr=new Uint8Array([248,251,15,0]),gr=new Uint8Array([4,0,0,0]);Object.assign(ue,{...t,type:2,name:"disks.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:De},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Te},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:V},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:j}],methods:[],template:{memory:{array:br}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:Me},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:dr},slots:{0:{structure:h,memory:{array:hr},slots:{0:{structure:p,memory:{array:gr}}}}}}},slot:21});const Sr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),zr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Or=new Uint8Array([0,0,0,0,0,0,0,0]),tt=new Uint8Array([]);Object.assign(I,{...t,type:2,name:"disks.KernelInput(u8,disks.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:ue}],methods:[],template:{memory:{array:Sr},slots:{0:{structure:ue,memory:{array:zr},slots:{0:{structure:De,memory:{array:Or},slots:{0:{structure:Fe,memory:{array:tt}}}}}}}}},slot:20});Object.assign($e,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(Le,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:$e}],methods:[],template:null},slot:31});const _r=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Rr=new Uint8Array([]),wr=new Uint8Array([248,251,15,0]),qr=new Uint8Array([4,0,0,0]);Object.assign(le,{...t,type:2,name:"disks.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Le},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Te},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:V},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:j}],methods:[],template:{memory:{array:_r}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:Me},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:Rr},slots:{0:{structure:h,memory:{array:wr},slots:{0:{structure:p,memory:{array:qr}}}}}}},slot:30});const Ar=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ur=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Vr=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(B,{...t,type:2,name:"disks.KernelOutput(u8,disks.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"pxlOut",structure:le}],methods:[],template:{memory:{array:Ar},slots:{0:{structure:le,memory:{array:Ur},slots:{0:{structure:Le,memory:{array:Vr},slots:{0:{structure:$e,memory:{array:tt}}}}}}}}},slot:29});const jr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,66,31,133,43,63]);Object.assign(v,{...t,type:2,name:"disks.KernelParameters(disks.kernel)",length:1,byteSize:32,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"size",structure:b},{...e,type:4,isRequired:!1,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"radius",structure:b},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:2,name:"base",structure:x},{...e,type:6,isRequired:!1,bitOffset:64,bitSize:128,byteSize:16,slot:3,name:"rotation",structure:Ue}],methods:[],template:{memory:{array:jr}}},slot:32});Object.assign(Ne,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(disks.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:51});Object.assign(Qe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(disks.createOutput)).Fn.return_type.?).ErrorUnion.error_set!disks.KernelOutput(u8,disks.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:B},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Ne}],methods:[],template:null},slot:38});Object.assign(We,{...t,type:3,name:"createOutput",length:1,byteSize:96,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:320,bitSize:192,byteSize:24,slot:2,name:"2",structure:I},{...e,type:6,bitOffset:0,bitSize:256,byteSize:32,slot:3,name:"3",structure:v},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Qe}],methods:[],template:null},slot:36});Object.assign(Xe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(disks.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:52});Object.assign(Ye,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(disks.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!disks.KernelOutput(u8,disks.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:B},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Xe}],methods:[],template:null},slot:39});Object.assign(Ze,{...t,type:3,name:"createPartialOutput",length:1,byteSize:104,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:320,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:352,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:384,bitSize:192,byteSize:24,slot:4,name:"4",structure:I},{...e,type:6,bitOffset:0,bitSize:256,byteSize:32,slot:5,name:"5",structure:v},{...e,type:6,bitOffset:576,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Ye}],methods:[],template:null},slot:37});const Pr={argStruct:We,thunk:6,name:"createOutput"},kr={argStruct:Ze,thunk:3,name:"createPartialOutput"};Object.assign(et,{...t,type:2,name:"disks",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:tt}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:Je},{...e,type:7,isRequired:!1,name:"Input",structure:I},{...e,type:7,isRequired:!1,name:"Output",structure:B},{...e,type:7,isRequired:!1,name:"Parameters",structure:v}],methods:[Pr,kr],template:null},slot:0});const xr=[f,ye,fe,T,be,de,M,p,h,k,R,$,b,r,s,L,he,G,ge,Se,H,ze,J,x,Oe,N,_e,Q,Re,W,we,qe,X,Ae,Y,Ue,A,z,Ve,Z,U,O,je,ee,Pe,te,ke,se,xe,re,Ce,Ie,ae,Be,me,ve,ie,oe,C,_,Ee,ne,Ke,ce,Je,w,Fe,De,l,Te,V,j,Me,ue,I,$e,Le,le,B,v,Ne,Qe,We,Xe,Ye,Ze,et],Cr=Ut(xr),Ir=et.constructor,Br=(async()=>{const n=new URL("disks-2e429759.wasm",import.meta.url).href;return fetch(n)})();Vt(Br,{...Cr,writeBack:!0});const{createOutput:$r,createPartialOutput:vr,kernel:He,Input:Er,Output:Lr,Parameters:Gr}=Ir;function Kr(n,u,i,m,o={},g={}){if(Array.isArray(o)){const d=o;o={};for(const[y,S]of Object.keys(He.inputImages).entries())o[S]=d[y]}const E=new Er(void 0),K=Object.keys(He.inputImages),c=[];let q;for(const d of K){let y=o[d];if(y||(K.length===1&&["data","width","height"].every(S=>!!o[S])?y=o:c.push(d)),E[d]=y,q){if(y.colorSpace!==q)throw new Error(`Input images must all use the same color space: ${q}`)}else q=y.colorSpace}if(c.length>0)throw new Error(`Missing input image${c.length>1?"s":""}: ${c.join(", ")}`);const Ge=vr(n,u,i,m,E,g),st=d=>{const y=Object.keys(d),S={};for(const rt of y){const{data:{typedArray:F},width:at,height:nt}=d[rt];let D;if(typeof ImageData=="function"){const ct=new Uint8ClampedArray(F.buffer,F.byteOffset,F.byteLength);D=new ImageData(ct,at,m,{colorSpace:q})}else D={data:F,width:at,height:nt};if(y.length===1)return D;S[rt]=D}return S};return Ge[Symbol.toStringTag]==="Promise"?Ge.then(st):st(Ge)}function Fr(){const n={};for(let[u,i]of Object.entries(He)){if(u==="parameters"){const m={};for(const[o,g]of Object.entries(i)){const E=m[o]={};for(let[K,c]of Object.entries(g))typeof c=="object"?"string"in c?c=c.string:c=ot(c):typeof c=="function"&&(c=Dr(c.name)),E[K]=c}i=m}else typeof i=="object"&&("string"in i?i=i.string:i=i.valueOf());n[u]=i}return n}function ot(n){const u=[];for(let[i,m]of Object.entries(n))typeof m=="object"&&(m=ot(m)),u[i]=m;return u}function Dr(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[u,i,...m]=n.data;Tr(u,m).then(([o,g])=>{postMessage([u,i,o],{transfer:g})}).catch(o=>{postMessage(["error",i,o])})};async function Tr(n,u){switch(n){case"getKernelInfo":return[Fr(...u)];case"createPartialImageData":const m=await Kr(...u),o=[];if("data"in m&&"width"in m&&"height"in m)o.push(m.data.buffer);else for(const g of Object.entries(m))o.push(m.data.buffer);return[m,o];default:throw new Error(`Unknown function: ${n}`)}}
