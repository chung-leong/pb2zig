import{u as Le,a as Ge,b as He,c as Je,d as Ne,e as Qe,f as We,g as Xe,h as Ye,i as Ze,j as et,k as tt,l as st,m as rt,n as at,o as it,p as nt,q as mt,r as ot}from"./index-9f315e7a.js";Le();Ge();He();Je();Ne();Qe();We();Xe();Ye();Ze();et();tt();st();rt();at();it();nt();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},b={},X={},Y={},I={},Z={},ee={},C={},y={},h={},te={},se={},v={},f={},n={},s={},re={},ae={},E={},ie={},B={},ne={},me={},K={},oe={},F={},ue={},le={},D={},ce={},T={},ye={},M={},pe={},be={},$={},fe={},L={},de={},G={},H={},A={},z={},he={},J={},Se={},N={},Ve={},O={},ge={},ze={},l={},Oe={},w={},q={},Re={},Q={},U={},we={},qe={},W={},V={},j={},je={},_e={},Pe={},ke={},xe={},Ie={},Ce={};Object.assign(b,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:5});Object.assign(X,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:4});Object.assign(Y,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:3});Object.assign(I,{...t,type:11,name:"**const [13:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:2});Object.assign(Z,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:8});Object.assign(ee,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:7});Object.assign(C,{...t,type:11,name:"**const [14:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:6});Object.assign(y,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:10});Object.assign(h,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:9});Object.assign(te,{...t,type:1,name:"[11:0]u8",length:11,byteSize:12,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:13});Object.assign(se,{...t,type:11,name:"*const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:12});Object.assign(v,{...t,type:11,name:"**const [11:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:11});Object.assign(f,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:33});Object.assign(n,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:n}],methods:[],template:null},slot:51});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:n}],methods:[],template:null},slot:50});Object.assign(re,{...t,type:1,name:"[12:0]u8",length:12,byteSize:13,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:54});Object.assign(ae,{...t,type:11,name:"*const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:53});Object.assign(E,{...t,type:11,name:"*const *const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:52});const ut=new Uint8Array([]),lt=new Uint8Array([144,30,16,0]),De=new Uint8Array([0,0,0,0,0,0,240,63]),ct=new Uint8Array([176,30,16,0]),yt=new Uint8Array([0,0,0,0,0,0,89,64]),pt=new Uint8Array([168,30,16,0]),bt=new Uint8Array([0,0,0,0,0,0,62,64]),ft=new Uint8Array([160,30,16,0]),dt=new Uint8Array([239,30,16,0]),ht=new Uint8Array([80,97,116,116,101,114,110,32,83,105,122,101,0]);Object.assign(ie,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 30, comptime description: *const [12:0]u8 = "Pattern Size"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:E}],methods:[],template:{memory:{array:ut},slots:{0:{structure:s,memory:{array:lt},slots:{0:{structure:n,memory:{array:De},address:1056400}}},1:{structure:s,memory:{array:ct},slots:{0:{structure:n,memory:{array:yt},address:1056432}}},2:{structure:s,memory:{array:pt},slots:{0:{structure:n,memory:{array:bt},address:1056424}}},3:{structure:E,memory:{array:ft},slots:{0:{structure:ae,memory:{array:dt},address:1056416,slots:{0:{structure:re,memory:{array:ht},address:1056495}}}}}}}},slot:40});Object.assign(B,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 30, comptime description: *const [12:0]u8 = "Pattern Size"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:39});Object.assign(ne,{...t,type:1,name:"[43:0]u8",length:43,byteSize:44,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:57});Object.assign(me,{...t,type:11,name:"*const [43:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:56});Object.assign(K,{...t,type:11,name:"*const *const [43:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:55});const St=new Uint8Array([]),gt=new Uint8Array([152,30,16,0]),zt=new Uint8Array([0,0,0,0,0,0,0,0]),Ot=new Uint8Array([144,30,16,0]),Rt=new Uint8Array([136,30,16,0]),wt=new Uint8Array([225,122,20,174,71,225,218,63]),qt=new Uint8Array([128,30,16,0]),At=new Uint8Array([195,30,16,0]),Ut=new Uint8Array([82,97,100,105,117,115,58,32,104,111,119,32,109,117,99,104,32,97,32,100,105,115,107,115,32,102,105,108,108,115,32,117,112,32,105,116,115,32,115,112,97,99,101,0]);Object.assign(oe,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.42, comptime description: *const [43:0]u8 = "Radius: how much a disks fills up its space"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:K}],methods:[],template:{memory:{array:St},slots:{0:{structure:s,memory:{array:gt},slots:{0:{structure:n,memory:{array:zt},address:1056408}}},1:{structure:s,memory:{array:Ot},slots:{0:{structure:n,memory:{array:De},address:1056400}}},2:{structure:s,memory:{array:Rt},slots:{0:{structure:n,memory:{array:wt},address:1056392}}},3:{structure:K,memory:{array:qt},slots:{0:{structure:me,memory:{array:At},address:1056384,slots:{0:{structure:ne,memory:{array:Ut},address:1056451}}}}}}}},slot:42});Object.assign(F,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.42, comptime description: *const [43:0]u8 = "Radius: how much a disks fills up its space"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:41});Object.assign(ue,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:34});const Vt=new Uint8Array([]),jt=new Uint8Array([112,30,16,0]),Fe=new Uint8Array([0,0,0,0,0,0,105,192]),_t=new Uint8Array([112,30,16,0]);Object.assign(le,{...t,type:2,name:"struct{comptime comptime_float = -200, comptime comptime_float = -200}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Vt},slots:{0:{structure:s,memory:{array:jt},slots:{0:{structure:n,memory:{array:Fe},address:1056368}}},1:{structure:s,memory:{array:_t},slots:{0:{structure:n,memory:{array:Fe},address:1056368}}}}}},slot:59});Object.assign(D,{...t,type:11,name:"*const struct{comptime comptime_float = -200, comptime comptime_float = -200}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:58});const Pt=new Uint8Array([]),kt=new Uint8Array([104,30,16,0]),xt=new Uint8Array([0,0,0,0,0,0,137,64]),It=new Uint8Array([96,30,16,0]),Ct=new Uint8Array([0,0,0,0,0,64,127,64]);Object.assign(ce,{...t,type:2,name:"struct{comptime comptime_float = 800, comptime comptime_float = 500}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Pt},slots:{0:{structure:s,memory:{array:kt},slots:{0:{structure:n,memory:{array:xt},address:1056360}}},1:{structure:s,memory:{array:It},slots:{0:{structure:n,memory:{array:Ct},address:1056352}}}}}},slot:61});Object.assign(T,{...t,type:11,name:"*const struct{comptime comptime_float = 800, comptime comptime_float = 500}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:60});const vt=new Uint8Array([]),Et=new Uint8Array([88,30,16,0]),Bt=new Uint8Array([51,51,51,51,51,227,117,64]),Kt=new Uint8Array([80,30,16,0]),Ft=new Uint8Array([205,204,204,204,204,12,89,64]);Object.assign(ye,{...t,type:2,name:"struct{comptime comptime_float = 350.2, comptime comptime_float = 100.2}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:vt},slots:{0:{structure:s,memory:{array:Et},slots:{0:{structure:n,memory:{array:Bt},address:1056344}}},1:{structure:s,memory:{array:Kt},slots:{0:{structure:n,memory:{array:Ft},address:1056336}}}}}},slot:63});Object.assign(M,{...t,type:11,name:"*const struct{comptime comptime_float = 350.2, comptime comptime_float = 100.2}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:62});Object.assign(pe,{...t,type:1,name:"[10:0]u8",length:10,byteSize:11,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:66});Object.assign(be,{...t,type:11,name:"*const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pe}],methods:[],template:null},slot:65});Object.assign($,{...t,type:11,name:"*const *const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:64});const Dt=new Uint8Array([]),Tt=new Uint8Array([170,170,170,170]),c=new Uint8Array([]),Mt=new Uint8Array([170,170,170,170]),$t=new Uint8Array([170,170,170,170]),Lt=new Uint8Array([124,30,16,0]),Gt=new Uint8Array([184,30,16,0]),Ht=new Uint8Array([66,97,115,101,32,80,111,105,110,116,0]);Object.assign(fe,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -200, comptime comptime_float = -200} = .{-200, -200}, comptime maxValue: struct{comptime comptime_float = 800, comptime comptime_float = 500} = .{800, 500}, comptime defaultValue: struct{comptime comptime_float = 350.2, comptime comptime_float = 100.2} = .{350.2, 100.2}, comptime description: *const [10:0]u8 = "Base Point"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:ue},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:D},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:T},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:M},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:$}],methods:[],template:{memory:{array:Dt},slots:{0:{structure:D,memory:{array:Tt},slots:{0:{structure:le,memory:{array:c},address:-1431655766}}},1:{structure:T,memory:{array:Mt},slots:{0:{structure:ce,memory:{array:c},address:-1431655766}}},2:{structure:M,memory:{array:$t},slots:{0:{structure:ye,memory:{array:c},address:-1431655766}}},3:{structure:$,memory:{array:Lt},slots:{0:{structure:be,memory:{array:Gt},address:1056380,slots:{0:{structure:pe,memory:{array:Ht},address:1056440}}}}}}}},slot:44});Object.assign(L,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -200, comptime comptime_float = -200} = .{-200, -200}, comptime maxValue: struct{comptime comptime_float = 800, comptime comptime_float = 500} = .{800, 500}, comptime defaultValue: struct{comptime comptime_float = 350.2, comptime comptime_float = 100.2} = .{350.2, 100.2}, comptime description: *const [10:0]u8 = "Base Point"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:43});const Jt=new Uint8Array([]),Nt=new Uint8Array([170,170,170,170]),Qt=new Uint8Array([170,170,170,170]),Wt=new Uint8Array([170,170,170,170]);Object.assign(de,{...t,type:2,name:'struct{comptime size: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 30, comptime description: *const [12:0]u8 = "Pattern Size"} = .{.type = f32, .minValue = 1, .maxValue = 100, .defaultValue = 30, .description = "Pattern Size"}, comptime radius: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.42, comptime description: *const [43:0]u8 = "Radius: how much a disks fills up its space"} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.42, .description = "Radius: how much a disks fills up its space"}, comptime base: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -200, comptime comptime_float = -200} = .{-200, -200}, comptime maxValue: struct{comptime comptime_float = 800, comptime comptime_float = 500} = .{800, 500}, comptime defaultValue: struct{comptime comptime_float = 350.2, comptime comptime_float = 100.2} = .{350.2, 100.2}, comptime description: *const [10:0]u8 = "Base Point"} = .{.type = @Vector(2, f32), .minValue = .{-200, -200}, .maxValue = .{800, 500}, .defaultValue = .{350.2, 100.2}, .description = "Base Point"}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"size",structure:B},{...e,type:8,isRequired:!1,slot:1,name:"radius",structure:F},{...e,type:8,isRequired:!1,slot:2,name:"base",structure:L}],methods:[],template:{memory:{array:Jt},slots:{0:{structure:B,memory:{array:Nt},slots:{0:{structure:ie,memory:{array:c},address:-1431655766}}},1:{structure:F,memory:{array:Qt},slots:{0:{structure:oe,memory:{array:c},address:-1431655766}}},2:{structure:L,memory:{array:Wt},slots:{0:{structure:fe,memory:{array:c},address:-1431655766}}}}}},slot:15});Object.assign(G,{...t,type:11,name:'*struct{comptime size: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 30, comptime description: *const [12:0]u8 = "Pattern Size"} = .{.type = f32, .minValue = 1, .maxValue = 100, .defaultValue = 30, .description = "Pattern Size"}, comptime radius: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.42, comptime description: *const [43:0]u8 = "Radius: how much a disks fills up its space"} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.42, .description = "Radius: how much a disks fills up its space"}, comptime base: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -200, comptime comptime_float = -200} = .{-200, -200}, comptime maxValue: struct{comptime comptime_float = 800, comptime comptime_float = 500} = .{800, 500}, comptime defaultValue: struct{comptime comptime_float = 350.2, comptime comptime_float = 100.2} = .{350.2, 100.2}, comptime description: *const [10:0]u8 = "Base Point"} = .{.type = @Vector(2, f32), .minValue = .{-200, -200}, .maxValue = .{800, 500}, .defaultValue = .{350.2, 100.2}, .description = "Base Point"}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:de}],methods:[],template:null},slot:14});Object.assign(H,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:67});const Xt=new Uint8Array([]),Yt=new Uint8Array([120,30,16,0]),Zt=new Uint8Array([4,0,0,0]);Object.assign(A,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:H}],methods:[],template:{memory:{array:Xt},slots:{0:{structure:H,memory:{array:Yt},slots:{0:{structure:y,memory:{array:Zt},address:1056376}}}}}},slot:46});Object.assign(z,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:45});const es=new Uint8Array([]),ts=new Uint8Array([170,170,170,170]);Object.assign(he,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:z}],methods:[],template:{memory:{array:es},slots:{0:{structure:z,memory:{array:ts},slots:{0:{structure:A,memory:{array:c},address:-1431655766}}}}}},slot:17});Object.assign(J,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:he}],methods:[],template:null},slot:16});const ss=new Uint8Array([]),rs=new Uint8Array([170,170,170,170]);Object.assign(Se,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:z}],methods:[],template:{memory:{array:ss},slots:{0:{structure:z,memory:{array:rs},slots:{0:{structure:A,memory:{array:c},address:-1431655766}}}}}},slot:19});Object.assign(N,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Se}],methods:[],template:null},slot:18});const as=new Uint8Array([]),is=new Uint8Array([]),ns=new Uint8Array([44,251,15,0]),ms=new Uint8Array([229,58,16,0]),os=new Uint8Array([67,105,114,99,117,108,97,114,68,105,115,107,115,0]),us=new Uint8Array([108,251,15,0]),ls=new Uint8Array([214,58,16,0]),cs=new Uint8Array([80,101,116,114,105,32,76,101,115,107,105,110,101,110,0]),ys=new Uint8Array([172,251,15,0]),ps=new Uint8Array([1,0,0,0]),bs=new Uint8Array([4,252,15,0]),fs=new Uint8Array([202,58,16,0]),ds=new Uint8Array([68,105,115,107,32,116,105,108,105,110,103,0]),hs=new Uint8Array([170,170,170,170]),Ss=new Uint8Array([170,170,170,170]),gs=new Uint8Array([170,170,170,170]);Object.assign(Ve,{...t,type:2,name:"circular-disks.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:as}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:I},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:C},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:h},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:v},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:G},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:J},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:N}],methods:[],template:{memory:{array:is},slots:{0:{structure:I,memory:{array:ns},slots:{0:{structure:Y,memory:{array:ms},slots:{0:{structure:X,memory:{array:os},address:1063653}}}}},1:{structure:C,memory:{array:us},slots:{0:{structure:ee,memory:{array:ls},slots:{0:{structure:Z,memory:{array:cs},address:1063638}}}}},2:{structure:h,memory:{array:ys},slots:{0:{structure:y,memory:{array:ps}}}},3:{structure:v,memory:{array:bs},slots:{0:{structure:se,memory:{array:fs},slots:{0:{structure:te,memory:{array:ds},address:1063626}}}}},4:{structure:G,memory:{array:hs},slots:{0:{structure:de,memory:{array:c},address:-1431655766}}},5:{structure:J,memory:{array:Ss},slots:{0:{structure:he,memory:{array:c},address:-1431655766}}},6:{structure:N,memory:{array:gs},slots:{0:{structure:Se,memory:{array:c},address:-1431655766}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:24});Object.assign(ge,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(ze,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ge}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const zs=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Oe,{...t,type:9,name:"circular-disks.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:y},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:y}],methods:[],template:{memory:{array:zs}}},slot:26});Object.assign(w,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:w}],methods:[],template:null},slot:27});Object.assign(q,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:28});Object.assign(Re,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:47});const Os=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Rs=new Uint8Array([]),ws=new Uint8Array([8,250,15,0]),qs=new Uint8Array([4,0,0,0]);Object.assign(Q,{...t,type:2,name:"circular-disks.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ze},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Oe},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:w},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:q}],methods:[],template:{memory:{array:Os}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:Re},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:Rs},slots:{0:{structure:h,memory:{array:ws},slots:{0:{structure:y,memory:{array:qs}}}}}}},slot:21});const As=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Us=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Vs=new Uint8Array([0,0,0,0,0,0,0,0]),ve=new Uint8Array([]);Object.assign(U,{...t,type:2,name:"circular-disks.KernelInput(u8,circular-disks.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:Q}],methods:[],template:{memory:{array:As},slots:{0:{structure:Q,memory:{array:Us},slots:{0:{structure:ze,memory:{array:Vs},slots:{0:{structure:ge,memory:{array:ve}}}}}}}}},slot:20});Object.assign(we,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(qe,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:we}],methods:[],template:null},slot:31});const js=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),_s=new Uint8Array([]),Ps=new Uint8Array([8,250,15,0]),ks=new Uint8Array([4,0,0,0]);Object.assign(W,{...t,type:2,name:"circular-disks.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:qe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Oe},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:w},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:q}],methods:[],template:{memory:{array:js}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:Re},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:_s},slots:{0:{structure:h,memory:{array:Ps},slots:{0:{structure:y,memory:{array:ks}}}}}}},slot:30});const xs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Is=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Cs=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(V,{...t,type:2,name:"circular-disks.KernelOutput(u8,circular-disks.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:W}],methods:[],template:{memory:{array:xs},slots:{0:{structure:W,memory:{array:Is},slots:{0:{structure:qe,memory:{array:Cs},slots:{0:{structure:we,memory:{array:ve}}}}}}}}},slot:29});const vs=new Uint8Array([154,25,175,67,102,102,200,66,0,0,240,65,61,10,215,62]);Object.assign(j,{...t,type:2,name:"circular-disks.KernelParameters(circular-disks.kernel)",length:1,byteSize:16,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:0,name:"size",structure:f},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:1,name:"radius",structure:f},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:2,name:"base",structure:ue}],methods:[],template:{memory:{array:vs}}},slot:32});Object.assign(je,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(circular-disks.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(_e,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(circular-disks.createOutput)).Fn.return_type.?).ErrorUnion.error_set!circular-disks.KernelOutput(u8,circular-disks.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:V},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:je}],methods:[],template:null},slot:37});Object.assign(Pe,{...t,type:3,name:"createOutput",length:1,byteSize:80,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:192,bitSize:192,byteSize:24,slot:2,name:"2",structure:U},{...e,type:6,bitOffset:0,bitSize:128,byteSize:16,slot:3,name:"3",structure:j},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:_e}],methods:[],template:null},slot:35});Object.assign(ke,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(circular-disks.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:49});Object.assign(xe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(circular-disks.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!circular-disks.KernelOutput(u8,circular-disks.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:V},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ke}],methods:[],template:null},slot:38});Object.assign(Ie,{...t,type:3,name:"createPartialOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:4,name:"4",structure:U},{...e,type:6,bitOffset:0,bitSize:128,byteSize:16,slot:5,name:"5",structure:j},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:xe}],methods:[],template:null},slot:36});const Es={argStruct:Pe,thunk:1,name:"createOutput"},Bs={argStruct:Ie,thunk:4,name:"createPartialOutput"};Object.assign(Ce,{...t,type:2,name:"circular-disks",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ve}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:Ve},{...e,type:7,isRequired:!1,name:"Input",structure:U},{...e,type:7,isRequired:!1,name:"Output",structure:V},{...e,type:7,isRequired:!1,name:"Parameters",structure:j}],methods:[Es,Bs],template:null},slot:0});const Ks=[b,X,Y,I,Z,ee,C,y,h,te,se,v,f,n,s,re,ae,E,ie,B,ne,me,K,oe,F,ue,le,D,ce,T,ye,M,pe,be,$,fe,L,de,G,H,A,z,he,J,Se,N,Ve,O,ge,ze,l,Oe,w,q,Re,Q,U,we,qe,W,V,j,je,_e,Pe,ke,xe,Ie,Ce],Fs=mt(Ks),Ds=Ce.constructor,Ts=(async()=>{const m=new URL("circular-disks-6fe05188.wasm",import.meta.url).href;return fetch(m)})();ot(Ts,{...Fs,writeBack:!0});const{createOutput:Qs,createPartialOutput:Ms,kernel:Ue,Input:$s,Output:Ws,Parameters:Xs}=Ds;function Ls(m,u,a,r,i={},S={}){if(Array.isArray(i)){const d=i;i={};for(const[p,g]of Object.keys(Ue.inputImages).entries())i[g]=d[p]}const _=new $s(void 0),P=Object.keys(Ue.inputImages),o=[];let R;for(const d of P){let p=i[d];if(p||(P.length===1&&["data","width","height"].every(g=>!!i[g])?p=i:o.push(d)),_[d]=p,R){if(p.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=p.colorSpace}if(o.length>0)throw new Error(`Missing input image${o.length>1?"s":""}: ${o.join(", ")}`);const Ae=Ms(m,u,a,r,_,S),Ee=d=>{const p=Object.keys(d),g={};for(const Be of p){const{data:{typedArray:k},width:Ke,height:Me}=d[Be];let x;if(typeof ImageData=="function"){const $e=new Uint8ClampedArray(k.buffer,k.byteOffset,k.byteLength);x=new ImageData($e,Ke,r,{colorSpace:R})}else x={data:k,width:Ke,height:Me};if(p.length===1)return x;g[Be]=x}return g};return Ae[Symbol.toStringTag]==="Promise"?Ae.then(Ee):Ee(Ae)}function Gs(){const m={};for(let[u,a]of Object.entries(Ue)){if(u==="parameters"){const r={};for(const[i,S]of Object.entries(a)){const _=r[i]={};for(let[P,o]of Object.entries(S))typeof o=="object"?"string"in o?o=o.string:o=Te(o):typeof o=="function"&&(o=Hs(o.name)),_[P]=o}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());m[u]=a}return m}function Te(m){const u=[];for(let[a,r]of Object.entries(m))typeof r=="object"&&(r=Te(r)),u[a]=r;return u}function Hs(m){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[m]}onmessage=m=>{const[u,a,...r]=m.data;Js(u,r).then(([i,S])=>{postMessage([u,a,i],{transfer:S})}).catch(i=>{postMessage(["error",a,i])})};async function Js(m,u){switch(m){case"getKernelInfo":return[Gs(...u)];case"createPartialImageData":const r=await Ls(...u),i=[];if("data"in r&&"width"in r&&"height"in r)i.push(r.data.buffer);else for(const S of Object.entries(r))i.push(r.data.buffer);return[r,i];default:throw new Error(`Unknown function: ${m}`)}}
