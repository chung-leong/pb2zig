import{u as Ce,a as Ie,b as ve,c as xe,d as Ee,e as Ke,f as De,g as Fe,h as Me,i as _e,j as Te,k as $e,l as Be,m as Le,o as Ge,n as He,p as Je,q as Ne}from"./index-d64bc850.js";Ce();Ie();ve();xe();Ee();Ke();De();Fe();Me();_e();Te();$e();Be();Le();Ge();He();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},d={},H={},J={},I={},N={},Q={},v={},b={},p={},W={},X={},x={},c={},l={},s={},g={},Y={},E={},Z={},K={},ee={},te={},D={},se={},F={},re={},M={},ae={},_={},ne={},T={},R={},z={},ie={},$={},oe={},B={},de={},O={},ue={},le={},m={},me={},A={},ce={},L={},U={},ye={},be={},G={},q={},j={},Se={},he={},ge={},ze={},Oe={},we={},Ae={};Object.assign(d,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:5});Object.assign(H,{...t,type:1,name:"[18:0]u8",length:18,byteSize:19,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:4});Object.assign(J,{...t,type:11,name:"*const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:3});Object.assign(I,{...t,type:11,name:"*const *const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:2});Object.assign(N,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:8});Object.assign(Q,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:7});Object.assign(v,{...t,type:11,name:"*const *const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:6});Object.assign(b,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:10});Object.assign(p,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:b}],methods:[],template:null},slot:9});Object.assign(W,{...t,type:1,name:"[42:0]u8",length:42,byteSize:43,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:13});Object.assign(X,{...t,type:11,name:"*const [42:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:12});Object.assign(x,{...t,type:11,name:"*const *const [42:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:11});Object.assign(c,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:32});Object.assign(l,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:l}],methods:[],template:null},slot:50});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:l}],methods:[],template:null},slot:49});Object.assign(g,{...t,type:11,name:"*const f32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:51});const Qe=new Uint8Array,We=new Uint8Array([104,253,15,0]),Xe=new Uint8Array([45,67,28,235,226,54,26,63]),Ye=new Uint8Array([136,252,15,0]),Ze=new Uint8Array([216,15,73,64]),et=new Uint8Array([192,252,15,0]),tt=new Uint8Array([83,180,195,118,47,27,228,63]);Object.assign(Y,{...t,type:2,name:"Struct0010",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:g},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Qe},slots:{0:{structure:s,memory:{array:We},slots:{0:{structure:l,memory:{array:Xe}}}},1:{structure:g,memory:{array:Ye},slots:{0:{structure:c,memory:{array:Ze}}}},2:{structure:s,memory:{array:et},slots:{0:{structure:l,memory:{array:tt}}}}}}},slot:39});Object.assign(E,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:38});const st=new Uint8Array,rt=new Uint8Array([104,253,15,0]),at=new Uint8Array([0,0,0,0,0,0,0,0]),nt=new Uint8Array([136,252,15,0]),it=new Uint8Array([219,15,201,64]),ot=new Uint8Array([192,252,15,0]),ut=new Uint8Array([45,67,28,235,226,54,26,63]);Object.assign(Z,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:g},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:st},slots:{0:{structure:s,memory:{array:rt},slots:{0:{structure:l,memory:{array:at}}}},1:{structure:g,memory:{array:nt},slots:{0:{structure:c,memory:{array:it}}}},2:{structure:s,memory:{array:ot},slots:{0:{structure:l,memory:{array:ut}}}}}}},slot:41});Object.assign(K,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:40});Object.assign(ee,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:33});const lt=new Uint8Array,mt=new Uint8Array([64,253,15,0]),ct=new Uint8Array([123,20,174,71,225,122,132,63]),yt=new Uint8Array([104,253,15,0]),bt=new Uint8Array([123,20,174,71,225,122,132,63]);Object.assign(te,{...t,type:2,name:"Struct0017",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:lt},slots:{0:{structure:s,memory:{array:mt},slots:{0:{structure:l,memory:{array:ct}}}},1:{structure:s,memory:{array:yt},slots:{0:{structure:l,memory:{array:bt}}}}}}},slot:53});Object.assign(D,{...t,type:11,name:"Struct0014",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:52});const pt=new Uint8Array,ft=new Uint8Array([64,253,15,0]),dt=new Uint8Array([92,143,194,245,40,0,127,64]),St=new Uint8Array([104,253,15,0]),ht=new Uint8Array([92,143,194,245,40,0,127,64]);Object.assign(se,{...t,type:2,name:"Struct0018",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:pt},slots:{0:{structure:s,memory:{array:ft},slots:{0:{structure:l,memory:{array:dt}}}},1:{structure:s,memory:{array:St},slots:{0:{structure:l,memory:{array:ht}}}}}}},slot:55});Object.assign(F,{...t,type:11,name:"Struct0015",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:54});const gt=new Uint8Array,zt=new Uint8Array([64,253,15,0]),Ot=new Uint8Array([184,30,133,235,81,192,98,64]),wt=new Uint8Array([104,253,15,0]),At=new Uint8Array([184,30,133,235,81,192,98,64]);Object.assign(re,{...t,type:2,name:"Struct0019",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:gt},slots:{0:{structure:s,memory:{array:zt},slots:{0:{structure:l,memory:{array:Ot}}}},1:{structure:s,memory:{array:wt},slots:{0:{structure:l,memory:{array:At}}}}}}},slot:57});Object.assign(M,{...t,type:11,name:"Struct0016",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:56});const Rt=new Uint8Array,Ut=new Uint8Array([170,170,170,170]),qt=new Uint8Array,jt=new Uint8Array([170,170,170,170]),Pt=new Uint8Array,Vt=new Uint8Array([170,170,170,170]),kt=new Uint8Array;Object.assign(ae,{...t,type:2,name:"Struct0012",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:ee},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:D},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:F},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:M}],methods:[],template:{memory:{array:Rt},slots:{0:{structure:D,memory:{array:Ut},slots:{0:{structure:te,memory:{array:qt}}}},1:{structure:F,memory:{array:jt},slots:{0:{structure:se,memory:{array:Pt}}}},2:{structure:M,memory:{array:Vt},slots:{0:{structure:re,memory:{array:kt}}}}}}},slot:43});Object.assign(_,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:42});const Ct=new Uint8Array,It=new Uint8Array([170,170,170,170]),vt=new Uint8Array,xt=new Uint8Array([170,170,170,170]),Et=new Uint8Array,Kt=new Uint8Array([170,170,170,170]),Dt=new Uint8Array;Object.assign(ne,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"angle",structure:E},{...e,type:8,isRequired:!1,slot:1,name:"direction",structure:K},{...e,type:8,isRequired:!1,slot:2,name:"basepoint",structure:_}],methods:[],template:{memory:{array:Ct},slots:{0:{structure:E,memory:{array:It},slots:{0:{structure:Y,memory:{array:vt}}}},1:{structure:K,memory:{array:xt},slots:{0:{structure:Z,memory:{array:Et}}}},2:{structure:_,memory:{array:Kt},slots:{0:{structure:ae,memory:{array:Dt}}}}}}},slot:15});Object.assign(T,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:14});const Ft=new Uint8Array,Mt=new Uint8Array([144,248,15,0]),_t=new Uint8Array([4,0,0,0]);Object.assign(R,{...t,type:2,name:"Struct0013",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:Ft},slots:{0:{structure:p,memory:{array:Mt},slots:{0:{structure:b,memory:{array:_t}}}}}}},slot:45});Object.assign(z,{...t,type:11,name:"Struct0009",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:44});const Tt=new Uint8Array,$t=new Uint8Array([170,170,170,170]),Bt=new Uint8Array;Object.assign(ie,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:z}],methods:[],template:{memory:{array:Tt},slots:{0:{structure:z,memory:{array:$t},slots:{0:{structure:R,memory:{array:Bt}}}}}}},slot:17});Object.assign($,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:16});const Lt=new Uint8Array,Gt=new Uint8Array([170,170,170,170]),Ht=new Uint8Array;Object.assign(oe,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:z}],methods:[],template:{memory:{array:Lt},slots:{0:{structure:z,memory:{array:Gt},slots:{0:{structure:R,memory:{array:Ht}}}}}}},slot:19});Object.assign(B,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:18});const Jt=new Uint8Array,Nt=new Uint8Array,Qt=new Uint8Array([116,37,16,0]),Wt=new Uint8Array([22,37,16,0]),Xt=new Uint8Array([82,97,100,105,97,108,67,97,108,101,105,100,111,115,99,111,112,101,0]),Yt=new Uint8Array([112,37,16,0]),Zt=new Uint8Array([252,36,16,0]),es=new Uint8Array([80,101,116,114,105,32,76,101,115,107,105,110,101,110,0]),ts=new Uint8Array([108,37,16,0]),ss=new Uint8Array([1,0,0,0]),rs=new Uint8Array([104,37,16,0]),as=new Uint8Array([192,36,16,0]),ns=new Uint8Array([67,97,108,101,105,100,111,115,99,111,112,101,32,45,101,102,102,101,99,116,32,102,111,114,32,114,97,100,105,97,108,32,114,101,102,108,101,99,116,105,111,110,0]),is=new Uint8Array([170,170,170,170]),os=new Uint8Array,us=new Uint8Array([170,170,170,170]),ls=new Uint8Array,ms=new Uint8Array([170,170,170,170]),cs=new Uint8Array;Object.assign(de,{...t,type:2,name:"radial-caleidoscope.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Jt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:I},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:v},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:p},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:x},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:T},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:$},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:B}],methods:[],template:{memory:{array:Nt},slots:{0:{structure:I,memory:{array:Qt},slots:{0:{structure:J,memory:{array:Wt},slots:{0:{structure:H,memory:{array:Xt}}}}}},1:{structure:v,memory:{array:Yt},slots:{0:{structure:Q,memory:{array:Zt},slots:{0:{structure:N,memory:{array:es}}}}}},2:{structure:p,memory:{array:ts},slots:{0:{structure:b,memory:{array:ss}}}},3:{structure:x,memory:{array:rs},slots:{0:{structure:X,memory:{array:as},slots:{0:{structure:W,memory:{array:ns}}}}}},4:{structure:T,memory:{array:is},slots:{0:{structure:ne,memory:{array:os}}}},5:{structure:$,memory:{array:us},slots:{0:{structure:ie,memory:{array:ls}}}},6:{structure:B,memory:{array:ms},slots:{0:{structure:oe,memory:{array:cs}}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:24});Object.assign(ue,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(le,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ue}],methods:[],template:null},slot:22});Object.assign(m,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:25});const ys=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(me,{...t,type:9,name:"radial-caleidoscope.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:b},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:b}],methods:[],template:{memory:{array:ys}}},slot:26});Object.assign(A,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:27});Object.assign(ce,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:46});const bs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ps=new Uint8Array,fs=new Uint8Array([136,36,16,0]),ds=new Uint8Array([4,0,0,0]);Object.assign(L,{...t,type:2,name:"radial-caleidoscope.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:le},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:me},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:A}],methods:[],template:{memory:{array:bs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:ce},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:ps},slots:{0:{structure:p,memory:{array:fs},slots:{0:{structure:b,memory:{array:ds}}}}}}},slot:21});const Ss=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),hs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),je=new Uint8Array([0,0,0,0,0,0,0,0]),gs=new Uint8Array;Object.assign(U,{...t,type:2,name:"radial-caleidoscope.KernelInput(u8,radial-caleidoscope.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:L}],methods:[],template:{memory:{array:Ss},slots:{0:{structure:L,memory:{array:hs},slots:{0:{structure:le,memory:{array:je},address:1047568,slots:{0:{structure:ue,memory:{array:gs},address:0}}}}}}}},slot:20});Object.assign(ye,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(be,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ye}],methods:[],template:null},slot:30});const zs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Os=new Uint8Array,ws=new Uint8Array([136,36,16,0]),As=new Uint8Array([4,0,0,0]);Object.assign(G,{...t,type:2,name:"radial-caleidoscope.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:be},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:me},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:A}],methods:[],template:{memory:{array:zs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:ce},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:Os},slots:{0:{structure:p,memory:{array:ws},slots:{0:{structure:b,memory:{array:As}}}}}}},slot:29});const Rs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Us=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),qs=new Uint8Array;Object.assign(q,{...t,type:2,name:"radial-caleidoscope.KernelOutput(u8,radial-caleidoscope.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:G}],methods:[],template:{memory:{array:Rs},slots:{0:{structure:G,memory:{array:Us},slots:{0:{structure:be,memory:{array:je},address:1047568,slots:{0:{structure:ye,memory:{array:qs},address:0}}}}}}}},slot:28});const js=new Uint8Array([143,2,22,67,143,2,22,67,124,217,32,63,23,183,209,56]);Object.assign(j,{...t,type:2,name:"radial-caleidoscope.KernelParameters(radial-caleidoscope.kernel)",length:1,byteSize:16,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:0,name:"angle",structure:c},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:1,name:"direction",structure:c},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:2,name:"basepoint",structure:ee}],methods:[],template:{memory:{array:js}}},slot:31});Object.assign(Se,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(radial-caleidoscope.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:47});Object.assign(he,{...t,type:7,name:"ErrorSet0000!radial-caleidoscope.KernelOutput(u8,radial-caleidoscope.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:q},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Se}],methods:[],template:null},slot:36});Object.assign(ge,{...t,type:3,name:"createOutput",length:1,byteSize:80,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:6,bitOffset:192,bitSize:192,byteSize:24,slot:2,name:"2",structure:U},{...e,type:6,bitOffset:0,bitSize:128,byteSize:16,slot:3,name:"3",structure:j},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:he}],methods:[],template:null},slot:34});Object.assign(ze,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(radial-caleidoscope.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(Oe,{...t,type:7,name:"ErrorSet0001!radial-caleidoscope.KernelOutput(u8,radial-caleidoscope.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:q},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ze}],methods:[],template:null},slot:37});Object.assign(we,{...t,type:3,name:"createPartialOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:2,name:"2",structure:m},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:3,name:"3",structure:m},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:4,name:"4",structure:U},{...e,type:6,bitOffset:0,bitSize:128,byteSize:16,slot:5,name:"5",structure:j},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Oe}],methods:[],template:null},slot:35});const Ps=new Uint8Array,Vs={argStruct:ge,thunk:6,name:"createOutput"},ks={argStruct:we,thunk:2,name:"createPartialOutput"};Object.assign(Ae,{...t,type:2,name:"radial-caleidoscope",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ps}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:de},{...e,type:7,isRequired:!1,name:"Input",structure:U},{...e,type:7,isRequired:!1,name:"Output",structure:q},{...e,type:7,isRequired:!1,name:"Parameters",structure:j}],methods:[Vs,ks],template:null},slot:0});const Cs=[d,H,J,I,N,Q,v,b,p,W,X,x,c,l,s,g,Y,E,Z,K,ee,te,D,se,F,re,M,ae,_,ne,T,R,z,ie,$,oe,B,de,O,ue,le,m,me,A,ce,L,U,ye,be,G,q,j,Se,he,ge,ze,Oe,we,Ae],Is=Je(Cs),vs=Ae.constructor,xs=(async()=>{const i=new URL("radial-caleidoscope-b179ece6.wasm",import.meta.url).href;return fetch(i)})();Ne(xs,{...Is,writeBack:!0});const{createOutput:$s,createPartialOutput:Es,kernel:fe,Input:Ks,Output:Bs,Parameters:Ls}=vs;function Ds(i,u,a,r,n={},S={}){if(Array.isArray(n)){const f=n;n={};for(const[y,h]of Object.keys(fe.inputImages).entries())n[h]=f[y]}const P=new Ks(void 0),V=Object.keys(fe.inputImages),o=[];let w;for(const f of V){let y=n[f];if(y||(V.length===1&&["data","width","height"].every(h=>!!n[h])?y=n:o.push(f)),P[f]=y,w){if(y.colorSpace!==w)throw new Error(`Input images must all use the same color space: ${w}`)}else w=y.colorSpace}if(o.length>0)throw new Error(`Missing input image${o.length>1?"s":""}: ${o.join(", ")}`);const pe=Es(i,u,a,r,P,S),Re=f=>{const y=Object.keys(f),h={};for(const Ue of y){const{data:{typedArray:k},width:qe,height:Ve}=f[Ue];let C;if(typeof ImageData=="function"){const ke=new Uint8ClampedArray(k.buffer,k.byteOffset,k.byteLength);C=new ImageData(ke,qe,r,{colorSpace:w})}else C={data:k,width:qe,height:Ve};if(y.length===1)return C;h[Ue]=C}return h};return pe[Symbol.toStringTag]==="Promise"?pe.then(Re):Re(pe)}function Fs(){const i={};for(let[u,a]of Object.entries(fe)){if(u==="parameters"){const r={};for(const[n,S]of Object.entries(a)){const P=r[n]={};for(let[V,o]of Object.entries(S))typeof o=="object"?"string"in o?o=o.string:o=Pe(o):typeof o=="function"&&(o=Ms(o.name)),P[V]=o}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());i[u]=a}return i}function Pe(i){const u=[];for(let[a,r]of Object.entries(i))typeof r=="object"&&(r=Pe(r)),u[a]=r;return u}function Ms(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[u,a,...r]=i.data;_s(u,r).then(([n,S])=>{postMessage([u,a,n],{transfer:S})}).catch(n=>{postMessage(["error",a,n])})};async function _s(i,u){switch(i){case"getKernelInfo":return[Fs(...u)];case"createPartialImageData":const r=await Ds(...u),n=[];if("data"in r&&"width"in r&&"height"in r)n.push(r.data.buffer);else for(const S of Object.entries(r))n.push(r.data.buffer);return[r,n];default:throw new Error(`Unknown function: ${i}`)}}
