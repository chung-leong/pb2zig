import{u as Oe,a as we,b as Re,c as qe,d as Ae,e as Ue,f as je,g as Pe,h as Ve,i as ke,j as Ie,k as Ce,l as ve,m as xe,o as Ee,n as Ke,p as De,q as Fe}from"./index-422d9c98.js";Oe();we();Re();qe();Ae();Ue();je();Pe();Ve();ke();Ie();Ce();ve();xe();Ee();Ke();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},z={},B={},L={},x={},G={},H={},E={},b={},f={},y={},m={},r={},q={},g={},J={},K={},N={},D={},Q={},F={},U={},O={},W={},M={},X={},_={},ie={},w={},Y={},Z={},l={},ee={},A={},te={},T={},j={},se={},re={},$={},P={},V={},ue={},oe={},le={},me={},ye={},ce={},be={};Object.assign(z,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:5});Object.assign(B,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:4});Object.assign(L,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:3});Object.assign(x,{...t,type:11,name:"*const *const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:2});Object.assign(G,{...t,type:1,name:"[16:0]u8",length:16,byteSize:17,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:8});Object.assign(H,{...t,type:11,name:"*const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:7});Object.assign(E,{...t,type:11,name:"*const *const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:6});Object.assign(b,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:10});Object.assign(f,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:b}],methods:[],template:null},slot:9});Object.assign(y,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:29});Object.assign(m,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:m}],methods:[],template:null},slot:46});Object.assign(r,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:45});const Me=new Uint8Array([]),_e=new Uint8Array([216,248,15,0]),Te=new Uint8Array([0,0,0,0,0,0,0,0]),$e=new Uint8Array([0,249,15,0]),Be=new Uint8Array([0,0,0,0,0,0,240,63]),Le=new Uint8Array([40,249,15,0]),Ge=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(q,{...t,type:2,name:"Struct0010",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:Me},slots:{0:{structure:r,memory:{array:_e},slots:{0:{structure:m,memory:{array:Te}}}},1:{structure:r,memory:{array:$e},slots:{0:{structure:m,memory:{array:Be}}}},2:{structure:r,memory:{array:Le},slots:{0:{structure:m,memory:{array:Ge}}}}}}},slot:35});Object.assign(g,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:34});const He=new Uint8Array([]),Je=new Uint8Array([24,253,15,0]),Ne=new Uint8Array([0,0,0,0,0,0,0,0]),Qe=new Uint8Array([64,253,15,0]),We=new Uint8Array([0,0,0,0,0,0,36,64]),Xe=new Uint8Array([104,253,15,0]),Ye=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(J,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:He},slots:{0:{structure:r,memory:{array:Je},slots:{0:{structure:m,memory:{array:Ne}}}},1:{structure:r,memory:{array:Qe},slots:{0:{structure:m,memory:{array:We}}}},2:{structure:r,memory:{array:Xe},slots:{0:{structure:m,memory:{array:Ye}}}}}}},slot:37});Object.assign(K,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:36});const Ze=new Uint8Array([]),et=new Uint8Array([24,253,15,0]),tt=new Uint8Array([0,0,0,0,0,0,0,0]),st=new Uint8Array([64,253,15,0]),rt=new Uint8Array([0,0,0,0,0,0,52,64]),at=new Uint8Array([104,253,15,0]),nt=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(N,{...t,type:2,name:"Struct0012",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:Ze},slots:{0:{structure:r,memory:{array:et},slots:{0:{structure:m,memory:{array:tt}}}},1:{structure:r,memory:{array:st},slots:{0:{structure:m,memory:{array:rt}}}},2:{structure:r,memory:{array:at},slots:{0:{structure:m,memory:{array:nt}}}}}}},slot:39});Object.assign(D,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:38});const it=new Uint8Array([]),ut=new Uint8Array([170,170,170,170]),p=new Uint8Array([]),ot=new Uint8Array([170,170,170,170]),lt=new Uint8Array([170,170,170,170]),mt=new Uint8Array([170,170,170,170]);Object.assign(Q,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"threshold",structure:g},{...e,type:8,isRequired:!1,slot:1,name:"factor",structure:K},{...e,type:8,isRequired:!1,slot:2,name:"gamma",structure:D},{...e,type:8,isRequired:!1,slot:3,name:"invert",structure:g}],methods:[],template:{memory:{array:it},slots:{0:{structure:g,memory:{array:ut},slots:{0:{structure:q,memory:{array:p},address:-1431655766}}},1:{structure:K,memory:{array:ot},slots:{0:{structure:J,memory:{array:p},address:-1431655766}}},2:{structure:D,memory:{array:lt},slots:{0:{structure:N,memory:{array:p},address:-1431655766}}},3:{structure:g,memory:{array:mt},slots:{0:{structure:q,memory:{array:p},address:-1431655766}}}}}},slot:12});Object.assign(F,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:11});const yt=new Uint8Array([]),ct=new Uint8Array([32,249,15,0]),bt=new Uint8Array([4,0,0,0]);Object.assign(U,{...t,type:2,name:"Struct0013",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:f}],methods:[],template:{memory:{array:yt},slots:{0:{structure:f,memory:{array:ct},slots:{0:{structure:b,memory:{array:bt}}}}}}},slot:41});Object.assign(O,{...t,type:11,name:"Struct0009",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:U}],methods:[],template:null},slot:40});const ft=new Uint8Array([]),pt=new Uint8Array([170,170,170,170]);Object.assign(W,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:O}],methods:[],template:{memory:{array:ft},slots:{0:{structure:O,memory:{array:pt},slots:{0:{structure:U,memory:{array:p},address:-1431655766}}}}}},slot:14});Object.assign(M,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:13});const dt=new Uint8Array([]),ht=new Uint8Array([170,170,170,170]);Object.assign(X,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:O}],methods:[],template:{memory:{array:dt},slots:{0:{structure:O,memory:{array:ht},slots:{0:{structure:U,memory:{array:p},address:-1431655766}}}}}},slot:16});Object.assign(_,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:15});const St=new Uint8Array([]),gt=new Uint8Array([]),zt=new Uint8Array([84,249,15,0]),Ot=new Uint8Array([152,35,16,0]),wt=new Uint8Array([99,111,109,46,113,117,97,115,105,109,111,110,100,111,0]),Rt=new Uint8Array([148,249,15,0]),qt=new Uint8Array([135,35,16,0]),At=new Uint8Array([77,97,114,105,111,32,75,108,105,110,103,101,109,97,110,110,0]),Ut=new Uint8Array([212,249,15,0]),jt=new Uint8Array([1,0,0,0]),Pt=new Uint8Array([170,170,170,170]),Vt=new Uint8Array([170,170,170,170]),kt=new Uint8Array([170,170,170,170]);Object.assign(ie,{...t,type:2,name:"frei-chen.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:St}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:x},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:E},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:f},{...e,type:6,isRequired:!1,slot:3,name:"parameters",structure:F},{...e,type:6,isRequired:!1,slot:4,name:"inputImages",structure:M},{...e,type:6,isRequired:!1,slot:5,name:"outputImages",structure:_}],methods:[],template:{memory:{array:gt},slots:{0:{structure:x,memory:{array:zt},slots:{0:{structure:L,memory:{array:Ot},slots:{0:{structure:B,memory:{array:wt},address:1057688}}}}},1:{structure:E,memory:{array:Rt},slots:{0:{structure:H,memory:{array:qt},slots:{0:{structure:G,memory:{array:At},address:1057671}}}}},2:{structure:f,memory:{array:Ut},slots:{0:{structure:b,memory:{array:jt}}}},3:{structure:F,memory:{array:Pt},slots:{0:{structure:Q,memory:{array:p},address:-1431655766}}},4:{structure:M,memory:{array:Vt},slots:{0:{structure:W,memory:{array:p},address:-1431655766}}},5:{structure:_,memory:{array:kt},slots:{0:{structure:X,memory:{array:p},address:-1431655766}}}}}},slot:1});Object.assign(w,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:21});Object.assign(Y,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:20});Object.assign(Z,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Y}],methods:[],template:null},slot:19});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:22});const It=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ee,{...t,type:9,name:"frei-chen.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:b},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:b}],methods:[],template:{memory:{array:It}}},slot:23});Object.assign(A,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:24});Object.assign(te,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:42});const Ct=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),vt=new Uint8Array([]),xt=new Uint8Array([72,253,15,0]),Et=new Uint8Array([4,0,0,0]);Object.assign(T,{...t,type:2,name:"frei-chen.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Z},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ee},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:A}],methods:[],template:{memory:{array:Ct}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:te},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:f}],methods:[],template:{memory:{array:vt},slots:{0:{structure:f,memory:{array:xt},slots:{0:{structure:b,memory:{array:Et}}}}}}},slot:18});const Kt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Dt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ft=new Uint8Array([0,0,0,0,0,0,0,0]),fe=new Uint8Array([]);Object.assign(j,{...t,type:2,name:"frei-chen.KernelInput(u8,frei-chen.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:T}],methods:[],template:{memory:{array:Kt},slots:{0:{structure:T,memory:{array:Dt},slots:{0:{structure:Z,memory:{array:Ft},slots:{0:{structure:Y,memory:{array:fe}}}}}}}}},slot:17});Object.assign(se,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:20});Object.assign(re,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:se}],methods:[],template:null},slot:27});const Mt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),_t=new Uint8Array([]),Tt=new Uint8Array([72,253,15,0]),$t=new Uint8Array([4,0,0,0]);Object.assign($,{...t,type:2,name:"frei-chen.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:re},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ee},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:A}],methods:[],template:{memory:{array:Mt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:te},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:f}],methods:[],template:{memory:{array:_t},slots:{0:{structure:f,memory:{array:Tt},slots:{0:{structure:b,memory:{array:$t}}}}}}},slot:26});const Bt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Lt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Gt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(P,{...t,type:2,name:"frei-chen.KernelOutput(u8,frei-chen.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:$}],methods:[],template:{memory:{array:Bt},slots:{0:{structure:$,memory:{array:Lt},slots:{0:{structure:re,memory:{array:Gt},slots:{0:{structure:se,memory:{array:fe}}}}}}}}},slot:25});const Ht=new Uint8Array([0,0,0,0,0,0,128,63,0,0,128,63,0,0,0,0]);Object.assign(V,{...t,type:2,name:"frei-chen.KernelParameters(frei-chen.kernel)",length:1,byteSize:16,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"threshold",structure:y},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"factor",structure:y},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"gamma",structure:y},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"invert",structure:y}],methods:[],template:{memory:{array:Ht}}},slot:28});Object.assign(ue,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(frei-chen.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:43});Object.assign(oe,{...t,type:7,name:"ErrorSet0000!frei-chen.KernelOutput(u8,frei-chen.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ue}],methods:[],template:null},slot:32});Object.assign(le,{...t,type:3,name:"createOutput",length:1,byteSize:76,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:j},{...e,type:6,bitOffset:256,bitSize:128,byteSize:16,slot:3,name:"3",structure:V},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:oe}],methods:[],template:null},slot:30});Object.assign(me,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(frei-chen.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:44});Object.assign(ye,{...t,type:7,name:"ErrorSet0001!frei-chen.KernelOutput(u8,frei-chen.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:me}],methods:[],template:null},slot:33});Object.assign(ce,{...t,type:3,name:"createPartialOutput",length:1,byteSize:84,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:j},{...e,type:6,bitOffset:320,bitSize:128,byteSize:16,slot:5,name:"5",structure:V},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ye}],methods:[],template:null},slot:31});const Jt={argStruct:le,thunk:8,name:"createOutput"},Nt={argStruct:ce,thunk:2,name:"createPartialOutput"};Object.assign(be,{...t,type:2,name:"frei-chen",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:fe}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ie},{...e,type:7,isRequired:!1,name:"Input",structure:j},{...e,type:7,isRequired:!1,name:"Output",structure:P},{...e,type:7,isRequired:!1,name:"Parameters",structure:V}],methods:[Jt,Nt],template:null},slot:0});const Qt=[z,B,L,x,G,H,E,b,f,y,m,r,q,g,J,K,N,D,Q,F,U,O,W,M,X,_,ie,w,Y,Z,l,ee,A,te,T,j,se,re,$,P,V,ue,oe,le,me,ye,ce,be],Wt=De(Qt),Xt=be.constructor,Yt=(async()=>{const i=new URL("frei-chen-48a3393b.wasm",import.meta.url).href;return fetch(i)})();Fe(Yt,{...Wt,writeBack:!0});const{createOutput:is,createPartialOutput:Zt,kernel:ne,Input:es,Output:us,Parameters:os}=Xt;function ts(i,o,a,s,n={},h={}){if(Array.isArray(n)){const d=n;n={};for(const[c,S]of Object.keys(ne.inputImages).entries())n[S]=d[c]}const k=new es(void 0),I=Object.keys(ne.inputImages),u=[];let R;for(const d of I){let c=n[d];if(c||(I.length===1&&["data","width","height"].every(S=>!!n[S])?c=n:u.push(d)),k[d]=c,R){if(c.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=c.colorSpace}if(u.length>0)throw new Error(`Missing input image${u.length>1?"s":""}: ${u.join(", ")}`);const ae=Zt(i,o,a,s,k,h),pe=d=>{const c=Object.keys(d),S={};for(const de of c){const{data:{typedArray:C},width:he,height:ge}=d[de];let v;if(typeof ImageData=="function"){const ze=new Uint8ClampedArray(C.buffer,C.byteOffset,C.byteLength);v=new ImageData(ze,he,s,{colorSpace:R})}else v={data:C,width:he,height:ge};if(c.length===1)return v;S[de]=v}return S};return ae[Symbol.toStringTag]==="Promise"?ae.then(pe):pe(ae)}function ss(){const i={};for(let[o,a]of Object.entries(ne)){if(o==="parameters"){const s={};for(const[n,h]of Object.entries(a)){const k=s[n]={};for(let[I,u]of Object.entries(h))typeof u=="object"?"string"in u?u=u.string:u=Se(u):typeof u=="function"&&(u=rs(u.name)),k[I]=u}a=s}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());i[o]=a}return i}function Se(i){const o=[];for(let[a,s]of Object.entries(i))typeof s=="object"&&(s=Se(s)),o[a]=s;return o}function rs(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[o,a,...s]=i.data;as(o,s).then(([n,h])=>{postMessage([o,a,n],{transfer:h})}).catch(n=>{postMessage(["error",a,n])})};async function as(i,o){switch(i){case"getKernelInfo":return[ss(...o)];case"createPartialImageData":const s=await ts(...o),n=[];if("data"in s&&"width"in s&&"height"in s)n.push(s.data.buffer);else for(const h of Object.entries(s))n.push(s.data.buffer);return[s,n];default:throw new Error(`Unknown function: ${i}`)}}
