import{u as Ee,a as Ke,b as Fe,c as De,d as Te,e as Me,f as $e,g as Be,h as Le,i as Ge,j as He,k as Je,l as Ne,m as Qe,n as We,o as Xe,p as Ye,q as Ze,r as et}from"./index-9f315e7a.js";Ee();Ke();Fe();De();Te();Me();$e();Be();Le();Ge();He();Je();Ne();Qe();We();Xe();Ye();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},h={},W={},X={},v={},Y={},Z={},E={},y={},d={},ee={},te={},K={},u={},c={},r={},z={},se={},F={},re={},D={},O={},T={},ae={},M={},ie={},$={},ne={},B={},me={},L={},G={},U={},R={},oe={},H={},le={},J={},ge={},q={},ue={},ce={},l={},ye={},w={},A={},pe={},N={},j={},fe={},be={},Q={},_={},P={},Se={},ze={},Oe={},Re={},qe={},Ve={},we={};Object.assign(h,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:5});Object.assign(W,{...t,type:1,name:"[18:0]u8",length:18,byteSize:19,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:4});Object.assign(X,{...t,type:11,name:"*const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:3});Object.assign(v,{...t,type:11,name:"**const [18:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:2});Object.assign(Y,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:8});Object.assign(Z,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:7});Object.assign(E,{...t,type:11,name:"**const [14:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:6});Object.assign(y,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:10});Object.assign(d,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:9});Object.assign(ee,{...t,type:1,name:"[42:0]u8",length:42,byteSize:43,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:13});Object.assign(te,{...t,type:11,name:"*const [42:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:12});Object.assign(K,{...t,type:11,name:"**const [42:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:11});Object.assign(u,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:33});Object.assign(c,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:c}],methods:[],template:null},slot:51});Object.assign(r,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:50});Object.assign(z,{...t,type:11,name:"*const f32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:52});const tt=new Uint8Array([]),st=new Uint8Array([112,30,16,0]),Ie=new Uint8Array([45,67,28,235,226,54,26,63]),rt=new Uint8Array([144,30,16,0]),at=new Uint8Array([216,15,73,64]),it=new Uint8Array([136,30,16,0]),nt=new Uint8Array([83,180,195,118,47,27,228,63]);Object.assign(se,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0.0001, comptime maxValue: f32 = 3.141592025756836, comptime defaultValue: comptime_float = 0.628318531}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:z},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:tt},slots:{0:{structure:r,memory:{array:st},slots:{0:{structure:c,memory:{array:Ie},address:1056368}}},1:{structure:z,memory:{array:rt},slots:{0:{structure:u,memory:{array:at},address:1056400}}},2:{structure:r,memory:{array:it},slots:{0:{structure:c,memory:{array:nt},address:1056392}}}}}},slot:40});Object.assign(F,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.0001, comptime maxValue: f32 = 3.141592025756836, comptime defaultValue: comptime_float = 0.628318531}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:39});const mt=new Uint8Array([]),ot=new Uint8Array([128,30,16,0]),lt=new Uint8Array([0,0,0,0,0,0,0,0]),ut=new Uint8Array([120,30,16,0]),ct=new Uint8Array([219,15,201,64]),yt=new Uint8Array([112,30,16,0]);Object.assign(re,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: f32 = 6.2831854820251465, comptime defaultValue: comptime_float = 0.0001}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:z},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:mt},slots:{0:{structure:r,memory:{array:ot},slots:{0:{structure:c,memory:{array:lt},address:1056384}}},1:{structure:z,memory:{array:ut},slots:{0:{structure:u,memory:{array:ct},address:1056376}}},2:{structure:r,memory:{array:yt},slots:{0:{structure:c,memory:{array:Ie},address:1056368}}}}}},slot:42});Object.assign(D,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: f32 = 6.2831854820251465, comptime defaultValue: comptime_float = 0.0001}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:41});Object.assign(O,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:34});Object.assign(T,{...t,type:11,name:"*const @Vector(2, f32)",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:O}],methods:[],template:null},slot:53});const pt=new Uint8Array([]),ft=new Uint8Array([88,30,16,0]),Pe=new Uint8Array([92,143,194,245,40,0,127,64]),bt=new Uint8Array([88,30,16,0]);Object.assign(ae,{...t,type:2,name:"struct{comptime comptime_float = 496.01, comptime comptime_float = 496.01}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:pt},slots:{0:{structure:r,memory:{array:ft},slots:{0:{structure:c,memory:{array:Pe},address:1056344}}},1:{structure:r,memory:{array:bt},slots:{0:{structure:c,memory:{array:Pe},address:1056344}}}}}},slot:55});Object.assign(M,{...t,type:11,name:"*const struct{comptime comptime_float = 496.01, comptime comptime_float = 496.01}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:54});const dt=new Uint8Array([]),ht=new Uint8Array([80,30,16,0]),xe=new Uint8Array([184,30,133,235,81,192,98,64]),gt=new Uint8Array([80,30,16,0]);Object.assign(ie,{...t,type:2,name:"struct{comptime comptime_float = 150.01, comptime comptime_float = 150.01}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:dt},slots:{0:{structure:r,memory:{array:ht},slots:{0:{structure:c,memory:{array:xe},address:1056336}}},1:{structure:r,memory:{array:gt},slots:{0:{structure:c,memory:{array:xe},address:1056336}}}}}},slot:57});Object.assign($,{...t,type:11,name:"*const struct{comptime comptime_float = 150.01, comptime comptime_float = 150.01}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:56});const St=new Uint8Array([]),zt=new Uint8Array([104,30,16,0]),Ot=new Uint8Array([10,215,35,60,10,215,35,60]),Rt=new Uint8Array([170,170,170,170]),f=new Uint8Array([]),qt=new Uint8Array([170,170,170,170]);Object.assign(ne,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ 0.009999999776482582, 0.009999999776482582 }, comptime maxValue: struct{comptime comptime_float = 496.01, comptime comptime_float = 496.01} = .{496.01, 496.01}, comptime defaultValue: struct{comptime comptime_float = 150.01, comptime comptime_float = 150.01} = .{150.01, 150.01}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:O},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:T},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:M},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:$}],methods:[],template:{memory:{array:St},slots:{0:{structure:T,memory:{array:zt},slots:{0:{structure:O,memory:{array:Ot},address:1056360}}},1:{structure:M,memory:{array:Rt},slots:{0:{structure:ae,memory:{array:f},address:-1431655766}}},2:{structure:$,memory:{array:qt},slots:{0:{structure:ie,memory:{array:f},address:-1431655766}}}}}},slot:44});Object.assign(B,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ 0.009999999776482582, 0.009999999776482582 }, comptime maxValue: struct{comptime comptime_float = 496.01, comptime comptime_float = 496.01} = .{496.01, 496.01}, comptime defaultValue: struct{comptime comptime_float = 150.01, comptime comptime_float = 150.01} = .{150.01, 150.01}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:43});const Vt=new Uint8Array([]),wt=new Uint8Array([170,170,170,170]),At=new Uint8Array([170,170,170,170]),Ut=new Uint8Array([170,170,170,170]);Object.assign(me,{...t,type:2,name:"struct{comptime angle: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.0001, comptime maxValue: f32 = 3.141592025756836, comptime defaultValue: comptime_float = 0.628318531} = .{.type = f32, .minValue = 0.0001, .maxValue = 3.141592025756836, .defaultValue = 0.628318531}, comptime direction: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: f32 = 6.2831854820251465, comptime defaultValue: comptime_float = 0.0001} = .{.type = f32, .minValue = 0, .maxValue = 6.2831854820251465, .defaultValue = 0.0001}, comptime basepoint: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ 0.009999999776482582, 0.009999999776482582 }, comptime maxValue: struct{comptime comptime_float = 496.01, comptime comptime_float = 496.01} = .{496.01, 496.01}, comptime defaultValue: struct{comptime comptime_float = 150.01, comptime comptime_float = 150.01} = .{150.01, 150.01}} = .{.type = @Vector(2, f32), .minValue = .{ 0.009999999776482582, 0.009999999776482582 }, .maxValue = .{496.01, 496.01}, .defaultValue = .{150.01, 150.01}}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"angle",structure:F},{...e,type:8,isRequired:!1,slot:1,name:"direction",structure:D},{...e,type:8,isRequired:!1,slot:2,name:"basepoint",structure:B}],methods:[],template:{memory:{array:Vt},slots:{0:{structure:F,memory:{array:wt},slots:{0:{structure:se,memory:{array:f},address:-1431655766}}},1:{structure:D,memory:{array:At},slots:{0:{structure:re,memory:{array:f},address:-1431655766}}},2:{structure:B,memory:{array:Ut},slots:{0:{structure:ne,memory:{array:f},address:-1431655766}}}}}},slot:15});Object.assign(L,{...t,type:11,name:"*struct{comptime angle: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.0001, comptime maxValue: f32 = 3.141592025756836, comptime defaultValue: comptime_float = 0.628318531} = .{.type = f32, .minValue = 0.0001, .maxValue = 3.141592025756836, .defaultValue = 0.628318531}, comptime direction: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: f32 = 6.2831854820251465, comptime defaultValue: comptime_float = 0.0001} = .{.type = f32, .minValue = 0, .maxValue = 6.2831854820251465, .defaultValue = 0.0001}, comptime basepoint: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ 0.009999999776482582, 0.009999999776482582 }, comptime maxValue: struct{comptime comptime_float = 496.01, comptime comptime_float = 496.01} = .{496.01, 496.01}, comptime defaultValue: struct{comptime comptime_float = 150.01, comptime comptime_float = 150.01} = .{150.01, 150.01}} = .{.type = @Vector(2, f32), .minValue = .{ 0.009999999776482582, 0.009999999776482582 }, .maxValue = .{496.01, 496.01}, .defaultValue = .{150.01, 150.01}}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:14});Object.assign(G,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:58});const jt=new Uint8Array([]),_t=new Uint8Array([96,30,16,0]),Pt=new Uint8Array([4,0,0,0]);Object.assign(U,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:G}],methods:[],template:{memory:{array:jt},slots:{0:{structure:G,memory:{array:_t},slots:{0:{structure:y,memory:{array:Pt},address:1056352}}}}}},slot:46});Object.assign(R,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:U}],methods:[],template:null},slot:45});const xt=new Uint8Array([]),It=new Uint8Array([170,170,170,170]);Object.assign(oe,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:R}],methods:[],template:{memory:{array:xt},slots:{0:{structure:R,memory:{array:It},slots:{0:{structure:U,memory:{array:f},address:-1431655766}}}}}},slot:17});Object.assign(H,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:16});const kt=new Uint8Array([]),Ct=new Uint8Array([170,170,170,170]);Object.assign(le,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:R}],methods:[],template:{memory:{array:kt},slots:{0:{structure:R,memory:{array:Ct},slots:{0:{structure:U,memory:{array:f},address:-1431655766}}}}}},slot:19});Object.assign(J,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:18});const vt=new Uint8Array([]),Et=new Uint8Array([]),Kt=new Uint8Array([84,249,15,0]),Ft=new Uint8Array([224,54,16,0]),Dt=new Uint8Array([82,97,100,105,97,108,67,97,108,101,105,100,111,115,99,111,112,101,0]),Tt=new Uint8Array([148,249,15,0]),Mt=new Uint8Array([209,54,16,0]),$t=new Uint8Array([80,101,116,114,105,32,76,101,115,107,105,110,101,110,0]),Bt=new Uint8Array([212,249,15,0]),Lt=new Uint8Array([1,0,0,0]),Gt=new Uint8Array([44,250,15,0]),Ht=new Uint8Array([166,54,16,0]),Jt=new Uint8Array([67,97,108,101,105,100,111,115,99,111,112,101,32,45,101,102,102,101,99,116,32,102,111,114,32,114,97,100,105,97,108,32,114,101,102,108,101,99,116,105,111,110,0]),Nt=new Uint8Array([170,170,170,170]),Qt=new Uint8Array([170,170,170,170]),Wt=new Uint8Array([170,170,170,170]);Object.assign(ge,{...t,type:2,name:"radial-caleidoscope.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:vt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:v},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:E},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:d},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:K},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:L},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:H},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:J}],methods:[],template:{memory:{array:Et},slots:{0:{structure:v,memory:{array:Kt},slots:{0:{structure:X,memory:{array:Ft},slots:{0:{structure:W,memory:{array:Dt},address:1062624}}}}},1:{structure:E,memory:{array:Tt},slots:{0:{structure:Z,memory:{array:Mt},slots:{0:{structure:Y,memory:{array:$t},address:1062609}}}}},2:{structure:d,memory:{array:Bt},slots:{0:{structure:y,memory:{array:Lt}}}},3:{structure:K,memory:{array:Gt},slots:{0:{structure:te,memory:{array:Ht},slots:{0:{structure:ee,memory:{array:Jt},address:1062566}}}}},4:{structure:L,memory:{array:Nt},slots:{0:{structure:me,memory:{array:f},address:-1431655766}}},5:{structure:H,memory:{array:Qt},slots:{0:{structure:oe,memory:{array:f},address:-1431655766}}},6:{structure:J,memory:{array:Wt},slots:{0:{structure:le,memory:{array:f},address:-1431655766}}}}}},slot:1});Object.assign(q,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:24});Object.assign(ue,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:23});Object.assign(ce,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ue}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const Xt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ye,{...t,type:9,name:"radial-caleidoscope.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:y},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:y}],methods:[],template:{memory:{array:Xt}}},slot:26});Object.assign(w,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:w}],methods:[],template:null},slot:27});Object.assign(A,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:28});Object.assign(pe,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:47});const Yt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Zt=new Uint8Array([]),es=new Uint8Array([104,253,15,0]),ts=new Uint8Array([4,0,0,0]);Object.assign(N,{...t,type:2,name:"radial-caleidoscope.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ce},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ye},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:w},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:A}],methods:[],template:{memory:{array:Yt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:q},{...e,type:7,isRequired:!1,name:"FPixel",structure:pe},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Zt},slots:{0:{structure:d,memory:{array:es},slots:{0:{structure:y,memory:{array:ts}}}}}}},slot:21});const ss=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),rs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),as=new Uint8Array([0,0,0,0,0,0,0,0]),Ae=new Uint8Array([]);Object.assign(j,{...t,type:2,name:"radial-caleidoscope.KernelInput(u8,radial-caleidoscope.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:N}],methods:[],template:{memory:{array:ss},slots:{0:{structure:N,memory:{array:rs},slots:{0:{structure:ce,memory:{array:as},slots:{0:{structure:ue,memory:{array:Ae}}}}}}}}},slot:20});Object.assign(fe,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:23});Object.assign(be,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:fe}],methods:[],template:null},slot:31});const is=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ns=new Uint8Array([]),ms=new Uint8Array([104,253,15,0]),os=new Uint8Array([4,0,0,0]);Object.assign(Q,{...t,type:2,name:"radial-caleidoscope.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:be},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ye},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:w},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:A}],methods:[],template:{memory:{array:is}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:q},{...e,type:7,isRequired:!1,name:"FPixel",structure:pe},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:ns},slots:{0:{structure:d,memory:{array:ms},slots:{0:{structure:y,memory:{array:os}}}}}}},slot:30});const ls=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),us=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),cs=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(_,{...t,type:2,name:"radial-caleidoscope.KernelOutput(u8,radial-caleidoscope.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:Q}],methods:[],template:{memory:{array:ls},slots:{0:{structure:Q,memory:{array:us},slots:{0:{structure:be,memory:{array:cs},slots:{0:{structure:fe,memory:{array:Ae}}}}}}}}},slot:29});const ys=new Uint8Array([143,2,22,67,143,2,22,67,124,217,32,63,23,183,209,56]);Object.assign(P,{...t,type:2,name:"radial-caleidoscope.KernelParameters(radial-caleidoscope.kernel)",length:1,byteSize:16,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:0,name:"angle",structure:u},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:1,name:"direction",structure:u},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:2,name:"basepoint",structure:O}],methods:[],template:{memory:{array:ys}}},slot:32});Object.assign(Se,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(radial-caleidoscope.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(ze,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(radial-caleidoscope.createOutput)).Fn.return_type.?).ErrorUnion.error_set!radial-caleidoscope.KernelOutput(u8,radial-caleidoscope.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:_},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Se}],methods:[],template:null},slot:37});Object.assign(Oe,{...t,type:3,name:"createOutput",length:1,byteSize:80,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:192,bitSize:192,byteSize:24,slot:2,name:"2",structure:j},{...e,type:6,bitOffset:0,bitSize:128,byteSize:16,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ze}],methods:[],template:null},slot:35});Object.assign(Re,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(radial-caleidoscope.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:49});Object.assign(qe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(radial-caleidoscope.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!radial-caleidoscope.KernelOutput(u8,radial-caleidoscope.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:_},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Re}],methods:[],template:null},slot:38});Object.assign(Ve,{...t,type:3,name:"createPartialOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:4,name:"4",structure:j},{...e,type:6,bitOffset:0,bitSize:128,byteSize:16,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:qe}],methods:[],template:null},slot:36});const ps={argStruct:Oe,thunk:7,name:"createOutput"},fs={argStruct:Ve,thunk:2,name:"createPartialOutput"};Object.assign(we,{...t,type:2,name:"radial-caleidoscope",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ae}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ge},{...e,type:7,isRequired:!1,name:"Input",structure:j},{...e,type:7,isRequired:!1,name:"Output",structure:_},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[ps,fs],template:null},slot:0});const bs=[h,W,X,v,Y,Z,E,y,d,ee,te,K,u,c,r,z,se,F,re,D,O,T,ae,M,ie,$,ne,B,me,L,G,U,R,oe,H,le,J,ge,q,ue,ce,l,ye,w,A,pe,N,j,fe,be,Q,_,P,Se,ze,Oe,Re,qe,Ve,we],ds=Ze(bs),hs=we.constructor,gs=(async()=>{const n=new URL("radial-caleidoscope-02666613.wasm",import.meta.url).href;return fetch(n)})();et(gs,{...ds,writeBack:!0});const{createOutput:As,createPartialOutput:Ss,kernel:he,Input:zs,Output:Us,Parameters:js}=hs;function Os(n,o,a,s,i={},g={}){if(Array.isArray(i)){const b=i;i={};for(const[p,S]of Object.keys(he.inputImages).entries())i[S]=b[p]}const x=new zs(void 0),I=Object.keys(he.inputImages),m=[];let V;for(const b of I){let p=i[b];if(p||(I.length===1&&["data","width","height"].every(S=>!!i[S])?p=i:m.push(b)),x[b]=p,V){if(p.colorSpace!==V)throw new Error(`Input images must all use the same color space: ${V}`)}else V=p.colorSpace}if(m.length>0)throw new Error(`Missing input image${m.length>1?"s":""}: ${m.join(", ")}`);const de=Ss(n,o,a,s,x,g),Ue=b=>{const p=Object.keys(b),S={};for(const je of p){const{data:{typedArray:k},width:_e,height:Ce}=b[je];let C;if(typeof ImageData=="function"){const ve=new Uint8ClampedArray(k.buffer,k.byteOffset,k.byteLength);C=new ImageData(ve,_e,s,{colorSpace:V})}else C={data:k,width:_e,height:Ce};if(p.length===1)return C;S[je]=C}return S};return de[Symbol.toStringTag]==="Promise"?de.then(Ue):Ue(de)}function Rs(){const n={};for(let[o,a]of Object.entries(he)){if(o==="parameters"){const s={};for(const[i,g]of Object.entries(a)){const x=s[i]={};for(let[I,m]of Object.entries(g))typeof m=="object"?"string"in m?m=m.string:m=ke(m):typeof m=="function"&&(m=qs(m.name)),x[I]=m}a=s}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());n[o]=a}return n}function ke(n){const o=[];for(let[a,s]of Object.entries(n))typeof s=="object"&&(s=ke(s)),o[a]=s;return o}function qs(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,a,...s]=n.data;Vs(o,s).then(([i,g])=>{postMessage([o,a,i],{transfer:g})}).catch(i=>{postMessage(["error",a,i])})};async function Vs(n,o){switch(n){case"getKernelInfo":return[Rs(...o)];case"createPartialImageData":const s=await Os(...o),i=[];if("data"in s&&"width"in s&&"height"in s)i.push(s.data.buffer);else for(const g of Object.entries(s))i.push(s.data.buffer);return[s,i];default:throw new Error(`Unknown function: ${n}`)}}
