import{u as _e,a as je,b as Pe,d as xe,c as Ie,e as ke,f as ve,g as Ce,h as Ee,i as Ke,j as Fe,k as De,l as Te,n as Me,m as $e,o as Be,p as Le,q as Ge,r as He}from"./index-778418ea.js";_e();je();Pe();xe();Ie();ke();ve();Ce();Ee();Ke();Fe();De();Te();Me();$e();Be();Le();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},S={},H={},J={},E={},N={},Q={},K={},i={},h={},W={},X={},F={},y={},Y={},D={},f={},p={},u={},Z={},T={},w={},O={},ee={},M={},_={},V={},te={},$={},se={},B={},ye={},R={},re={},ae={},l={},ie={},A={},U={},ne={},L={},j={},me={},oe={},G={},P={},x={},pe={},be={},fe={},de={},he={},Se={},ge={};Object.assign(S,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:5});Object.assign(H,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:4});Object.assign(J,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:3});Object.assign(E,{...t,type:11,name:"**const [21:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:2});Object.assign(N,{...t,type:1,name:"[34:0]u8",length:34,byteSize:35,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:8});Object.assign(Q,{...t,type:11,name:"*const [34:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:7});Object.assign(K,{...t,type:11,name:"**const [34:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:6});Object.assign(i,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:i}],methods:[],template:null},slot:10});Object.assign(h,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:i}],methods:[],template:null},slot:9});Object.assign(W,{...t,type:1,name:"[52:0]u8",length:52,byteSize:53,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:13});Object.assign(X,{...t,type:11,name:"*const [52:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:12});Object.assign(F,{...t,type:11,name:"**const [52:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:11});Object.assign(y,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:i}],methods:[],template:null},slot:49});const Je=new Uint8Array([]),Ne=new Uint8Array([168,2,16,0]),qe=new Uint8Array([0,0,0,0]),Qe=new Uint8Array([172,2,16,0]),We=new Uint8Array([1,0,0,0]),Xe=new Uint8Array([168,2,16,0]);Object.assign(Y,{...t,type:2,name:"struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:i},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:y},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:y},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:y}],methods:[],template:{memory:{array:Je},slots:{0:{structure:y,memory:{array:Ne},slots:{0:{structure:i,memory:{array:qe},address:1049256}}},1:{structure:y,memory:{array:Qe},slots:{0:{structure:i,memory:{array:We},address:1049260}}},2:{structure:y,memory:{array:Xe},slots:{0:{structure:i,memory:{array:qe},address:1049256}}}}}},slot:39});Object.assign(D,{...t,type:11,name:"*const struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:38});Object.assign(f,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:33});Object.assign(p,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:p}],methods:[],template:null},slot:51});Object.assign(u,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:50});const Ye=new Uint8Array([]),Ze=new Uint8Array([160,2,16,0]),et=new Uint8Array([0,0,0,0,0,0,0,0]),tt=new Uint8Array([152,2,16,0]),st=new Uint8Array([0,0,0,0,0,0,20,64]),rt=new Uint8Array([136,2,16,0]),le=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(Z,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:u},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:u},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:u}],methods:[],template:{memory:{array:Ye},slots:{0:{structure:u,memory:{array:Ze},slots:{0:{structure:p,memory:{array:et},address:1049248}}},1:{structure:u,memory:{array:tt},slots:{0:{structure:p,memory:{array:st},address:1049240}}},2:{structure:u,memory:{array:rt},slots:{0:{structure:p,memory:{array:le},address:1049224}}}}}},slot:41});Object.assign(T,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:40});const at=new Uint8Array([]),it=new Uint8Array([144,2,16,0]),nt=new Uint8Array([0,0,0,0,0,0,240,191]),mt=new Uint8Array([136,2,16,0]),ot=new Uint8Array([136,2,16,0]);Object.assign(w,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:u},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:u},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:u}],methods:[],template:{memory:{array:at},slots:{0:{structure:u,memory:{array:it},slots:{0:{structure:p,memory:{array:nt},address:1049232}}},1:{structure:u,memory:{array:mt},slots:{0:{structure:p,memory:{array:le},address:1049224}}},2:{structure:u,memory:{array:ot},slots:{0:{structure:p,memory:{array:le},address:1049224}}}}}},slot:43});Object.assign(O,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:w}],methods:[],template:null},slot:42});const ut=new Uint8Array([]),lt=new Uint8Array([170,170,170,170]),b=new Uint8Array([]),ct=new Uint8Array([170,170,170,170]),yt=new Uint8Array([170,170,170,170]),pt=new Uint8Array([170,170,170,170]);Object.assign(ee,{...t,type:2,name:"struct{comptime soft_sobel: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 0} = .{.type = i32, .minValue = 0, .maxValue = 1, .defaultValue = 0}, comptime amount: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 5, .defaultValue = 1}, comptime invert_red: struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = -1, .maxValue = 1, .defaultValue = 1}, comptime invert_green: struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = -1, .maxValue = 1, .defaultValue = 1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"soft_sobel",structure:D},{...e,type:8,isRequired:!1,slot:1,name:"amount",structure:T},{...e,type:8,isRequired:!1,slot:2,name:"invert_red",structure:O},{...e,type:8,isRequired:!1,slot:3,name:"invert_green",structure:O}],methods:[],template:{memory:{array:ut},slots:{0:{structure:D,memory:{array:lt},slots:{0:{structure:Y,memory:{array:b},address:-1431655766}}},1:{structure:T,memory:{array:ct},slots:{0:{structure:Z,memory:{array:b},address:-1431655766}}},2:{structure:O,memory:{array:yt},slots:{0:{structure:w,memory:{array:b},address:-1431655766}}},3:{structure:O,memory:{array:pt},slots:{0:{structure:w,memory:{array:b},address:-1431655766}}}}}},slot:15});Object.assign(M,{...t,type:11,name:"*struct{comptime soft_sobel: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 0} = .{.type = i32, .minValue = 0, .maxValue = 1, .defaultValue = 0}, comptime amount: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 5, .defaultValue = 1}, comptime invert_red: struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = -1, .maxValue = 1, .defaultValue = 1}, comptime invert_green: struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = -1, .maxValue = 1, .defaultValue = 1}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:14});const bt=new Uint8Array([]),ft=new Uint8Array([128,2,16,0]),dt=new Uint8Array([4,0,0,0]);Object.assign(_,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:y}],methods:[],template:{memory:{array:bt},slots:{0:{structure:y,memory:{array:ft},slots:{0:{structure:i,memory:{array:dt},address:1049216}}}}}},slot:45});Object.assign(V,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_}],methods:[],template:null},slot:44});const ht=new Uint8Array([]),St=new Uint8Array([170,170,170,170]);Object.assign(te,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:V}],methods:[],template:{memory:{array:ht},slots:{0:{structure:V,memory:{array:St},slots:{0:{structure:_,memory:{array:b},address:-1431655766}}}}}},slot:17});Object.assign($,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:16});const gt=new Uint8Array([]),zt=new Uint8Array([170,170,170,170]);Object.assign(se,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:V}],methods:[],template:{memory:{array:gt},slots:{0:{structure:V,memory:{array:zt},slots:{0:{structure:_,memory:{array:b},address:-1431655766}}}}}},slot:19});Object.assign(B,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:18});const Ot=new Uint8Array([]),Vt=new Uint8Array([]),Rt=new Uint8Array([156,249,15,0]),qt=new Uint8Array([70,22,16,0]),wt=new Uint8Array([99,111,109,46,115,109,97,114,116,112,97,103,101,46,102,105,108,116,101,114,115,0]),At=new Uint8Array([220,249,15,0]),Ut=new Uint8Array([35,22,16,0]),_t=new Uint8Array([115,109,97,114,116,45,112,97,103,101,46,110,101,116,32,45,32,74,97,110,45,67,46,32,70,114,105,115,99,104,109,117,116,104,0]),jt=new Uint8Array([28,250,15,0]),Pt=new Uint8Array([1,0,0,0]),xt=new Uint8Array([116,250,15,0]),It=new Uint8Array([238,21,16,0]),kt=new Uint8Array([71,101,110,101,114,97,116,101,115,32,97,32,110,111,114,109,97,108,109,97,112,32,117,115,105,110,103,32,99,111,110,100,101,110,115,101,100,32,111,114,32,115,111,98,101,108,45,101,100,103,101,46,0]),vt=new Uint8Array([170,170,170,170]),Ct=new Uint8Array([170,170,170,170]),Et=new Uint8Array([170,170,170,170]);Object.assign(ye,{...t,type:2,name:"smart-normal-map.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ot}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:E},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:K},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:h},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:F},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:M},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:$},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:B}],methods:[],template:{memory:{array:Vt},slots:{0:{structure:E,memory:{array:Rt},slots:{0:{structure:J,memory:{array:qt},slots:{0:{structure:H,memory:{array:wt},address:1054278}}}}},1:{structure:K,memory:{array:At},slots:{0:{structure:Q,memory:{array:Ut},slots:{0:{structure:N,memory:{array:_t},address:1054243}}}}},2:{structure:h,memory:{array:jt},slots:{0:{structure:i,memory:{array:Pt}}}},3:{structure:F,memory:{array:xt},slots:{0:{structure:X,memory:{array:It},slots:{0:{structure:W,memory:{array:kt},address:1054190}}}}},4:{structure:M,memory:{array:vt},slots:{0:{structure:ee,memory:{array:b},address:-1431655766}}},5:{structure:$,memory:{array:Ct},slots:{0:{structure:te,memory:{array:b},address:-1431655766}}},6:{structure:B,memory:{array:Et},slots:{0:{structure:se,memory:{array:b},address:-1431655766}}}}}},slot:1});Object.assign(R,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:24});Object.assign(re,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:23});Object.assign(ae,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:re}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const Kt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ie,{...t,type:9,name:"smart-normal-map.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:i},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:i}],methods:[],template:{memory:{array:Kt}}},slot:26});Object.assign(A,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:A}],methods:[],template:null},slot:27});Object.assign(U,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:U}],methods:[],template:null},slot:28});Object.assign(ne,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:46});const Ft=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Dt=new Uint8Array([]),Tt=new Uint8Array([104,253,15,0]),Mt=new Uint8Array([4,0,0,0]);Object.assign(L,{...t,type:2,name:"smart-normal-map.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ae},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ie},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:A},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:U}],methods:[],template:{memory:{array:Ft}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:R},{...e,type:7,isRequired:!1,name:"FPixel",structure:ne},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:Dt},slots:{0:{structure:h,memory:{array:Tt},slots:{0:{structure:i,memory:{array:Mt}}}}}}},slot:21});const $t=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Bt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Lt=new Uint8Array([0,0,0,0,0,0,0,0]),ze=new Uint8Array([]);Object.assign(j,{...t,type:2,name:"smart-normal-map.KernelInput(u8,smart-normal-map.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:L}],methods:[],template:{memory:{array:$t},slots:{0:{structure:L,memory:{array:Bt},slots:{0:{structure:ae,memory:{array:Lt},slots:{0:{structure:re,memory:{array:ze}}}}}}}}},slot:20});Object.assign(me,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:23});Object.assign(oe,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:me}],methods:[],template:null},slot:31});const Gt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ht=new Uint8Array([]),Jt=new Uint8Array([104,253,15,0]),Nt=new Uint8Array([4,0,0,0]);Object.assign(G,{...t,type:2,name:"smart-normal-map.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:oe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ie},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:A},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:U}],methods:[],template:{memory:{array:Gt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:R},{...e,type:7,isRequired:!1,name:"FPixel",structure:ne},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:Ht},slots:{0:{structure:h,memory:{array:Jt},slots:{0:{structure:i,memory:{array:Nt}}}}}}},slot:30});const Qt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Wt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Xt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(P,{...t,type:2,name:"smart-normal-map.KernelOutput(u8,smart-normal-map.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:G}],methods:[],template:{memory:{array:Qt},slots:{0:{structure:G,memory:{array:Wt},slots:{0:{structure:oe,memory:{array:Xt},slots:{0:{structure:me,memory:{array:ze}}}}}}}}},slot:29});const Yt=new Uint8Array([0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63]);Object.assign(x,{...t,type:2,name:"smart-normal-map.KernelParameters(smart-normal-map.kernel)",length:1,byteSize:16,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"soft_sobel",structure:i},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"amount",structure:f},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"invert_red",structure:f},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"invert_green",structure:f}],methods:[],template:{memory:{array:Yt}}},slot:32});Object.assign(pe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(smart-normal-map.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:47});Object.assign(be,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(smart-normal-map.createOutput)).Fn.return_type.?).ErrorUnion.error_set!smart-normal-map.KernelOutput(u8,smart-normal-map.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:pe}],methods:[],template:null},slot:36});Object.assign(fe,{...t,type:3,name:"createOutput",length:1,byteSize:76,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:j},{...e,type:6,bitOffset:256,bitSize:128,byteSize:16,slot:3,name:"3",structure:x},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:be}],methods:[],template:null},slot:34});Object.assign(de,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(smart-normal-map.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(he,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(smart-normal-map.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!smart-normal-map.KernelOutput(u8,smart-normal-map.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:de}],methods:[],template:null},slot:37});Object.assign(Se,{...t,type:3,name:"createPartialOutput",length:1,byteSize:84,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:j},{...e,type:6,bitOffset:320,bitSize:128,byteSize:16,slot:5,name:"5",structure:x},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:he}],methods:[],template:null},slot:35});const Zt={argStruct:fe,thunk:7,name:"createOutput"},es={argStruct:Se,thunk:2,name:"createPartialOutput"};Object.assign(ge,{...t,type:2,name:"smart-normal-map",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ze}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ye},{...e,type:7,isRequired:!1,name:"Input",structure:j},{...e,type:7,isRequired:!1,name:"Output",structure:P},{...e,type:7,isRequired:!1,name:"Parameters",structure:x}],methods:[Zt,es],template:null},slot:0});const ts=[S,H,J,E,N,Q,K,i,h,W,X,F,y,Y,D,f,p,u,Z,T,w,O,ee,M,_,V,te,$,se,B,ye,R,re,ae,l,ie,A,U,ne,L,j,me,oe,G,P,x,pe,be,fe,de,he,Se,ge],ss=Ge(ts),rs=ge.constructor,as=(async()=>{const n=new URL("smart-normal-map-6fe29bab.wasm",import.meta.url).href;return fetch(n)})();He(as,{...ss,writeBack:!0});const{createOutput:ys,createPartialOutput:is,kernel:ce,Input:ns,Output:ps,Parameters:bs}=rs;function ms(n,o,r,s,a={},g={}){if(Array.isArray(a)){const d=a;a={};for(const[c,z]of Object.keys(ce.inputImages).entries())a[z]=d[c]}const I=new ns(void 0),k=Object.keys(ce.inputImages),m=[];let q;for(const d of k){let c=a[d];if(c||(k.length===1&&["data","width","height"].every(z=>!!a[z])?c=a:m.push(d)),I[d]=c,q){if(c.colorSpace!==q)throw new Error(`Input images must all use the same color space: ${q}`)}else q=c.colorSpace}if(m.length>0)throw new Error(`Missing input image${m.length>1?"s":""}: ${m.join(", ")}`);const ue=is(n,o,r,s,I,g),Oe=d=>{const c=Object.keys(d),z={};for(const Ve of c){const{data:{typedArray:v},width:Re,height:Ae}=d[Ve];let C;if(typeof ImageData=="function"){const Ue=new Uint8ClampedArray(v.buffer,v.byteOffset,v.byteLength);C=new ImageData(Ue,Re,s,{colorSpace:q})}else C={data:v,width:Re,height:Ae};if(c.length===1)return C;z[Ve]=C}return z};return ue[Symbol.toStringTag]==="Promise"?ue.then(Oe):Oe(ue)}function os(){const n={};for(let[o,r]of Object.entries(ce)){if(o==="parameters"){const s={};for(const[a,g]of Object.entries(r)){const I=s[a]={};for(let[k,m]of Object.entries(g))typeof m=="object"?"string"in m?m=m.string:m=we(m):typeof m=="function"&&(m=us(m.name)),I[k]=m}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[o]=r}return n}function we(n){const o=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=we(s)),o[r]=s;return o}function us(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,r,...s]=n.data;ls(o,s).then(([a,g])=>{postMessage([o,r,a],{transfer:g})}).catch(a=>{postMessage(["error",r,a])})};async function ls(n,o){switch(n){case"getKernelInfo":return[os(...o)];case"createPartialImageData":const s=await ms(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const g of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
