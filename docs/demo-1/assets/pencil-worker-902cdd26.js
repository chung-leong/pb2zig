import{u as Re,a as qe,b as Ae,c as Ue,d as je,e as Pe,f as Ve,g as ke,h as Ie,i as Ce,j as ve,k as xe,l as Ee,m as Ke,o as De,n as Fe,p as Me,q as _e}from"./index-d64bc850.js";Re();qe();Ae();Ue();je();Pe();Ve();ke();Ie();Ce();ve();xe();Ee();Ke();De();Fe();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},S={},B={},L={},v={},G={},H={},x={},b={},p={},J={},N={},E={},y={},m={},r={},R={},g={},Q={},K={},W={},D={},X={},F={},A={},z={},Y={},M={},Z={},_={},oe={},O={},ee={},te={},l={},se={},q={},re={},T={},U={},ae={},ne={},$={},j={},P={},le={},me={},ye={},ce={},be={},pe={},fe={};Object.assign(S,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:5});Object.assign(B,{...t,type:1,name:"[16:0]u8",length:16,byteSize:17,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:4});Object.assign(L,{...t,type:11,name:"*const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:3});Object.assign(v,{...t,type:11,name:"*const *const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:2});Object.assign(G,{...t,type:1,name:"[9:0]u8",length:9,byteSize:10,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:8});Object.assign(H,{...t,type:11,name:"*const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:7});Object.assign(x,{...t,type:11,name:"*const *const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:6});Object.assign(b,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:10});Object.assign(p,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:b}],methods:[],template:null},slot:9});Object.assign(J,{...t,type:1,name:"[6:0]u8",length:6,byteSize:7,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:13});Object.assign(N,{...t,type:11,name:"*const [6:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:12});Object.assign(E,{...t,type:11,name:"*const *const [6:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:11});Object.assign(y,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:32});Object.assign(m,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:m}],methods:[],template:null},slot:49});Object.assign(r,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:48});const Te=new Uint8Array,$e=new Uint8Array([152,248,15,0]),Be=new Uint8Array([0,0,0,0,0,0,0,0]),Le=new Uint8Array([192,248,15,0]),Ge=new Uint8Array([0,0,0,0,0,0,89,64]),He=new Uint8Array([232,248,15,0]),Je=new Uint8Array([0,0,0,0,0,64,88,64]);Object.assign(R,{...t,type:2,name:"Struct0010",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:Te},slots:{0:{structure:r,memory:{array:$e},slots:{0:{structure:m,memory:{array:Be}}}},1:{structure:r,memory:{array:Le},slots:{0:{structure:m,memory:{array:Ge}}}},2:{structure:r,memory:{array:He},slots:{0:{structure:m,memory:{array:Je}}}}}}},slot:38});Object.assign(g,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:37});const Ne=new Uint8Array,Qe=new Uint8Array([24,253,15,0]),We=new Uint8Array([0,0,0,0,0,0,0,0]),Xe=new Uint8Array([64,253,15,0]),Ye=new Uint8Array([0,0,0,0,0,0,89,64]),Ze=new Uint8Array([104,253,15,0]),et=new Uint8Array([0,0,0,0,0,0,46,64]);Object.assign(Q,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:Ne},slots:{0:{structure:r,memory:{array:Qe},slots:{0:{structure:m,memory:{array:We}}}},1:{structure:r,memory:{array:Xe},slots:{0:{structure:m,memory:{array:Ye}}}},2:{structure:r,memory:{array:Ze},slots:{0:{structure:m,memory:{array:et}}}}}}},slot:40});Object.assign(K,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:39});const tt=new Uint8Array,st=new Uint8Array([24,253,15,0]),rt=new Uint8Array([0,0,0,0,0,0,0,0]),at=new Uint8Array([64,253,15,0]),nt=new Uint8Array([0,0,0,0,0,0,36,64]),it=new Uint8Array([104,253,15,0]),ut=new Uint8Array([102,102,102,102,102,102,35,64]);Object.assign(W,{...t,type:2,name:"Struct0012",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:tt},slots:{0:{structure:r,memory:{array:st},slots:{0:{structure:m,memory:{array:rt}}}},1:{structure:r,memory:{array:at},slots:{0:{structure:m,memory:{array:nt}}}},2:{structure:r,memory:{array:it},slots:{0:{structure:m,memory:{array:ut}}}}}}},slot:42});Object.assign(D,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:41});const ot=new Uint8Array,lt=new Uint8Array([170,170,170,170]),mt=new Uint8Array,yt=new Uint8Array([170,170,170,170]),ct=new Uint8Array,bt=new Uint8Array([170,170,170,170]),pt=new Uint8Array,ft=new Uint8Array([170,170,170,170]),St=new Uint8Array;Object.assign(X,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"n0",structure:g},{...e,type:8,isRequired:!1,slot:1,name:"n1",structure:K},{...e,type:8,isRequired:!1,slot:2,name:"n2",structure:g},{...e,type:8,isRequired:!1,slot:3,name:"n3",structure:D}],methods:[],template:{memory:{array:ot},slots:{0:{structure:g,memory:{array:lt},slots:{0:{structure:R,memory:{array:mt}}}},1:{structure:K,memory:{array:yt},slots:{0:{structure:Q,memory:{array:ct}}}},2:{structure:g,memory:{array:bt},slots:{0:{structure:R,memory:{array:pt}}}},3:{structure:D,memory:{array:ft},slots:{0:{structure:W,memory:{array:St}}}}}}},slot:15});Object.assign(F,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:14});const dt=new Uint8Array,ht=new Uint8Array([224,248,15,0]),gt=new Uint8Array([4,0,0,0]);Object.assign(A,{...t,type:2,name:"Struct0013",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:dt},slots:{0:{structure:p,memory:{array:ht},slots:{0:{structure:b,memory:{array:gt}}}}}}},slot:44});Object.assign(z,{...t,type:11,name:"Struct0009",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:43});const zt=new Uint8Array,Ot=new Uint8Array([170,170,170,170]),wt=new Uint8Array;Object.assign(Y,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:z}],methods:[],template:{memory:{array:zt},slots:{0:{structure:z,memory:{array:Ot},slots:{0:{structure:A,memory:{array:wt}}}}}}},slot:17});Object.assign(M,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:16});const Rt=new Uint8Array,qt=new Uint8Array([170,170,170,170]),At=new Uint8Array;Object.assign(Z,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"result",structure:z}],methods:[],template:{memory:{array:Rt},slots:{0:{structure:z,memory:{array:qt},slots:{0:{structure:A,memory:{array:At}}}}}}},slot:19});Object.assign(_,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:18});const Ut=new Uint8Array,jt=new Uint8Array,Pt=new Uint8Array([180,35,16,0]),Vt=new Uint8Array([101,35,16,0]),kt=new Uint8Array([97,114,46,115,104,97,100,101,114,46,112,101,110,99,105,108,0]),It=new Uint8Array([176,35,16,0]),Ct=new Uint8Array([80,35,16,0]),vt=new Uint8Array([65,108,97,110,32,82,111,115,115,0]),xt=new Uint8Array([172,35,16,0]),Et=new Uint8Array([1,0,0,0]),Kt=new Uint8Array([168,35,16,0]),Dt=new Uint8Array([56,35,16,0]),Ft=new Uint8Array([80,101,110,99,105,108,0]),Mt=new Uint8Array([170,170,170,170]),_t=new Uint8Array,Tt=new Uint8Array([170,170,170,170]),$t=new Uint8Array,Bt=new Uint8Array([170,170,170,170]),Lt=new Uint8Array;Object.assign(oe,{...t,type:2,name:"pencil.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ut}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:v},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:x},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:p},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:E},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:F},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:M},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:_}],methods:[],template:{memory:{array:jt},slots:{0:{structure:v,memory:{array:Pt},slots:{0:{structure:L,memory:{array:Vt},slots:{0:{structure:B,memory:{array:kt}}}}}},1:{structure:x,memory:{array:It},slots:{0:{structure:H,memory:{array:Ct},slots:{0:{structure:G,memory:{array:vt}}}}}},2:{structure:p,memory:{array:xt},slots:{0:{structure:b,memory:{array:Et}}}},3:{structure:E,memory:{array:Kt},slots:{0:{structure:N,memory:{array:Dt},slots:{0:{structure:J,memory:{array:Ft}}}}}},4:{structure:F,memory:{array:Mt},slots:{0:{structure:X,memory:{array:_t}}}},5:{structure:M,memory:{array:Tt},slots:{0:{structure:Y,memory:{array:$t}}}},6:{structure:_,memory:{array:Bt},slots:{0:{structure:Z,memory:{array:Lt}}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:24});Object.assign(ee,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(te,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ee}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const Gt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(se,{...t,type:9,name:"pencil.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:b},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:b}],methods:[],template:{memory:{array:Gt}}},slot:26});Object.assign(q,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:27});Object.assign(re,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:45});const Ht=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Jt=new Uint8Array,Nt=new Uint8Array([0,35,16,0]),Qt=new Uint8Array([4,0,0,0]);Object.assign(T,{...t,type:2,name:"pencil.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:te},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:se},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:q}],methods:[],template:{memory:{array:Ht}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:re},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:Jt},slots:{0:{structure:p,memory:{array:Nt},slots:{0:{structure:b,memory:{array:Qt}}}}}}},slot:21});const Wt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ge=new Uint8Array([0,0,0,0,0,0,0,0]),Yt=new Uint8Array;Object.assign(U,{...t,type:2,name:"pencil.KernelInput(u8,pencil.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:T}],methods:[],template:{memory:{array:Wt},slots:{0:{structure:T,memory:{array:Xt},slots:{0:{structure:te,memory:{array:ge},address:1047568,slots:{0:{structure:ee,memory:{array:Yt},address:0}}}}}}}},slot:20});Object.assign(ae,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(ne,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ae}],methods:[],template:null},slot:30});const Zt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),es=new Uint8Array,ts=new Uint8Array([0,35,16,0]),ss=new Uint8Array([4,0,0,0]);Object.assign($,{...t,type:2,name:"pencil.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ne},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:se},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:q}],methods:[],template:{memory:{array:Zt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:re},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:es},slots:{0:{structure:p,memory:{array:ts},slots:{0:{structure:b,memory:{array:ss}}}}}}},slot:29});const rs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),as=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ns=new Uint8Array;Object.assign(j,{...t,type:2,name:"pencil.KernelOutput(u8,pencil.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"result",structure:$}],methods:[],template:{memory:{array:rs},slots:{0:{structure:$,memory:{array:as},slots:{0:{structure:ne,memory:{array:ge},address:1047568,slots:{0:{structure:ae,memory:{array:ns},address:0}}}}}}}},slot:28});const is=new Uint8Array([0,0,194,66,0,0,112,65,0,0,194,66,51,51,27,65]);Object.assign(P,{...t,type:2,name:"pencil.KernelParameters(pencil.kernel)",length:1,byteSize:16,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"n0",structure:y},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"n1",structure:y},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"n2",structure:y},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"n3",structure:y}],methods:[],template:{memory:{array:is}}},slot:31});Object.assign(le,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(pencil.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:46});Object.assign(me,{...t,type:7,name:"ErrorSet0000!pencil.KernelOutput(u8,pencil.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:le}],methods:[],template:null},slot:35});Object.assign(ye,{...t,type:3,name:"createOutput",length:1,byteSize:76,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:U},{...e,type:6,bitOffset:256,bitSize:128,byteSize:16,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:me}],methods:[],template:null},slot:33});Object.assign(ce,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(pencil.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:47});Object.assign(be,{...t,type:7,name:"ErrorSet0001!pencil.KernelOutput(u8,pencil.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ce}],methods:[],template:null},slot:36});Object.assign(pe,{...t,type:3,name:"createPartialOutput",length:1,byteSize:84,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:U},{...e,type:6,bitOffset:320,bitSize:128,byteSize:16,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:be}],methods:[],template:null},slot:34});const us=new Uint8Array,os={argStruct:ye,thunk:7,name:"createOutput"},ls={argStruct:pe,thunk:2,name:"createPartialOutput"};Object.assign(fe,{...t,type:2,name:"pencil",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:us}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:oe},{...e,type:7,isRequired:!1,name:"Input",structure:U},{...e,type:7,isRequired:!1,name:"Output",structure:j},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[os,ls],template:null},slot:0});const ms=[S,B,L,v,G,H,x,b,p,J,N,E,y,m,r,R,g,Q,K,W,D,X,F,A,z,Y,M,Z,_,oe,O,ee,te,l,se,q,re,T,U,ae,ne,$,j,P,le,me,ye,ce,be,pe,fe],ys=Me(ms),cs=fe.constructor,bs=(async()=>{const i=new URL("pencil-c4dd34d1.wasm",import.meta.url).href;return fetch(i)})();_e(bs,{...ys,writeBack:!0});const{createOutput:Os,createPartialOutput:ps,kernel:ue,Input:fs,Output:ws,Parameters:Rs}=cs;function Ss(i,o,a,s,n={},d={}){if(Array.isArray(n)){const f=n;n={};for(const[c,h]of Object.keys(ue.inputImages).entries())n[h]=f[c]}const V=new fs(void 0),k=Object.keys(ue.inputImages),u=[];let w;for(const f of k){let c=n[f];if(c||(k.length===1&&["data","width","height"].every(h=>!!n[h])?c=n:u.push(f)),V[f]=c,w){if(c.colorSpace!==w)throw new Error(`Input images must all use the same color space: ${w}`)}else w=c.colorSpace}if(u.length>0)throw new Error(`Missing input image${u.length>1?"s":""}: ${u.join(", ")}`);const ie=ps(i,o,a,s,V,d),Se=f=>{const c=Object.keys(f),h={};for(const de of c){const{data:{typedArray:I},width:he,height:Oe}=f[de];let C;if(typeof ImageData=="function"){const we=new Uint8ClampedArray(I.buffer,I.byteOffset,I.byteLength);C=new ImageData(we,he,s,{colorSpace:w})}else C={data:I,width:he,height:Oe};if(c.length===1)return C;h[de]=C}return h};return ie[Symbol.toStringTag]==="Promise"?ie.then(Se):Se(ie)}function ds(){const i={};for(let[o,a]of Object.entries(ue)){if(o==="parameters"){const s={};for(const[n,d]of Object.entries(a)){const V=s[n]={};for(let[k,u]of Object.entries(d))typeof u=="object"?"string"in u?u=u.string:u=ze(u):typeof u=="function"&&(u=hs(u.name)),V[k]=u}a=s}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());i[o]=a}return i}function ze(i){const o=[];for(let[a,s]of Object.entries(i))typeof s=="object"&&(s=ze(s)),o[a]=s;return o}function hs(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[o,a,...s]=i.data;gs(o,s).then(([n,d])=>{postMessage([o,a,n],{transfer:d})}).catch(n=>{postMessage(["error",a,n])})};async function gs(i,o){switch(i){case"getKernelInfo":return[ds(...o)];case"createPartialImageData":const s=await Ss(...o),n=[];if("data"in s&&"width"in s&&"height"in s)n.push(s.data.buffer);else for(const d of Object.entries(s))n.push(s.data.buffer);return[s,n];default:throw new Error(`Unknown function: ${i}`)}}
