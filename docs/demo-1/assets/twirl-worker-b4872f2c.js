import{u as ve,a as xe,b as Ee,c as Ke,d as De,e as Fe,f as Me,g as _e,h as Te,i as $e,j as Be,k as Le,l as Ge,m as He,o as Je,n as Ne,p as Qe,q as We}from"./index-422d9c98.js";ve();xe();Ee();Ke();De();Fe();Me();_e();Te();$e();Be();Le();Ge();He();Je();Ne();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},S={},J={},N={},k={},Q={},W={},v={},m={},i={},X={},Y={},x={},f={},u={},s={},Z={},E={},ee={},te={},K={},se={},D={},re={},F={},ae={},M={},ne={},_={},ie={},T={},ue={},$={},q={},z={},oe={},B={},le={},L={},ge={},O={},me={},ye={},c={},ce={},R={},be={},G={},A={},pe={},fe={},H={},U={},j={},he={},ze={},Oe={},we={},Re={},qe={},Ae={};Object.assign(S,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:5});Object.assign(J,{...t,type:1,name:"[20:0]u8",length:20,byteSize:21,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:4});Object.assign(N,{...t,type:11,name:"*const [20:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:3});Object.assign(k,{...t,type:11,name:"*const *const [20:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:2});Object.assign(Q,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:8});Object.assign(W,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:7});Object.assign(v,{...t,type:11,name:"*const *const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:6});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:10});Object.assign(i,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:9});Object.assign(X,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:13});Object.assign(Y,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:12});Object.assign(x,{...t,type:11,name:"*const *const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:11});Object.assign(f,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:32});Object.assign(u,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:u}],methods:[],template:null},slot:52});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:51});const Xe=new Uint8Array([]),Ye=new Uint8Array([0,250,15,0]),Ze=new Uint8Array([154,153,153,153,153,153,185,63]),et=new Uint8Array([88,250,15,0]),tt=new Uint8Array([0,0,0,0,0,0,160,64]),st=new Uint8Array([32,249,15,0]),rt=new Uint8Array([0,0,0,0,0,0,36,64]);Object.assign(Z,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Xe},slots:{0:{structure:s,memory:{array:Ye},slots:{0:{structure:u,memory:{array:Ze}}}},1:{structure:s,memory:{array:et},slots:{0:{structure:u,memory:{array:tt}}}},2:{structure:s,memory:{array:st},slots:{0:{structure:u,memory:{array:rt}}}}}}},slot:39});Object.assign(E,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:38});Object.assign(ee,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:33});const at=new Uint8Array([]),nt=new Uint8Array([176,249,15,0]),it=new Uint8Array([0,0,0,0,0,0,0,0]),ut=new Uint8Array([40,250,15,0]),ot=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(te,{...t,type:2,name:"Struct0019",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:at},slots:{0:{structure:s,memory:{array:nt},slots:{0:{structure:u,memory:{array:it}}}},1:{structure:s,memory:{array:ut},slots:{0:{structure:u,memory:{array:ot}}}}}}},slot:54});Object.assign(K,{...t,type:11,name:"Struct0016",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:53});const lt=new Uint8Array([]),mt=new Uint8Array([176,249,15,0]),yt=new Uint8Array([0,0,0,0,0,0,160,64]),ct=new Uint8Array([40,250,15,0]),bt=new Uint8Array([0,0,0,0,0,0,160,64]);Object.assign(se,{...t,type:2,name:"Struct0020",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:lt},slots:{0:{structure:s,memory:{array:mt},slots:{0:{structure:u,memory:{array:yt}}}},1:{structure:s,memory:{array:ct},slots:{0:{structure:u,memory:{array:bt}}}}}}},slot:56});Object.assign(D,{...t,type:11,name:"Struct0017",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:55});const pt=new Uint8Array([]),ft=new Uint8Array([176,249,15,0]),dt=new Uint8Array([0,0,0,0,0,0,112,64]),St=new Uint8Array([40,250,15,0]),gt=new Uint8Array([0,0,0,0,0,0,112,64]);Object.assign(re,{...t,type:2,name:"Struct0021",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:pt},slots:{0:{structure:s,memory:{array:ft},slots:{0:{structure:u,memory:{array:dt}}}},1:{structure:s,memory:{array:St},slots:{0:{structure:u,memory:{array:gt}}}}}}},slot:58});Object.assign(F,{...t,type:11,name:"Struct0018",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:57});const ht=new Uint8Array([]),zt=new Uint8Array([170,170,170,170]),b=new Uint8Array([]),Ot=new Uint8Array([170,170,170,170]),wt=new Uint8Array([170,170,170,170]);Object.assign(ae,{...t,type:2,name:"Struct0012",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:ee},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:K},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:D},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:F}],methods:[],template:{memory:{array:ht},slots:{0:{structure:K,memory:{array:zt},slots:{0:{structure:te,memory:{array:b},address:-1431655766}}},1:{structure:D,memory:{array:Ot},slots:{0:{structure:se,memory:{array:b},address:-1431655766}}},2:{structure:F,memory:{array:wt},slots:{0:{structure:re,memory:{array:b},address:-1431655766}}}}}},slot:41});Object.assign(M,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:40});const Rt=new Uint8Array([]),qt=new Uint8Array([0,250,15,0]),At=new Uint8Array([0,0,0,0,0,0,0,0]),Ut=new Uint8Array([88,250,15,0]),jt=new Uint8Array([0,0,0,0,0,128,118,64]),Pt=new Uint8Array([32,249,15,0]),Vt=new Uint8Array([0,0,0,0,0,128,86,64]);Object.assign(ne,{...t,type:2,name:"Struct0013",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Rt},slots:{0:{structure:s,memory:{array:qt},slots:{0:{structure:u,memory:{array:At}}}},1:{structure:s,memory:{array:Ut},slots:{0:{structure:u,memory:{array:jt}}}},2:{structure:s,memory:{array:Pt},slots:{0:{structure:u,memory:{array:Vt}}}}}}},slot:43});Object.assign(_,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:42});const Ct=new Uint8Array([]),It=new Uint8Array([144,248,15,0]),kt=new Uint8Array([0,0,0,0]),vt=new Uint8Array([248,248,15,0]),xt=new Uint8Array([1,0,0,0]),Et=new Uint8Array([104,249,15,0]),Kt=new Uint8Array([0,0,0,0]);Object.assign(ie,{...t,type:2,name:"Struct0014",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:m},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:i},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:i},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:i}],methods:[],template:{memory:{array:Ct},slots:{0:{structure:i,memory:{array:It},slots:{0:{structure:m,memory:{array:kt}}}},1:{structure:i,memory:{array:vt},slots:{0:{structure:m,memory:{array:xt}}}},2:{structure:i,memory:{array:Et},slots:{0:{structure:m,memory:{array:Kt}}}}}}},slot:45});Object.assign(T,{...t,type:11,name:"Struct0009",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:44});const Dt=new Uint8Array([]),Ft=new Uint8Array([170,170,170,170]),Mt=new Uint8Array([170,170,170,170]),_t=new Uint8Array([170,170,170,170]),Tt=new Uint8Array([170,170,170,170]);Object.assign(ue,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"radius",structure:E},{...e,type:8,isRequired:!1,slot:1,name:"center",structure:M},{...e,type:8,isRequired:!1,slot:2,name:"twirlAngle",structure:_},{...e,type:8,isRequired:!1,slot:3,name:"gaussOrSinc",structure:T}],methods:[],template:{memory:{array:Dt},slots:{0:{structure:E,memory:{array:Ft},slots:{0:{structure:Z,memory:{array:b},address:-1431655766}}},1:{structure:M,memory:{array:Mt},slots:{0:{structure:ae,memory:{array:b},address:-1431655766}}},2:{structure:_,memory:{array:_t},slots:{0:{structure:ne,memory:{array:b},address:-1431655766}}},3:{structure:T,memory:{array:Tt},slots:{0:{structure:ie,memory:{array:b},address:-1431655766}}}}}},slot:15});Object.assign($,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:14});const $t=new Uint8Array([]),Bt=new Uint8Array([64,250,15,0]),Lt=new Uint8Array([4,0,0,0]);Object.assign(q,{...t,type:2,name:"Struct0015",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:i}],methods:[],template:{memory:{array:$t},slots:{0:{structure:i,memory:{array:Bt},slots:{0:{structure:m,memory:{array:Lt}}}}}}},slot:47});Object.assign(z,{...t,type:11,name:"Struct0010",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:46});const Gt=new Uint8Array([]),Ht=new Uint8Array([170,170,170,170]);Object.assign(oe,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"oImage",structure:z}],methods:[],template:{memory:{array:Gt},slots:{0:{structure:z,memory:{array:Ht},slots:{0:{structure:q,memory:{array:b},address:-1431655766}}}}}},slot:17});Object.assign(B,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:16});const Jt=new Uint8Array([]),Nt=new Uint8Array([170,170,170,170]);Object.assign(le,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"outputColor",structure:z}],methods:[],template:{memory:{array:Jt},slots:{0:{structure:z,memory:{array:Nt},slots:{0:{structure:q,memory:{array:b},address:-1431655766}}}}}},slot:19});Object.assign(L,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:18});const Qt=new Uint8Array([]),Wt=new Uint8Array([]),Xt=new Uint8Array([28,251,15,0]),Yt=new Uint8Array([43,36,16,0]),Zt=new Uint8Array([80,105,120,101,108,32,66,101,110,100,101,114,32,83,97,109,112,108,101,115,0]),es=new Uint8Array([92,251,15,0]),ts=new Uint8Array([29,36,16,0]),ss=new Uint8Array([65,100,111,98,101,32,83,121,115,116,101,109,115,0]),rs=new Uint8Array([156,251,15,0]),as=new Uint8Array([2,0,0,0]),ns=new Uint8Array([244,251,15,0]),is=new Uint8Array([7,36,16,0]),us=new Uint8Array([116,119,105,115,116,32,97,110,32,105,109,97,103,101,32,97,114,111,117,110,100,0]),os=new Uint8Array([170,170,170,170]),ls=new Uint8Array([170,170,170,170]),ms=new Uint8Array([170,170,170,170]);Object.assign(ge,{...t,type:2,name:"twirl.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Qt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:k},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:v},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:i},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:x},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:$},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:B},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:L}],methods:[],template:{memory:{array:Wt},slots:{0:{structure:k,memory:{array:Xt},slots:{0:{structure:N,memory:{array:Yt},slots:{0:{structure:J,memory:{array:Zt},address:1057835}}}}},1:{structure:v,memory:{array:es},slots:{0:{structure:W,memory:{array:ts},slots:{0:{structure:Q,memory:{array:ss},address:1057821}}}}},2:{structure:i,memory:{array:rs},slots:{0:{structure:m,memory:{array:as}}}},3:{structure:x,memory:{array:ns},slots:{0:{structure:Y,memory:{array:is},slots:{0:{structure:X,memory:{array:us},address:1057799}}}}},4:{structure:$,memory:{array:os},slots:{0:{structure:ue,memory:{array:b},address:-1431655766}}},5:{structure:B,memory:{array:ls},slots:{0:{structure:oe,memory:{array:b},address:-1431655766}}},6:{structure:L,memory:{array:ms},slots:{0:{structure:le,memory:{array:b},address:-1431655766}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:24});Object.assign(me,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(ye,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:me}],methods:[],template:null},slot:22});Object.assign(c,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:25});const ys=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ce,{...t,type:9,name:"twirl.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:ys}}},slot:26});Object.assign(R,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:27});Object.assign(be,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:48});const cs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),bs=new Uint8Array([]),ps=new Uint8Array([216,249,15,0]),fs=new Uint8Array([4,0,0,0]);Object.assign(G,{...t,type:2,name:"twirl.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ye},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ce},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:R}],methods:[],template:{memory:{array:cs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:be},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:i}],methods:[],template:{memory:{array:bs},slots:{0:{structure:i,memory:{array:ps},slots:{0:{structure:m,memory:{array:fs}}}}}}},slot:21});const ds=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ss=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),gs=new Uint8Array([0,0,0,0,0,0,0,0]),Ue=new Uint8Array([]);Object.assign(A,{...t,type:2,name:"twirl.KernelInput(u8,twirl.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"oImage",structure:G}],methods:[],template:{memory:{array:ds},slots:{0:{structure:G,memory:{array:Ss},slots:{0:{structure:ye,memory:{array:gs},slots:{0:{structure:me,memory:{array:Ue}}}}}}}}},slot:20});Object.assign(pe,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(fe,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:pe}],methods:[],template:null},slot:30});const hs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),zs=new Uint8Array([]),Os=new Uint8Array([216,249,15,0]),ws=new Uint8Array([4,0,0,0]);Object.assign(H,{...t,type:2,name:"twirl.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:fe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ce},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:R}],methods:[],template:{memory:{array:hs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:be},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:i}],methods:[],template:{memory:{array:zs},slots:{0:{structure:i,memory:{array:Os},slots:{0:{structure:m,memory:{array:ws}}}}}}},slot:29});const Rs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),qs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),As=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(U,{...t,type:2,name:"twirl.KernelOutput(u8,twirl.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"outputColor",structure:H}],methods:[],template:{memory:{array:Rs},slots:{0:{structure:H,memory:{array:qs},slots:{0:{structure:fe,memory:{array:As},slots:{0:{structure:pe,memory:{array:Ue}}}}}}}}},slot:28});const Us=new Uint8Array([0,0,128,67,0,0,128,67,0,0,32,65,0,0,180,66,0,0,0,0,0,0,0,0]);Object.assign(j,{...t,type:2,name:"twirl.KernelParameters(twirl.kernel)",length:1,byteSize:24,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:0,name:"radius",structure:f},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:1,name:"center",structure:ee},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"twirlAngle",structure:f},{...e,type:2,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:3,name:"gaussOrSinc",structure:m}],methods:[],template:{memory:{array:Us}}},slot:31});Object.assign(he,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(twirl.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:49});Object.assign(ze,{...t,type:7,name:"ErrorSet0000!twirl.KernelOutput(u8,twirl.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:he}],methods:[],template:null},slot:36});Object.assign(Oe,{...t,type:3,name:"createOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:c},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:c},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:2,name:"2",structure:A},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:3,name:"3",structure:j},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ze}],methods:[],template:null},slot:34});Object.assign(we,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(twirl.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:50});Object.assign(Re,{...t,type:7,name:"ErrorSet0001!twirl.KernelOutput(u8,twirl.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:we}],methods:[],template:null},slot:37});Object.assign(qe,{...t,type:3,name:"createPartialOutput",length:1,byteSize:96,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:c},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:c},{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:2,name:"2",structure:c},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:3,name:"3",structure:c},{...e,type:6,bitOffset:320,bitSize:192,byteSize:24,slot:4,name:"4",structure:A},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:5,name:"5",structure:j},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Re}],methods:[],template:null},slot:35});const js={argStruct:Oe,thunk:1,name:"createOutput"},Ps={argStruct:qe,thunk:5,name:"createPartialOutput"};Object.assign(Ae,{...t,type:2,name:"twirl",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ue}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ge},{...e,type:7,isRequired:!1,name:"Input",structure:A},{...e,type:7,isRequired:!1,name:"Output",structure:U},{...e,type:7,isRequired:!1,name:"Parameters",structure:j}],methods:[js,Ps],template:null},slot:0});const Vs=[S,J,N,k,Q,W,v,m,i,X,Y,x,f,u,s,Z,E,ee,te,K,se,D,re,F,ae,M,ne,_,ie,T,ue,$,q,z,oe,B,le,L,ge,O,me,ye,c,ce,R,be,G,A,pe,fe,H,U,j,he,ze,Oe,we,Re,qe,Ae],Cs=Qe(Vs),Is=Ae.constructor,ks=(async()=>{const o=new URL("twirl-878d1644.wasm",import.meta.url).href;return fetch(o)})();We(ks,{...Cs,writeBack:!0});const{createOutput:_s,createPartialOutput:vs,kernel:Se,Input:xs,Output:Ts,Parameters:$s}=Is;function Es(o,y,a,r,n={},g={}){if(Array.isArray(n)){const d=n;n={};for(const[p,h]of Object.keys(Se.inputImages).entries())n[h]=d[p]}const P=new xs(void 0),V=Object.keys(Se.inputImages),l=[];let w;for(const d of V){let p=n[d];if(p||(V.length===1&&["data","width","height"].every(h=>!!n[h])?p=n:l.push(d)),P[d]=p,w){if(p.colorSpace!==w)throw new Error(`Input images must all use the same color space: ${w}`)}else w=p.colorSpace}if(l.length>0)throw new Error(`Missing input image${l.length>1?"s":""}: ${l.join(", ")}`);const de=vs(o,y,a,r,P,g),je=d=>{const p=Object.keys(d),h={};for(const Pe of p){const{data:{typedArray:C},width:Ve,height:Ie}=d[Pe];let I;if(typeof ImageData=="function"){const ke=new Uint8ClampedArray(C.buffer,C.byteOffset,C.byteLength);I=new ImageData(ke,Ve,r,{colorSpace:w})}else I={data:C,width:Ve,height:Ie};if(p.length===1)return I;h[Pe]=I}return h};return de[Symbol.toStringTag]==="Promise"?de.then(je):je(de)}function Ks(){const o={};for(let[y,a]of Object.entries(Se)){if(y==="parameters"){const r={};for(const[n,g]of Object.entries(a)){const P=r[n]={};for(let[V,l]of Object.entries(g))typeof l=="object"?"string"in l?l=l.string:l=Ce(l):typeof l=="function"&&(l=Ds(l.name)),P[V]=l}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());o[y]=a}return o}function Ce(o){const y=[];for(let[a,r]of Object.entries(o))typeof r=="object"&&(r=Ce(r)),y[a]=r;return y}function Ds(o){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[o]}onmessage=o=>{const[y,a,...r]=o.data;Fs(y,r).then(([n,g])=>{postMessage([y,a,n],{transfer:g})}).catch(n=>{postMessage(["error",a,n])})};async function Fs(o,y){switch(o){case"getKernelInfo":return[Ks(...y)];case"createPartialImageData":const r=await Es(...y),n=[];if("data"in r&&"width"in r&&"height"in r)n.push(r.data.buffer);else for(const g of Object.entries(r))n.push(r.data.buffer);return[r,n];default:throw new Error(`Unknown function: ${o}`)}}
