import{u as Ue,a as je,b as Pe,c as Ve,d as ke,e as Ie,f as Ce,g as ve,h as xe,i as Ee,j as Ke,k as De,l as Fe,m as Me,o as _e,n as Te,p as $e,q as Be}from"./index-d64bc850.js";Ue();je();Pe();Ve();ke();Ie();Ce();ve();xe();Ee();Ke();De();Fe();Me();_e();Te();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},f={},L={},G={},v={},H={},J={},x={},c={},b={},N={},Q={},E={},S={},m={},r={},W={},K={},X={},A={},g={},Y={},D={},Z={},F={},ee={},M={},q={},z={},te={},_={},se={},T={},ye={},O={},re={},ae={},l={},ne={},R={},ie={},$={},U={},ue={},oe={},B={},j={},P={},ce={},be={},pe={},fe={},Se={},de={},he={};Object.assign(f,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:5});Object.assign(L,{...t,type:1,name:"[10:0]u8",length:10,byteSize:11,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:4});Object.assign(G,{...t,type:11,name:"*const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:3});Object.assign(v,{...t,type:11,name:"*const *const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:2});Object.assign(H,{...t,type:1,name:"[0:0]u8",length:0,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:8});Object.assign(J,{...t,type:11,name:"*const [0:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:7});Object.assign(x,{...t,type:11,name:"*const *const [0:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:6});Object.assign(c,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:10});Object.assign(b,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:9});Object.assign(N,{...t,type:1,name:"[11:0]u8",length:11,byteSize:12,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:13});Object.assign(Q,{...t,type:11,name:"*const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:12});Object.assign(E,{...t,type:11,name:"*const *const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:11});Object.assign(S,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:32});Object.assign(m,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:m}],methods:[],template:null},slot:48});Object.assign(r,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:47});const Le=new Uint8Array,Ge=new Uint8Array([104,253,15,0]),He=new Uint8Array([0,0,0,0,0,0,240,191]),Je=new Uint8Array([24,251,15,0]),Ne=new Uint8Array([0,0,0,0,0,0,240,63]),Qe=new Uint8Array([176,252,15,0]),We=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(W,{...t,type:2,name:"Struct0009",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:Le},slots:{0:{structure:r,memory:{array:Ge},slots:{0:{structure:m,memory:{array:He}}}},1:{structure:r,memory:{array:Je},slots:{0:{structure:m,memory:{array:Ne}}}},2:{structure:r,memory:{array:Qe},slots:{0:{structure:m,memory:{array:We}}}}}}},slot:39});Object.assign(K,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:38});Object.assign(X,{...t,type:13,name:"@Vector(3, f32)",length:3,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:33});const Xe=new Uint8Array,Ye=new Uint8Array([248,247,15,0]),Ze=new Uint8Array([0,0,0,0,0,0,0,0]),et=new Uint8Array([32,248,15,0]),tt=new Uint8Array([0,0,0,0,0,0,0,0]),st=new Uint8Array([72,248,15,0]),rt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(A,{...t,type:2,name:"Struct0014",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:r}],methods:[],template:{memory:{array:Xe},slots:{0:{structure:r,memory:{array:Ye},slots:{0:{structure:m,memory:{array:Ze}}}},1:{structure:r,memory:{array:et},slots:{0:{structure:m,memory:{array:tt}}}},2:{structure:r,memory:{array:st},slots:{0:{structure:m,memory:{array:rt}}}}}}},slot:50});Object.assign(g,{...t,type:11,name:"Struct0012",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:49});const at=new Uint8Array,nt=new Uint8Array([24,253,15,0]),it=new Uint8Array([0,0,0,0,0,0,240,63]),ut=new Uint8Array([64,253,15,0]),ot=new Uint8Array([0,0,0,0,0,0,240,63]),lt=new Uint8Array([104,253,15,0]),mt=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(Y,{...t,type:2,name:"Struct0015",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:r}],methods:[],template:{memory:{array:at},slots:{0:{structure:r,memory:{array:nt},slots:{0:{structure:m,memory:{array:it}}}},1:{structure:r,memory:{array:ut},slots:{0:{structure:m,memory:{array:ot}}}},2:{structure:r,memory:{array:lt},slots:{0:{structure:m,memory:{array:mt}}}}}}},slot:52});Object.assign(D,{...t,type:11,name:"Struct0013",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:51});const yt=new Uint8Array,ct=new Uint8Array([170,170,170,170]),bt=new Uint8Array,pt=new Uint8Array([170,170,170,170]),ft=new Uint8Array,St=new Uint8Array([170,170,170,170]),dt=new Uint8Array;Object.assign(Z,{...t,type:2,name:"Struct0010",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:X},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:g},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:D},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:g}],methods:[],template:{memory:{array:yt},slots:{0:{structure:g,memory:{array:ct},slots:{0:{structure:A,memory:{array:bt}}}},1:{structure:D,memory:{array:pt},slots:{0:{structure:Y,memory:{array:ft}}}},2:{structure:g,memory:{array:St},slots:{0:{structure:A,memory:{array:dt}}}}}}},slot:41});Object.assign(F,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:40});const ht=new Uint8Array,gt=new Uint8Array([170,170,170,170]),zt=new Uint8Array,Ot=new Uint8Array([170,170,170,170]),wt=new Uint8Array;Object.assign(ee,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"amount",structure:K},{...e,type:8,isRequired:!1,slot:1,name:"color",structure:F}],methods:[],template:{memory:{array:ht},slots:{0:{structure:K,memory:{array:gt},slots:{0:{structure:W,memory:{array:zt}}}},1:{structure:F,memory:{array:Ot},slots:{0:{structure:Z,memory:{array:wt}}}}}}},slot:15});Object.assign(M,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:14});const At=new Uint8Array,Rt=new Uint8Array([64,248,15,0]),qt=new Uint8Array([4,0,0,0]);Object.assign(q,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:At},slots:{0:{structure:b,memory:{array:Rt},slots:{0:{structure:c,memory:{array:qt}}}}}}},slot:43});Object.assign(z,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:42});const Ut=new Uint8Array,jt=new Uint8Array([170,170,170,170]),Pt=new Uint8Array;Object.assign(te,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:z}],methods:[],template:{memory:{array:Ut},slots:{0:{structure:z,memory:{array:jt},slots:{0:{structure:q,memory:{array:Pt}}}}}}},slot:17});Object.assign(_,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:16});const Vt=new Uint8Array,kt=new Uint8Array([170,170,170,170]),It=new Uint8Array;Object.assign(se,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:z}],methods:[],template:{memory:{array:Vt},slots:{0:{structure:z,memory:{array:kt},slots:{0:{structure:q,memory:{array:It}}}}}}},slot:19});Object.assign(T,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:18});const Ct=new Uint8Array,vt=new Uint8Array,xt=new Uint8Array([4,8,16,0]),Et=new Uint8Array([189,7,16,0]),Kt=new Uint8Array([65,108,108,101,110,32,67,104,111,117,0]),Dt=new Uint8Array([0,8,16,0]),Ft=new Uint8Array([177,7,16,0]),Mt=new Uint8Array([0]),_t=new Uint8Array([252,7,16,0]),Tt=new Uint8Array([1,0,0,0]),$t=new Uint8Array([248,7,16,0]),Bt=new Uint8Array([148,7,16,0]),Lt=new Uint8Array([116,105,110,116,32,101,102,102,101,99,116,0]),Gt=new Uint8Array([170,170,170,170]),Ht=new Uint8Array,Jt=new Uint8Array([170,170,170,170]),Nt=new Uint8Array,Qt=new Uint8Array([170,170,170,170]),Wt=new Uint8Array;Object.assign(ye,{...t,type:2,name:"tint.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ct}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:v},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:x},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:b},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:E},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:M},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:_},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:T}],methods:[],template:{memory:{array:vt},slots:{0:{structure:v,memory:{array:xt},slots:{0:{structure:G,memory:{array:Et},slots:{0:{structure:L,memory:{array:Kt}}}}}},1:{structure:x,memory:{array:Dt},slots:{0:{structure:J,memory:{array:Ft},slots:{0:{structure:H,memory:{array:Mt}}}}}},2:{structure:b,memory:{array:_t},slots:{0:{structure:c,memory:{array:Tt}}}},3:{structure:E,memory:{array:$t},slots:{0:{structure:Q,memory:{array:Bt},slots:{0:{structure:N,memory:{array:Lt}}}}}},4:{structure:M,memory:{array:Gt},slots:{0:{structure:ee,memory:{array:Ht}}}},5:{structure:_,memory:{array:Jt},slots:{0:{structure:te,memory:{array:Nt}}}},6:{structure:T,memory:{array:Qt},slots:{0:{structure:se,memory:{array:Wt}}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:24});Object.assign(re,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(ae,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:re}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const Xt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ne,{...t,type:9,name:"tint.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:c},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:c}],methods:[],template:{memory:{array:Xt}}},slot:26});Object.assign(R,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:27});Object.assign(ie,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:44});const Yt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Zt=new Uint8Array,es=new Uint8Array([92,7,16,0]),ts=new Uint8Array([4,0,0,0]);Object.assign($,{...t,type:2,name:"tint.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ae},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ne},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:R}],methods:[],template:{memory:{array:Yt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:ie},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:Zt},slots:{0:{structure:b,memory:{array:es},slots:{0:{structure:c,memory:{array:ts}}}}}}},slot:21});const ss=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),rs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),we=new Uint8Array([0,0,0,0,0,0,0,0]),as=new Uint8Array;Object.assign(U,{...t,type:2,name:"tint.KernelInput(u8,tint.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:$}],methods:[],template:{memory:{array:ss},slots:{0:{structure:$,memory:{array:rs},slots:{0:{structure:ae,memory:{array:we},address:1047568,slots:{0:{structure:re,memory:{array:as},address:0}}}}}}}},slot:20});Object.assign(ue,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(oe,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ue}],methods:[],template:null},slot:30});const ns=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),is=new Uint8Array,us=new Uint8Array([92,7,16,0]),os=new Uint8Array([4,0,0,0]);Object.assign(B,{...t,type:2,name:"tint.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:oe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ne},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:R}],methods:[],template:{memory:{array:ns}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:ie},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:is},slots:{0:{structure:b,memory:{array:us},slots:{0:{structure:c,memory:{array:os}}}}}}},slot:29});const ls=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ms=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ys=new Uint8Array;Object.assign(j,{...t,type:2,name:"tint.KernelOutput(u8,tint.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:B}],methods:[],template:{memory:{array:ls},slots:{0:{structure:B,memory:{array:ms},slots:{0:{structure:oe,memory:{array:we},address:1047568,slots:{0:{structure:ue,memory:{array:ys},address:0}}}}}}}},slot:28});const cs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);Object.assign(P,{...t,type:2,name:"tint.KernelParameters(tint.kernel)",length:1,byteSize:32,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"amount",structure:S},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:96,byteSize:16,slot:1,name:"color",structure:X}],methods:[],template:{memory:{array:cs}}},slot:31});Object.assign(ce,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(tint.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:45});Object.assign(be,{...t,type:7,name:"ErrorSet0000!tint.KernelOutput(u8,tint.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ce}],methods:[],template:null},slot:36});Object.assign(pe,{...t,type:3,name:"createOutput",length:1,byteSize:96,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:320,bitSize:192,byteSize:24,slot:2,name:"2",structure:U},{...e,type:6,bitOffset:0,bitSize:256,byteSize:32,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:4,name:"retval",structure:be}],methods:[],template:null},slot:34});Object.assign(fe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(tint.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:46});Object.assign(Se,{...t,type:7,name:"ErrorSet0001!tint.KernelOutput(u8,tint.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:fe}],methods:[],template:null},slot:37});Object.assign(de,{...t,type:3,name:"createPartialOutput",length:1,byteSize:112,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:320,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:352,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:384,bitSize:192,byteSize:24,slot:4,name:"4",structure:U},{...e,type:6,bitOffset:0,bitSize:256,byteSize:32,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:576,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Se}],methods:[],template:null},slot:35});const bs=new Uint8Array,ps={argStruct:pe,thunk:8,name:"createOutput"},fs={argStruct:de,thunk:2,name:"createPartialOutput"};Object.assign(he,{...t,type:2,name:"tint",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:bs}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ye},{...e,type:7,isRequired:!1,name:"Input",structure:U},{...e,type:7,isRequired:!1,name:"Output",structure:j},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[ps,fs],template:null},slot:0});const Ss=[f,L,G,v,H,J,x,c,b,N,Q,E,S,m,r,W,K,X,A,g,Y,D,Z,F,ee,M,q,z,te,_,se,T,ye,O,re,ae,l,ne,R,ie,$,U,ue,oe,B,j,P,ce,be,pe,fe,Se,de,he],ds=$e(Ss),hs=he.constructor,gs=(async()=>{const i=new URL("tint-c0382585.wasm",import.meta.url).href;return fetch(i)})();Be(gs,{...ds,writeBack:!0});const{createOutput:js,createPartialOutput:zs,kernel:me,Input:Os,Output:Ps,Parameters:Vs}=hs;function ws(i,o,a,s,n={},d={}){if(Array.isArray(n)){const p=n;n={};for(const[y,h]of Object.keys(me.inputImages).entries())n[h]=p[y]}const V=new Os(void 0),k=Object.keys(me.inputImages),u=[];let w;for(const p of k){let y=n[p];if(y||(k.length===1&&["data","width","height"].every(h=>!!n[h])?y=n:u.push(p)),V[p]=y,w){if(y.colorSpace!==w)throw new Error(`Input images must all use the same color space: ${w}`)}else w=y.colorSpace}if(u.length>0)throw new Error(`Missing input image${u.length>1?"s":""}: ${u.join(", ")}`);const le=zs(i,o,a,s,V,d),ge=p=>{const y=Object.keys(p),h={};for(const ze of y){const{data:{typedArray:I},width:Oe,height:Re}=p[ze];let C;if(typeof ImageData=="function"){const qe=new Uint8ClampedArray(I.buffer,I.byteOffset,I.byteLength);C=new ImageData(qe,Oe,s,{colorSpace:w})}else C={data:I,width:Oe,height:Re};if(y.length===1)return C;h[ze]=C}return h};return le[Symbol.toStringTag]==="Promise"?le.then(ge):ge(le)}function As(){const i={};for(let[o,a]of Object.entries(me)){if(o==="parameters"){const s={};for(const[n,d]of Object.entries(a)){const V=s[n]={};for(let[k,u]of Object.entries(d))typeof u=="object"?"string"in u?u=u.string:u=Ae(u):typeof u=="function"&&(u=Rs(u.name)),V[k]=u}a=s}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());i[o]=a}return i}function Ae(i){const o=[];for(let[a,s]of Object.entries(i))typeof s=="object"&&(s=Ae(s)),o[a]=s;return o}function Rs(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[o,a,...s]=i.data;qs(o,s).then(([n,d])=>{postMessage([o,a,n],{transfer:d})}).catch(n=>{postMessage(["error",a,n])})};async function qs(i,o){switch(i){case"getKernelInfo":return[As(...o)];case"createPartialImageData":const s=await ws(...o),n=[];if("data"in s&&"width"in s&&"height"in s)n.push(s.data.buffer);else for(const d of Object.entries(s))n.push(s.data.buffer);return[s,n];default:throw new Error(`Unknown function: ${i}`)}}
