import{u as Ve,a as ke,b as Pe,c as Ie,d as xe,e as Ce,f as ve,g as Ee,h as Ke,i as Te,j as Be,k as De,l as Fe,m as Me,n as $e,o as Le,p as Ge,q as He,r as Je}from"./index-9f315e7a.js";Ve();ke();Pe();Ie();xe();Ce();ve();Ee();Ke();Te();Be();De();Fe();Me();$e();Le();Ge();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},b={},J={},N={},P={},Q={},W={},I={},y={},S={},X={},Y={},x={},z={},o={},s={},Z={},C={},d={},ee={},v={},te={},E={},se={},K={},re={},T={},ae={},B={},ie={},D={},F={},me={},M={},ne={},$={},pe={},q={},oe={},le={},ce={},c={},fe={},L={},G={},H={},w={},A={},be={},de={},he={},ge={},Se={},ze={},Oe={};Object.assign(b,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:5});Object.assign(J,{...t,type:1,name:"[17:0]u8",length:17,byteSize:18,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:4});Object.assign(N,{...t,type:11,name:"*const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:3});Object.assign(P,{...t,type:11,name:"**const [17:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:2});Object.assign(Q,{...t,type:1,name:"[18:0]u8",length:18,byteSize:19,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:8});Object.assign(W,{...t,type:11,name:"*const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:7});Object.assign(I,{...t,type:11,name:"**const [18:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:6});Object.assign(y,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:10});Object.assign(S,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:9});Object.assign(X,{...t,type:1,name:"[27:0]u8",length:27,byteSize:28,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:13});Object.assign(Y,{...t,type:11,name:"*const [27:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:12});Object.assign(x,{...t,type:11,name:"**const [27:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:11});Object.assign(z,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:31});Object.assign(o,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:o}],methods:[],template:null},slot:48});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:o}],methods:[],template:null},slot:47});const Ne=new Uint8Array([]),Qe=new Uint8Array([48,30,16,0]),R=new Uint8Array([0,0,0,0,0,0,240,63]),We=new Uint8Array([80,30,16,0]),Xe=new Uint8Array([0,0,0,0,0,192,82,64]),Ye=new Uint8Array([72,30,16,0]),Ze=new Uint8Array([0,0,0,0,0,0,36,64]);Object.assign(Z,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 75, comptime defaultValue: comptime_float = 10}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:z},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Ne},slots:{0:{structure:s,memory:{array:Qe},slots:{0:{structure:o,memory:{array:R},address:1056304}}},1:{structure:s,memory:{array:We},slots:{0:{structure:o,memory:{array:Xe},address:1056336}}},2:{structure:s,memory:{array:Ye},slots:{0:{structure:o,memory:{array:Ze},address:1056328}}}}}},slot:38});Object.assign(C,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 75, comptime defaultValue: comptime_float = 10}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:37});Object.assign(d,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:32});const et=new Uint8Array([]),tt=new Uint8Array([56,30,16,0]),k=new Uint8Array([0,0,0,0,0,0,0,0]),st=new Uint8Array([48,30,16,0]),rt=new Uint8Array([48,30,16,0]),at=new Uint8Array([48,30,16,0]);Object.assign(ee,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:s}],methods:[],template:{memory:{array:et},slots:{0:{structure:s,memory:{array:tt},slots:{0:{structure:o,memory:{array:k},address:1056312}}},1:{structure:s,memory:{array:st},slots:{0:{structure:o,memory:{array:R},address:1056304}}},2:{structure:s,memory:{array:rt},slots:{0:{structure:o,memory:{array:R},address:1056304}}},3:{structure:s,memory:{array:at},slots:{0:{structure:o,memory:{array:R},address:1056304}}}}}},slot:50});Object.assign(v,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:49});const it=new Uint8Array([]),mt=new Uint8Array([170,170,170,170]),p=new Uint8Array([]);Object.assign(te,{...t,type:2,name:"struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{0, 1, 1, 1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:v}],methods:[],template:{memory:{array:it},slots:{0:{structure:v,memory:{array:mt},slots:{0:{structure:ee,memory:{array:p},address:-1431655766}}}}}},slot:40});Object.assign(E,{...t,type:11,name:"*const struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{0, 1, 1, 1}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:39});const nt=new Uint8Array([]),ot=new Uint8Array([56,30,16,0]),lt=new Uint8Array([56,30,16,0]),ct=new Uint8Array([56,30,16,0]),ut=new Uint8Array([48,30,16,0]);Object.assign(se,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:s}],methods:[],template:{memory:{array:nt},slots:{0:{structure:s,memory:{array:ot},slots:{0:{structure:o,memory:{array:k},address:1056312}}},1:{structure:s,memory:{array:lt},slots:{0:{structure:o,memory:{array:k},address:1056312}}},2:{structure:s,memory:{array:ct},slots:{0:{structure:o,memory:{array:k},address:1056312}}},3:{structure:s,memory:{array:ut},slots:{0:{structure:o,memory:{array:R},address:1056304}}}}}},slot:52});Object.assign(K,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:51});const yt=new Uint8Array([]),pt=new Uint8Array([170,170,170,170]);Object.assign(re,{...t,type:2,name:"struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 0, 0, 1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:K}],methods:[],template:{memory:{array:yt},slots:{0:{structure:K,memory:{array:pt},slots:{0:{structure:se,memory:{array:p},address:-1431655766}}}}}},slot:42});Object.assign(T,{...t,type:11,name:"*const struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 0, 0, 1}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:41});const ft=new Uint8Array([]),bt=new Uint8Array([170,170,170,170]),dt=new Uint8Array([170,170,170,170]),ht=new Uint8Array([170,170,170,170]);Object.assign(ae,{...t,type:2,name:"struct{comptime checkerSize: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 75, comptime defaultValue: comptime_float = 10} = .{.type = f32, .minValue = 1, .maxValue = 75, .defaultValue = 10}, comptime colorA: struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{0, 1, 1, 1}} = .{.type = @Vector(4, f32), .defaultValue = .{0, 1, 1, 1}}, comptime colorB: struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 0, 0, 1}} = .{.type = @Vector(4, f32), .defaultValue = .{0, 0, 0, 1}}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"checkerSize",structure:C},{...e,type:8,isRequired:!1,slot:1,name:"colorA",structure:E},{...e,type:8,isRequired:!1,slot:2,name:"colorB",structure:T}],methods:[],template:{memory:{array:ft},slots:{0:{structure:C,memory:{array:bt},slots:{0:{structure:Z,memory:{array:p},address:-1431655766}}},1:{structure:E,memory:{array:dt},slots:{0:{structure:te,memory:{array:p},address:-1431655766}}},2:{structure:T,memory:{array:ht},slots:{0:{structure:re,memory:{array:p},address:-1431655766}}}}}},slot:15});Object.assign(B,{...t,type:11,name:"*struct{comptime checkerSize: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 75, comptime defaultValue: comptime_float = 10} = .{.type = f32, .minValue = 1, .maxValue = 75, .defaultValue = 10}, comptime colorA: struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{0, 1, 1, 1}} = .{.type = @Vector(4, f32), .defaultValue = .{0, 1, 1, 1}}, comptime colorB: struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 0, 0, 1}} = .{.type = @Vector(4, f32), .defaultValue = .{0, 0, 0, 1}}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:14});const gt=new Uint8Array([]);Object.assign(ie,{...t,type:2,name:"@TypeOf(.{})",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:gt}}},slot:17});Object.assign(D,{...t,type:11,name:"*@TypeOf(.{})",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:16});Object.assign(F,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:53});const St=new Uint8Array([]),zt=new Uint8Array([64,30,16,0]),Ot=new Uint8Array([4,0,0,0]);Object.assign(me,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:F}],methods:[],template:{memory:{array:St},slots:{0:{structure:F,memory:{array:zt},slots:{0:{structure:y,memory:{array:Ot},address:1056320}}}}}},slot:44});Object.assign(M,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:43});const Rt=new Uint8Array([]),qt=new Uint8Array([170,170,170,170]);Object.assign(ne,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:M}],methods:[],template:{memory:{array:Rt},slots:{0:{structure:M,memory:{array:qt},slots:{0:{structure:me,memory:{array:p},address:-1431655766}}}}}},slot:19});Object.assign($,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:18});const wt=new Uint8Array([]),At=new Uint8Array([]),_t=new Uint8Array([36,249,15,0]),jt=new Uint8Array([26,50,16,0]),Ut=new Uint8Array([99,111,109,46,97,100,111,98,101,46,101,120,97,109,112,108,101,0]),Vt=new Uint8Array([100,249,15,0]),kt=new Uint8Array([7,50,16,0]),Pt=new Uint8Array([65,100,111,98,101,32,83,121,115,116,101,109,115,32,73,110,99,46,0]),It=new Uint8Array([164,249,15,0]),xt=new Uint8Array([1,0,0,0]),Ct=new Uint8Array([252,249,15,0]),vt=new Uint8Array([235,49,16,0]),Et=new Uint8Array([65,32,99,104,101,99,107,101,114,101,100,32,102,105,101,108,100,32,103,101,110,101,114,97,116,111,114,0]),Kt=new Uint8Array([170,170,170,170]),Tt=new Uint8Array([170,170,170,170]),Bt=new Uint8Array([170,170,170,170]);Object.assign(pe,{...t,type:2,name:"checker-fill.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:wt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:P},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:I},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:S},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:x},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:B},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:D},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:$}],methods:[],template:{memory:{array:At},slots:{0:{structure:P,memory:{array:_t},slots:{0:{structure:N,memory:{array:jt},slots:{0:{structure:J,memory:{array:Ut},address:1061402}}}}},1:{structure:I,memory:{array:Vt},slots:{0:{structure:W,memory:{array:kt},slots:{0:{structure:Q,memory:{array:Pt},address:1061383}}}}},2:{structure:S,memory:{array:It},slots:{0:{structure:y,memory:{array:xt}}}},3:{structure:x,memory:{array:Ct},slots:{0:{structure:Y,memory:{array:vt},slots:{0:{structure:X,memory:{array:Et},address:1061355}}}}},4:{structure:B,memory:{array:Kt},slots:{0:{structure:ae,memory:{array:p},address:-1431655766}}},5:{structure:D,memory:{array:Tt},slots:{0:{structure:ie,memory:{array:p},address:-1431655766}}},6:{structure:$,memory:{array:Bt},slots:{0:{structure:ne,memory:{array:p},address:-1431655766}}}}}},slot:1});const Dt=new Uint8Array([]);Object.assign(q,{...t,type:2,name:"checker-fill.KernelInput(u8,checker-fill.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Dt}}},slot:20});Object.assign(oe,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:25});Object.assign(le,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:oe}],methods:[],template:null},slot:24});Object.assign(ce,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:le}],methods:[],template:null},slot:23});Object.assign(c,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:26});const Ft=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(fe,{...t,type:9,name:"checker-fill.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:y},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:y}],methods:[],template:{memory:{array:Ft}}},slot:27});Object.assign(L,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:L}],methods:[],template:null},slot:28});Object.assign(G,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:G}],methods:[],template:null},slot:29});const Mt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),$t=new Uint8Array([]),Lt=new Uint8Array([96,253,15,0]),Gt=new Uint8Array([4,0,0,0]);Object.assign(H,{...t,type:2,name:"checker-fill.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ce},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:fe},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:L},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:G}],methods:[],template:{memory:{array:Mt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:oe},{...e,type:7,isRequired:!1,name:"FPixel",structure:d},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:S}],methods:[],template:{memory:{array:$t},slots:{0:{structure:S,memory:{array:Lt},slots:{0:{structure:y,memory:{array:Gt}}}}}}},slot:22});const Ht=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Jt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Nt=new Uint8Array([0,0,0,0,0,0,0,0]),Ae=new Uint8Array([]);Object.assign(w,{...t,type:2,name:"checker-fill.KernelOutput(u8,checker-fill.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:H}],methods:[],template:{memory:{array:Ht},slots:{0:{structure:H,memory:{array:Jt},slots:{0:{structure:ce,memory:{array:Nt},slots:{0:{structure:le,memory:{array:Ae}}}}}}}}},slot:21});const Qt=new Uint8Array([0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,32,65,0,0,0,0,0,0,0,0,0,0,0,0]);Object.assign(A,{...t,type:2,name:"checker-fill.KernelParameters(checker-fill.kernel)",length:1,byteSize:48,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"checkerSize",structure:z},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:128,byteSize:16,slot:1,name:"colorA",structure:d},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:128,byteSize:16,slot:2,name:"colorB",structure:d}],methods:[],template:{memory:{array:Qt}}},slot:30});Object.assign(be,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(checker-fill.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:45});Object.assign(de,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(checker-fill.createOutput)).Fn.return_type.?).ErrorUnion.error_set!checker-fill.KernelOutput(u8,checker-fill.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:w},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:be}],methods:[],template:null},slot:35});Object.assign(he,{...t,type:3,name:"createOutput",length:1,byteSize:96,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:384,bitSize:32,byteSize:4,slot:0,name:"0",structure:c},{...e,type:3,bitOffset:416,bitSize:32,byteSize:4,slot:1,name:"1",structure:c},{...e,type:6,bitOffset:768,bitSize:0,byteSize:0,slot:2,name:"2",structure:q},{...e,type:6,bitOffset:0,bitSize:384,byteSize:48,slot:3,name:"3",structure:A},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:4,name:"retval",structure:de}],methods:[],template:null},slot:33});Object.assign(ge,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(checker-fill.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:46});Object.assign(Se,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(checker-fill.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!checker-fill.KernelOutput(u8,checker-fill.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:w},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ge}],methods:[],template:null},slot:36});Object.assign(ze,{...t,type:3,name:"createPartialOutput",length:1,byteSize:96,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:384,bitSize:32,byteSize:4,slot:0,name:"0",structure:c},{...e,type:3,bitOffset:416,bitSize:32,byteSize:4,slot:1,name:"1",structure:c},{...e,type:3,bitOffset:448,bitSize:32,byteSize:4,slot:2,name:"2",structure:c},{...e,type:3,bitOffset:480,bitSize:32,byteSize:4,slot:3,name:"3",structure:c},{...e,type:6,bitOffset:768,bitSize:0,byteSize:0,slot:4,name:"4",structure:q},{...e,type:6,bitOffset:0,bitSize:384,byteSize:48,slot:5,name:"5",structure:A},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Se}],methods:[],template:null},slot:34});const Wt={argStruct:he,thunk:8,name:"createOutput"},Xt={argStruct:ze,thunk:2,name:"createPartialOutput"};Object.assign(Oe,{...t,type:2,name:"checker-fill",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ae}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:pe},{...e,type:7,isRequired:!1,name:"Input",structure:q},{...e,type:7,isRequired:!1,name:"Output",structure:w},{...e,type:7,isRequired:!1,name:"Parameters",structure:A}],methods:[Wt,Xt],template:null},slot:0});const Yt=[b,J,N,P,Q,W,I,y,S,X,Y,x,z,o,s,Z,C,d,ee,v,te,E,se,K,re,T,ae,B,ie,D,F,me,M,ne,$,pe,q,oe,le,ce,c,fe,L,G,H,w,A,be,de,he,ge,Se,ze,Oe],Zt=He(Yt),es=Oe.constructor,ts=(async()=>{const m=new URL("checker-fill-babba330.wasm",import.meta.url).href;return fetch(m)})();Je(ts,{...Zt,writeBack:!0});const{createOutput:ls,createPartialOutput:ss,kernel:ye,Input:rs,Output:cs,Parameters:us}=es;function as(m,l,a,r,i={},h={}){if(Array.isArray(i)){const f=i;i={};for(const[u,g]of Object.keys(ye.inputImages).entries())i[g]=f[u]}const _=new rs(void 0),j=Object.keys(ye.inputImages),n=[];let O;for(const f of j){let u=i[f];if(u||(j.length===1&&["data","width","height"].every(g=>!!i[g])?u=i:n.push(f)),_[f]=u,O){if(u.colorSpace!==O)throw new Error(`Input images must all use the same color space: ${O}`)}else O=u.colorSpace}if(n.length>0)throw new Error(`Missing input image${n.length>1?"s":""}: ${n.join(", ")}`);const ue=ss(m,l,a,r,_,h),Re=f=>{const u=Object.keys(f),g={};for(const qe of u){const{data:{typedArray:U},width:we,height:je}=f[qe];let V;if(typeof ImageData=="function"){const Ue=new Uint8ClampedArray(U.buffer,U.byteOffset,U.byteLength);V=new ImageData(Ue,we,r,{colorSpace:O})}else V={data:U,width:we,height:je};if(u.length===1)return V;g[qe]=V}return g};return ue[Symbol.toStringTag]==="Promise"?ue.then(Re):Re(ue)}function is(){const m={};for(let[l,a]of Object.entries(ye)){if(l==="parameters"){const r={};for(const[i,h]of Object.entries(a)){const _=r[i]={};for(let[j,n]of Object.entries(h))typeof n=="object"?"string"in n?n=n.string:n=_e(n):typeof n=="function"&&(n=ms(n.name)),_[j]=n}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());m[l]=a}return m}function _e(m){const l=[];for(let[a,r]of Object.entries(m))typeof r=="object"&&(r=_e(r)),l[a]=r;return l}function ms(m){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[m]}onmessage=m=>{const[l,a,...r]=m.data;ns(l,r).then(([i,h])=>{postMessage([l,a,i],{transfer:h})}).catch(i=>{postMessage(["error",a,i])})};async function ns(m,l){switch(m){case"getKernelInfo":return[is(...l)];case"createPartialImageData":const r=await as(...l),i=[];if("data"in r&&"width"in r&&"height"in r)i.push(r.data.buffer);else for(const h of Object.entries(r))i.push(r.data.buffer);return[r,i];default:throw new Error(`Unknown function: ${m}`)}}
