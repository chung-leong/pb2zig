import{u as qe,a as we,b as je,c as Ae,d as Ue,e as Pe,f as ke,g as Ie,h as Ve,i as Ce,j as ve,k as Ee,l as xe,m as Ke,o as De,n as Fe,p as Me,q as _e}from"./index-422d9c98.js";qe();we();je();Ae();Ue();Pe();ke();Ie();Ve();Ce();ve();Ee();xe();Ke();De();Fe();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},p={},$={},B={},C={},L={},G={},v={},m={},y={},H={},J={},E={},h={},f={},b={},N={},Q={},x={},W={},K={},X={},D={},w={},g={},Y={},F={},Z={},M={},le={},O={},ee={},te={},l={},se={},q={},re={},_={},j={},ae={},ne={},T={},A={},U={},oe={},me={},ye={},ce={},be={},pe={},fe={};Object.assign(p,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:5});Object.assign($,{...t,type:1,name:"[17:0]u8",length:17,byteSize:18,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:4});Object.assign(B,{...t,type:11,name:"*const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:3});Object.assign(C,{...t,type:11,name:"*const *const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:2});Object.assign(L,{...t,type:1,name:"[0:0]u8",length:0,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:8});Object.assign(G,{...t,type:11,name:"*const [0:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:7});Object.assign(v,{...t,type:11,name:"*const *const [0:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:6});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:10});Object.assign(y,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:9});Object.assign(H,{...t,type:1,name:"[19:0]u8",length:19,byteSize:20,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:13});Object.assign(J,{...t,type:11,name:"*const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:12});Object.assign(E,{...t,type:11,name:"*const *const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:11});Object.assign(h,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:32});Object.assign(f,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:f}],methods:[],template:null},slot:45});Object.assign(b,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:f}],methods:[],template:null},slot:44});Object.assign(N,{...t,type:1,name:"[4:0]u8",length:4,byteSize:5,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:48});Object.assign(Q,{...t,type:11,name:"*const [4:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:47});Object.assign(x,{...t,type:11,name:"*const *const [4:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:46});const Te=new Uint8Array([]),$e=new Uint8Array([128,252,15,0]),Be=new Uint8Array([0,0,0,0,0,0,240,63]),Le=new Uint8Array([168,252,15,0]),Ge=new Uint8Array([0,0,0,0,0,192,114,64]),He=new Uint8Array([208,252,15,0]),Je=new Uint8Array([0,0,0,0,0,0,52,64]),Ne=new Uint8Array([248,252,15,0]),Qe=new Uint8Array([194,4,16,0]),We=new Uint8Array([115,105,122,101,0]);Object.assign(W,{...t,type:2,name:"Struct0008",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:b},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:b},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:x}],methods:[],template:{memory:{array:Te},slots:{0:{structure:b,memory:{array:$e},slots:{0:{structure:f,memory:{array:Be}}}},1:{structure:b,memory:{array:Le},slots:{0:{structure:f,memory:{array:Ge}}}},2:{structure:b,memory:{array:He},slots:{0:{structure:f,memory:{array:Je}}}},3:{structure:x,memory:{array:Ne},slots:{0:{structure:Q,memory:{array:Qe},slots:{0:{structure:N,memory:{array:We},address:1049794}}}}}}}},slot:38});Object.assign(K,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:37});const Xe=new Uint8Array([]),Ye=new Uint8Array([170,170,170,170]),z=new Uint8Array([]);Object.assign(X,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"size",structure:K}],methods:[],template:{memory:{array:Xe},slots:{0:{structure:K,memory:{array:Ye},slots:{0:{structure:W,memory:{array:z},address:-1431655766}}}}}},slot:15});Object.assign(D,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:14});const Ze=new Uint8Array([]),et=new Uint8Array([160,248,15,0]),tt=new Uint8Array([4,0,0,0]);Object.assign(w,{...t,type:2,name:"Struct0009",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:y}],methods:[],template:{memory:{array:Ze},slots:{0:{structure:y,memory:{array:et},slots:{0:{structure:m,memory:{array:tt}}}}}}},slot:40});Object.assign(g,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:w}],methods:[],template:null},slot:39});const st=new Uint8Array([]),rt=new Uint8Array([170,170,170,170]);Object.assign(Y,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:g}],methods:[],template:{memory:{array:st},slots:{0:{structure:g,memory:{array:rt},slots:{0:{structure:w,memory:{array:z},address:-1431655766}}}}}},slot:17});Object.assign(F,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:16});const at=new Uint8Array([]),nt=new Uint8Array([170,170,170,170]);Object.assign(Z,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:g}],methods:[],template:{memory:{array:at},slots:{0:{structure:g,memory:{array:nt},slots:{0:{structure:w,memory:{array:z},address:-1431655766}}}}}},slot:19});Object.assign(M,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:18});const it=new Uint8Array([]),ut=new Uint8Array([]),lt=new Uint8Array([220,248,15,0]),ot=new Uint8Array([84,8,16,0]),mt=new Uint8Array([98,121,32,80,101,116,114,105,32,76,101,115,107,105,110,101,110,0]),yt=new Uint8Array([28,249,15,0]),ct=new Uint8Array([83,8,16,0]),bt=new Uint8Array([0]),pt=new Uint8Array([92,249,15,0]),ft=new Uint8Array([1,0,0,0]),dt=new Uint8Array([180,249,15,0]),St=new Uint8Array([63,8,16,0]),zt=new Uint8Array([67,114,121,115,116,97,108,108,105,122,101,32,45,102,105,108,116,101,114,0]),ht=new Uint8Array([170,170,170,170]),gt=new Uint8Array([170,170,170,170]),Ot=new Uint8Array([170,170,170,170]);Object.assign(le,{...t,type:2,name:"crystallize.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:it}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:C},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:v},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:y},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:E},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:D},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:F},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:M}],methods:[],template:{memory:{array:ut},slots:{0:{structure:C,memory:{array:lt},slots:{0:{structure:B,memory:{array:ot},slots:{0:{structure:$,memory:{array:mt},address:1050708}}}}},1:{structure:v,memory:{array:yt},slots:{0:{structure:G,memory:{array:ct},slots:{0:{structure:L,memory:{array:bt},address:1050707}}}}},2:{structure:y,memory:{array:pt},slots:{0:{structure:m,memory:{array:ft}}}},3:{structure:E,memory:{array:dt},slots:{0:{structure:J,memory:{array:St},slots:{0:{structure:H,memory:{array:zt},address:1050687}}}}},4:{structure:D,memory:{array:ht},slots:{0:{structure:X,memory:{array:z},address:-1431655766}}},5:{structure:F,memory:{array:gt},slots:{0:{structure:Y,memory:{array:z},address:-1431655766}}},6:{structure:M,memory:{array:Ot},slots:{0:{structure:Z,memory:{array:z},address:-1431655766}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:24});Object.assign(ee,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(te,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ee}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const Rt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(se,{...t,type:9,name:"crystallize.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:Rt}}},slot:26});Object.assign(q,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:27});Object.assign(re,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:41});const qt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),wt=new Uint8Array([]),jt=new Uint8Array([72,253,15,0]),At=new Uint8Array([4,0,0,0]);Object.assign(_,{...t,type:2,name:"crystallize.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:te},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:se},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:q}],methods:[],template:{memory:{array:qt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:re},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:y}],methods:[],template:{memory:{array:wt},slots:{0:{structure:y,memory:{array:jt},slots:{0:{structure:m,memory:{array:At}}}}}}},slot:21});const Ut=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Pt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),kt=new Uint8Array([0,0,0,0,0,0,0,0]),de=new Uint8Array([]);Object.assign(j,{...t,type:2,name:"crystallize.KernelInput(u8,crystallize.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:_}],methods:[],template:{memory:{array:Ut},slots:{0:{structure:_,memory:{array:Pt},slots:{0:{structure:te,memory:{array:kt},slots:{0:{structure:ee,memory:{array:de}}}}}}}}},slot:20});Object.assign(ae,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(ne,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ae}],methods:[],template:null},slot:30});const It=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Vt=new Uint8Array([]),Ct=new Uint8Array([72,253,15,0]),vt=new Uint8Array([4,0,0,0]);Object.assign(T,{...t,type:2,name:"crystallize.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ne},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:se},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:q}],methods:[],template:{memory:{array:It}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:re},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:y}],methods:[],template:{memory:{array:Vt},slots:{0:{structure:y,memory:{array:Ct},slots:{0:{structure:m,memory:{array:vt}}}}}}},slot:29});const Et=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Kt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(A,{...t,type:2,name:"crystallize.KernelOutput(u8,crystallize.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:T}],methods:[],template:{memory:{array:Et},slots:{0:{structure:T,memory:{array:xt},slots:{0:{structure:ne,memory:{array:Kt},slots:{0:{structure:ae,memory:{array:de}}}}}}}}},slot:28});const Dt=new Uint8Array([0,0,160,65]);Object.assign(U,{...t,type:2,name:"crystallize.KernelParameters(crystallize.kernel)",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"size",structure:h}],methods:[],template:{memory:{array:Dt}}},slot:31});Object.assign(oe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(crystallize.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:42});Object.assign(me,{...t,type:7,name:"ErrorSet0000!crystallize.KernelOutput(u8,crystallize.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:A},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:oe}],methods:[],template:null},slot:35});Object.assign(ye,{...t,type:3,name:"createOutput",length:1,byteSize:64,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:j},{...e,type:6,bitOffset:256,bitSize:32,byteSize:4,slot:3,name:"3",structure:U},{...e,type:6,bitOffset:288,bitSize:224,byteSize:28,slot:4,name:"retval",structure:me}],methods:[],template:null},slot:33});Object.assign(ce,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(crystallize.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:43});Object.assign(be,{...t,type:7,name:"ErrorSet0001!crystallize.KernelOutput(u8,crystallize.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:A},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ce}],methods:[],template:null},slot:36});Object.assign(pe,{...t,type:3,name:"createPartialOutput",length:1,byteSize:72,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:j},{...e,type:6,bitOffset:320,bitSize:32,byteSize:4,slot:5,name:"5",structure:U},{...e,type:6,bitOffset:352,bitSize:224,byteSize:28,slot:6,name:"retval",structure:be}],methods:[],template:null},slot:34});const Ft={argStruct:ye,thunk:7,name:"createOutput"},Mt={argStruct:pe,thunk:2,name:"createPartialOutput"};Object.assign(fe,{...t,type:2,name:"crystallize",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:de}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:le},{...e,type:7,isRequired:!1,name:"Input",structure:j},{...e,type:7,isRequired:!1,name:"Output",structure:A},{...e,type:7,isRequired:!1,name:"Parameters",structure:U}],methods:[Ft,Mt],template:null},slot:0});const _t=[p,$,B,C,L,G,v,m,y,H,J,E,h,f,b,N,Q,x,W,K,X,D,w,g,Y,F,Z,M,le,O,ee,te,l,se,q,re,_,j,ae,ne,T,A,U,oe,me,ye,ce,be,pe,fe],Tt=Me(_t),$t=fe.constructor,Bt=(async()=>{const n=new URL("crystallize-b75eb608.wasm",import.meta.url).href;return fetch(n)})();_e(Bt,{...Tt,writeBack:!0});const{createOutput:Xt,createPartialOutput:Lt,kernel:ue,Input:Gt,Output:Yt,Parameters:Zt}=$t;function Ht(n,u,r,s,a={},d={}){if(Array.isArray(a)){const c=a;a={};for(const[o,S]of Object.keys(ue.inputImages).entries())a[S]=c[o]}const P=new Gt(void 0),k=Object.keys(ue.inputImages),i=[];let R;for(const c of k){let o=a[c];if(o||(k.length===1&&["data","width","height"].every(S=>!!a[S])?o=a:i.push(c)),P[c]=o,R){if(o.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=o.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const ie=Lt(n,u,r,s,P,d),Se=c=>{const o=Object.keys(c),S={};for(const ze of o){const{data:{typedArray:I},width:he,height:Oe}=c[ze];let V;if(typeof ImageData=="function"){const Re=new Uint8ClampedArray(I.buffer,I.byteOffset,I.byteLength);V=new ImageData(Re,he,s,{colorSpace:R})}else V={data:I,width:he,height:Oe};if(o.length===1)return V;S[ze]=V}return S};return ie[Symbol.toStringTag]==="Promise"?ie.then(Se):Se(ie)}function Jt(){const n={};for(let[u,r]of Object.entries(ue)){if(u==="parameters"){const s={};for(const[a,d]of Object.entries(r)){const P=s[a]={};for(let[k,i]of Object.entries(d))typeof i=="object"?"string"in i?i=i.string:i=ge(i):typeof i=="function"&&(i=Nt(i.name)),P[k]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[u]=r}return n}function ge(n){const u=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=ge(s)),u[r]=s;return u}function Nt(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[u,r,...s]=n.data;Qt(u,s).then(([a,d])=>{postMessage([u,r,a],{transfer:d})}).catch(a=>{postMessage(["error",r,a])})};async function Qt(n,u){switch(n){case"getKernelInfo":return[Jt(...u)];case"createPartialImageData":const s=await Ht(...u),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const d of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
