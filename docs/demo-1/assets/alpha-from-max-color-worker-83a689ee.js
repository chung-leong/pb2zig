import{u as Re,a as qe,b as we,c as je,d as Ae,e as Ue,f as Pe,g as xe,h as ke,i as Ie,j as Ce,k as Ve,l as ve,m as Ee,n as Ke,o as De,p as Fe,q as Me}from"./index-422d9c98.js";Re();qe();we();je();Ae();Ue();Pe();xe();ke();Ie();Ce();Ve();ve();Ee();Ke();De();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},y={},_={},T={},x={},$={},B={},k={},m={},c={},L={},N={},I={},G={},H={},C={},J={},Q={},V={},W={},v={},O={},h={},X={},E={},Y={},K={},oe={},d={},Z={},ee={},l={},te={},z={},D={},se={},F={},R={},re={},ae={},M={},q={},w={},le={},ue={},me={},ce={},ye={},be={},pe={};Object.assign(y,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:5});Object.assign(_,{...t,type:1,name:"[12:0]u8",length:12,byteSize:13,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:4});Object.assign(T,{...t,type:11,name:"*const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_}],methods:[],template:null},slot:3});Object.assign(x,{...t,type:11,name:"*const *const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[],template:null},slot:2});Object.assign($,{...t,type:1,name:"[26:0]u8",length:26,byteSize:27,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:8});Object.assign(B,{...t,type:11,name:"*const [26:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:7});Object.assign(k,{...t,type:11,name:"*const *const [26:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:6});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:10});Object.assign(c,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:9});Object.assign(L,{...t,type:1,name:"[39:0]u8",length:39,byteSize:40,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:13});Object.assign(N,{...t,type:11,name:"*const [39:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:12});Object.assign(I,{...t,type:11,name:"*const *const [39:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:11});Object.assign(G,{...t,type:1,name:"[20:0]u8",length:20,byteSize:21,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:16});Object.assign(H,{...t,type:11,name:"*const [20:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:15});Object.assign(C,{...t,type:11,name:"*const *const [20:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:14});Object.assign(J,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:19});Object.assign(Q,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:18});Object.assign(V,{...t,type:11,name:"*const *const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:17});const _e=new Uint8Array([]);Object.assign(W,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:_e}}},slot:21});Object.assign(v,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:20});const Te=new Uint8Array([]),$e=new Uint8Array([96,250,15,0]),Be=new Uint8Array([4,0,0,0]);Object.assign(O,{...t,type:2,name:"Struct0007",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:Te},slots:{0:{structure:c,memory:{array:$e},slots:{0:{structure:m,memory:{array:Be}}}}}}},slot:43});Object.assign(h,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:O}],methods:[],template:null},slot:42});const Le=new Uint8Array([]),Ne=new Uint8Array([170,170,170,170]),g=new Uint8Array([]);Object.assign(X,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:h}],methods:[],template:{memory:{array:Le},slots:{0:{structure:h,memory:{array:Ne},slots:{0:{structure:O,memory:{array:g},address:-1431655766}}}}}},slot:23});Object.assign(E,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:22});const Ge=new Uint8Array([]),He=new Uint8Array([170,170,170,170]);Object.assign(Y,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:h}],methods:[],template:{memory:{array:Ge},slots:{0:{structure:h,memory:{array:He},slots:{0:{structure:O,memory:{array:g},address:-1431655766}}}}}},slot:25});Object.assign(K,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:24});const Je=new Uint8Array([]),Qe=new Uint8Array([]),We=new Uint8Array([156,250,15,0]),Xe=new Uint8Array([187,36,16,0]),Ye=new Uint8Array([65,102,116,101,114,69,102,102,101,99,116,115,0]),Ze=new Uint8Array([220,250,15,0]),et=new Uint8Array([160,36,16,0]),tt=new Uint8Array([65,100,111,98,101,32,83,121,115,116,101,109,115,32,73,110,99,111,114,112,111,114,97,116,101,100,0]),st=new Uint8Array([28,251,15,0]),rt=new Uint8Array([2,0,0,0]),at=new Uint8Array([116,251,15,0]),nt=new Uint8Array([120,36,16,0]),it=new Uint8Array([69,115,116,105,109,97,116,101,32,97,108,112,104,97,32,98,97,115,101,100,32,111,110,32,99,111,108,111,114,32,99,104,97,110,110,101,108,115,46,0]),ot=new Uint8Array([180,251,15,0]),lt=new Uint8Array([99,36,16,0]),ut=new Uint8Array([65,108,112,104,97,32,70,114,111,109,32,77,97,120,32,67,111,108,111,114,0]),mt=new Uint8Array([244,251,15,0]),ct=new Uint8Array([91,36,16,0]),yt=new Uint8Array([85,116,105,108,105,116,121,0]),bt=new Uint8Array([170,170,170,170]),pt=new Uint8Array([170,170,170,170]),ft=new Uint8Array([170,170,170,170]);Object.assign(oe,{...t,type:2,name:"alpha-from-max-color.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Je}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:x},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:k},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:c},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:I},{...e,type:6,isRequired:!1,slot:4,name:"displayName",structure:C},{...e,type:6,isRequired:!1,slot:5,name:"category",structure:V},{...e,type:6,isRequired:!1,slot:6,name:"parameters",structure:v},{...e,type:6,isRequired:!1,slot:7,name:"inputImages",structure:E},{...e,type:6,isRequired:!1,slot:8,name:"outputImages",structure:K}],methods:[],template:{memory:{array:Qe},slots:{0:{structure:x,memory:{array:We},slots:{0:{structure:T,memory:{array:Xe},slots:{0:{structure:_,memory:{array:Ye},address:1057979}}}}},1:{structure:k,memory:{array:Ze},slots:{0:{structure:B,memory:{array:et},slots:{0:{structure:$,memory:{array:tt},address:1057952}}}}},2:{structure:c,memory:{array:st},slots:{0:{structure:m,memory:{array:rt}}}},3:{structure:I,memory:{array:at},slots:{0:{structure:N,memory:{array:nt},slots:{0:{structure:L,memory:{array:it},address:1057912}}}}},4:{structure:C,memory:{array:ot},slots:{0:{structure:H,memory:{array:lt},slots:{0:{structure:G,memory:{array:ut},address:1057891}}}}},5:{structure:V,memory:{array:mt},slots:{0:{structure:Q,memory:{array:ct},slots:{0:{structure:J,memory:{array:yt},address:1057883}}}}},6:{structure:v,memory:{array:bt},slots:{0:{structure:W,memory:{array:g},address:-1431655766}}},7:{structure:E,memory:{array:pt},slots:{0:{structure:X,memory:{array:g},address:-1431655766}}},8:{structure:K,memory:{array:ft},slots:{0:{structure:Y,memory:{array:g},address:-1431655766}}}}}},slot:1});Object.assign(d,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:30});Object.assign(Z,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:d}],methods:[],template:null},slot:29});Object.assign(ee,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Z}],methods:[],template:null},slot:28});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:31});const ht=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(te,{...t,type:9,name:"alpha-from-max-color.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:ht}}},slot:32});Object.assign(z,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:33});Object.assign(D,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:D}],methods:[],template:null},slot:47});Object.assign(se,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:D}],methods:[],template:null},slot:44});const dt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),St=new Uint8Array([]),gt=new Uint8Array([72,253,15,0]),zt=new Uint8Array([4,0,0,0]);Object.assign(F,{...t,type:2,name:"alpha-from-max-color.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ee},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:te},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:z}],methods:[],template:{memory:{array:dt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:d},{...e,type:7,isRequired:!1,name:"FPixel",structure:se},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:St},slots:{0:{structure:c,memory:{array:gt},slots:{0:{structure:m,memory:{array:zt}}}}}}},slot:27});const Ot=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Rt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),qt=new Uint8Array([0,0,0,0,0,0,0,0]),fe=new Uint8Array([]);Object.assign(R,{...t,type:2,name:"alpha-from-max-color.KernelInput(u8,alpha-from-max-color.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:F}],methods:[],template:{memory:{array:Ot},slots:{0:{structure:F,memory:{array:Rt},slots:{0:{structure:ee,memory:{array:qt},slots:{0:{structure:Z,memory:{array:fe}}}}}}}}},slot:26});Object.assign(re,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:d}],methods:[],template:null},slot:29});Object.assign(ae,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:re}],methods:[],template:null},slot:36});const wt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),jt=new Uint8Array([]),At=new Uint8Array([72,253,15,0]),Ut=new Uint8Array([4,0,0,0]);Object.assign(M,{...t,type:2,name:"alpha-from-max-color.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ae},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:te},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:z}],methods:[],template:{memory:{array:wt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:d},{...e,type:7,isRequired:!1,name:"FPixel",structure:se},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:jt},slots:{0:{structure:c,memory:{array:At},slots:{0:{structure:m,memory:{array:Ut}}}}}}},slot:35});const Pt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),kt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(q,{...t,type:2,name:"alpha-from-max-color.KernelOutput(u8,alpha-from-max-color.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:M}],methods:[],template:{memory:{array:Pt},slots:{0:{structure:M,memory:{array:xt},slots:{0:{structure:ae,memory:{array:kt},slots:{0:{structure:re,memory:{array:fe}}}}}}}}},slot:34});const It=new Uint8Array([]);Object.assign(w,{...t,type:2,name:"alpha-from-max-color.KernelParameters(alpha-from-max-color.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:It}}},slot:37});Object.assign(le,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(alpha-from-max-color.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:45});Object.assign(ue,{...t,type:7,name:"ErrorSet0000!alpha-from-max-color.KernelOutput(u8,alpha-from-max-color.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:q},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:le}],methods:[],template:null},slot:40});Object.assign(me,{...t,type:3,name:"createOutput",length:1,byteSize:60,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:R},{...e,type:6,bitOffset:480,bitSize:0,byteSize:0,slot:3,name:"3",structure:w},{...e,type:6,bitOffset:256,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ue}],methods:[],template:null},slot:38});Object.assign(ce,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(alpha-from-max-color.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:46});Object.assign(ye,{...t,type:7,name:"ErrorSet0001!alpha-from-max-color.KernelOutput(u8,alpha-from-max-color.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:q},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ce}],methods:[],template:null},slot:41});Object.assign(be,{...t,type:3,name:"createPartialOutput",length:1,byteSize:68,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:R},{...e,type:6,bitOffset:544,bitSize:0,byteSize:0,slot:5,name:"5",structure:w},{...e,type:6,bitOffset:320,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ye}],methods:[],template:null},slot:39});const Ct={argStruct:me,thunk:7,name:"createOutput"},Vt={argStruct:be,thunk:2,name:"createPartialOutput"};Object.assign(pe,{...t,type:2,name:"alpha-from-max-color",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:fe}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:oe},{...e,type:7,isRequired:!1,name:"Input",structure:R},{...e,type:7,isRequired:!1,name:"Output",structure:q},{...e,type:7,isRequired:!1,name:"Parameters",structure:w}],methods:[Ct,Vt],template:null},slot:0});const vt=[y,_,T,x,$,B,k,m,c,L,N,I,G,H,C,J,Q,V,W,v,O,h,X,E,Y,K,oe,d,Z,ee,l,te,z,D,se,F,R,re,ae,M,q,w,le,ue,me,ce,ye,be,pe],Et=Fe(vt),Kt=pe.constructor,Dt=(async()=>{const n=new URL("alpha-from-max-color-1b428dce.wasm",import.meta.url).href;return fetch(n)})();Me(Dt,{...Et,writeBack:!0});const{createOutput:Nt,createPartialOutput:Ft,kernel:ie,Input:Mt,Output:Gt,Parameters:Ht}=Kt;function _t(n,o,r,s,a={},p={}){if(Array.isArray(a)){const b=a;a={};for(const[u,f]of Object.keys(ie.inputImages).entries())a[f]=b[u]}const j=new Mt(void 0),A=Object.keys(ie.inputImages),i=[];let S;for(const b of A){let u=a[b];if(u||(A.length===1&&["data","width","height"].every(f=>!!a[f])?u=a:i.push(b)),j[b]=u,S){if(u.colorSpace!==S)throw new Error(`Input images must all use the same color space: ${S}`)}else S=u.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const ne=Ft(n,o,r,s,j,p),he=b=>{const u=Object.keys(b),f={};for(const de of u){const{data:{typedArray:U},width:Se,height:ze}=b[de];let P;if(typeof ImageData=="function"){const Oe=new Uint8ClampedArray(U.buffer,U.byteOffset,U.byteLength);P=new ImageData(Oe,Se,s,{colorSpace:S})}else P={data:U,width:Se,height:ze};if(u.length===1)return P;f[de]=P}return f};return ne[Symbol.toStringTag]==="Promise"?ne.then(he):he(ne)}function Tt(){const n={};for(let[o,r]of Object.entries(ie)){if(o==="parameters"){const s={};for(const[a,p]of Object.entries(r)){const j=s[a]={};for(let[A,i]of Object.entries(p))typeof i=="object"?"string"in i?i=i.string:i=ge(i):typeof i=="function"&&(i=$t(i.name)),j[A]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[o]=r}return n}function ge(n){const o=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=ge(s)),o[r]=s;return o}function $t(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,r,...s]=n.data;Bt(o,s).then(([a,p])=>{postMessage([o,r,a],{transfer:p})}).catch(a=>{postMessage(["error",r,a])})};async function Bt(n,o){switch(n){case"getKernelInfo":return[Tt(...o)];case"createPartialImageData":const s=await _t(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const p of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
