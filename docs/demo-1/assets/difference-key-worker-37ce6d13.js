import{u as as,a as ns,b as is,d as os,c as cs,e as us,f as ms,g as ys,h as bs,i as ls,j as fs,k as ps,l as gs,m as Os,n as Ss,p as zs,o as js,q as ds,r as hs,s as ws}from"./index-25a52593.js";as();fs();ps();ns();is();gs();Os();Ss();zs();os();cs();us();ms();js();ws();ys();ds();bs();ls();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:0,align:0,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null}},e={type:0,isRequired:!1},s={},O={},_={},D={},F={},M={},l={},S={},T={},$={},p={},L={},B={},r={},y={},G={},H={},J={},N={},h={},Q={},W={},ie={},P={},X={},V={},m={},g={},U={},oe={},Y={},I={},Z={},R={},ee={},q={},v={},k={},ce={},ue={},K={},me={},ye={},be={},Te={},le={},$e={},Le={},fe={},te={},pe={},Be={},ge={},Ge={},Oe={},He={},Je={},Se={},ze={},Ne={},je={},Qe={},de={},We={},Xe={},he={},we={},Ye={},Ae={},Ze={},Ue={},et={},tt={},ke={},Pe={},Ve={},Ie={},st={},se={},rt={},at={},Re={},nt={},qe={},it={},ot={},ct={},ut={},mt={},yt={},bt={},lt={},ft={},pt={},gt={},Ot={},St={},zt={},jt={},dt={},ht={},ve={},wt={},At={},Ee={},Ut={},xe={},kt={},Pt={},Vt={},It={},Rt={},qt={},vt={},Ce={},Et={},xt={},Ct={},Kt={},_t={},Dt={},Ft={},Mt={},Tt={},$t={},Ke={},Lt={},Bt={},Gt={},Ht={},Jt={},Nt={},Qt={},Wt={},Xt={},Yt={},As=new Uint8Array,Us=new Uint8Array,ks=new Uint8Array,Ps=new Uint8Array([0,0,0,0,0,0,0,0]),Vs=new Uint8Array,Is=new Uint8Array([0,0,0,0,0,0,8,64]),Rs=new Uint8Array,qs=new Uint8Array([123,20,174,71,225,122,148,63]),vs=new Uint8Array,Es=new Uint8Array,xs=new Uint8Array([0,0,0,0,0,0,0,0]),Cs=new Uint8Array,Ks=new Uint8Array([0,0,0,0,0,0,240,63]),_s=new Uint8Array,Ds=new Uint8Array([123,20,174,71,225,122,116,63]),Fs=new Uint8Array,Ms=new Uint8Array,Ts=new Uint8Array([0,0,0,0,0,0,0,0]),$s=new Uint8Array,Ls=new Uint8Array([0,0,0,0,0,0,36,64]),Bs=new Uint8Array,Gs=new Uint8Array([0,0,0,0,0,0,240,63]),Hs=new Uint8Array,Js=new Uint8Array,Ns=new Uint8Array,Qs=new Uint8Array,Ws=new Uint8Array,Xs=new Uint8Array([4]),Ys=new Uint8Array,Zs=new Uint8Array,er=new Uint8Array([4,5,0,1]),tr=new Uint8Array([99,111,109,46,113,117,97,115,105,109,111,110,100,111,0]),sr=new Uint8Array([30,5,0,1]),rr=new Uint8Array([81,117,97,115,105,109,111,110,100,111,0]),ar=new Uint8Array,nr=new Uint8Array([1]),ir=new Uint8Array([58,5,0,1]),or=new Uint8Array([65,32,115,105,109,112,108,101,32,100,105,102,102,101,114,101,110,99,101,32,107,101,121,32,102,111,114,32,99,104,114,111,109,97,32,107,101,121,105,110,103,0]),cr=new Uint8Array,ur=new Uint8Array,mr=new Uint8Array,yr=new Uint8Array([0]),br=new Uint8Array([1]),Zt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),lr=new Uint8Array,fr=new Uint8Array,pr=new Uint8Array,gr=new Uint8Array,Or=new Uint8Array([4]),_e=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),es=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Sr=new Uint8Array,zr=new Uint8Array,jr=new Uint8Array,dr=new Uint8Array,hr=new Uint8Array([4]),De=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),wr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,215,163,60,10,215,163,59,0,0,128,63,0,0,0,0]),Ar=new Uint8Array([27,0]),Ur=new Uint8Array,kr=new Uint8Array,Pr=new Uint8Array,Vr=new Uint8Array;Object.assign(Te,{slots:{0:le}});Object.assign(le,{structure:s,memory:{array:As},slots:{0:$e}});Object.assign($e,{structure:L});Object.assign(Le,{slots:{0:fe,1:pe,2:ge,3:Oe}});Object.assign(fe,{structure:s,memory:{array:Us},slots:{0:te}});Object.assign(te,{structure:p});Object.assign(pe,{structure:r,memory:{array:ks},slots:{0:Be}});Object.assign(Be,{structure:y,memory:{array:Ps}});Object.assign(ge,{structure:r,memory:{array:Vs},slots:{0:Ge}});Object.assign(Ge,{structure:y,memory:{array:Is}});Object.assign(Oe,{structure:r,memory:{array:Rs},slots:{0:He}});Object.assign(He,{structure:y,memory:{array:qs}});Object.assign(Je,{slots:{0:Se,1:ze,2:je,3:de}});Object.assign(Se,{structure:s,memory:{array:vs},slots:{0:te}});Object.assign(ze,{structure:r,memory:{array:Es},slots:{0:Ne}});Object.assign(Ne,{structure:y,memory:{array:xs}});Object.assign(je,{structure:r,memory:{array:Cs},slots:{0:Qe}});Object.assign(Qe,{structure:y,memory:{array:Ks}});Object.assign(de,{structure:r,memory:{array:_s},slots:{0:We}});Object.assign(We,{structure:y,memory:{array:Ds}});Object.assign(Xe,{slots:{0:he,1:we,2:Ae,3:Ue}});Object.assign(he,{structure:s,memory:{array:Fs},slots:{0:te}});Object.assign(we,{structure:r,memory:{array:Ms},slots:{0:Ye}});Object.assign(Ye,{structure:y,memory:{array:Ts}});Object.assign(Ae,{structure:r,memory:{array:$s},slots:{0:Ze}});Object.assign(Ze,{structure:y,memory:{array:Ls}});Object.assign(Ue,{structure:r,memory:{array:Bs},slots:{0:et}});Object.assign(et,{structure:y,memory:{array:Gs}});Object.assign(tt,{slots:{0:ke,1:Pe,2:Ve,3:Ie}});Object.assign(ke,{structure:B,memory:{array:Hs},slots:{0:le}});Object.assign(Pe,{structure:G,memory:{array:Js},slots:{0:fe,1:pe,2:ge,3:Oe}});Object.assign(Ve,{structure:H,memory:{array:Ns},slots:{0:Se,1:ze,2:je,3:de}});Object.assign(Ie,{structure:J,memory:{array:Qs},slots:{0:he,1:we,2:Ae,3:Ue}});Object.assign(st,{slots:{0:se}});Object.assign(se,{structure:l,memory:{array:Ws},slots:{0:rt}});Object.assign(rt,{structure:S,memory:{array:Xs}});Object.assign(at,{slots:{0:Re}});Object.assign(Re,{structure:h,memory:{array:Ys},slots:{0:se}});Object.assign(nt,{slots:{0:qe}});Object.assign(qe,{structure:h,memory:{array:Zs},slots:{0:se}});Object.assign(it,{slots:{0:ot,1:ut,2:yt,3:lt,4:pt,5:gt,6:Ot}});Object.assign(ot,{structure:D,memory:{array:er},slots:{0:ct}});Object.assign(ct,{structure:_,memory:{array:tr},reloc:16778500,const:!0});Object.assign(ut,{structure:M,memory:{array:sr},slots:{0:mt}});Object.assign(mt,{structure:F,memory:{array:rr},reloc:16778526,const:!0});Object.assign(yt,{structure:l,memory:{array:ar},slots:{0:bt}});Object.assign(bt,{structure:S,memory:{array:nr}});Object.assign(lt,{structure:$,memory:{array:ir},slots:{0:ft}});Object.assign(ft,{structure:T,memory:{array:or},reloc:16778554,const:!0});Object.assign(pt,{structure:N,memory:{array:cr},slots:{0:ke,1:Pe,2:Ve,3:Ie}});Object.assign(gt,{structure:Q,memory:{array:ur},slots:{0:Re}});Object.assign(Ot,{structure:W,memory:{array:mr},slots:{0:qe}});Object.assign(St,{slots:{0:zt,1:jt}});Object.assign(zt,{structure:g,memory:{array:yr}});Object.assign(jt,{structure:g,memory:{array:br}});Object.assign(dt,{memory:{array:Zt},slots:{0:ht}});Object.assign(ht,{structure:V,memory:{array:Zt,offset:0,length:8},slots:{0:ve}});Object.assign(ve,{structure:X,memory:{array:lr},reloc:0,const:!0});Object.assign(wt,{slots:{0:At,1:Ut,2:kt}});Object.assign(At,{structure:s,memory:{array:fr},slots:{0:Ee}});Object.assign(Ee,{structure:P});Object.assign(Ut,{structure:s,memory:{array:pr},slots:{0:xe}});Object.assign(xe,{structure:oe});Object.assign(kt,{structure:l,memory:{array:gr},slots:{0:Pt}});Object.assign(Pt,{structure:S,memory:{array:Or}});Object.assign(Vt,{memory:{array:_e},slots:{0:It}});Object.assign(It,{structure:Y,memory:{array:_e},slots:{0:Rt}});Object.assign(Rt,{structure:V,memory:{array:_e,offset:0,length:8},slots:{0:ve}});Object.assign(qt,{memory:{array:es},slots:{0:vt}});Object.assign(vt,{structure:R,memory:{array:es,offset:0,length:8},slots:{0:Ce}});Object.assign(Ce,{structure:Z,memory:{array:Sr},reloc:0});Object.assign(Et,{slots:{0:xt,1:Ct,2:Kt}});Object.assign(xt,{structure:s,memory:{array:zr},slots:{0:Ee}});Object.assign(Ct,{structure:s,memory:{array:jr},slots:{0:xe}});Object.assign(Kt,{structure:l,memory:{array:dr},slots:{0:_t}});Object.assign(_t,{structure:S,memory:{array:hr}});Object.assign(Dt,{memory:{array:De},slots:{0:Ft}});Object.assign(Ft,{structure:ee,memory:{array:De},slots:{0:Mt}});Object.assign(Mt,{structure:R,memory:{array:De,offset:0,length:8},slots:{0:Ce}});Object.assign(Tt,{memory:{array:wr}});Object.assign($t,{slots:{0:Ke}});Object.assign(Ke,{structure:k,memory:{array:Ar}});Object.assign(Lt,{slots:{0:Ke}});Object.assign(Bt,{slots:{0:Gt,1:Jt,2:Qt,3:Xt}});Object.assign(Gt,{structure:s,memory:{array:Ur},slots:{0:Ht}});Object.assign(Ht,{structure:ie});Object.assign(Jt,{structure:s,memory:{array:kr},slots:{0:Nt}});Object.assign(Nt,{structure:I});Object.assign(Qt,{structure:s,memory:{array:Pr},slots:{0:Wt}});Object.assign(Wt,{structure:q});Object.assign(Xt,{structure:s,memory:{array:Vr},slots:{0:Yt}});Object.assign(Yt,{structure:v});const Ir={argStruct:ue,thunkId:2,name:"createOutput"},Rr={argStruct:ye,thunkId:3,name:"createPartialOutput"};Object.assign(s,{...t,name:"type",align:1,instance:{members:[{...e,type:8,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:s}],methods:[]}});Object.assign(O,{...t,name:"u8",byteSize:1,align:1,instance:{members:[{...e,type:3,bitOffset:0,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(_,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:1,instance:{members:[{...e,type:3,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(D,{...t,type:13,name:"*const [14:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:7,bitSize:32,byteSize:4,slot:0,structure:_}],methods:[]}});Object.assign(F,{...t,type:1,name:"[10:0]u8",length:10,byteSize:11,align:1,instance:{members:[{...e,type:3,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(M,{...t,type:13,name:"*const [10:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:7,bitSize:32,byteSize:4,slot:0,structure:F}],methods:[]}});Object.assign(l,{...t,name:"comptime_int",align:1,instance:{members:[{...e,type:9,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:l}],methods:[]}});Object.assign(S,{...t,name:"i8",byteSize:1,align:1,instance:{members:[{...e,type:2,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(T,{...t,type:1,name:"[41:0]u8",length:41,byteSize:42,align:1,instance:{members:[{...e,type:3,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign($,{...t,type:13,name:"*const [41:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:7,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[]}});Object.assign(p,{...t,name:"f32",byteSize:4,align:4,instance:{members:[{...e,type:4,bitOffset:0,bitSize:32,byteSize:4,structure:p}],methods:[]}});Object.assign(L,{...t,type:15,name:"@Vector(3, f32)",length:3,byteSize:16,align:16,instance:{members:[{...e,type:4,bitSize:32,byteSize:4,structure:p}],methods:[]}});Object.assign(B,{...t,type:2,name:"Struct2141286390",align:1,instance:{members:[{...e,type:9,slot:0,name:"type",structure:s}],methods:[],template:Te}});Object.assign(r,{...t,name:"comptime_float",align:1,instance:{members:[{...e,type:9,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:r}],methods:[]}});Object.assign(y,{...t,name:"f64",byteSize:8,align:8,instance:{members:[{...e,type:4,bitOffset:0,bitSize:64,byteSize:8,structure:y}],methods:[]}});Object.assign(G,{...t,type:2,name:"Struct3841086153",align:1,instance:{members:[{...e,type:9,slot:0,name:"type",structure:s},{...e,type:9,slot:1,name:"minValue",structure:r},{...e,type:9,slot:2,name:"maxValue",structure:r},{...e,type:9,slot:3,name:"defaultValue",structure:r}],methods:[],template:Le}});Object.assign(H,{...t,type:2,name:"Struct162834972",align:1,instance:{members:[{...e,type:9,slot:0,name:"type",structure:s},{...e,type:9,slot:1,name:"minValue",structure:r},{...e,type:9,slot:2,name:"maxValue",structure:r},{...e,type:9,slot:3,name:"defaultValue",structure:r}],methods:[],template:Je}});Object.assign(J,{...t,type:2,name:"Struct2255363975",align:1,instance:{members:[{...e,type:9,slot:0,name:"type",structure:s},{...e,type:9,slot:1,name:"minValue",structure:r},{...e,type:9,slot:2,name:"maxValue",structure:r},{...e,type:9,slot:3,name:"defaultValue",structure:r}],methods:[],template:Xe}});Object.assign(N,{...t,type:2,name:"Struct3518626048",align:1,instance:{members:[{...e,type:9,slot:0,name:"keyColor",structure:B},{...e,type:9,slot:1,name:"tolerance",structure:G},{...e,type:9,slot:2,name:"ramp",structure:H},{...e,type:9,slot:3,name:"gamma",structure:J}],methods:[],template:tt}});Object.assign(h,{...t,type:2,name:"Struct3832472641",align:1,instance:{members:[{...e,type:9,slot:0,name:"channels",structure:l}],methods:[],template:st}});Object.assign(Q,{...t,type:2,name:"Struct2242867897",align:1,instance:{members:[{...e,type:9,slot:0,name:"src",structure:h}],methods:[],template:at}});Object.assign(W,{...t,type:2,name:"Struct172100005",align:1,instance:{members:[{...e,type:9,slot:0,name:"dst",structure:h}],methods:[],template:nt}});Object.assign(ie,{...t,type:2,name:"difference-key.kernel",align:1,static:{members:[{...e,type:9,slot:0,name:"namespace",structure:D},{...e,type:9,slot:1,name:"vendor",structure:M},{...e,type:9,slot:2,name:"version",structure:l},{...e,type:9,slot:3,name:"description",structure:$},{...e,type:9,slot:4,name:"parameters",structure:N},{...e,type:9,slot:5,name:"inputImages",structure:Q},{...e,type:9,slot:6,name:"outputImages",structure:W}],methods:[],template:it}});Object.assign(P,{...t,type:15,name:"@Vector(4, u8)",length:4,byteSize:4,align:4,instance:{members:[{...e,type:3,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(X,{...t,type:14,name:"[_]const @Vector(4, u8)",length:0,byteSize:4,align:4,instance:{members:[{...e,type:7,bitSize:32,byteSize:4,structure:P}],methods:[]}});Object.assign(V,{...t,type:13,name:"[]const @Vector(4, u8)",byteSize:8,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:7,bitSize:64,byteSize:8,slot:0,structure:X}],methods:[]}});Object.assign(m,{...t,name:"u32",byteSize:4,align:4,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[]}});Object.assign(g,{...t,type:11,name:"difference-key.ColorSpace",byteSize:1,align:1,instance:{members:[{...e,type:3,bitOffset:0,bitSize:8,byteSize:1}],methods:[]},static:{members:[{...e,type:9,slot:0,name:"srgb",structure:g},{...e,type:9,slot:1,name:"display-p3",structure:g}],methods:[],template:St}});Object.assign(U,{...t,name:"usize",byteSize:4,align:4,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:U}],methods:[]}});Object.assign(oe,{...t,type:15,name:"@Vector(4, f32)",length:4,byteSize:16,align:16,instance:{members:[{...e,type:4,bitSize:32,byteSize:4,structure:p}],methods:[]}});Object.assign(Y,{...t,type:2,name:"difference-key.Image(u8,4,false)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...e,type:7,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:V},{...e,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:g},{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:U}],methods:[],template:dt},static:{members:[{...e,type:9,slot:0,name:"Pixel",structure:s},{...e,type:9,slot:1,name:"FPixel",structure:s},{...e,type:9,slot:2,name:"channels",structure:l}],methods:[],template:wt}});Object.assign(I,{...t,type:2,name:"difference-key.KernelInput(u8,difference-key.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...e,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:Y}],methods:[],template:Vt}});Object.assign(Z,{...t,type:14,name:"[_]@Vector(4, u8)",length:0,byteSize:4,align:4,instance:{members:[{...e,type:7,bitSize:32,byteSize:4,structure:P}],methods:[]}});Object.assign(R,{...t,type:13,name:"[]@Vector(4, u8)",byteSize:8,align:4,hasPointer:!0,instance:{members:[{...e,type:7,bitSize:64,byteSize:8,slot:0,structure:Z}],methods:[]}});Object.assign(ee,{...t,type:2,name:"difference-key.Image(u8,4,true)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...e,type:7,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:R},{...e,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:g},{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:U}],methods:[],template:qt},static:{members:[{...e,type:9,slot:0,name:"Pixel",structure:s},{...e,type:9,slot:1,name:"FPixel",structure:s},{...e,type:9,slot:2,name:"channels",structure:l}],methods:[],template:Et}});Object.assign(q,{...t,type:2,name:"difference-key.KernelOutput(u8,difference-key.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...e,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:ee}],methods:[],template:Dt}});Object.assign(v,{...t,type:2,name:"difference-key.KernelParameters(difference-key.kernel)",byteSize:32,align:16,instance:{members:[{...e,type:7,bitOffset:0,bitSize:96,byteSize:16,slot:0,name:"keyColor",structure:L},{...e,type:4,bitOffset:128,bitSize:32,byteSize:4,slot:1,name:"tolerance",structure:p},{...e,type:4,bitOffset:160,bitSize:32,byteSize:4,slot:2,name:"ramp",structure:p},{...e,type:4,bitOffset:192,bitSize:32,byteSize:4,slot:3,name:"gamma",structure:p}],methods:[],template:Tt}});Object.assign(k,{...t,type:10,name:"@typeInfo(@typeInfo(@TypeOf(difference-key.createOutput)).Fn.return_type.?).ErrorUnion.error_set",byteSize:2,align:2,instance:{members:[{...e,type:3,bitOffset:0,bitSize:16,byteSize:2}],methods:[]},static:{members:[{...e,type:9,slot:0,name:"OutOfMemory",structure:k}],methods:[],template:$t}});Object.assign(ce,{...t,type:9,name:"ErrorSet1800823049!difference-key.KernelOutput(u8,difference-key.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...e,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:q},{...e,type:6,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:k}],methods:[]}});Object.assign(ue,{...t,type:5,name:"createOutput",byteSize:96,align:16,hasPointer:!0,instance:{members:[{...e,type:3,isRequired:!0,bitOffset:256,bitSize:32,byteSize:4,slot:3,name:"0",structure:m},{...e,type:3,isRequired:!0,bitOffset:288,bitSize:32,byteSize:4,slot:4,name:"1",structure:m},{...e,type:7,isRequired:!0,bitOffset:320,bitSize:192,byteSize:24,slot:0,name:"2",structure:I},{...e,type:7,isRequired:!0,bitOffset:0,bitSize:256,byteSize:32,slot:1,name:"3",structure:v},{...e,type:7,isRequired:!0,bitOffset:512,bitSize:224,byteSize:28,slot:2,name:"retval",structure:ce}],methods:[]}});Object.assign(K,{...t,type:10,name:"@typeInfo(@typeInfo(@TypeOf(difference-key.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",byteSize:2,align:2,instance:{members:[{...e,type:3,bitOffset:0,bitSize:16,byteSize:2}],methods:[]},static:{members:[{...e,type:9,slot:0,name:"OutOfMemory",structure:K}],methods:[],template:Lt}});Object.assign(me,{...t,type:9,name:"ErrorSet2835222372!difference-key.KernelOutput(u8,difference-key.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...e,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:q},{...e,type:6,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:K}],methods:[]}});Object.assign(ye,{...t,type:5,name:"createPartialOutput",byteSize:112,align:16,hasPointer:!0,instance:{members:[{...e,type:3,isRequired:!0,bitOffset:256,bitSize:32,byteSize:4,slot:3,name:"0",structure:m},{...e,type:3,isRequired:!0,bitOffset:288,bitSize:32,byteSize:4,slot:4,name:"1",structure:m},{...e,type:3,isRequired:!0,bitOffset:320,bitSize:32,byteSize:4,slot:5,name:"2",structure:m},{...e,type:3,isRequired:!0,bitOffset:352,bitSize:32,byteSize:4,slot:6,name:"3",structure:m},{...e,type:7,isRequired:!0,bitOffset:384,bitSize:192,byteSize:24,slot:0,name:"4",structure:I},{...e,type:7,isRequired:!0,bitOffset:0,bitSize:256,byteSize:32,slot:1,name:"5",structure:v},{...e,type:7,isRequired:!0,bitOffset:576,bitSize:224,byteSize:28,slot:2,name:"retval",structure:me}],methods:[]}});Object.assign(be,{...t,type:2,name:"difference-key",align:1,static:{members:[{...e,type:9,slot:0,name:"kernel",structure:s},{...e,type:9,slot:1,name:"Input",structure:s},{...e,type:9,slot:2,name:"Output",structure:s},{...e,type:9,slot:3,name:"Parameters",structure:s}],methods:[Ir,Rr],template:Bt}});const qr=[s,O,_,D,F,M,l,S,T,$,p,L,B,r,y,G,H,J,N,h,Q,W,ie,P,X,V,m,g,U,oe,Y,I,Z,R,ee,q,v,k,ce,ue,K,me,ye,be],vr=be,Er={runtimeSafety:!1,littleEndian:!0},re=hs();re.getControlObject();re.recreateStructures(qr,Er);const xr=(async()=>{const o=new URL("difference-key-58e713f3.wasm",import.meta.url).href;return fetch(o)})();re.loadModule(xr);re.linkVariables(!0);const{constructor:Cr}=vr,{createPartialOutput:Kr,Input:_r,kernel:ne}=Cr;function Dr(o,c,n,a,i={},z={}){const j=[];for(const[b]of ne.inputImages)j.push(b);const w=[];for(const[b]of ne.outputImages)w.push(b);if(Array.isArray(i)){const b=i;i={};for(const[f,d]of j.entries())i[d]=b[f]}const u=new _r(void 0),E=[];let A;for(const b of j){let f=i[b];if(f||(j.length===1&&["data","width","height"].every(d=>!!i[d])?f=i:E.push(b)),u[b]=f,A){if(f.colorSpace!==A)throw new Error(`Input images must all use the same color space: ${A}`)}else A=f.colorSpace}if(E.length>0)throw new Error(`Missing input image${E.length>1?"s":""}: ${E.join(", ")}`);const ae=Kr(o,c,n,a,u,z),Fe=b=>{const f={};for(const d of w){const{data:{typedArray:x},width:Me,height:ss}=b[d];let C;if(typeof ImageData=="function"){const rs=new Uint8ClampedArray(x.buffer,x.byteOffset,x.byteLength);C=new ImageData(rs,Me,a,{colorSpace:A})}else C={data:x,width:Me,height:ss};if(w.length===1)return C;f[d]=C}return f};return ae[Symbol.toStringTag]==="Promise"?ae.then(Fe):Fe(ae)}function Fr(){const o={};for(let[c,n]of ne){if(c==="parameters"){const a={};for(const[i,z]of n){const j=a[i]={};for(let[w,u]of z)typeof u=="object"?"string"in u?u=u.string:u=ts(u):typeof u=="function"&&(u=Mr(u.name)),j[w]=u}n=a}else typeof n=="object"&&("string"in n?n=n.string:n=n.valueOf());o[c]=n}return o}function ts(o){const c=[];for(let[n,a]of o)typeof a=="object"&&(a=ts(a)),c[n]=a;return c}function Mr(o){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[o]}onmessage=o=>{const[c,n,...a]=o.data;Tr(c,a).then(([i,z])=>{postMessage([c,n,i],{transfer:z})}).catch(i=>{postMessage(["error",n,i])})};async function Tr(o,c){switch(o){case"getKernelInfo":return[Fr(...c)];case"createPartialImageData":const a=await Dr(...c),i=[];if("data"in a&&"width"in a&&"height"in a)i.push(a.data.buffer);else for(const z of Object.entries(a))i.push(a.data.buffer);return[a,i];default:throw new Error(`Unknown function: ${o}`)}}
