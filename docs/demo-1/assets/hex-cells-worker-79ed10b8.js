import{u as Fe,a as De,b as Te,d as He,c as Me,e as $e,f as Be,g as Le,h as Ge,i as Je,j as Ne,k as Qe,l as We,m as Xe,n as Ye,o as Ze,p as et,q as tt,r as st}from"./index-778418ea.js";Fe();De();Te();He();Me();$e();Be();Le();Ge();Je();Ne();Qe();We();Xe();Ye();Ze();et();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},b={},Q={},W={},k={},X={},Y={},C={},c={},d={},Z={},ee={},v={},h={},u={},r={},te={},se={},E={},re={},K={},ae={},ie={},F={},ne={},D={},me={},T={},oe={},le={},H={},ue={},M={},ce={},$={},B={},A={},z={},ye={},L={},pe={},G={},Re={},O={},be={},fe={},l={},de={},q={},w={},he={},J={},U={},ge={},Se={},N={},j={},V={},qe={},we={},Ae={},Ue={},je={},Ve={},_e={};Object.assign(b,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:5});Object.assign(Q,{...t,type:1,name:"[29:0]u8",length:29,byteSize:30,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:4});Object.assign(W,{...t,type:11,name:"*const [29:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:3});Object.assign(k,{...t,type:11,name:"**const [29:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:2});Object.assign(X,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:8});Object.assign(Y,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:7});Object.assign(C,{...t,type:11,name:"**const [14:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:6});Object.assign(c,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:10});Object.assign(d,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:9});Object.assign(Z,{...t,type:1,name:"[16:0]u8",length:16,byteSize:17,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:13});Object.assign(ee,{...t,type:11,name:"*const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:12});Object.assign(v,{...t,type:11,name:"**const [16:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:11});Object.assign(h,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:33});Object.assign(u,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:u}],methods:[],template:null},slot:49});Object.assign(r,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:48});Object.assign(te,{...t,type:1,name:"[12:0]u8",length:12,byteSize:13,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:52});Object.assign(se,{...t,type:11,name:"*const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:51});Object.assign(E,{...t,type:11,name:"*const *const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:50});const rt=new Uint8Array([]),at=new Uint8Array([200,2,16,0]),it=new Uint8Array([0,0,0,0,0,0,240,63]),nt=new Uint8Array([192,2,16,0]),mt=new Uint8Array([0,0,0,0,0,0,105,64]),ot=new Uint8Array([184,2,16,0]),lt=new Uint8Array([0,0,0,0,0,0,73,64]),ut=new Uint8Array([176,2,16,0]),ct=new Uint8Array([219,2,16,0]),yt=new Uint8Array([72,101,120,97,103,111,110,32,83,105,122,101,0]);Object.assign(re,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 200, comptime defaultValue: comptime_float = 50, comptime description: *const [12:0]u8 = "Hexagon Size"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:E}],methods:[],template:{memory:{array:rt},slots:{0:{structure:r,memory:{array:at},slots:{0:{structure:u,memory:{array:it},address:1049288}}},1:{structure:r,memory:{array:nt},slots:{0:{structure:u,memory:{array:mt},address:1049280}}},2:{structure:r,memory:{array:ot},slots:{0:{structure:u,memory:{array:lt},address:1049272}}},3:{structure:E,memory:{array:ut},slots:{0:{structure:se,memory:{array:ct},address:1049264,slots:{0:{structure:te,memory:{array:yt},address:1049307}}}}}}}},slot:40});Object.assign(K,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 200, comptime defaultValue: comptime_float = 50, comptime description: *const [12:0]u8 = "Hexagon Size"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:39});Object.assign(ae,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:34});const pt=new Uint8Array([]),bt=new Uint8Array([160,2,16,0]),Ce=new Uint8Array([0,0,0,0,0,0,105,192]),ft=new Uint8Array([160,2,16,0]);Object.assign(ie,{...t,type:2,name:"struct{comptime comptime_float = -200, comptime comptime_float = -200}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:pt},slots:{0:{structure:r,memory:{array:bt},slots:{0:{structure:u,memory:{array:Ce},address:1049248}}},1:{structure:r,memory:{array:ft},slots:{0:{structure:u,memory:{array:Ce},address:1049248}}}}}},slot:54});Object.assign(F,{...t,type:11,name:"*const struct{comptime comptime_float = -200, comptime comptime_float = -200}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:53});const dt=new Uint8Array([]),ht=new Uint8Array([152,2,16,0]),gt=new Uint8Array([0,0,0,0,0,0,137,64]),St=new Uint8Array([144,2,16,0]),zt=new Uint8Array([0,0,0,0,0,64,127,64]);Object.assign(ne,{...t,type:2,name:"struct{comptime comptime_float = 800, comptime comptime_float = 500}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:dt},slots:{0:{structure:r,memory:{array:ht},slots:{0:{structure:u,memory:{array:gt},address:1049240}}},1:{structure:r,memory:{array:St},slots:{0:{structure:u,memory:{array:zt},address:1049232}}}}}},slot:56});Object.assign(D,{...t,type:11,name:"*const struct{comptime comptime_float = 800, comptime comptime_float = 500}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:55});const Ot=new Uint8Array([]),Rt=new Uint8Array([136,2,16,0]),qt=new Uint8Array([0,0,0,0,0,0,121,64]),wt=new Uint8Array([128,2,16,0]),At=new Uint8Array([0,0,0,0,0,64,111,64]);Object.assign(me,{...t,type:2,name:"struct{comptime comptime_float = 400, comptime comptime_float = 250}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:Ot},slots:{0:{structure:r,memory:{array:Rt},slots:{0:{structure:u,memory:{array:qt},address:1049224}}},1:{structure:r,memory:{array:wt},slots:{0:{structure:u,memory:{array:At},address:1049216}}}}}},slot:58});Object.assign(T,{...t,type:11,name:"*const struct{comptime comptime_float = 400, comptime comptime_float = 250}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:57});Object.assign(oe,{...t,type:1,name:"[10:0]u8",length:10,byteSize:11,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:61});Object.assign(le,{...t,type:11,name:"*const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:60});Object.assign(H,{...t,type:11,name:"*const *const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:59});const Ut=new Uint8Array([]),jt=new Uint8Array([170,170,170,170]),p=new Uint8Array([]),Vt=new Uint8Array([170,170,170,170]),_t=new Uint8Array([170,170,170,170]),xt=new Uint8Array([172,2,16,0]),Pt=new Uint8Array([208,2,16,0]),It=new Uint8Array([98,97,115,101,32,112,111,105,110,116,0]);Object.assign(ue,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -200, comptime comptime_float = -200} = .{-200, -200}, comptime maxValue: struct{comptime comptime_float = 800, comptime comptime_float = 500} = .{800, 500}, comptime defaultValue: struct{comptime comptime_float = 400, comptime comptime_float = 250} = .{400, 250}, comptime description: *const [10:0]u8 = "base point"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:ae},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:F},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:D},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:T},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:H}],methods:[],template:{memory:{array:Ut},slots:{0:{structure:F,memory:{array:jt},slots:{0:{structure:ie,memory:{array:p},address:-1431655766}}},1:{structure:D,memory:{array:Vt},slots:{0:{structure:ne,memory:{array:p},address:-1431655766}}},2:{structure:T,memory:{array:_t},slots:{0:{structure:me,memory:{array:p},address:-1431655766}}},3:{structure:H,memory:{array:xt},slots:{0:{structure:le,memory:{array:Pt},address:1049260,slots:{0:{structure:oe,memory:{array:It},address:1049296}}}}}}}},slot:42});Object.assign(M,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -200, comptime comptime_float = -200} = .{-200, -200}, comptime maxValue: struct{comptime comptime_float = 800, comptime comptime_float = 500} = .{800, 500}, comptime defaultValue: struct{comptime comptime_float = 400, comptime comptime_float = 250} = .{400, 250}, comptime description: *const [10:0]u8 = "base point"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:41});const kt=new Uint8Array([]),Ct=new Uint8Array([170,170,170,170]),vt=new Uint8Array([170,170,170,170]);Object.assign(ce,{...t,type:2,name:'struct{comptime size: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 200, comptime defaultValue: comptime_float = 50, comptime description: *const [12:0]u8 = "Hexagon Size"} = .{.type = f32, .minValue = 1, .maxValue = 200, .defaultValue = 50, .description = "Hexagon Size"}, comptime base: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -200, comptime comptime_float = -200} = .{-200, -200}, comptime maxValue: struct{comptime comptime_float = 800, comptime comptime_float = 500} = .{800, 500}, comptime defaultValue: struct{comptime comptime_float = 400, comptime comptime_float = 250} = .{400, 250}, comptime description: *const [10:0]u8 = "base point"} = .{.type = @Vector(2, f32), .minValue = .{-200, -200}, .maxValue = .{800, 500}, .defaultValue = .{400, 250}, .description = "base point"}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"size",structure:K},{...e,type:8,isRequired:!1,slot:1,name:"base",structure:M}],methods:[],template:{memory:{array:kt},slots:{0:{structure:K,memory:{array:Ct},slots:{0:{structure:re,memory:{array:p},address:-1431655766}}},1:{structure:M,memory:{array:vt},slots:{0:{structure:ue,memory:{array:p},address:-1431655766}}}}}},slot:15});Object.assign($,{...t,type:11,name:'*struct{comptime size: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 200, comptime defaultValue: comptime_float = 50, comptime description: *const [12:0]u8 = "Hexagon Size"} = .{.type = f32, .minValue = 1, .maxValue = 200, .defaultValue = 50, .description = "Hexagon Size"}, comptime base: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -200, comptime comptime_float = -200} = .{-200, -200}, comptime maxValue: struct{comptime comptime_float = 800, comptime comptime_float = 500} = .{800, 500}, comptime defaultValue: struct{comptime comptime_float = 400, comptime comptime_float = 250} = .{400, 250}, comptime description: *const [10:0]u8 = "base point"} = .{.type = @Vector(2, f32), .minValue = .{-200, -200}, .maxValue = .{800, 500}, .defaultValue = .{400, 250}, .description = "base point"}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:14});Object.assign(B,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:62});const Et=new Uint8Array([]),Kt=new Uint8Array([168,2,16,0]),Ft=new Uint8Array([4,0,0,0]);Object.assign(A,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:B}],methods:[],template:{memory:{array:Et},slots:{0:{structure:B,memory:{array:Kt},slots:{0:{structure:c,memory:{array:Ft},address:1049256}}}}}},slot:44});Object.assign(z,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:43});const Dt=new Uint8Array([]),Tt=new Uint8Array([170,170,170,170]);Object.assign(ye,{...t,type:2,name:"struct{comptime img: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"img",structure:z}],methods:[],template:{memory:{array:Dt},slots:{0:{structure:z,memory:{array:Tt},slots:{0:{structure:A,memory:{array:p},address:-1431655766}}}}}},slot:17});Object.assign(L,{...t,type:11,name:"*struct{comptime img: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:16});const Ht=new Uint8Array([]),Mt=new Uint8Array([170,170,170,170]);Object.assign(pe,{...t,type:2,name:"struct{comptime pxl: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"pxl",structure:z}],methods:[],template:{memory:{array:Ht},slots:{0:{structure:z,memory:{array:Mt},slots:{0:{structure:A,memory:{array:p},address:-1431655766}}}}}},slot:19});Object.assign(G,{...t,type:11,name:"*struct{comptime pxl: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pe}],methods:[],template:null},slot:18});const $t=new Uint8Array([]),Bt=new Uint8Array([]),Lt=new Uint8Array([44,251,15,0]),Gt=new Uint8Array([198,24,16,0]),Jt=new Uint8Array([72,101,120,32,99,101,108,108,115,32,239,191,189,32,110,111,116,32,106,117,115,116,32,112,105,120,101,108,115,0]),Nt=new Uint8Array([108,251,15,0]),Qt=new Uint8Array([183,24,16,0]),Wt=new Uint8Array([80,101,116,114,105,32,76,101,115,107,105,110,101,110,0]),Xt=new Uint8Array([172,251,15,0]),Yt=new Uint8Array([1,0,0,0]),Zt=new Uint8Array([4,252,15,0]),es=new Uint8Array([166,24,16,0]),ts=new Uint8Array([72,101,120,97,103,111,110,97,108,32,84,105,108,105,110,103,0]),ss=new Uint8Array([170,170,170,170]),rs=new Uint8Array([170,170,170,170]),as=new Uint8Array([170,170,170,170]);Object.assign(Re,{...t,type:2,name:"hex-cells.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:$t}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:k},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:C},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:d},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:v},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:$},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:L},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:G}],methods:[],template:{memory:{array:Bt},slots:{0:{structure:k,memory:{array:Lt},slots:{0:{structure:W,memory:{array:Gt},slots:{0:{structure:Q,memory:{array:Jt},address:1054918}}}}},1:{structure:C,memory:{array:Nt},slots:{0:{structure:Y,memory:{array:Qt},slots:{0:{structure:X,memory:{array:Wt},address:1054903}}}}},2:{structure:d,memory:{array:Xt},slots:{0:{structure:c,memory:{array:Yt}}}},3:{structure:v,memory:{array:Zt},slots:{0:{structure:ee,memory:{array:es},slots:{0:{structure:Z,memory:{array:ts},address:1054886}}}}},4:{structure:$,memory:{array:ss},slots:{0:{structure:ce,memory:{array:p},address:-1431655766}}},5:{structure:L,memory:{array:rs},slots:{0:{structure:ye,memory:{array:p},address:-1431655766}}},6:{structure:G,memory:{array:as},slots:{0:{structure:pe,memory:{array:p},address:-1431655766}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:24});Object.assign(be,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(fe,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:be}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const is=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(de,{...t,type:9,name:"hex-cells.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:c},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:c}],methods:[],template:{memory:{array:is}}},slot:26});Object.assign(q,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:q}],methods:[],template:null},slot:27});Object.assign(w,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:28});Object.assign(he,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:45});const ns=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ms=new Uint8Array([]),os=new Uint8Array([8,250,15,0]),ls=new Uint8Array([4,0,0,0]);Object.assign(J,{...t,type:2,name:"hex-cells.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:fe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:de},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:q},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:w}],methods:[],template:{memory:{array:ns}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:he},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:ms},slots:{0:{structure:d,memory:{array:os},slots:{0:{structure:c,memory:{array:ls}}}}}}},slot:21});const us=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),cs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ys=new Uint8Array([0,0,0,0,0,0,0,0]),xe=new Uint8Array([]);Object.assign(U,{...t,type:2,name:"hex-cells.KernelInput(u8,hex-cells.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"img",structure:J}],methods:[],template:{memory:{array:us},slots:{0:{structure:J,memory:{array:cs},slots:{0:{structure:fe,memory:{array:ys},slots:{0:{structure:be,memory:{array:xe}}}}}}}}},slot:20});Object.assign(ge,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(Se,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ge}],methods:[],template:null},slot:31});const ps=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),bs=new Uint8Array([]),fs=new Uint8Array([8,250,15,0]),ds=new Uint8Array([4,0,0,0]);Object.assign(N,{...t,type:2,name:"hex-cells.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Se},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:de},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:q},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:w}],methods:[],template:{memory:{array:ps}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:he},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:bs},slots:{0:{structure:d,memory:{array:fs},slots:{0:{structure:c,memory:{array:ds}}}}}}},slot:30});const hs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),gs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ss=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(j,{...t,type:2,name:"hex-cells.KernelOutput(u8,hex-cells.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"pxl",structure:N}],methods:[],template:{memory:{array:hs},slots:{0:{structure:N,memory:{array:gs},slots:{0:{structure:Se,memory:{array:Ss},slots:{0:{structure:ge,memory:{array:xe}}}}}}}}},slot:29});const zs=new Uint8Array([0,0,200,67,0,0,122,67,0,0,72,66,0,0,0,0]);Object.assign(V,{...t,type:2,name:"hex-cells.KernelParameters(hex-cells.kernel)",length:1,byteSize:16,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:0,name:"size",structure:h},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:1,name:"base",structure:ae}],methods:[],template:{memory:{array:zs}}},slot:32});Object.assign(qe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(hex-cells.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:46});Object.assign(we,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(hex-cells.createOutput)).Fn.return_type.?).ErrorUnion.error_set!hex-cells.KernelOutput(u8,hex-cells.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:qe}],methods:[],template:null},slot:37});Object.assign(Ae,{...t,type:3,name:"createOutput",length:1,byteSize:80,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:192,bitSize:192,byteSize:24,slot:2,name:"2",structure:U},{...e,type:6,bitOffset:0,bitSize:128,byteSize:16,slot:3,name:"3",structure:V},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:we}],methods:[],template:null},slot:35});Object.assign(Ue,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(hex-cells.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:47});Object.assign(je,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(hex-cells.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!hex-cells.KernelOutput(u8,hex-cells.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Ue}],methods:[],template:null},slot:38});Object.assign(Ve,{...t,type:3,name:"createPartialOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:4,name:"4",structure:U},{...e,type:6,bitOffset:0,bitSize:128,byteSize:16,slot:5,name:"5",structure:V},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:je}],methods:[],template:null},slot:36});const Os={argStruct:Ae,thunk:1,name:"createOutput"},Rs={argStruct:Ve,thunk:4,name:"createPartialOutput"};Object.assign(_e,{...t,type:2,name:"hex-cells",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:xe}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:Re},{...e,type:7,isRequired:!1,name:"Input",structure:U},{...e,type:7,isRequired:!1,name:"Output",structure:j},{...e,type:7,isRequired:!1,name:"Parameters",structure:V}],methods:[Os,Rs],template:null},slot:0});const qs=[b,Q,W,k,X,Y,C,c,d,Z,ee,v,h,u,r,te,se,E,re,K,ae,ie,F,ne,D,me,T,oe,le,H,ue,M,ce,$,B,A,z,ye,L,pe,G,Re,O,be,fe,l,de,q,w,he,J,U,ge,Se,N,j,V,qe,we,Ae,Ue,je,Ve,_e],ws=tt(qs),As=_e.constructor,Us=(async()=>{const n=new URL("hex-cells-1a6c922c.wasm",import.meta.url).href;return fetch(n)})();st(Us,{...ws,writeBack:!0});const{createOutput:Cs,createPartialOutput:js,kernel:Oe,Input:Vs,Output:vs,Parameters:Es}=As;function _s(n,o,a,s,i={},g={}){if(Array.isArray(i)){const f=i;i={};for(const[y,S]of Object.keys(Oe.inputImages).entries())i[S]=f[y]}const _=new Vs(void 0),x=Object.keys(Oe.inputImages),m=[];let R;for(const f of x){let y=i[f];if(y||(x.length===1&&["data","width","height"].every(S=>!!i[S])?y=i:m.push(f)),_[f]=y,R){if(y.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=y.colorSpace}if(m.length>0)throw new Error(`Missing input image${m.length>1?"s":""}: ${m.join(", ")}`);const ze=js(n,o,a,s,_,g),Pe=f=>{const y=Object.keys(f),S={};for(const Ie of y){const{data:{typedArray:P},width:ke,height:Ee}=f[Ie];let I;if(typeof ImageData=="function"){const Ke=new Uint8ClampedArray(P.buffer,P.byteOffset,P.byteLength);I=new ImageData(Ke,ke,s,{colorSpace:R})}else I={data:P,width:ke,height:Ee};if(y.length===1)return I;S[Ie]=I}return S};return ze[Symbol.toStringTag]==="Promise"?ze.then(Pe):Pe(ze)}function xs(){const n={};for(let[o,a]of Object.entries(Oe)){if(o==="parameters"){const s={};for(const[i,g]of Object.entries(a)){const _=s[i]={};for(let[x,m]of Object.entries(g))typeof m=="object"?"string"in m?m=m.string:m=ve(m):typeof m=="function"&&(m=Ps(m.name)),_[x]=m}a=s}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());n[o]=a}return n}function ve(n){const o=[];for(let[a,s]of Object.entries(n))typeof s=="object"&&(s=ve(s)),o[a]=s;return o}function Ps(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,a,...s]=n.data;Is(o,s).then(([i,g])=>{postMessage([o,a,i],{transfer:g})}).catch(i=>{postMessage(["error",a,i])})};async function Is(n,o){switch(n){case"getKernelInfo":return[xs(...o)];case"createPartialImageData":const s=await _s(...o),i=[];if("data"in s&&"width"in s&&"height"in s)i.push(s.data.buffer);else for(const g of Object.entries(s))i.push(s.data.buffer);return[s,i];default:throw new Error(`Unknown function: ${n}`)}}
