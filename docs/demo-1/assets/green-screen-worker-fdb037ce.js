import{u as ze,a as Oe,b as we,c as Re,d as qe,e as je,f as Ae,g as Ue,h as Pe,i as ke,j as Ie,k as Ve,l as Ce,m as ve,o as Ee,n as xe,p as Ke,q as De}from"./index-422d9c98.js";ze();Oe();we();Re();qe();je();Ae();Ue();Pe();ke();Ie();Ve();Ce();ve();Ee();xe();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},f={},T={},$={},C={},B={},L={},v={},m={},c={},G={},H={},E={},h={},p={},b={},J={},x={},N={},K={},q={},z={},Q={},D={},W={},F={},ae={},O={},X={},Y={},o={},Z={},R={},ee={},M={},j={},te={},se={},_={},A={},U={},ie={},ue={},oe={},le={},me={},ce={},ye={};Object.assign(f,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:5});Object.assign(T,{...t,type:1,name:"[6:0]u8",length:6,byteSize:7,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:4});Object.assign($,{...t,type:11,name:"*const [6:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[],template:null},slot:3});Object.assign(C,{...t,type:11,name:"*const *const [6:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:2});Object.assign(B,{...t,type:1,name:"[11:0]u8",length:11,byteSize:12,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:8});Object.assign(L,{...t,type:11,name:"*const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:7});Object.assign(v,{...t,type:11,name:"*const *const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:6});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:10});Object.assign(c,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:9});Object.assign(G,{...t,type:1,name:"[27:0]u8",length:27,byteSize:28,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:13});Object.assign(H,{...t,type:11,name:"*const [27:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:12});Object.assign(E,{...t,type:11,name:"*const *const [27:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:11});Object.assign(h,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:32});Object.assign(p,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:p}],methods:[],template:null},slot:45});Object.assign(b,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:44});const Fe=new Uint8Array([]),Me=new Uint8Array([24,253,15,0]),_e=new Uint8Array([0,0,0,0,0,0,0,0]),Te=new Uint8Array([64,253,15,0]),$e=new Uint8Array([0,0,0,0,0,0,89,64]),Be=new Uint8Array([104,253,15,0]),Le=new Uint8Array([0,0,0,0,0,0,16,64]);Object.assign(J,{...t,type:2,name:"Struct0008",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:b},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:b}],methods:[],template:{memory:{array:Fe},slots:{0:{structure:b,memory:{array:Me},slots:{0:{structure:p,memory:{array:_e}}}},1:{structure:b,memory:{array:Te},slots:{0:{structure:p,memory:{array:$e}}}},2:{structure:b,memory:{array:Be},slots:{0:{structure:p,memory:{array:Le}}}}}}},slot:38});Object.assign(x,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:37});const Ge=new Uint8Array([]),He=new Uint8Array([170,170,170,170]),S=new Uint8Array([]);Object.assign(N,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"strength",structure:x}],methods:[],template:{memory:{array:Ge},slots:{0:{structure:x,memory:{array:He},slots:{0:{structure:J,memory:{array:S},address:-1431655766}}}}}},slot:15});Object.assign(K,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:14});const Je=new Uint8Array([]),Ne=new Uint8Array([160,249,15,0]),Qe=new Uint8Array([4,0,0,0]);Object.assign(q,{...t,type:2,name:"Struct0009",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:Je},slots:{0:{structure:c,memory:{array:Ne},slots:{0:{structure:m,memory:{array:Qe}}}}}}},slot:40});Object.assign(z,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:39});const We=new Uint8Array([]),Xe=new Uint8Array([170,170,170,170]);Object.assign(Q,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:z}],methods:[],template:{memory:{array:We},slots:{0:{structure:z,memory:{array:Xe},slots:{0:{structure:q,memory:{array:S},address:-1431655766}}}}}},slot:17});Object.assign(D,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:16});const Ye=new Uint8Array([]),Ze=new Uint8Array([170,170,170,170]);Object.assign(W,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:z}],methods:[],template:{memory:{array:Ye},slots:{0:{structure:z,memory:{array:Ze},slots:{0:{structure:q,memory:{array:S},address:-1431655766}}}}}},slot:19});Object.assign(F,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:18});const et=new Uint8Array([]),tt=new Uint8Array([]),st=new Uint8Array([212,249,15,0]),rt=new Uint8Array([179,8,16,0]),nt=new Uint8Array([112,98,50,122,105,103,0]),at=new Uint8Array([20,250,15,0]),it=new Uint8Array([167,8,16,0]),ut=new Uint8Array([67,104,117,110,103,32,76,101,111,110,103,0]),ot=new Uint8Array([84,250,15,0]),lt=new Uint8Array([1,0,0,0]),mt=new Uint8Array([172,250,15,0]),ct=new Uint8Array([139,8,16,0]),yt=new Uint8Array([82,101,109,111,118,97,108,32,111,102,32,103,114,101,101,110,32,98,97,99,107,103,114,111,117,110,100,0]),bt=new Uint8Array([170,170,170,170]),pt=new Uint8Array([170,170,170,170]),ft=new Uint8Array([170,170,170,170]);Object.assign(ae,{...t,type:2,name:"green-screen.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:et}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:C},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:v},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:c},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:E},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:K},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:D},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:F}],methods:[],template:{memory:{array:tt},slots:{0:{structure:C,memory:{array:st},slots:{0:{structure:$,memory:{array:rt},slots:{0:{structure:T,memory:{array:nt},address:1050803}}}}},1:{structure:v,memory:{array:at},slots:{0:{structure:L,memory:{array:it},slots:{0:{structure:B,memory:{array:ut},address:1050791}}}}},2:{structure:c,memory:{array:ot},slots:{0:{structure:m,memory:{array:lt}}}},3:{structure:E,memory:{array:mt},slots:{0:{structure:H,memory:{array:ct},slots:{0:{structure:G,memory:{array:yt},address:1050763}}}}},4:{structure:K,memory:{array:bt},slots:{0:{structure:N,memory:{array:S},address:-1431655766}}},5:{structure:D,memory:{array:pt},slots:{0:{structure:Q,memory:{array:S},address:-1431655766}}},6:{structure:F,memory:{array:ft},slots:{0:{structure:W,memory:{array:S},address:-1431655766}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:24});Object.assign(X,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(Y,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:X}],methods:[],template:null},slot:22});Object.assign(o,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:o}],methods:[],template:null},slot:25});const gt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Z,{...t,type:9,name:"green-screen.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:gt}}},slot:26});Object.assign(R,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:27});Object.assign(ee,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:41});const dt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),St=new Uint8Array([]),ht=new Uint8Array([72,253,15,0]),zt=new Uint8Array([4,0,0,0]);Object.assign(M,{...t,type:2,name:"green-screen.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Y},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:o},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:o},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Z},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:R}],methods:[],template:{memory:{array:dt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:ee},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:St},slots:{0:{structure:c,memory:{array:ht},slots:{0:{structure:m,memory:{array:zt}}}}}}},slot:21});const Ot=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),wt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Rt=new Uint8Array([0,0,0,0,0,0,0,0]),be=new Uint8Array([]);Object.assign(j,{...t,type:2,name:"green-screen.KernelInput(u8,green-screen.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:M}],methods:[],template:{memory:{array:Ot},slots:{0:{structure:M,memory:{array:wt},slots:{0:{structure:Y,memory:{array:Rt},slots:{0:{structure:X,memory:{array:be}}}}}}}}},slot:20});Object.assign(te,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(se,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:te}],methods:[],template:null},slot:30});const qt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),jt=new Uint8Array([]),At=new Uint8Array([72,253,15,0]),Ut=new Uint8Array([4,0,0,0]);Object.assign(_,{...t,type:2,name:"green-screen.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:se},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:o},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:o},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Z},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:R}],methods:[],template:{memory:{array:qt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:ee},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:jt},slots:{0:{structure:c,memory:{array:At},slots:{0:{structure:m,memory:{array:Ut}}}}}}},slot:29});const Pt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),kt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),It=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(A,{...t,type:2,name:"green-screen.KernelOutput(u8,green-screen.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:_}],methods:[],template:{memory:{array:Pt},slots:{0:{structure:_,memory:{array:kt},slots:{0:{structure:se,memory:{array:It},slots:{0:{structure:te,memory:{array:be}}}}}}}}},slot:28});const Vt=new Uint8Array([0,0,128,64]);Object.assign(U,{...t,type:2,name:"green-screen.KernelParameters(green-screen.kernel)",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"strength",structure:h}],methods:[],template:{memory:{array:Vt}}},slot:31});Object.assign(ie,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(green-screen.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:42});Object.assign(ue,{...t,type:7,name:"ErrorSet0000!green-screen.KernelOutput(u8,green-screen.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:A},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ie}],methods:[],template:null},slot:35});Object.assign(oe,{...t,type:3,name:"createOutput",length:1,byteSize:64,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:o},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:o},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:j},{...e,type:6,bitOffset:256,bitSize:32,byteSize:4,slot:3,name:"3",structure:U},{...e,type:6,bitOffset:288,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ue}],methods:[],template:null},slot:33});Object.assign(le,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(green-screen.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:43});Object.assign(me,{...t,type:7,name:"ErrorSet0001!green-screen.KernelOutput(u8,green-screen.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:A},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:le}],methods:[],template:null},slot:36});Object.assign(ce,{...t,type:3,name:"createPartialOutput",length:1,byteSize:72,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:o},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:o},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:o},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:o},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:j},{...e,type:6,bitOffset:320,bitSize:32,byteSize:4,slot:5,name:"5",structure:U},{...e,type:6,bitOffset:352,bitSize:224,byteSize:28,slot:6,name:"retval",structure:me}],methods:[],template:null},slot:34});const Ct={argStruct:oe,thunk:7,name:"createOutput"},vt={argStruct:ce,thunk:2,name:"createPartialOutput"};Object.assign(ye,{...t,type:2,name:"green-screen",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:be}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ae},{...e,type:7,isRequired:!1,name:"Input",structure:j},{...e,type:7,isRequired:!1,name:"Output",structure:A},{...e,type:7,isRequired:!1,name:"Parameters",structure:U}],methods:[Ct,vt],template:null},slot:0});const Et=[f,T,$,C,B,L,v,m,c,G,H,E,h,p,b,J,x,N,K,q,z,Q,D,W,F,ae,O,X,Y,o,Z,R,ee,M,j,te,se,_,A,U,ie,ue,oe,le,me,ce,ye],xt=Ke(Et),Kt=ye.constructor,Dt=(async()=>{const a=new URL("green-screen-e629b98d.wasm",import.meta.url).href;return fetch(a)})();De(Dt,{...xt,writeBack:!0});const{createOutput:Gt,createPartialOutput:Ft,kernel:ne,Input:Mt,Output:Ht,Parameters:Jt}=Kt;function _t(a,u,r,s,n={},g={}){if(Array.isArray(n)){const y=n;n={};for(const[l,d]of Object.keys(ne.inputImages).entries())n[d]=y[l]}const P=new Mt(void 0),k=Object.keys(ne.inputImages),i=[];let w;for(const y of k){let l=n[y];if(l||(k.length===1&&["data","width","height"].every(d=>!!n[d])?l=n:i.push(y)),P[y]=l,w){if(l.colorSpace!==w)throw new Error(`Input images must all use the same color space: ${w}`)}else w=l.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const re=Ft(a,u,r,s,P,g),pe=y=>{const l=Object.keys(y),d={};for(const fe of l){const{data:{typedArray:I},width:ge,height:Se}=y[fe];let V;if(typeof ImageData=="function"){const he=new Uint8ClampedArray(I.buffer,I.byteOffset,I.byteLength);V=new ImageData(he,ge,s,{colorSpace:w})}else V={data:I,width:ge,height:Se};if(l.length===1)return V;d[fe]=V}return d};return re[Symbol.toStringTag]==="Promise"?re.then(pe):pe(re)}function Tt(){const a={};for(let[u,r]of Object.entries(ne)){if(u==="parameters"){const s={};for(const[n,g]of Object.entries(r)){const P=s[n]={};for(let[k,i]of Object.entries(g))typeof i=="object"?"string"in i?i=i.string:i=de(i):typeof i=="function"&&(i=$t(i.name)),P[k]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());a[u]=r}return a}function de(a){const u=[];for(let[r,s]of Object.entries(a))typeof s=="object"&&(s=de(s)),u[r]=s;return u}function $t(a){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[a]}onmessage=a=>{const[u,r,...s]=a.data;Bt(u,s).then(([n,g])=>{postMessage([u,r,n],{transfer:g})}).catch(n=>{postMessage(["error",r,n])})};async function Bt(a,u){switch(a){case"getKernelInfo":return[Tt(...u)];case"createPartialImageData":const s=await _t(...u),n=[];if("data"in s&&"width"in s&&"height"in s)n.push(s.data.buffer);else for(const g of Object.entries(s))n.push(s.data.buffer);return[s,n];default:throw new Error(`Unknown function: ${a}`)}}
