import{u as as,a as is,b as os,c as cs,d as us,e as ms,f as ys,g as bs,h as ls,i as gs,j as ps,k as fs,l as Os,m as Ss,n as zs,o as js,p as hs,q as ds}from"./index-33238b17.js";as();fs();Os();is();os();Ss();zs();js();hs();cs();us();ms();ys();ds();bs();ls();gs();const e={constructor:null,typedArray:null,type:0,name:void 0,byteSize:0,align:0,isConst:!1,isTuple:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null}},t={type:0,isRequired:!1},s={},O={},$={},L={},B={},G={},b={},S={},H={},J={},a={},p={},U={},f={},k={},d={},N={},Q={},W={},X={},Y={},P={},Z={},tt={},bt={},I={},et={},v={},c={},g={},q={},lt={},st={},E={},rt={},x={},nt={},K={},C={},w={},gt={},pt={},A={},ft={},Ot={},St={},Lt={},at={},Bt={},it={},Gt={},Ht={},M={},Jt={},T={},Nt={},Qt={},zt={},ot={},jt={},ht={},dt={},Wt={},wt={},Xt={},At={},Yt={},Zt={},Ut={},Pt={},Vt={},Rt={},te={},kt={},ee={},qt={},It={},vt={},se={},ct={},re={},ne={},Et={},ae={},xt={},ie={},oe={},ce={},ue={},me={},ye={},be={},le={},ge={},pe={},fe={},Oe={},Se={},ze={},je={},he={},de={},Kt={},we={},Ae={},Ct={},Ue={},Mt={},Pe={},Ve={},Re={},ke={},qe={},Ie={},ve={},Tt={},Ee={},xe={},Ke={},Ce={},Me={},Te={},De={},Fe={},_e={},$e={},Le={},Be={},Ge={},He={},Je={},Ne={},Qe={},We={},Xe={},Ye={},Ze={},ts={},ws=new Uint8Array,As=new Uint8Array([0,0,0,0,0,0,0,0]),Us=new Uint8Array,Ps=new Uint8Array([0,0,0,0,0,0,0,0]),Vs=new Uint8Array,Rs=new Uint8Array([0,0,0,0,0,0,128,64]),ks=new Uint8Array,qs=new Uint8Array([0,0,0,0,0,0,128,64]),Is=new Uint8Array,vs=new Uint8Array,Es=new Uint8Array,xs=new Uint8Array,Ks=new Uint8Array,Cs=new Uint8Array([0,0,0,0,0,0,112,64]),Ms=new Uint8Array,Ts=new Uint8Array([0,0,0,0,0,0,112,64]),Ds=new Uint8Array,Fs=new Uint8Array,_s=new Uint8Array,$s=new Uint8Array,Ls=new Uint8Array,Bs=new Uint8Array,Gs=new Uint8Array,Hs=new Uint8Array,Js=new Uint8Array,Ns=new Uint8Array([4]),Qs=new Uint8Array,Ws=new Uint8Array,Xs=new Uint8Array([86,16,0,1]),Ys=new Uint8Array([84,117,110,110,101,108,32,50,0]),Zs=new Uint8Array([106,16,0,1]),tr=new Uint8Array([77,114,46,100,111,111,98,0]),er=new Uint8Array,sr=new Uint8Array([1]),rr=new Uint8Array([131,16,0,1]),nr=new Uint8Array([84,117,110,110,101,108,32,101,102,102,101,99,116,32,50,0]),ar=new Uint8Array,ir=new Uint8Array,or=new Uint8Array,cr=new Uint8Array([0]),ur=new Uint8Array([1]),es=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),mr=new Uint8Array,yr=new Uint8Array,br=new Uint8Array,lr=new Uint8Array,gr=new Uint8Array([4]),Dt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ss=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),pr=new Uint8Array,fr=new Uint8Array,Or=new Uint8Array,Sr=new Uint8Array,zr=new Uint8Array([4]),Ft=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),jr=new Uint8Array([0,0,0,68,0,0,0,68,0,0,128,67,0,0,128,67,0,0,0,0,0,0,0,0]),hr=new Uint8Array([27,0]),dr=new Uint8Array([27,0]),wr=new Uint8Array,Ar=new Uint8Array,Ur=new Uint8Array,Pr=new Uint8Array;Object.assign(Lt,{slots:{0:at,1:it}});Object.assign(at,{structure:a,memory:{array:ws},const:!0,slots:{0:Bt}});Object.assign(Bt,{structure:p,memory:{array:As},const:!0});Object.assign(it,{structure:a,memory:{array:Us},const:!0,slots:{0:Gt}});Object.assign(Gt,{structure:p,memory:{array:Ps},const:!0});Object.assign(Ht,{slots:{0:M,1:T}});Object.assign(M,{structure:a,memory:{array:Vs},const:!0,slots:{0:Jt}});Object.assign(Jt,{structure:p,memory:{array:Rs},const:!0});Object.assign(T,{structure:a,memory:{array:ks},const:!0,slots:{0:Nt}});Object.assign(Nt,{structure:p,memory:{array:qs},const:!0});Object.assign(Qt,{slots:{0:zt,1:jt,2:ht,3:dt}});Object.assign(zt,{structure:s,memory:{array:Is},const:!0,slots:{0:ot}});Object.assign(ot,{structure:d});Object.assign(jt,{structure:U,memory:{array:vs},const:!0,slots:{0:at,1:it}});Object.assign(ht,{structure:f,memory:{array:Es},const:!0,slots:{0:M,1:T}});Object.assign(dt,{structure:f,memory:{array:xs},const:!0,slots:{0:M,1:T}});Object.assign(Wt,{slots:{0:wt,1:At}});Object.assign(wt,{structure:a,memory:{array:Ks},const:!0,slots:{0:Xt}});Object.assign(Xt,{structure:p,memory:{array:Cs},const:!0});Object.assign(At,{structure:a,memory:{array:Ms},const:!0,slots:{0:Yt}});Object.assign(Yt,{structure:p,memory:{array:Ts},const:!0});Object.assign(Zt,{slots:{0:Ut,1:Pt,2:Vt,3:Rt}});Object.assign(Ut,{structure:s,memory:{array:Ds},const:!0,slots:{0:ot}});Object.assign(Pt,{structure:U,memory:{array:Fs},const:!0,slots:{0:at,1:it}});Object.assign(Vt,{structure:f,memory:{array:_s},const:!0,slots:{0:M,1:T}});Object.assign(Rt,{structure:Q,memory:{array:$s},const:!0,slots:{0:wt,1:At}});Object.assign(te,{slots:{0:kt}});Object.assign(kt,{structure:s,memory:{array:Ls},const:!0,slots:{0:ot}});Object.assign(ee,{slots:{0:qt,1:It,2:vt}});Object.assign(qt,{structure:N,memory:{array:Bs},const:!0,slots:{0:zt,1:jt,2:ht,3:dt}});Object.assign(It,{structure:W,memory:{array:Gs},const:!0,slots:{0:Ut,1:Pt,2:Vt,3:Rt}});Object.assign(vt,{structure:X,memory:{array:Hs},const:!0,slots:{0:kt}});Object.assign(se,{slots:{0:ct}});Object.assign(ct,{structure:b,memory:{array:Js},const:!0,slots:{0:re}});Object.assign(re,{structure:S,memory:{array:Ns},const:!0});Object.assign(ne,{slots:{0:Et}});Object.assign(Et,{structure:P,memory:{array:Qs},const:!0,slots:{0:ct}});Object.assign(ae,{slots:{0:xt}});Object.assign(xt,{structure:P,memory:{array:Ws},const:!0,slots:{0:ct}});Object.assign(ie,{slots:{0:oe,1:ue,2:ye,3:le,4:pe,5:fe,6:Oe}});Object.assign(oe,{structure:L,memory:{array:Xs},const:!0,slots:{0:ce}});Object.assign(ce,{structure:$,memory:{array:Ys},reloc:16781398});Object.assign(ue,{structure:G,memory:{array:Zs},const:!0,slots:{0:me}});Object.assign(me,{structure:B,memory:{array:tr},reloc:16781418});Object.assign(ye,{structure:b,memory:{array:er},const:!0,slots:{0:be}});Object.assign(be,{structure:S,memory:{array:sr},const:!0});Object.assign(le,{structure:J,memory:{array:rr},const:!0,slots:{0:ge}});Object.assign(ge,{structure:H,memory:{array:nr},reloc:16781443});Object.assign(pe,{structure:Y,memory:{array:ar},const:!0,slots:{0:qt,1:It,2:vt}});Object.assign(fe,{structure:Z,memory:{array:ir},const:!0,slots:{0:Et}});Object.assign(Oe,{structure:tt,memory:{array:or},const:!0,slots:{0:xt}});Object.assign(Se,{slots:{0:ze,1:je}});Object.assign(ze,{structure:g,memory:{array:cr},const:!0});Object.assign(je,{structure:g,memory:{array:ur},const:!0});Object.assign(he,{memory:{array:es},slots:{0:de}});Object.assign(de,{structure:v,memory:{array:es,offset:0,length:8},slots:{0:Kt}});Object.assign(Kt,{structure:et,memory:{array:mr},reloc:0});Object.assign(we,{slots:{0:Ae,1:Ue,2:Pe}});Object.assign(Ae,{structure:s,memory:{array:yr},const:!0,slots:{0:Ct}});Object.assign(Ct,{structure:I});Object.assign(Ue,{structure:s,memory:{array:br},const:!0,slots:{0:Mt}});Object.assign(Mt,{structure:lt});Object.assign(Pe,{structure:b,memory:{array:lr},const:!0,slots:{0:Ve}});Object.assign(Ve,{structure:S,memory:{array:gr},const:!0});Object.assign(Re,{memory:{array:Dt},slots:{0:ke}});Object.assign(ke,{structure:st,memory:{array:Dt},slots:{0:qe}});Object.assign(qe,{structure:v,memory:{array:Dt,offset:0,length:8},slots:{0:Kt}});Object.assign(Ie,{memory:{array:ss},slots:{0:ve}});Object.assign(ve,{structure:x,memory:{array:ss,offset:0,length:8},slots:{0:Tt}});Object.assign(Tt,{structure:rt,memory:{array:pr},reloc:0});Object.assign(Ee,{slots:{0:xe,1:Ke,2:Ce}});Object.assign(xe,{structure:s,memory:{array:fr},const:!0,slots:{0:Ct}});Object.assign(Ke,{structure:s,memory:{array:Or},const:!0,slots:{0:Mt}});Object.assign(Ce,{structure:b,memory:{array:Sr},const:!0,slots:{0:Me}});Object.assign(Me,{structure:S,memory:{array:zr},const:!0});Object.assign(Te,{memory:{array:Ft},slots:{0:De}});Object.assign(De,{structure:nt,memory:{array:Ft},slots:{0:Fe}});Object.assign(Fe,{structure:x,memory:{array:Ft,offset:0,length:8},slots:{0:Tt}});Object.assign(_e,{memory:{array:jr}});Object.assign($e,{slots:{0:Le}});Object.assign(Le,{structure:w,memory:{array:hr},const:!0});Object.assign(Be,{slots:{0:Ge}});Object.assign(Ge,{structure:A,memory:{array:dr},const:!0});Object.assign(He,{slots:{0:Je,1:Qe,2:Xe,3:Ze}});Object.assign(Je,{structure:s,memory:{array:wr},const:!0,slots:{0:Ne}});Object.assign(Ne,{structure:bt});Object.assign(Qe,{structure:s,memory:{array:Ar},const:!0,slots:{0:We}});Object.assign(We,{structure:E});Object.assign(Xe,{structure:s,memory:{array:Ur},const:!0,slots:{0:Ye}});Object.assign(Ye,{structure:K});Object.assign(Ze,{structure:s,memory:{array:Pr},const:!0,slots:{0:ts}});Object.assign(ts,{structure:C});const Vr={argStruct:pt,thunkId:2,name:"createOutput"},Rr={argStruct:Ot,thunkId:3,name:"createPartialOutput"};Object.assign(s,{...e,name:"type",align:1,instance:{members:[{...t,type:6,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:s}],methods:[]}});Object.assign(O,{...e,name:"u8",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign($,{...e,type:1,name:"[8:0]u8",length:8,byteSize:9,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(L,{...e,type:13,name:"*const [8:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[]}});Object.assign(B,{...e,type:1,name:"[7:0]u8",length:7,byteSize:8,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(G,{...e,type:13,name:"*const [7:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[]}});Object.assign(b,{...e,name:"comptime_int",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:b}],methods:[]}});Object.assign(S,{...e,name:"i8",byteSize:1,align:1,instance:{members:[{...t,type:2,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(H,{...e,type:1,name:"[15:0]u8",length:15,byteSize:16,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(J,{...e,type:13,name:"*const [15:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[]}});Object.assign(a,{...e,name:"comptime_float",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:a}],methods:[]}});Object.assign(p,{...e,name:"f64",byteSize:8,align:8,instance:{members:[{...t,type:4,bitOffset:0,bitSize:64,byteSize:8,structure:p}],methods:[]}});Object.assign(U,{...e,type:2,name:"Struct738220547",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:a},{...t,type:7,slot:1,name:"1",structure:a}],methods:[],template:Lt}});Object.assign(f,{...e,type:2,name:"Struct2210712367",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:a},{...t,type:7,slot:1,name:"1",structure:a}],methods:[],template:Ht}});Object.assign(k,{...e,name:"f32",byteSize:4,align:4,instance:{members:[{...t,type:4,bitOffset:0,bitSize:32,byteSize:4,structure:k}],methods:[]}});Object.assign(d,{...e,type:15,name:"@Vector(2, f32)",length:2,byteSize:8,align:8,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:k}],methods:[]}});Object.assign(N,{...e,type:2,name:"Struct42009499",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:U},{...t,type:7,slot:2,name:"maxValue",structure:f},{...t,type:7,slot:3,name:"defaultValue",structure:f}],methods:[],template:Qt}});Object.assign(Q,{...e,type:2,name:"Struct1632360224",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:a},{...t,type:7,slot:1,name:"1",structure:a}],methods:[],template:Wt}});Object.assign(W,{...e,type:2,name:"Struct738476154",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:U},{...t,type:7,slot:2,name:"maxValue",structure:f},{...t,type:7,slot:3,name:"defaultValue",structure:Q}],methods:[],template:Zt}});Object.assign(X,{...e,type:2,name:"Struct1916818985",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s}],methods:[],template:te}});Object.assign(Y,{...e,type:2,name:"Struct1432184459",align:1,instance:{members:[{...t,type:7,slot:0,name:"imgSize",structure:N},{...t,type:7,slot:1,name:"center",structure:W},{...t,type:7,slot:2,name:"offset",structure:X}],methods:[],template:ee}});Object.assign(P,{...e,type:2,name:"Struct3832472641",align:1,instance:{members:[{...t,type:7,slot:0,name:"channels",structure:b}],methods:[],template:se}});Object.assign(Z,{...e,type:2,name:"Struct2242867897",align:1,instance:{members:[{...t,type:7,slot:0,name:"src",structure:P}],methods:[],template:ne}});Object.assign(tt,{...e,type:2,name:"Struct172100005",align:1,instance:{members:[{...t,type:7,slot:0,name:"dst",structure:P}],methods:[],template:ae}});Object.assign(bt,{...e,type:2,name:"tunnel2.kernel",align:1,static:{members:[{...t,type:7,slot:0,name:"namespace",structure:L},{...t,type:7,slot:1,name:"vendor",structure:G},{...t,type:7,slot:2,name:"version",structure:b},{...t,type:7,slot:3,name:"description",structure:J},{...t,type:7,slot:4,name:"parameters",structure:Y},{...t,type:7,slot:5,name:"inputImages",structure:Z},{...t,type:7,slot:6,name:"outputImages",structure:tt}],methods:[],template:ie}});Object.assign(I,{...e,type:15,name:"@Vector(4, u8)",length:4,byteSize:4,align:4,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(et,{...e,type:14,name:"[_]const @Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:I}],methods:[]}});Object.assign(v,{...e,type:13,name:"[]const @Vector(4, u8)",byteSize:8,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:et}],methods:[]}});Object.assign(c,{...e,name:"u32",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[]}});Object.assign(g,{...e,type:11,name:"tunnel2.ColorSpace",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:1,byteSize:1,structure:g}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"srgb",structure:g},{...t,type:7,slot:1,name:"display-p3",structure:g}],methods:[],template:Se}});Object.assign(q,{...e,name:"usize",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:q}],methods:[]}});Object.assign(lt,{...e,type:15,name:"@Vector(4, f32)",length:4,byteSize:16,align:16,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:k}],methods:[]}});Object.assign(st,{...e,type:2,name:"tunnel2.Image(u8,4,false)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:v},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:g},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:q}],methods:[],template:he},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:b}],methods:[],template:we}});Object.assign(E,{...e,type:2,name:"tunnel2.KernelInput(u8,tunnel2.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:st}],methods:[],template:Re}});Object.assign(rt,{...e,type:14,name:"[_]@Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:I}],methods:[]}});Object.assign(x,{...e,type:13,name:"[]@Vector(4, u8)",byteSize:8,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:rt}],methods:[]}});Object.assign(nt,{...e,type:2,name:"tunnel2.Image(u8,4,true)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:x},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:g},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:q}],methods:[],template:Ie},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:b}],methods:[],template:Ee}});Object.assign(K,{...e,type:2,name:"tunnel2.KernelOutput(u8,tunnel2.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:nt}],methods:[],template:Te}});Object.assign(C,{...e,type:2,name:"tunnel2.KernelParameters(tunnel2.kernel)",byteSize:24,align:8,instance:{members:[{...t,type:5,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"imgSize",structure:d},{...t,type:5,bitOffset:64,bitSize:64,byteSize:8,slot:1,name:"center",structure:d},{...t,type:5,bitOffset:128,bitSize:64,byteSize:8,slot:2,name:"offset",structure:d}],methods:[],template:_e}});Object.assign(w,{...e,type:10,name:"ErrorSet1042669317",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:w}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:w}],methods:[],template:$e}});Object.assign(gt,{...e,type:9,name:"ErrorSet1042669317!tunnel2.KernelOutput(u8,tunnel2.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:K},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:w}],methods:[]}});Object.assign(pt,{...e,type:5,name:"createOutput",byteSize:88,align:8,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:192,bitSize:32,byteSize:4,slot:3,name:"0",structure:c},{...t,type:3,isRequired:!0,bitOffset:224,bitSize:32,byteSize:4,slot:4,name:"1",structure:c},{...t,type:5,isRequired:!0,bitOffset:256,bitSize:192,byteSize:24,slot:0,name:"2",structure:E},{...t,type:5,isRequired:!0,bitOffset:0,bitSize:192,byteSize:24,slot:1,name:"3",structure:C},{...t,type:5,isRequired:!0,bitOffset:448,bitSize:224,byteSize:28,slot:2,name:"retval",structure:gt}],methods:[]}});Object.assign(A,{...e,type:10,name:"ErrorSet1812501759",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:A}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:A}],methods:[],template:Be}});Object.assign(ft,{...e,type:9,name:"ErrorSet1812501759!tunnel2.KernelOutput(u8,tunnel2.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:K},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:A}],methods:[]}});Object.assign(Ot,{...e,type:5,name:"createPartialOutput",byteSize:96,align:8,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:192,bitSize:32,byteSize:4,slot:3,name:"0",structure:c},{...t,type:3,isRequired:!0,bitOffset:224,bitSize:32,byteSize:4,slot:4,name:"1",structure:c},{...t,type:3,isRequired:!0,bitOffset:256,bitSize:32,byteSize:4,slot:5,name:"2",structure:c},{...t,type:3,isRequired:!0,bitOffset:288,bitSize:32,byteSize:4,slot:6,name:"3",structure:c},{...t,type:5,isRequired:!0,bitOffset:320,bitSize:192,byteSize:24,slot:0,name:"4",structure:E},{...t,type:5,isRequired:!0,bitOffset:0,bitSize:192,byteSize:24,slot:1,name:"5",structure:C},{...t,type:5,isRequired:!0,bitOffset:512,bitSize:224,byteSize:28,slot:2,name:"retval",structure:ft}],methods:[]}});Object.assign(St,{...e,type:2,name:"tunnel2",align:1,static:{members:[{...t,type:7,slot:0,name:"kernel",structure:s},{...t,type:7,slot:1,name:"Input",structure:s},{...t,type:7,slot:2,name:"Output",structure:s},{...t,type:7,slot:3,name:"Parameters",structure:s}],methods:[Vr,Rr],template:He}});const kr=[s,O,$,L,B,G,b,S,H,J,a,p,U,f,k,d,N,Q,W,X,Y,P,Z,tt,bt,I,et,v,c,g,q,lt,st,E,rt,x,nt,K,C,w,gt,pt,A,ft,Ot,St],qr=St,Ir={runtimeSafety:!1,littleEndian:!0},ut=ps();ut.getSpecialExports();ut.recreateStructures(kr,Ir);const vr=(async()=>{const i=new URL("tunnel2-2c17c98b.wasm",import.meta.url).href;return fetch(i)})();ut.loadModule(vr);ut.linkVariables(!0);const{constructor:Er}=qr,{createPartialOutput:xr,Input:Kr,kernel:yt}=Er;function Cr(i,u,o,n,r={},z={}){const j=[];for(const[y]of yt.inputImages)j.push(y);const V=[];for(const[y]of yt.outputImages)V.push(y);if(Array.isArray(r)){const y=r;r={};for(const[l,h]of j.entries())r[h]=y[l]}const m=new Kr(void 0),D=[];let R;for(const y of j){let l=r[y];if(l||(j.length===1&&["data","width","height"].every(h=>!!r[h])?l=r:D.push(y)),m[y]=l,R){if(l.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=l.colorSpace}if(D.length>0)throw new Error(`Missing input image${D.length>1?"s":""}: ${D.join(", ")}`);const mt=xr(i,u,o,n,m,z),_t=y=>{const l={};for(const h of V){const{data:{typedArray:F},width:$t,height:rs}=y[h];let _;if(typeof ImageData=="function"){const ns=new Uint8ClampedArray(F.buffer,F.byteOffset,F.byteLength);_=new ImageData(ns,$t,n,{colorSpace:R})}else _={data:F,width:$t,height:rs};if(V.length===1)return _;l[h]=_}return l};return mt[Symbol.toStringTag]==="Promise"?mt.then(_t):_t(mt)}function Mr(){const i={};for(let[u,o]of yt){if(u==="parameters"){const n={};for(const[r,z]of o){const j=n[r]={};for(let[V,m]of z)typeof m=="object"?m=m.string??m.valueOf():typeof m=="function"&&(m=Tr(m.name)),j[V]=m}o=n}else typeof o=="object"&&(o=o.string??o.valueOf());i[u]=o}return i}function Tr(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=async i=>{if(!Array.isArray(i.data))return;const[u,o,...n]=i.data;try{const[r,z]=await Dr(u,n);postMessage([u,o,r],{transfer:z})}catch(r){postMessage(["error",o,r])}};async function Dr(i,u){switch(i){case"getKernelInfo":return[Mr(...u)];case"createPartialImageData":const n=await Cr(...u),r=[];if("data"in n&&"width"in n&&"height"in n)r.push(n.data.buffer);else for(const z of Object.entries(n))r.push(n.data.buffer);return[n,r];default:throw new Error(`Unknown function: ${i}`)}}postMessage("ready");
