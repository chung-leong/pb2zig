import{u as ks,a as Vs,b as Ps,c as Rs,d as qs,e as Is,f as vs,g as Es,h as xs,i as Ts,j as Ks,k as Cs,l as Ds,m as Ms,n as Fs,o as _s,p as $s,q as Ls}from"./index-270629a1.js";ks();Cs();Ds();Vs();Ps();Ms();Fs();_s();$s();Rs();qs();Is();vs();Ls();Es();xs();Ts();const e={constructor:null,typedArray:null,type:0,name:void 0,byteSize:0,align:0,isConst:!1,isTuple:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null}},t={type:0,isRequired:!1},r={},f={},$={},L={},B={},G={},l={},S={},H={},J={},s={},o={},O={},U={},N={},R={},d={},Q={},W={},X={},Y={},Z={},tt={},et={},k={},st={},rt={},gt={},I={},nt={},v={},u={},g={},q={},Ot={},at={},E={},ot={},x={},it={},T={},K={},w={},ft={},St={},A={},jt={},zt={},ht={},ee={},C={},se={},D={},re={},ne={},ct={},ae={},ut={},oe={},ie={},dt={},ce={},wt={},ue={},me={},At={},mt={},Ut={},kt={},Vt={},ye={},Pt={},be={},Rt={},le={},pe={},qt={},ge={},It={},Oe={},fe={},vt={},Et={},xt={},Tt={},Se={},Kt={},je={},Ct={},ze={},he={},Dt={},Mt={},Ft={},_t={},de={},$t={},Lt={},Bt={},we={},yt={},Ae={},Ue={},Gt={},ke={},Ht={},Ve={},Pe={},Re={},qe={},Ie={},ve={},Ee={},xe={},Te={},Ke={},Ce={},De={},Me={},Fe={},_e={},$e={},Le={},Jt={},Be={},Ge={},Nt={},He={},Qt={},Je={},Ne={},Qe={},We={},Xe={},Ye={},Ze={},Wt={},ts={},es={},ss={},rs={},ns={},as={},os={},is={},cs={},us={},ms={},ys={},bs={},ls={},ps={},gs={},Os={},fs={},Ss={},js={},zs={},hs={},Bs=new Uint8Array,Gs=new Uint8Array([0,0,0,0,0,0,0,0]),Hs=new Uint8Array,Js=new Uint8Array([0,0,0,0,0,0,0,0]),Ns=new Uint8Array,Qs=new Uint8Array([0,0,0,0,0,0,89,64]),Ws=new Uint8Array,Xs=new Uint8Array([0,0,0,0,0,0,89,64]),Ys=new Uint8Array,Zs=new Uint8Array([0,0,0,0,0,0,52,64]),tr=new Uint8Array,er=new Uint8Array([0,0,0,0,0,0,52,64]),sr=new Uint8Array,rr=new Uint8Array,nr=new Uint8Array,ar=new Uint8Array,or=new Uint8Array,ir=new Uint8Array([0,0,0,0,0,0,240,63]),cr=new Uint8Array,ur=new Uint8Array([0,0,0,0,0,0,240,63]),mr=new Uint8Array,yr=new Uint8Array([0,0,0,0,0,0,36,64]),br=new Uint8Array,lr=new Uint8Array([0,0,0,0,0,0,36,64]),pr=new Uint8Array,gr=new Uint8Array,Or=new Uint8Array,fr=new Uint8Array,Sr=new Uint8Array,jr=new Uint8Array([111,18,131,192,202,33,25,64]),zr=new Uint8Array,hr=new Uint8Array([111,18,131,192,202,33,25,64]),dr=new Uint8Array,wr=new Uint8Array,Ar=new Uint8Array,Ur=new Uint8Array,kr=new Uint8Array,Vr=new Uint8Array,Pr=new Uint8Array,Rr=new Uint8Array,qr=new Uint8Array([4]),Ir=new Uint8Array,vr=new Uint8Array,Er=new Uint8Array([26,16,0,1]),xr=new Uint8Array([65,108,108,101,110,32,67,104,111,117,0]),Tr=new Uint8Array([24,66,0,1]),Kr=new Uint8Array([0]),Cr=new Uint8Array,Dr=new Uint8Array([1]),Mr=new Uint8Array([65,16,0,1]),Fr=new Uint8Array([98,111,120,45,115,104,97,112,101,100,32,114,105,112,112,108,101,32,101,102,102,101,99,116,0]),_r=new Uint8Array,$r=new Uint8Array,Lr=new Uint8Array,Br=new Uint8Array([0]),Gr=new Uint8Array([1]),ds=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Hr=new Uint8Array,Jr=new Uint8Array,Nr=new Uint8Array,Qr=new Uint8Array,Wr=new Uint8Array([4]),Xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ws=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Xr=new Uint8Array,Yr=new Uint8Array,Zr=new Uint8Array,tn=new Uint8Array,en=new Uint8Array([4]),Yt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),sn=new Uint8Array([0,0,160,65,0,0,160,65,0,0,32,65,0,0,32,65,0,0,0,0,0,0,0,0]),rn=new Uint8Array([27,0]),nn=new Uint8Array([27,0]),an=new Uint8Array,on=new Uint8Array,cn=new Uint8Array,un=new Uint8Array;Object.assign(ee,{slots:{0:C,1:D}});Object.assign(C,{structure:s,memory:{array:Bs},const:!0,slots:{0:se}});Object.assign(se,{structure:o,memory:{array:Gs},const:!0});Object.assign(D,{structure:s,memory:{array:Hs},const:!0,slots:{0:re}});Object.assign(re,{structure:o,memory:{array:Js},const:!0});Object.assign(ne,{slots:{0:ct,1:ut}});Object.assign(ct,{structure:s,memory:{array:Ns},const:!0,slots:{0:ae}});Object.assign(ae,{structure:o,memory:{array:Qs},const:!0});Object.assign(ut,{structure:s,memory:{array:Ws},const:!0,slots:{0:oe}});Object.assign(oe,{structure:o,memory:{array:Xs},const:!0});Object.assign(ie,{slots:{0:dt,1:wt}});Object.assign(dt,{structure:s,memory:{array:Ys},const:!0,slots:{0:ce}});Object.assign(ce,{structure:o,memory:{array:Zs},const:!0});Object.assign(wt,{structure:s,memory:{array:tr},const:!0,slots:{0:ue}});Object.assign(ue,{structure:o,memory:{array:er},const:!0});Object.assign(me,{slots:{0:At,1:Ut,2:kt,3:Vt}});Object.assign(At,{structure:r,memory:{array:sr},const:!0,slots:{0:mt}});Object.assign(mt,{structure:d});Object.assign(Ut,{structure:O,memory:{array:rr},const:!0,slots:{0:C,1:D}});Object.assign(kt,{structure:U,memory:{array:nr},const:!0,slots:{0:ct,1:ut}});Object.assign(Vt,{structure:N,memory:{array:ar},const:!0,slots:{0:dt,1:wt}});Object.assign(ye,{slots:{0:Pt,1:Rt}});Object.assign(Pt,{structure:s,memory:{array:or},const:!0,slots:{0:be}});Object.assign(be,{structure:o,memory:{array:ir},const:!0});Object.assign(Rt,{structure:s,memory:{array:cr},const:!0,slots:{0:le}});Object.assign(le,{structure:o,memory:{array:ur},const:!0});Object.assign(pe,{slots:{0:qt,1:It}});Object.assign(qt,{structure:s,memory:{array:mr},const:!0,slots:{0:ge}});Object.assign(ge,{structure:o,memory:{array:yr},const:!0});Object.assign(It,{structure:s,memory:{array:br},const:!0,slots:{0:Oe}});Object.assign(Oe,{structure:o,memory:{array:lr},const:!0});Object.assign(fe,{slots:{0:vt,1:Et,2:xt,3:Tt}});Object.assign(vt,{structure:r,memory:{array:pr},const:!0,slots:{0:mt}});Object.assign(Et,{structure:W,memory:{array:gr},const:!0,slots:{0:Pt,1:Rt}});Object.assign(xt,{structure:U,memory:{array:Or},const:!0,slots:{0:ct,1:ut}});Object.assign(Tt,{structure:X,memory:{array:fr},const:!0,slots:{0:qt,1:It}});Object.assign(Se,{slots:{0:Kt,1:Ct}});Object.assign(Kt,{structure:s,memory:{array:Sr},const:!0,slots:{0:je}});Object.assign(je,{structure:o,memory:{array:jr},const:!0});Object.assign(Ct,{structure:s,memory:{array:zr},const:!0,slots:{0:ze}});Object.assign(ze,{structure:o,memory:{array:hr},const:!0});Object.assign(he,{slots:{0:Dt,1:Mt,2:Ft,3:_t}});Object.assign(Dt,{structure:r,memory:{array:dr},const:!0,slots:{0:mt}});Object.assign(Mt,{structure:O,memory:{array:wr},const:!0,slots:{0:C,1:D}});Object.assign(Ft,{structure:Z,memory:{array:Ar},const:!0,slots:{0:Kt,1:Ct}});Object.assign(_t,{structure:O,memory:{array:Ur},const:!0,slots:{0:C,1:D}});Object.assign(de,{slots:{0:$t,1:Lt,2:Bt}});Object.assign($t,{structure:Q,memory:{array:kr},const:!0,slots:{0:At,1:Ut,2:kt,3:Vt}});Object.assign(Lt,{structure:Y,memory:{array:Vr},const:!0,slots:{0:vt,1:Et,2:xt,3:Tt}});Object.assign(Bt,{structure:tt,memory:{array:Pr},const:!0,slots:{0:Dt,1:Mt,2:Ft,3:_t}});Object.assign(we,{slots:{0:yt}});Object.assign(yt,{structure:l,memory:{array:Rr},const:!0,slots:{0:Ae}});Object.assign(Ae,{structure:S,memory:{array:qr},const:!0});Object.assign(Ue,{slots:{0:Gt}});Object.assign(Gt,{structure:k,memory:{array:Ir},const:!0,slots:{0:yt}});Object.assign(ke,{slots:{0:Ht}});Object.assign(Ht,{structure:k,memory:{array:vr},const:!0,slots:{0:yt}});Object.assign(Ve,{slots:{0:Pe,1:qe,2:ve,3:xe,4:Ke,5:Ce,6:De}});Object.assign(Pe,{structure:L,memory:{array:Er},const:!0,slots:{0:Re}});Object.assign(Re,{structure:$,memory:{array:xr},reloc:16781338});Object.assign(qe,{structure:G,memory:{array:Tr},const:!0,slots:{0:Ie}});Object.assign(Ie,{structure:B,memory:{array:Kr},reloc:16794136});Object.assign(ve,{structure:l,memory:{array:Cr},const:!0,slots:{0:Ee}});Object.assign(Ee,{structure:S,memory:{array:Dr},const:!0});Object.assign(xe,{structure:J,memory:{array:Mr},const:!0,slots:{0:Te}});Object.assign(Te,{structure:H,memory:{array:Fr},reloc:16781377});Object.assign(Ke,{structure:et,memory:{array:_r},const:!0,slots:{0:$t,1:Lt,2:Bt}});Object.assign(Ce,{structure:st,memory:{array:$r},const:!0,slots:{0:Gt}});Object.assign(De,{structure:rt,memory:{array:Lr},const:!0,slots:{0:Ht}});Object.assign(Me,{slots:{0:Fe,1:_e}});Object.assign(Fe,{structure:g,memory:{array:Br},const:!0});Object.assign(_e,{structure:g,memory:{array:Gr},const:!0});Object.assign($e,{memory:{array:ds},slots:{0:Le}});Object.assign(Le,{structure:v,memory:{array:ds,offset:0,length:8},slots:{0:Jt}});Object.assign(Jt,{structure:nt,memory:{array:Hr},reloc:0});Object.assign(Be,{slots:{0:Ge,1:He,2:Je}});Object.assign(Ge,{structure:r,memory:{array:Jr},const:!0,slots:{0:Nt}});Object.assign(Nt,{structure:I});Object.assign(He,{structure:r,memory:{array:Nr},const:!0,slots:{0:Qt}});Object.assign(Qt,{structure:Ot});Object.assign(Je,{structure:l,memory:{array:Qr},const:!0,slots:{0:Ne}});Object.assign(Ne,{structure:S,memory:{array:Wr},const:!0});Object.assign(Qe,{memory:{array:Xt},slots:{0:We}});Object.assign(We,{structure:at,memory:{array:Xt},slots:{0:Xe}});Object.assign(Xe,{structure:v,memory:{array:Xt,offset:0,length:8},slots:{0:Jt}});Object.assign(Ye,{memory:{array:ws},slots:{0:Ze}});Object.assign(Ze,{structure:x,memory:{array:ws,offset:0,length:8},slots:{0:Wt}});Object.assign(Wt,{structure:ot,memory:{array:Xr},reloc:0});Object.assign(ts,{slots:{0:es,1:ss,2:rs}});Object.assign(es,{structure:r,memory:{array:Yr},const:!0,slots:{0:Nt}});Object.assign(ss,{structure:r,memory:{array:Zr},const:!0,slots:{0:Qt}});Object.assign(rs,{structure:l,memory:{array:tn},const:!0,slots:{0:ns}});Object.assign(ns,{structure:S,memory:{array:en},const:!0});Object.assign(as,{memory:{array:Yt},slots:{0:os}});Object.assign(os,{structure:it,memory:{array:Yt},slots:{0:is}});Object.assign(is,{structure:x,memory:{array:Yt,offset:0,length:8},slots:{0:Wt}});Object.assign(cs,{memory:{array:sn}});Object.assign(us,{slots:{0:ms}});Object.assign(ms,{structure:w,memory:{array:rn},const:!0});Object.assign(ys,{slots:{0:bs}});Object.assign(bs,{structure:A,memory:{array:nn},const:!0});Object.assign(ls,{slots:{0:ps,1:Os,2:Ss,3:zs}});Object.assign(ps,{structure:r,memory:{array:an},const:!0,slots:{0:gs}});Object.assign(gs,{structure:gt});Object.assign(Os,{structure:r,memory:{array:on},const:!0,slots:{0:fs}});Object.assign(fs,{structure:E});Object.assign(Ss,{structure:r,memory:{array:cn},const:!0,slots:{0:js}});Object.assign(js,{structure:T});Object.assign(zs,{structure:r,memory:{array:un},const:!0,slots:{0:hs}});Object.assign(hs,{structure:K});const mn={argStruct:St,thunkId:2,name:"createOutput"},yn={argStruct:zt,thunkId:3,name:"createPartialOutput"};Object.assign(r,{...e,name:"type",align:1,instance:{members:[{...t,type:6,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:r}],methods:[]}});Object.assign(f,{...e,name:"u8",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign($,{...e,type:1,name:"[10:0]u8",length:10,byteSize:11,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign(L,{...e,type:13,name:"*const [10:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[]}});Object.assign(B,{...e,type:1,name:"[0:0]u8",length:0,byteSize:1,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign(G,{...e,type:13,name:"*const [0:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[]}});Object.assign(l,{...e,name:"comptime_int",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:l}],methods:[]}});Object.assign(S,{...e,name:"i8",byteSize:1,align:1,instance:{members:[{...t,type:2,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(H,{...e,type:1,name:"[24:0]u8",length:24,byteSize:25,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign(J,{...e,type:13,name:"*const [24:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[]}});Object.assign(s,{...e,name:"comptime_float",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:s}],methods:[]}});Object.assign(o,{...e,name:"f64",byteSize:8,align:8,instance:{members:[{...t,type:4,bitOffset:0,bitSize:64,byteSize:8,structure:o}],methods:[]}});Object.assign(O,{...e,type:2,name:"Struct738220547",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:s},{...t,type:7,slot:1,name:"1",structure:s}],methods:[],template:ee}});Object.assign(U,{...e,type:2,name:"Struct2155520631",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:s},{...t,type:7,slot:1,name:"1",structure:s}],methods:[],template:ne}});Object.assign(N,{...e,type:2,name:"Struct1331017668",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:s},{...t,type:7,slot:1,name:"1",structure:s}],methods:[],template:ie}});Object.assign(R,{...e,name:"f32",byteSize:4,align:4,instance:{members:[{...t,type:4,bitOffset:0,bitSize:32,byteSize:4,structure:R}],methods:[]}});Object.assign(d,{...e,type:15,name:"@Vector(2, f32)",length:2,byteSize:8,align:8,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:R}],methods:[]}});Object.assign(Q,{...e,type:2,name:"Struct2584677341",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:r},{...t,type:7,slot:1,name:"minValue",structure:O},{...t,type:7,slot:2,name:"maxValue",structure:U},{...t,type:7,slot:3,name:"defaultValue",structure:N}],methods:[],template:me}});Object.assign(W,{...e,type:2,name:"Struct2999377579",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:s},{...t,type:7,slot:1,name:"1",structure:s}],methods:[],template:ye}});Object.assign(X,{...e,type:2,name:"Struct1464340365",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:s},{...t,type:7,slot:1,name:"1",structure:s}],methods:[],template:pe}});Object.assign(Y,{...e,type:2,name:"Struct2790032524",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:r},{...t,type:7,slot:1,name:"minValue",structure:W},{...t,type:7,slot:2,name:"maxValue",structure:U},{...t,type:7,slot:3,name:"defaultValue",structure:X}],methods:[],template:fe}});Object.assign(Z,{...e,type:2,name:"Struct3848840858",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:s},{...t,type:7,slot:1,name:"1",structure:s}],methods:[],template:Se}});Object.assign(tt,{...e,type:2,name:"Struct3860118072",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:r},{...t,type:7,slot:1,name:"minValue",structure:O},{...t,type:7,slot:2,name:"maxValue",structure:Z},{...t,type:7,slot:3,name:"defaultValue",structure:O}],methods:[],template:he}});Object.assign(et,{...e,type:2,name:"Struct3075365331",align:1,instance:{members:[{...t,type:7,slot:0,name:"amplitude",structure:Q},{...t,type:7,slot:1,name:"wavelength",structure:Y},{...t,type:7,slot:2,name:"phase",structure:tt}],methods:[],template:de}});Object.assign(k,{...e,type:2,name:"Struct3832472641",align:1,instance:{members:[{...t,type:7,slot:0,name:"channels",structure:l}],methods:[],template:we}});Object.assign(st,{...e,type:2,name:"Struct2242867897",align:1,instance:{members:[{...t,type:7,slot:0,name:"src",structure:k}],methods:[],template:Ue}});Object.assign(rt,{...e,type:2,name:"Struct172100005",align:1,instance:{members:[{...t,type:7,slot:0,name:"dst",structure:k}],methods:[],template:ke}});Object.assign(gt,{...e,type:2,name:"ripple-blocks.kernel",align:1,static:{members:[{...t,type:7,slot:0,name:"namespace",structure:L},{...t,type:7,slot:1,name:"vendor",structure:G},{...t,type:7,slot:2,name:"version",structure:l},{...t,type:7,slot:3,name:"description",structure:J},{...t,type:7,slot:4,name:"parameters",structure:et},{...t,type:7,slot:5,name:"inputImages",structure:st},{...t,type:7,slot:6,name:"outputImages",structure:rt}],methods:[],template:Ve}});Object.assign(I,{...e,type:15,name:"@Vector(4, u8)",length:4,byteSize:4,align:4,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign(nt,{...e,type:14,name:"[_]const @Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:I}],methods:[]}});Object.assign(v,{...e,type:13,name:"[]const @Vector(4, u8)",byteSize:8,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:nt}],methods:[]}});Object.assign(u,{...e,name:"u32",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[]}});Object.assign(g,{...e,type:11,name:"ripple-blocks.ColorSpace",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:1,byteSize:1,structure:g}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"srgb",structure:g},{...t,type:7,slot:1,name:"display-p3",structure:g}],methods:[],template:Me}});Object.assign(q,{...e,name:"usize",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:q}],methods:[]}});Object.assign(Ot,{...e,type:15,name:"@Vector(4, f32)",length:4,byteSize:16,align:16,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:R}],methods:[]}});Object.assign(at,{...e,type:2,name:"ripple-blocks.Image(u8,4,false)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:v},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:g},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:q}],methods:[],template:$e},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:r},{...t,type:7,slot:1,name:"FPixel",structure:r},{...t,type:7,slot:2,name:"channels",structure:l}],methods:[],template:Be}});Object.assign(E,{...e,type:2,name:"ripple-blocks.KernelInput(u8,ripple-blocks.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:at}],methods:[],template:Qe}});Object.assign(ot,{...e,type:14,name:"[_]@Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:I}],methods:[]}});Object.assign(x,{...e,type:13,name:"[]@Vector(4, u8)",byteSize:8,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:ot}],methods:[]}});Object.assign(it,{...e,type:2,name:"ripple-blocks.Image(u8,4,true)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:x},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:g},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:q}],methods:[],template:Ye},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:r},{...t,type:7,slot:1,name:"FPixel",structure:r},{...t,type:7,slot:2,name:"channels",structure:l}],methods:[],template:ts}});Object.assign(T,{...e,type:2,name:"ripple-blocks.KernelOutput(u8,ripple-blocks.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:it}],methods:[],template:as}});Object.assign(K,{...e,type:2,name:"ripple-blocks.KernelParameters(ripple-blocks.kernel)",byteSize:24,align:8,instance:{members:[{...t,type:5,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"amplitude",structure:d},{...t,type:5,bitOffset:64,bitSize:64,byteSize:8,slot:1,name:"wavelength",structure:d},{...t,type:5,bitOffset:128,bitSize:64,byteSize:8,slot:2,name:"phase",structure:d}],methods:[],template:cs}});Object.assign(w,{...e,type:10,name:"ErrorSet1833351990",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:w}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:w}],methods:[],template:us}});Object.assign(ft,{...e,type:9,name:"ErrorSet1833351990!ripple-blocks.KernelOutput(u8,ripple-blocks.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:T},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:w}],methods:[]}});Object.assign(St,{...e,type:5,name:"createOutput",byteSize:88,align:8,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:192,bitSize:32,byteSize:4,slot:3,name:"0",structure:u},{...t,type:3,isRequired:!0,bitOffset:224,bitSize:32,byteSize:4,slot:4,name:"1",structure:u},{...t,type:5,isRequired:!0,bitOffset:256,bitSize:192,byteSize:24,slot:0,name:"2",structure:E},{...t,type:5,isRequired:!0,bitOffset:0,bitSize:192,byteSize:24,slot:1,name:"3",structure:K},{...t,type:5,isRequired:!0,bitOffset:448,bitSize:224,byteSize:28,slot:2,name:"retval",structure:ft}],methods:[]}});Object.assign(A,{...e,type:10,name:"ErrorSet2763117649",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:A}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:A}],methods:[],template:ys}});Object.assign(jt,{...e,type:9,name:"ErrorSet2763117649!ripple-blocks.KernelOutput(u8,ripple-blocks.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:T},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:A}],methods:[]}});Object.assign(zt,{...e,type:5,name:"createPartialOutput",byteSize:96,align:8,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:192,bitSize:32,byteSize:4,slot:3,name:"0",structure:u},{...t,type:3,isRequired:!0,bitOffset:224,bitSize:32,byteSize:4,slot:4,name:"1",structure:u},{...t,type:3,isRequired:!0,bitOffset:256,bitSize:32,byteSize:4,slot:5,name:"2",structure:u},{...t,type:3,isRequired:!0,bitOffset:288,bitSize:32,byteSize:4,slot:6,name:"3",structure:u},{...t,type:5,isRequired:!0,bitOffset:320,bitSize:192,byteSize:24,slot:0,name:"4",structure:E},{...t,type:5,isRequired:!0,bitOffset:0,bitSize:192,byteSize:24,slot:1,name:"5",structure:K},{...t,type:5,isRequired:!0,bitOffset:512,bitSize:224,byteSize:28,slot:2,name:"retval",structure:jt}],methods:[]}});Object.assign(ht,{...e,type:2,name:"ripple-blocks",align:1,static:{members:[{...t,type:7,slot:0,name:"kernel",structure:r},{...t,type:7,slot:1,name:"Input",structure:r},{...t,type:7,slot:2,name:"Output",structure:r},{...t,type:7,slot:3,name:"Parameters",structure:r}],methods:[mn,yn],template:ls}});const bn=[r,f,$,L,B,G,l,S,H,J,s,o,O,U,N,R,d,Q,W,X,Y,Z,tt,et,k,st,rt,gt,I,nt,v,u,g,q,Ot,at,E,ot,x,it,T,K,w,ft,St,A,jt,zt,ht],ln=ht,pn={runtimeSafety:!1,littleEndian:!0},bt=Ks();bt.getSpecialExports();bt.recreateStructures(bn,pn);const gn=(async()=>{const i=new URL("ripple-blocks-47b9eb78.wasm",import.meta.url).href;return fetch(i)})();bt.loadModule(gn);bt.linkVariables(!0);const{constructor:On}=ln,{createPartialOutput:fn,Input:Sn,kernel:pt}=On;function jn(i,m,c,a,n={},j={}){const z=[];for(const[b]of pt.inputImages)z.push(b);const V=[];for(const[b]of pt.outputImages)V.push(b);if(Array.isArray(n)){const b=n;n={};for(const[p,h]of z.entries())n[h]=b[p]}const y=new Sn(void 0),M=[];let P;for(const b of z){let p=n[b];if(p||(z.length===1&&["data","width","height"].every(h=>!!n[h])?p=n:M.push(b)),y[b]=p,P){if(p.colorSpace!==P)throw new Error(`Input images must all use the same color space: ${P}`)}else P=p.colorSpace}if(M.length>0)throw new Error(`Missing input image${M.length>1?"s":""}: ${M.join(", ")}`);const lt=fn(i,m,c,a,y,j),Zt=b=>{const p={};for(const h of V){const{data:{typedArray:F},width:te,height:As}=b[h];let _;if(typeof ImageData=="function"){const Us=new Uint8ClampedArray(F.buffer,F.byteOffset,F.byteLength);_=new ImageData(Us,te,a,{colorSpace:P})}else _={data:F,width:te,height:As};if(V.length===1)return _;p[h]=_}return p};return lt[Symbol.toStringTag]==="Promise"?lt.then(Zt):Zt(lt)}function zn(){const i={};for(let[m,c]of pt){if(m==="parameters"){const a={};for(const[n,j]of c){const z=a[n]={};for(let[V,y]of j)typeof y=="object"?y=y.string??y.valueOf():typeof y=="function"&&(y=hn(y.name)),z[V]=y}c=a}else typeof c=="object"&&(c=c.string??c.valueOf());i[m]=c}return i}function hn(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[m,c,...a]=i.data;dn(m,a).then(([n,j])=>{postMessage([m,c,n],{transfer:j})}).catch(n=>{postMessage(["error",c,n])})};async function dn(i,m){switch(i){case"getKernelInfo":return[zn(...m)];case"createPartialImageData":const a=await jn(...m),n=[];if("data"in a&&"width"in a&&"height"in a)n.push(a.data.buffer);else for(const j of Object.entries(a))n.push(a.data.buffer);return[a,n];default:throw new Error(`Unknown function: ${i}`)}}
