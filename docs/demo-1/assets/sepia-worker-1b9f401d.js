import{u as ge,a as ze,b as Oe,c as we,d as Re,e as qe,f as Ae,g as Ue,h as je,i as Pe,j as ke,k as Ie,l as Ve,m as Ce,o as ve,n as Ee,p as xe,q as Ke}from"./index-d64bc850.js";ge();ze();Oe();we();Re();qe();Ae();Ue();je();Pe();ke();Ie();Ve();Ce();ve();Ee();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},f={},_={},T={},V={},$={},B={},C={},m={},y={},L={},G={},v={},h={},p={},b={},H={},E={},J={},x={},R={},g={},N={},K={},Q={},D={},ae={},z={},W={},X={},o={},Y={},w={},Z={},F={},q={},ee={},te={},M={},A={},U={},ne={},ie={},ue={},oe={},le={},me={},ye={};Object.assign(f,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:5});Object.assign(_,{...t,type:1,name:"[3:0]u8",length:3,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:4});Object.assign(T,{...t,type:11,name:"*const [3:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_}],methods:[],template:null},slot:3});Object.assign(V,{...t,type:11,name:"*const *const [3:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[],template:null},slot:2});Object.assign($,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:8});Object.assign(B,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:7});Object.assign(C,{...t,type:11,name:"*const *const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:6});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:10});Object.assign(y,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:9});Object.assign(L,{...t,type:1,name:"[23:0]u8",length:23,byteSize:24,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:13});Object.assign(G,{...t,type:11,name:"*const [23:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:12});Object.assign(v,{...t,type:11,name:"*const *const [23:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:11});Object.assign(h,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:32});Object.assign(p,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:p}],methods:[],template:null},slot:45});Object.assign(b,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:44});const De=new Uint8Array,Fe=new Uint8Array([24,253,15,0]),Me=new Uint8Array([0,0,0,0,0,0,0,0]),_e=new Uint8Array([64,253,15,0]),Te=new Uint8Array([0,0,0,0,0,0,240,63]),$e=new Uint8Array([104,253,15,0]),Be=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(H,{...t,type:2,name:"Struct0008",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:b},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:b}],methods:[],template:{memory:{array:De},slots:{0:{structure:b,memory:{array:Fe},slots:{0:{structure:p,memory:{array:Me}}}},1:{structure:b,memory:{array:_e},slots:{0:{structure:p,memory:{array:Te}}}},2:{structure:b,memory:{array:$e},slots:{0:{structure:p,memory:{array:Be}}}}}}},slot:38});Object.assign(E,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:37});const Le=new Uint8Array,Ge=new Uint8Array([170,170,170,170]),He=new Uint8Array;Object.assign(J,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"intensity",structure:E}],methods:[],template:{memory:{array:Le},slots:{0:{structure:E,memory:{array:Ge},slots:{0:{structure:H,memory:{array:He}}}}}}},slot:15});Object.assign(x,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:14});const Je=new Uint8Array,Ne=new Uint8Array([160,249,15,0]),Qe=new Uint8Array([4,0,0,0]);Object.assign(R,{...t,type:2,name:"Struct0009",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:y}],methods:[],template:{memory:{array:Je},slots:{0:{structure:y,memory:{array:Ne},slots:{0:{structure:m,memory:{array:Qe}}}}}}},slot:40});Object.assign(g,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:39});const We=new Uint8Array,Xe=new Uint8Array([170,170,170,170]),Ye=new Uint8Array;Object.assign(N,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:g}],methods:[],template:{memory:{array:We},slots:{0:{structure:g,memory:{array:Xe},slots:{0:{structure:R,memory:{array:Ye}}}}}}},slot:17});Object.assign(K,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:16});const Ze=new Uint8Array,et=new Uint8Array([170,170,170,170]),tt=new Uint8Array;Object.assign(Q,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:g}],methods:[],template:{memory:{array:Ze},slots:{0:{structure:g,memory:{array:et},slots:{0:{structure:R,memory:{array:tt}}}}}}},slot:19});Object.assign(D,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:18});const st=new Uint8Array,rt=new Uint8Array,at=new Uint8Array([84,8,16,0]),nt=new Uint8Array([18,8,16,0]),it=new Uint8Array([65,73,70,0]),ut=new Uint8Array([80,8,16,0]),ot=new Uint8Array([249,7,16,0]),lt=new Uint8Array([65,100,111,98,101,32,83,121,115,116,101,109,115,0]),mt=new Uint8Array([76,8,16,0]),yt=new Uint8Array([2,0,0,0]),ct=new Uint8Array([72,8,16,0]),bt=new Uint8Array([208,7,16,0]),pt=new Uint8Array([97,32,118,97,114,105,97,98,108,101,32,115,101,112,105,97,32,102,105,108,116,101,114,0]),ft=new Uint8Array([170,170,170,170]),St=new Uint8Array,dt=new Uint8Array([170,170,170,170]),ht=new Uint8Array,gt=new Uint8Array([170,170,170,170]),zt=new Uint8Array;Object.assign(ae,{...t,type:2,name:"sepia.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:st}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:V},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:C},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:y},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:v},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:x},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:K},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:D}],methods:[],template:{memory:{array:rt},slots:{0:{structure:V,memory:{array:at},slots:{0:{structure:T,memory:{array:nt},slots:{0:{structure:_,memory:{array:it}}}}}},1:{structure:C,memory:{array:ut},slots:{0:{structure:B,memory:{array:ot},slots:{0:{structure:$,memory:{array:lt}}}}}},2:{structure:y,memory:{array:mt},slots:{0:{structure:m,memory:{array:yt}}}},3:{structure:v,memory:{array:ct},slots:{0:{structure:G,memory:{array:bt},slots:{0:{structure:L,memory:{array:pt}}}}}},4:{structure:x,memory:{array:ft},slots:{0:{structure:J,memory:{array:St}}}},5:{structure:K,memory:{array:dt},slots:{0:{structure:N,memory:{array:ht}}}},6:{structure:D,memory:{array:gt},slots:{0:{structure:Q,memory:{array:zt}}}}}}},slot:1});Object.assign(z,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:24});Object.assign(W,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:23});Object.assign(X,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:W}],methods:[],template:null},slot:22});Object.assign(o,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:o}],methods:[],template:null},slot:25});const Ot=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Y,{...t,type:9,name:"sepia.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:Ot}}},slot:26});Object.assign(w,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:27});Object.assign(Z,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:41});const wt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Rt=new Uint8Array,qt=new Uint8Array([152,7,16,0]),At=new Uint8Array([4,0,0,0]);Object.assign(F,{...t,type:2,name:"sepia.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:X},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:o},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:o},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Y},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:w}],methods:[],template:{memory:{array:wt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:z},{...e,type:7,isRequired:!1,name:"FPixel",structure:Z},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:y}],methods:[],template:{memory:{array:Rt},slots:{0:{structure:y,memory:{array:qt},slots:{0:{structure:m,memory:{array:At}}}}}}},slot:21});const Ut=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),jt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),fe=new Uint8Array([0,0,0,0,0,0,0,0]),Pt=new Uint8Array;Object.assign(q,{...t,type:2,name:"sepia.KernelInput(u8,sepia.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:F}],methods:[],template:{memory:{array:Ut},slots:{0:{structure:F,memory:{array:jt},slots:{0:{structure:X,memory:{array:fe},address:1047568,slots:{0:{structure:W,memory:{array:Pt},address:0}}}}}}}},slot:20});Object.assign(ee,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:23});Object.assign(te,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ee}],methods:[],template:null},slot:30});const kt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),It=new Uint8Array,Vt=new Uint8Array([152,7,16,0]),Ct=new Uint8Array([4,0,0,0]);Object.assign(M,{...t,type:2,name:"sepia.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:te},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:o},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:o},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Y},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:w}],methods:[],template:{memory:{array:kt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:z},{...e,type:7,isRequired:!1,name:"FPixel",structure:Z},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:y}],methods:[],template:{memory:{array:It},slots:{0:{structure:y,memory:{array:Vt},slots:{0:{structure:m,memory:{array:Ct}}}}}}},slot:29});const vt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Et=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),xt=new Uint8Array;Object.assign(A,{...t,type:2,name:"sepia.KernelOutput(u8,sepia.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:M}],methods:[],template:{memory:{array:vt},slots:{0:{structure:M,memory:{array:Et},slots:{0:{structure:te,memory:{array:fe},address:1047568,slots:{0:{structure:ee,memory:{array:xt},address:0}}}}}}}},slot:28});const Kt=new Uint8Array([0,0,0,0]);Object.assign(U,{...t,type:2,name:"sepia.KernelParameters(sepia.kernel)",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"intensity",structure:h}],methods:[],template:{memory:{array:Kt}}},slot:31});Object.assign(ne,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(sepia.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:42});Object.assign(ie,{...t,type:7,name:"ErrorSet0000!sepia.KernelOutput(u8,sepia.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:A},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ne}],methods:[],template:null},slot:35});Object.assign(ue,{...t,type:3,name:"createOutput",length:1,byteSize:64,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:o},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:o},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:q},{...e,type:6,bitOffset:256,bitSize:32,byteSize:4,slot:3,name:"3",structure:U},{...e,type:6,bitOffset:288,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ie}],methods:[],template:null},slot:33});Object.assign(oe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(sepia.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:43});Object.assign(le,{...t,type:7,name:"ErrorSet0001!sepia.KernelOutput(u8,sepia.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:A},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:oe}],methods:[],template:null},slot:36});Object.assign(me,{...t,type:3,name:"createPartialOutput",length:1,byteSize:72,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:o},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:o},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:o},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:o},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:q},{...e,type:6,bitOffset:320,bitSize:32,byteSize:4,slot:5,name:"5",structure:U},{...e,type:6,bitOffset:352,bitSize:224,byteSize:28,slot:6,name:"retval",structure:le}],methods:[],template:null},slot:34});const Dt=new Uint8Array,Ft={argStruct:ue,thunk:7,name:"createOutput"},Mt={argStruct:me,thunk:2,name:"createPartialOutput"};Object.assign(ye,{...t,type:2,name:"sepia",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Dt}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ae},{...e,type:7,isRequired:!1,name:"Input",structure:q},{...e,type:7,isRequired:!1,name:"Output",structure:A},{...e,type:7,isRequired:!1,name:"Parameters",structure:U}],methods:[Ft,Mt],template:null},slot:0});const _t=[f,_,T,V,$,B,C,m,y,L,G,v,h,p,b,H,E,J,x,R,g,N,K,Q,D,ae,z,W,X,o,Y,w,Z,F,q,ee,te,M,A,U,ne,ie,ue,oe,le,me,ye],Tt=xe(_t),$t=ye.constructor,Bt=(async()=>{const n=new URL("sepia-9339202a.wasm",import.meta.url).href;return fetch(n)})();Ke(Bt,{...Tt,writeBack:!0});const{createOutput:Xt,createPartialOutput:Lt,kernel:re,Input:Gt,Output:Yt,Parameters:Zt}=$t;function Ht(n,u,r,s,a={},S={}){if(Array.isArray(a)){const c=a;a={};for(const[l,d]of Object.keys(re.inputImages).entries())a[d]=c[l]}const j=new Gt(void 0),P=Object.keys(re.inputImages),i=[];let O;for(const c of P){let l=a[c];if(l||(P.length===1&&["data","width","height"].every(d=>!!a[d])?l=a:i.push(c)),j[c]=l,O){if(l.colorSpace!==O)throw new Error(`Input images must all use the same color space: ${O}`)}else O=l.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const se=Lt(n,u,r,s,j,S),ce=c=>{const l=Object.keys(c),d={};for(const be of l){const{data:{typedArray:k},width:pe,height:de}=c[be];let I;if(typeof ImageData=="function"){const he=new Uint8ClampedArray(k.buffer,k.byteOffset,k.byteLength);I=new ImageData(he,pe,s,{colorSpace:O})}else I={data:k,width:pe,height:de};if(l.length===1)return I;d[be]=I}return d};return se[Symbol.toStringTag]==="Promise"?se.then(ce):ce(se)}function Jt(){const n={};for(let[u,r]of Object.entries(re)){if(u==="parameters"){const s={};for(const[a,S]of Object.entries(r)){const j=s[a]={};for(let[P,i]of Object.entries(S))typeof i=="object"?"string"in i?i=i.string:i=Se(i):typeof i=="function"&&(i=Nt(i.name)),j[P]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[u]=r}return n}function Se(n){const u=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=Se(s)),u[r]=s;return u}function Nt(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[u,r,...s]=n.data;Qt(u,s).then(([a,S])=>{postMessage([u,r,a],{transfer:S})}).catch(a=>{postMessage(["error",r,a])})};async function Qt(n,u){switch(n){case"getKernelInfo":return[Jt(...u)];case"createPartialImageData":const s=await Ht(...u),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const S of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
