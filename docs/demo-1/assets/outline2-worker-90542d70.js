import{u as we,a as Re,b as qe,c as Ae,d as Ue,e as je,f as Pe,g as Ve,h as ke,i as Ie,j as Ce,k as ve,l as xe,m as Ee,o as Ke,n as De,p as Fe,q as Me}from"./index-422d9c98.js";we();Re();qe();Ae();Ue();je();Pe();Ve();ke();Ie();Ce();ve();xe();Ee();Ke();De();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},S={},$={},B={},C={},L={},G={},v={},c={},b={},H={},J={},x={},f={},y={},o={},N={},E={},Q={},K={},W={},D={},q={},z={},X={},F={},Y={},M={},ue={},O={},Z={},ee={},l={},te={},R={},se={},_={},A={},re={},ae={},T={},U={},j={},oe={},le={},me={},ye={},ce={},be={},pe={};Object.assign(S,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:5});Object.assign($,{...t,type:1,name:"[17:0]u8",length:17,byteSize:18,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:4});Object.assign(B,{...t,type:11,name:"*const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:3});Object.assign(C,{...t,type:11,name:"*const *const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:2});Object.assign(L,{...t,type:1,name:"[9:0]u8",length:9,byteSize:10,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:8});Object.assign(G,{...t,type:11,name:"*const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:7});Object.assign(v,{...t,type:11,name:"*const *const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:6});Object.assign(c,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:10});Object.assign(b,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:9});Object.assign(H,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:13});Object.assign(J,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:12});Object.assign(x,{...t,type:11,name:"*const *const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:11});Object.assign(f,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:32});Object.assign(y,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:y}],methods:[],template:null},slot:47});Object.assign(o,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:46});const _e=new Uint8Array([]),Te=new Uint8Array([24,253,15,0]),$e=new Uint8Array([0,0,0,0,0,0,0,0]),Be=new Uint8Array([64,253,15,0]),Le=new Uint8Array([0,0,0,0,0,0,240,63]),Ge=new Uint8Array([104,253,15,0]),He=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(N,{...t,type:2,name:"Struct0009",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:o},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:o}],methods:[],template:{memory:{array:_e},slots:{0:{structure:o,memory:{array:Te},slots:{0:{structure:y,memory:{array:$e}}}},1:{structure:o,memory:{array:Be},slots:{0:{structure:y,memory:{array:Le}}}},2:{structure:o,memory:{array:Ge},slots:{0:{structure:y,memory:{array:He}}}}}}},slot:38});Object.assign(E,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:37});const Je=new Uint8Array([]),Ne=new Uint8Array([24,253,15,0]),Qe=new Uint8Array([154,153,153,153,153,153,201,63]),We=new Uint8Array([64,253,15,0]),Xe=new Uint8Array([0,0,0,0,0,0,240,63]),Ye=new Uint8Array([104,253,15,0]),Ze=new Uint8Array([0,0,0,0,0,0,224,63]);Object.assign(Q,{...t,type:2,name:"Struct0010",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:o},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:o}],methods:[],template:{memory:{array:Je},slots:{0:{structure:o,memory:{array:Ne},slots:{0:{structure:y,memory:{array:Qe}}}},1:{structure:o,memory:{array:We},slots:{0:{structure:y,memory:{array:Xe}}}},2:{structure:o,memory:{array:Ye},slots:{0:{structure:y,memory:{array:Ze}}}}}}},slot:40});Object.assign(K,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:39});const et=new Uint8Array([]),tt=new Uint8Array([170,170,170,170]),d=new Uint8Array([]),st=new Uint8Array([170,170,170,170]);Object.assign(W,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"n0",structure:E},{...e,type:8,isRequired:!1,slot:1,name:"n1",structure:K}],methods:[],template:{memory:{array:et},slots:{0:{structure:E,memory:{array:tt},slots:{0:{structure:N,memory:{array:d},address:-1431655766}}},1:{structure:K,memory:{array:st},slots:{0:{structure:Q,memory:{array:d},address:-1431655766}}}}}},slot:15});Object.assign(D,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:14});const rt=new Uint8Array([]),at=new Uint8Array([112,249,15,0]),nt=new Uint8Array([3,0,0,0]);Object.assign(q,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:rt},slots:{0:{structure:b,memory:{array:at},slots:{0:{structure:c,memory:{array:nt}}}}}}},slot:42});Object.assign(z,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:41});const it=new Uint8Array([]),ut=new Uint8Array([170,170,170,170]);Object.assign(X,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:z}],methods:[],template:{memory:{array:it},slots:{0:{structure:z,memory:{array:ut},slots:{0:{structure:q,memory:{array:d},address:-1431655766}}}}}},slot:17});Object.assign(F,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:16});const ot=new Uint8Array([]),lt=new Uint8Array([170,170,170,170]);Object.assign(Y,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:z}],methods:[],template:{memory:{array:ot},slots:{0:{structure:z,memory:{array:lt},slots:{0:{structure:q,memory:{array:d},address:-1431655766}}}}}},slot:19});Object.assign(M,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:18});const mt=new Uint8Array([]),yt=new Uint8Array([]),ct=new Uint8Array([164,249,15,0]),bt=new Uint8Array([225,7,16,0]),pt=new Uint8Array([97,114,46,115,104,97,100,101,114,46,111,117,116,108,105,110,101,0]),ft=new Uint8Array([228,249,15,0]),dt=new Uint8Array([215,7,16,0]),St=new Uint8Array([65,108,97,110,32,82,111,115,115,0]),ht=new Uint8Array([36,250,15,0]),gt=new Uint8Array([1,0,0,0]),zt=new Uint8Array([124,250,15,0]),Ot=new Uint8Array([207,7,16,0]),wt=new Uint8Array([79,117,116,108,105,110,101,0]),Rt=new Uint8Array([170,170,170,170]),qt=new Uint8Array([170,170,170,170]),At=new Uint8Array([170,170,170,170]);Object.assign(ue,{...t,type:2,name:"outline2.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:mt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:C},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:v},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:b},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:x},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:D},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:F},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:M}],methods:[],template:{memory:{array:yt},slots:{0:{structure:C,memory:{array:ct},slots:{0:{structure:B,memory:{array:bt},slots:{0:{structure:$,memory:{array:pt},address:1050593}}}}},1:{structure:v,memory:{array:ft},slots:{0:{structure:G,memory:{array:dt},slots:{0:{structure:L,memory:{array:St},address:1050583}}}}},2:{structure:b,memory:{array:ht},slots:{0:{structure:c,memory:{array:gt}}}},3:{structure:x,memory:{array:zt},slots:{0:{structure:J,memory:{array:Ot},slots:{0:{structure:H,memory:{array:wt},address:1050575}}}}},4:{structure:D,memory:{array:Rt},slots:{0:{structure:W,memory:{array:d},address:-1431655766}}},5:{structure:F,memory:{array:qt},slots:{0:{structure:X,memory:{array:d},address:-1431655766}}},6:{structure:M,memory:{array:At},slots:{0:{structure:Y,memory:{array:d},address:-1431655766}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:24});Object.assign(Z,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(ee,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Z}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const Ut=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(te,{...t,type:9,name:"outline2.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:c},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:c}],methods:[],template:{memory:{array:Ut}}},slot:26});Object.assign(R,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:27});Object.assign(se,{...t,type:13,name:"@Vector(3, f32)",length:3,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:43});const jt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Pt=new Uint8Array([]),Vt=new Uint8Array([72,253,15,0]),kt=new Uint8Array([3,0,0,0]);Object.assign(_,{...t,type:2,name:"outline2.Image(u8,3,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ee},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:te},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:R}],methods:[],template:{memory:{array:jt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:se},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:Pt},slots:{0:{structure:b,memory:{array:Vt},slots:{0:{structure:c,memory:{array:kt}}}}}}},slot:21});const It=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ct=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),vt=new Uint8Array([0,0,0,0,0,0,0,0]),fe=new Uint8Array([]);Object.assign(A,{...t,type:2,name:"outline2.KernelInput(u8,outline2.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:_}],methods:[],template:{memory:{array:It},slots:{0:{structure:_,memory:{array:Ct},slots:{0:{structure:ee,memory:{array:vt},slots:{0:{structure:Z,memory:{array:fe}}}}}}}}},slot:20});Object.assign(re,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(ae,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:re}],methods:[],template:null},slot:30});const xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Et=new Uint8Array([]),Kt=new Uint8Array([72,253,15,0]),Dt=new Uint8Array([3,0,0,0]);Object.assign(T,{...t,type:2,name:"outline2.Image(u8,3,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ae},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:te},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:R}],methods:[],template:{memory:{array:xt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:se},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:Et},slots:{0:{structure:b,memory:{array:Kt},slots:{0:{structure:c,memory:{array:Dt}}}}}}},slot:29});const Ft=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Mt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),_t=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(U,{...t,type:2,name:"outline2.KernelOutput(u8,outline2.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:T}],methods:[],template:{memory:{array:Ft},slots:{0:{structure:T,memory:{array:Mt},slots:{0:{structure:ae,memory:{array:_t},slots:{0:{structure:re,memory:{array:fe}}}}}}}}},slot:28});const Tt=new Uint8Array([0,0,0,0,0,0,0,63]);Object.assign(j,{...t,type:2,name:"outline2.KernelParameters(outline2.kernel)",length:1,byteSize:8,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"n0",structure:f},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"n1",structure:f}],methods:[],template:{memory:{array:Tt}}},slot:31});Object.assign(oe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(outline2.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:44});Object.assign(le,{...t,type:7,name:"ErrorSet0000!outline2.KernelOutput(u8,outline2.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:oe}],methods:[],template:null},slot:35});Object.assign(me,{...t,type:3,name:"createOutput",length:1,byteSize:68,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:A},{...e,type:6,bitOffset:256,bitSize:64,byteSize:8,slot:3,name:"3",structure:j},{...e,type:6,bitOffset:320,bitSize:224,byteSize:28,slot:4,name:"retval",structure:le}],methods:[],template:null},slot:33});Object.assign(ye,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(outline2.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:45});Object.assign(ce,{...t,type:7,name:"ErrorSet0001!outline2.KernelOutput(u8,outline2.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ye}],methods:[],template:null},slot:36});Object.assign(be,{...t,type:3,name:"createPartialOutput",length:1,byteSize:76,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:A},{...e,type:6,bitOffset:320,bitSize:64,byteSize:8,slot:5,name:"5",structure:j},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ce}],methods:[],template:null},slot:34});const $t={argStruct:me,thunk:7,name:"createOutput"},Bt={argStruct:be,thunk:2,name:"createPartialOutput"};Object.assign(pe,{...t,type:2,name:"outline2",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:fe}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ue},{...e,type:7,isRequired:!1,name:"Input",structure:A},{...e,type:7,isRequired:!1,name:"Output",structure:U},{...e,type:7,isRequired:!1,name:"Parameters",structure:j}],methods:[$t,Bt],template:null},slot:0});const Lt=[S,$,B,C,L,G,v,c,b,H,J,x,f,y,o,N,E,Q,K,W,D,q,z,X,F,Y,M,ue,O,Z,ee,l,te,R,se,_,A,re,ae,T,U,j,oe,le,me,ye,ce,be,pe],Gt=Fe(Lt),Ht=pe.constructor,Jt=(async()=>{const n=new URL("outline2-2e430304.wasm",import.meta.url).href;return fetch(n)})();Me(Jt,{...Gt,writeBack:!0});const{createOutput:ts,createPartialOutput:Nt,kernel:ie,Input:Qt,Output:ss,Parameters:rs}=Ht;function Wt(n,u,r,s,a={},h={}){if(Array.isArray(a)){const p=a;a={};for(const[m,g]of Object.keys(ie.inputImages).entries())a[g]=p[m]}const P=new Qt(void 0),V=Object.keys(ie.inputImages),i=[];let w;for(const p of V){let m=a[p];if(m||(V.length===1&&["data","width","height"].every(g=>!!a[g])?m=a:i.push(p)),P[p]=m,w){if(m.colorSpace!==w)throw new Error(`Input images must all use the same color space: ${w}`)}else w=m.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const ne=Nt(n,u,r,s,P,h),de=p=>{const m=Object.keys(p),g={};for(const Se of m){const{data:{typedArray:k},width:he,height:ze}=p[Se];let I;if(typeof ImageData=="function"){const Oe=new Uint8ClampedArray(k.buffer,k.byteOffset,k.byteLength);I=new ImageData(Oe,he,s,{colorSpace:w})}else I={data:k,width:he,height:ze};if(m.length===1)return I;g[Se]=I}return g};return ne[Symbol.toStringTag]==="Promise"?ne.then(de):de(ne)}function Xt(){const n={};for(let[u,r]of Object.entries(ie)){if(u==="parameters"){const s={};for(const[a,h]of Object.entries(r)){const P=s[a]={};for(let[V,i]of Object.entries(h))typeof i=="object"?"string"in i?i=i.string:i=ge(i):typeof i=="function"&&(i=Yt(i.name)),P[V]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[u]=r}return n}function ge(n){const u=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=ge(s)),u[r]=s;return u}function Yt(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[u,r,...s]=n.data;Zt(u,s).then(([a,h])=>{postMessage([u,r,a],{transfer:h})}).catch(a=>{postMessage(["error",r,a])})};async function Zt(n,u){switch(n){case"getKernelInfo":return[Xt(...u)];case"createPartialImageData":const s=await Wt(...u),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const h of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
