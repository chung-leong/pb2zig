import{u as ns,a as as,b as is,d as os,c as cs,e as us,f as ms,g as ys,h as bs,i as ls,j as gs,k as ps,l as fs,m as Os,n as Ss,o as zs,p as js,q as ds}from"./index-33238b17.js";ns();ps();fs();as();is();Os();Ss();zs();js();os();cs();us();ms();ds();ys();bs();ls();const e={constructor:null,typedArray:null,type:0,name:void 0,byteSize:0,align:0,isConst:!1,isTuple:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null}},t={type:0,isRequired:!1},s={},O={},M={},D={},F={},T={},l={},S={},_={},$={},f={},L={},B={},r={},u={},G={},H={},J={},N={},A={},Q={},W={},it={},P={},X={},R={},c={},p={},V={},ot={},Y={},q={},Z={},I={},tt={},v={},E={},h={},ct={},ut={},w={},mt={},yt={},bt={},Tt={},lt={},_t={},$t={},gt={},et={},pt={},Lt={},ft={},Bt={},Ot={},Gt={},Ht={},St={},zt={},Jt={},jt={},Nt={},dt={},Qt={},Wt={},ht={},wt={},Xt={},At={},Yt={},Ut={},Zt={},te={},kt={},Vt={},Pt={},Rt={},ee={},st={},se={},re={},qt={},ne={},It={},ae={},ie={},oe={},ce={},ue={},me={},ye={},be={},le={},ge={},pe={},fe={},Oe={},Se={},ze={},je={},de={},vt={},he={},we={},Et={},Ae={},xt={},Ue={},ke={},Ve={},Pe={},Re={},qe={},Ie={},Ct={},ve={},Ee={},xe={},Ce={},Ke={},Me={},De={},Fe={},Te={},_e={},$e={},Le={},Be={},Ge={},He={},Je={},Ne={},Qe={},We={},Xe={},Ye={},Ze={},hs=new Uint8Array,ws=new Uint8Array,As=new Uint8Array,Us=new Uint8Array([0,0,0,0,0,0,0,0]),ks=new Uint8Array,Vs=new Uint8Array([0,0,0,0,0,0,8,64]),Ps=new Uint8Array,Rs=new Uint8Array([123,20,174,71,225,122,148,63]),qs=new Uint8Array,Is=new Uint8Array,vs=new Uint8Array([0,0,0,0,0,0,0,0]),Es=new Uint8Array,xs=new Uint8Array([0,0,0,0,0,0,240,63]),Cs=new Uint8Array,Ks=new Uint8Array([123,20,174,71,225,122,116,63]),Ms=new Uint8Array,Ds=new Uint8Array,Fs=new Uint8Array([0,0,0,0,0,0,0,0]),Ts=new Uint8Array,_s=new Uint8Array([0,0,0,0,0,0,36,64]),$s=new Uint8Array,Ls=new Uint8Array([0,0,0,0,0,0,240,63]),Bs=new Uint8Array,Gs=new Uint8Array,Hs=new Uint8Array,Js=new Uint8Array,Ns=new Uint8Array,Qs=new Uint8Array([4]),Ws=new Uint8Array,Xs=new Uint8Array,Ys=new Uint8Array([12,5,0,1]),Zs=new Uint8Array([99,111,109,46,113,117,97,115,105,109,111,110,100,111,0]),tr=new Uint8Array([38,5,0,1]),er=new Uint8Array([81,117,97,115,105,109,111,110,100,111,0]),sr=new Uint8Array,rr=new Uint8Array([1]),nr=new Uint8Array([66,5,0,1]),ar=new Uint8Array([65,32,115,105,109,112,108,101,32,100,105,102,102,101,114,101,110,99,101,32,107,101,121,32,102,111,114,32,99,104,114,111,109,97,32,107,101,121,105,110,103,0]),ir=new Uint8Array,or=new Uint8Array,cr=new Uint8Array,ur=new Uint8Array([0]),mr=new Uint8Array([1]),ts=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),yr=new Uint8Array,br=new Uint8Array,lr=new Uint8Array,gr=new Uint8Array,pr=new Uint8Array([4]),Kt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),es=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),fr=new Uint8Array,Or=new Uint8Array,Sr=new Uint8Array,zr=new Uint8Array,jr=new Uint8Array([4]),Mt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),dr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,215,163,60,10,215,163,59,0,0,128,63,0,0,0,0]),hr=new Uint8Array([27,0]),wr=new Uint8Array([27,0]),Ar=new Uint8Array,Ur=new Uint8Array,kr=new Uint8Array,Vr=new Uint8Array;Object.assign(Tt,{slots:{0:lt}});Object.assign(lt,{structure:s,memory:{array:hs},const:!0,slots:{0:_t}});Object.assign(_t,{structure:L});Object.assign($t,{slots:{0:gt,1:pt,2:ft,3:Ot}});Object.assign(gt,{structure:s,memory:{array:ws},const:!0,slots:{0:et}});Object.assign(et,{structure:f});Object.assign(pt,{structure:r,memory:{array:As},const:!0,slots:{0:Lt}});Object.assign(Lt,{structure:u,memory:{array:Us},const:!0});Object.assign(ft,{structure:r,memory:{array:ks},const:!0,slots:{0:Bt}});Object.assign(Bt,{structure:u,memory:{array:Vs},const:!0});Object.assign(Ot,{structure:r,memory:{array:Ps},const:!0,slots:{0:Gt}});Object.assign(Gt,{structure:u,memory:{array:Rs},const:!0});Object.assign(Ht,{slots:{0:St,1:zt,2:jt,3:dt}});Object.assign(St,{structure:s,memory:{array:qs},const:!0,slots:{0:et}});Object.assign(zt,{structure:r,memory:{array:Is},const:!0,slots:{0:Jt}});Object.assign(Jt,{structure:u,memory:{array:vs},const:!0});Object.assign(jt,{structure:r,memory:{array:Es},const:!0,slots:{0:Nt}});Object.assign(Nt,{structure:u,memory:{array:xs},const:!0});Object.assign(dt,{structure:r,memory:{array:Cs},const:!0,slots:{0:Qt}});Object.assign(Qt,{structure:u,memory:{array:Ks},const:!0});Object.assign(Wt,{slots:{0:ht,1:wt,2:At,3:Ut}});Object.assign(ht,{structure:s,memory:{array:Ms},const:!0,slots:{0:et}});Object.assign(wt,{structure:r,memory:{array:Ds},const:!0,slots:{0:Xt}});Object.assign(Xt,{structure:u,memory:{array:Fs},const:!0});Object.assign(At,{structure:r,memory:{array:Ts},const:!0,slots:{0:Yt}});Object.assign(Yt,{structure:u,memory:{array:_s},const:!0});Object.assign(Ut,{structure:r,memory:{array:$s},const:!0,slots:{0:Zt}});Object.assign(Zt,{structure:u,memory:{array:Ls},const:!0});Object.assign(te,{slots:{0:kt,1:Vt,2:Pt,3:Rt}});Object.assign(kt,{structure:B,memory:{array:Bs},const:!0,slots:{0:lt}});Object.assign(Vt,{structure:G,memory:{array:Gs},const:!0,slots:{0:gt,1:pt,2:ft,3:Ot}});Object.assign(Pt,{structure:H,memory:{array:Hs},const:!0,slots:{0:St,1:zt,2:jt,3:dt}});Object.assign(Rt,{structure:J,memory:{array:Js},const:!0,slots:{0:ht,1:wt,2:At,3:Ut}});Object.assign(ee,{slots:{0:st}});Object.assign(st,{structure:l,memory:{array:Ns},const:!0,slots:{0:se}});Object.assign(se,{structure:S,memory:{array:Qs},const:!0});Object.assign(re,{slots:{0:qt}});Object.assign(qt,{structure:A,memory:{array:Ws},const:!0,slots:{0:st}});Object.assign(ne,{slots:{0:It}});Object.assign(It,{structure:A,memory:{array:Xs},const:!0,slots:{0:st}});Object.assign(ae,{slots:{0:ie,1:ce,2:me,3:be,4:ge,5:pe,6:fe}});Object.assign(ie,{structure:D,memory:{array:Ys},const:!0,slots:{0:oe}});Object.assign(oe,{structure:M,memory:{array:Zs},reloc:16778508});Object.assign(ce,{structure:T,memory:{array:tr},const:!0,slots:{0:ue}});Object.assign(ue,{structure:F,memory:{array:er},reloc:16778534});Object.assign(me,{structure:l,memory:{array:sr},const:!0,slots:{0:ye}});Object.assign(ye,{structure:S,memory:{array:rr},const:!0});Object.assign(be,{structure:$,memory:{array:nr},const:!0,slots:{0:le}});Object.assign(le,{structure:_,memory:{array:ar},reloc:16778562});Object.assign(ge,{structure:N,memory:{array:ir},const:!0,slots:{0:kt,1:Vt,2:Pt,3:Rt}});Object.assign(pe,{structure:Q,memory:{array:or},const:!0,slots:{0:qt}});Object.assign(fe,{structure:W,memory:{array:cr},const:!0,slots:{0:It}});Object.assign(Oe,{slots:{0:Se,1:ze}});Object.assign(Se,{structure:p,memory:{array:ur},const:!0});Object.assign(ze,{structure:p,memory:{array:mr},const:!0});Object.assign(je,{memory:{array:ts},slots:{0:de}});Object.assign(de,{structure:R,memory:{array:ts,offset:0,length:8},slots:{0:vt}});Object.assign(vt,{structure:X,memory:{array:yr},reloc:0});Object.assign(he,{slots:{0:we,1:Ae,2:Ue}});Object.assign(we,{structure:s,memory:{array:br},const:!0,slots:{0:Et}});Object.assign(Et,{structure:P});Object.assign(Ae,{structure:s,memory:{array:lr},const:!0,slots:{0:xt}});Object.assign(xt,{structure:ot});Object.assign(Ue,{structure:l,memory:{array:gr},const:!0,slots:{0:ke}});Object.assign(ke,{structure:S,memory:{array:pr},const:!0});Object.assign(Ve,{memory:{array:Kt},slots:{0:Pe}});Object.assign(Pe,{structure:Y,memory:{array:Kt},slots:{0:Re}});Object.assign(Re,{structure:R,memory:{array:Kt,offset:0,length:8},slots:{0:vt}});Object.assign(qe,{memory:{array:es},slots:{0:Ie}});Object.assign(Ie,{structure:I,memory:{array:es,offset:0,length:8},slots:{0:Ct}});Object.assign(Ct,{structure:Z,memory:{array:fr},reloc:0});Object.assign(ve,{slots:{0:Ee,1:xe,2:Ce}});Object.assign(Ee,{structure:s,memory:{array:Or},const:!0,slots:{0:Et}});Object.assign(xe,{structure:s,memory:{array:Sr},const:!0,slots:{0:xt}});Object.assign(Ce,{structure:l,memory:{array:zr},const:!0,slots:{0:Ke}});Object.assign(Ke,{structure:S,memory:{array:jr},const:!0});Object.assign(Me,{memory:{array:Mt},slots:{0:De}});Object.assign(De,{structure:tt,memory:{array:Mt},slots:{0:Fe}});Object.assign(Fe,{structure:I,memory:{array:Mt,offset:0,length:8},slots:{0:Ct}});Object.assign(Te,{memory:{array:dr}});Object.assign(_e,{slots:{0:$e}});Object.assign($e,{structure:h,memory:{array:hr},const:!0});Object.assign(Le,{slots:{0:Be}});Object.assign(Be,{structure:w,memory:{array:wr},const:!0});Object.assign(Ge,{slots:{0:He,1:Ne,2:We,3:Ye}});Object.assign(He,{structure:s,memory:{array:Ar},const:!0,slots:{0:Je}});Object.assign(Je,{structure:it});Object.assign(Ne,{structure:s,memory:{array:Ur},const:!0,slots:{0:Qe}});Object.assign(Qe,{structure:q});Object.assign(We,{structure:s,memory:{array:kr},const:!0,slots:{0:Xe}});Object.assign(Xe,{structure:v});Object.assign(Ye,{structure:s,memory:{array:Vr},const:!0,slots:{0:Ze}});Object.assign(Ze,{structure:E});const Pr={argStruct:ut,thunkId:2,name:"createOutput"},Rr={argStruct:yt,thunkId:3,name:"createPartialOutput"};Object.assign(s,{...e,name:"type",align:1,instance:{members:[{...t,type:6,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:s}],methods:[]}});Object.assign(O,{...e,name:"u8",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(M,{...e,type:1,name:"[14:0]u8",length:14,byteSize:15,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(D,{...e,type:13,name:"*const [14:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:M}],methods:[]}});Object.assign(F,{...e,type:1,name:"[10:0]u8",length:10,byteSize:11,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(T,{...e,type:13,name:"*const [10:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:F}],methods:[]}});Object.assign(l,{...e,name:"comptime_int",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:l}],methods:[]}});Object.assign(S,{...e,name:"i8",byteSize:1,align:1,instance:{members:[{...t,type:2,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(_,{...e,type:1,name:"[41:0]u8",length:41,byteSize:42,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign($,{...e,type:13,name:"*const [41:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:_}],methods:[]}});Object.assign(f,{...e,name:"f32",byteSize:4,align:4,instance:{members:[{...t,type:4,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[]}});Object.assign(L,{...e,type:15,name:"@Vector(3, f32)",length:3,byteSize:16,align:16,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:f}],methods:[]}});Object.assign(B,{...e,type:2,name:"Struct2141286390",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s}],methods:[],template:Tt}});Object.assign(r,{...e,name:"comptime_float",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:r}],methods:[]}});Object.assign(u,{...e,name:"f64",byteSize:8,align:8,instance:{members:[{...t,type:4,bitOffset:0,bitSize:64,byteSize:8,structure:u}],methods:[]}});Object.assign(G,{...e,type:2,name:"Struct3841086153",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:r},{...t,type:7,slot:2,name:"maxValue",structure:r},{...t,type:7,slot:3,name:"defaultValue",structure:r}],methods:[],template:$t}});Object.assign(H,{...e,type:2,name:"Struct162834972",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:r},{...t,type:7,slot:2,name:"maxValue",structure:r},{...t,type:7,slot:3,name:"defaultValue",structure:r}],methods:[],template:Ht}});Object.assign(J,{...e,type:2,name:"Struct2255363975",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:r},{...t,type:7,slot:2,name:"maxValue",structure:r},{...t,type:7,slot:3,name:"defaultValue",structure:r}],methods:[],template:Wt}});Object.assign(N,{...e,type:2,name:"Struct3518626048",align:1,instance:{members:[{...t,type:7,slot:0,name:"keyColor",structure:B},{...t,type:7,slot:1,name:"tolerance",structure:G},{...t,type:7,slot:2,name:"ramp",structure:H},{...t,type:7,slot:3,name:"gamma",structure:J}],methods:[],template:te}});Object.assign(A,{...e,type:2,name:"Struct3832472641",align:1,instance:{members:[{...t,type:7,slot:0,name:"channels",structure:l}],methods:[],template:ee}});Object.assign(Q,{...e,type:2,name:"Struct2242867897",align:1,instance:{members:[{...t,type:7,slot:0,name:"src",structure:A}],methods:[],template:re}});Object.assign(W,{...e,type:2,name:"Struct172100005",align:1,instance:{members:[{...t,type:7,slot:0,name:"dst",structure:A}],methods:[],template:ne}});Object.assign(it,{...e,type:2,name:"difference-key.kernel",align:1,static:{members:[{...t,type:7,slot:0,name:"namespace",structure:D},{...t,type:7,slot:1,name:"vendor",structure:T},{...t,type:7,slot:2,name:"version",structure:l},{...t,type:7,slot:3,name:"description",structure:$},{...t,type:7,slot:4,name:"parameters",structure:N},{...t,type:7,slot:5,name:"inputImages",structure:Q},{...t,type:7,slot:6,name:"outputImages",structure:W}],methods:[],template:ae}});Object.assign(P,{...e,type:15,name:"@Vector(4, u8)",length:4,byteSize:4,align:4,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(X,{...e,type:14,name:"[_]const @Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:P}],methods:[]}});Object.assign(R,{...e,type:13,name:"[]const @Vector(4, u8)",byteSize:8,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:X}],methods:[]}});Object.assign(c,{...e,name:"u32",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[]}});Object.assign(p,{...e,type:11,name:"difference-key.ColorSpace",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:1,byteSize:1,structure:p}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"srgb",structure:p},{...t,type:7,slot:1,name:"display-p3",structure:p}],methods:[],template:Oe}});Object.assign(V,{...e,name:"usize",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:V}],methods:[]}});Object.assign(ot,{...e,type:15,name:"@Vector(4, f32)",length:4,byteSize:16,align:16,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:f}],methods:[]}});Object.assign(Y,{...e,type:2,name:"difference-key.Image(u8,4,false)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:R},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:p},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:V}],methods:[],template:je},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:l}],methods:[],template:he}});Object.assign(q,{...e,type:2,name:"difference-key.KernelInput(u8,difference-key.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:Y}],methods:[],template:Ve}});Object.assign(Z,{...e,type:14,name:"[_]@Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:P}],methods:[]}});Object.assign(I,{...e,type:13,name:"[]@Vector(4, u8)",byteSize:8,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:Z}],methods:[]}});Object.assign(tt,{...e,type:2,name:"difference-key.Image(u8,4,true)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:I},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:p},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:V}],methods:[],template:qe},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:l}],methods:[],template:ve}});Object.assign(v,{...e,type:2,name:"difference-key.KernelOutput(u8,difference-key.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:tt}],methods:[],template:Me}});Object.assign(E,{...e,type:2,name:"difference-key.KernelParameters(difference-key.kernel)",byteSize:32,align:16,instance:{members:[{...t,type:5,bitOffset:0,bitSize:96,byteSize:16,slot:0,name:"keyColor",structure:L},{...t,type:4,bitOffset:128,bitSize:32,byteSize:4,slot:1,name:"tolerance",structure:f},{...t,type:4,bitOffset:160,bitSize:32,byteSize:4,slot:2,name:"ramp",structure:f},{...t,type:4,bitOffset:192,bitSize:32,byteSize:4,slot:3,name:"gamma",structure:f}],methods:[],template:Te}});Object.assign(h,{...e,type:10,name:"ErrorSet1800823049",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:h}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:h}],methods:[],template:_e}});Object.assign(ct,{...e,type:9,name:"ErrorSet1800823049!difference-key.KernelOutput(u8,difference-key.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:v},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:h}],methods:[]}});Object.assign(ut,{...e,type:5,name:"createOutput",byteSize:96,align:16,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:256,bitSize:32,byteSize:4,slot:3,name:"0",structure:c},{...t,type:3,isRequired:!0,bitOffset:288,bitSize:32,byteSize:4,slot:4,name:"1",structure:c},{...t,type:5,isRequired:!0,bitOffset:320,bitSize:192,byteSize:24,slot:0,name:"2",structure:q},{...t,type:5,isRequired:!0,bitOffset:0,bitSize:256,byteSize:32,slot:1,name:"3",structure:E},{...t,type:5,isRequired:!0,bitOffset:512,bitSize:224,byteSize:28,slot:2,name:"retval",structure:ct}],methods:[]}});Object.assign(w,{...e,type:10,name:"ErrorSet2835222372",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:w}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:w}],methods:[],template:Le}});Object.assign(mt,{...e,type:9,name:"ErrorSet2835222372!difference-key.KernelOutput(u8,difference-key.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:v},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:w}],methods:[]}});Object.assign(yt,{...e,type:5,name:"createPartialOutput",byteSize:112,align:16,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:256,bitSize:32,byteSize:4,slot:3,name:"0",structure:c},{...t,type:3,isRequired:!0,bitOffset:288,bitSize:32,byteSize:4,slot:4,name:"1",structure:c},{...t,type:3,isRequired:!0,bitOffset:320,bitSize:32,byteSize:4,slot:5,name:"2",structure:c},{...t,type:3,isRequired:!0,bitOffset:352,bitSize:32,byteSize:4,slot:6,name:"3",structure:c},{...t,type:5,isRequired:!0,bitOffset:384,bitSize:192,byteSize:24,slot:0,name:"4",structure:q},{...t,type:5,isRequired:!0,bitOffset:0,bitSize:256,byteSize:32,slot:1,name:"5",structure:E},{...t,type:5,isRequired:!0,bitOffset:576,bitSize:224,byteSize:28,slot:2,name:"retval",structure:mt}],methods:[]}});Object.assign(bt,{...e,type:2,name:"difference-key",align:1,static:{members:[{...t,type:7,slot:0,name:"kernel",structure:s},{...t,type:7,slot:1,name:"Input",structure:s},{...t,type:7,slot:2,name:"Output",structure:s},{...t,type:7,slot:3,name:"Parameters",structure:s}],methods:[Pr,Rr],template:Ge}});const qr=[s,O,M,D,F,T,l,S,_,$,f,L,B,r,u,G,H,J,N,A,Q,W,it,P,X,R,c,p,V,ot,Y,q,Z,I,tt,v,E,h,ct,ut,w,mt,yt,bt],Ir=bt,vr={runtimeSafety:!1,littleEndian:!0},rt=gs();rt.getSpecialExports();rt.recreateStructures(qr,vr);const Er=(async()=>{const i=new URL("difference-key-7daf8fa6.wasm",import.meta.url).href;return fetch(i)})();rt.loadModule(Er);rt.linkVariables(!0);const{constructor:xr}=Ir,{createPartialOutput:Cr,Input:Kr,kernel:at}=xr;function Mr(i,m,o,a,n={},z={}){const j=[];for(const[b]of at.inputImages)j.push(b);const U=[];for(const[b]of at.outputImages)U.push(b);if(Array.isArray(n)){const b=n;n={};for(const[g,d]of j.entries())n[d]=b[g]}const y=new Kr(void 0),x=[];let k;for(const b of j){let g=n[b];if(g||(j.length===1&&["data","width","height"].every(d=>!!n[d])?g=n:x.push(b)),y[b]=g,k){if(g.colorSpace!==k)throw new Error(`Input images must all use the same color space: ${k}`)}else k=g.colorSpace}if(x.length>0)throw new Error(`Missing input image${x.length>1?"s":""}: ${x.join(", ")}`);const nt=Cr(i,m,o,a,y,z),Dt=b=>{const g={};for(const d of U){const{data:{typedArray:C},width:Ft,height:ss}=b[d];let K;if(typeof ImageData=="function"){const rs=new Uint8ClampedArray(C.buffer,C.byteOffset,C.byteLength);K=new ImageData(rs,Ft,a,{colorSpace:k})}else K={data:C,width:Ft,height:ss};if(U.length===1)return K;g[d]=K}return g};return nt[Symbol.toStringTag]==="Promise"?nt.then(Dt):Dt(nt)}function Dr(){const i={};for(let[m,o]of at){if(m==="parameters"){const a={};for(const[n,z]of o){const j=a[n]={};for(let[U,y]of z)typeof y=="object"?y=y.string??y.valueOf():typeof y=="function"&&(y=Fr(y.name)),j[U]=y}o=a}else typeof o=="object"&&(o=o.string??o.valueOf());i[m]=o}return i}function Fr(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=async i=>{if(!Array.isArray(i.data))return;const[m,o,...a]=i.data;try{const[n,z]=await Tr(m,a);postMessage([m,o,n],{transfer:z})}catch(n){postMessage(["error",o,n])}};async function Tr(i,m){switch(i){case"getKernelInfo":return[Dr(...m)];case"createPartialImageData":const a=await Mr(...m),n=[];if("data"in a&&"width"in a&&"height"in a)n.push(a.data.buffer);else for(const z of Object.entries(a))n.push(a.data.buffer);return[a,n];default:throw new Error(`Unknown function: ${i}`)}}postMessage("ready");
