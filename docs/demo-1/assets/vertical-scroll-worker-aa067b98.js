import{u as ct,a as yt,b as pt,d as ft,c as dt,e as bt,f as ht,g as gt,h as St,i as zt,j as Rt,k as Vt,l as Ot,m as qt,n as _t,o as wt,p as At,q as Ut,r as jt}from"./index-778418ea.js";ct();yt();pt();ft();dt();bt();ht();gt();St();zt();Rt();Vt();Ot();qt();_t();wt();At();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},f={},ce={},ye={},X={},pe={},fe={},Y={},d={},S={},r={},a={},s={},de={},be={},K={},he={},D={},ge={},Se={},G={},ze={},M={},Re={},Ve={},$={},Oe={},L={},w={},A={},z={},qe={},J={},C={},I={},q={},_e={},Q={},we={},Z={},Ae={},O={},g={},Ue={},je={},ee={},xe={},te={},Pe={},se={},Ne={},Ce={},ae={},Ie={},re={},ve={},me={},ie={},v={},_={},Fe={},oe={},ke={},le={},De={},U={},Te={},Be={},y={},Ee={},P={},N={},He={},ne={},F={},We={},Xe={},ue={},k={},T={},Ge={},Me={},$e={},Le={},Je={},Qe={},Ze={};Object.assign(f,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:5});Object.assign(ce,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:4});Object.assign(ye,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:3});Object.assign(X,{...t,type:11,name:"**const [14:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:2});Object.assign(pe,{...t,type:1,name:"[9:0]u8",length:9,byteSize:10,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:8});Object.assign(fe,{...t,type:11,name:"*const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pe}],methods:[],template:null},slot:7});Object.assign(Y,{...t,type:11,name:"**const [9:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:6});Object.assign(d,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:d}],methods:[],template:null},slot:10});Object.assign(S,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:d}],methods:[],template:null},slot:9});Object.assign(r,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:r}],methods:[],template:null},slot:30});Object.assign(a,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:a}],methods:[],template:null},slot:60});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:a}],methods:[],template:null},slot:59});Object.assign(de,{...t,type:1,name:"[15:0]u8",length:15,byteSize:16,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:63});Object.assign(be,{...t,type:11,name:"*const [15:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:de}],methods:[],template:null},slot:62});Object.assign(K,{...t,type:11,name:"*const *const [15:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:61});const xt=new Uint8Array([]),Pt=new Uint8Array([48,30,16,0]),p=new Uint8Array([0,0,0,0,0,0,0,0]),Nt=new Uint8Array([96,30,16,0]),j=new Uint8Array([0,0,0,0,0,64,143,64]),Ct=new Uint8Array([136,30,16,0]),rt=new Uint8Array([0,0,0,0,0,0,89,64]),It=new Uint8Array([144,30,16,0]),vt=new Uint8Array([1,31,16,0]),Ft=new Uint8Array([84,111,112,32,82,111,108,108,32,82,97,100,105,117,115,0]);Object.assign(he,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 100, comptime displayName: *const [15:0]u8 = "Top Roll Radius"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:r},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"displayName",structure:K}],methods:[],template:{memory:{array:xt},slots:{0:{structure:s,memory:{array:Pt},slots:{0:{structure:a,memory:{array:p},address:1056304}}},1:{structure:s,memory:{array:Nt},slots:{0:{structure:a,memory:{array:j},address:1056352}}},2:{structure:s,memory:{array:Ct},slots:{0:{structure:a,memory:{array:rt},address:1056392}}},3:{structure:K,memory:{array:It},slots:{0:{structure:be,memory:{array:vt},address:1056400,slots:{0:{structure:de,memory:{array:Ft},address:1056513}}}}}}}},slot:37});Object.assign(D,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 100, comptime displayName: *const [15:0]u8 = "Top Roll Radius"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:he}],methods:[],template:null},slot:36});Object.assign(ge,{...t,type:1,name:"[18:0]u8",length:18,byteSize:19,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:66});Object.assign(Se,{...t,type:11,name:"*const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ge}],methods:[],template:null},slot:65});Object.assign(G,{...t,type:11,name:"*const *const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Se}],methods:[],template:null},slot:64});const kt=new Uint8Array([]),Tt=new Uint8Array([48,30,16,0]),Bt=new Uint8Array([96,30,16,0]),Et=new Uint8Array([136,30,16,0]),Ht=new Uint8Array([128,30,16,0]),Wt=new Uint8Array([238,30,16,0]),Xt=new Uint8Array([66,111,116,116,111,109,32,82,111,108,108,32,82,97,100,105,117,115,0]);Object.assign(ze,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 100, comptime displayName: *const [18:0]u8 = "Bottom Roll Radius"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:r},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"displayName",structure:G}],methods:[],template:{memory:{array:kt},slots:{0:{structure:s,memory:{array:Tt},slots:{0:{structure:a,memory:{array:p},address:1056304}}},1:{structure:s,memory:{array:Bt},slots:{0:{structure:a,memory:{array:j},address:1056352}}},2:{structure:s,memory:{array:Et},slots:{0:{structure:a,memory:{array:rt},address:1056392}}},3:{structure:G,memory:{array:Ht},slots:{0:{structure:Se,memory:{array:Wt},address:1056384,slots:{0:{structure:ge,memory:{array:Xt},address:1056494}}}}}}}},slot:39});Object.assign(M,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 100, comptime displayName: *const [18:0]u8 = "Bottom Roll Radius"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ze}],methods:[],template:null},slot:38});Object.assign(Re,{...t,type:1,name:"[11:0]u8",length:11,byteSize:12,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:69});Object.assign(Ve,{...t,type:11,name:"*const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Re}],methods:[],template:null},slot:68});Object.assign($,{...t,type:11,name:"*const *const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ve}],methods:[],template:null},slot:67});const Yt=new Uint8Array([]),Kt=new Uint8Array([48,30,16,0]),Dt=new Uint8Array([96,30,16,0]),Gt=new Uint8Array([112,30,16,0]),mt=new Uint8Array([0,0,0,0,0,64,127,64]),Mt=new Uint8Array([124,30,16,0]),$t=new Uint8Array([226,30,16,0]),Lt=new Uint8Array([82,111,108,108,32,72,101,105,103,104,116,0]);Object.assign(Oe,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 500, comptime displayName: *const [11:0]u8 = "Roll Height"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:r},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"displayName",structure:$}],methods:[],template:{memory:{array:Yt},slots:{0:{structure:s,memory:{array:Kt},slots:{0:{structure:a,memory:{array:p},address:1056304}}},1:{structure:s,memory:{array:Dt},slots:{0:{structure:a,memory:{array:j},address:1056352}}},2:{structure:s,memory:{array:Gt},slots:{0:{structure:a,memory:{array:mt},address:1056368}}},3:{structure:$,memory:{array:Mt},slots:{0:{structure:Ve,memory:{array:$t},address:1056380,slots:{0:{structure:Re,memory:{array:Lt},address:1056482}}}}}}}},slot:41});Object.assign(L,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 500, comptime displayName: *const [11:0]u8 = "Roll Height"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Oe}],methods:[],template:null},slot:40});Object.assign(w,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:72});Object.assign(A,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:w}],methods:[],template:null},slot:71});Object.assign(z,{...t,type:11,name:"*const *const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:70});const Jt=new Uint8Array([]),Qt=new Uint8Array([48,30,16,0]),Zt=new Uint8Array([96,30,16,0]),es=new Uint8Array([48,30,16,0]),ts=new Uint8Array([120,30,16,0]),ss=new Uint8Array([212,30,16,0]),as=new Uint8Array([82,111,108,108,32,79,102,102,115,101,116,32,89,0]);Object.assign(qe,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 0, comptime displayName: *const [13:0]u8 = "Roll Offset Y"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:r},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"displayName",structure:z}],methods:[],template:{memory:{array:Jt},slots:{0:{structure:s,memory:{array:Qt},slots:{0:{structure:a,memory:{array:p},address:1056304}}},1:{structure:s,memory:{array:Zt},slots:{0:{structure:a,memory:{array:j},address:1056352}}},2:{structure:s,memory:{array:es},slots:{0:{structure:a,memory:{array:p},address:1056304}}},3:{structure:z,memory:{array:ts},slots:{0:{structure:A,memory:{array:ss},address:1056376,slots:{0:{structure:w,memory:{array:as},address:1056468}}}}}}}},slot:43});Object.assign(J,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 0, comptime displayName: *const [13:0]u8 = "Roll Offset Y"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:qe}],methods:[],template:null},slot:42});Object.assign(C,{...t,type:1,name:"[10:0]u8",length:10,byteSize:11,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:75});Object.assign(I,{...t,type:11,name:"*const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:C}],methods:[],template:null},slot:74});Object.assign(q,{...t,type:11,name:"*const *const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:I}],methods:[],template:null},slot:73});const rs=new Uint8Array([]),ms=new Uint8Array([48,30,16,0]),is=new Uint8Array([96,30,16,0]),os=new Uint8Array([112,30,16,0]),ls=new Uint8Array([104,30,16,0]),ns=new Uint8Array([201,30,16,0]),us=new Uint8Array([82,111,108,108,32,87,105,100,116,104,0]);Object.assign(_e,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 500, comptime displayName: *const [10:0]u8 = "Roll Width"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:r},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"displayName",structure:q}],methods:[],template:{memory:{array:rs},slots:{0:{structure:s,memory:{array:ms},slots:{0:{structure:a,memory:{array:p},address:1056304}}},1:{structure:s,memory:{array:is},slots:{0:{structure:a,memory:{array:j},address:1056352}}},2:{structure:s,memory:{array:os},slots:{0:{structure:a,memory:{array:mt},address:1056368}}},3:{structure:q,memory:{array:ls},slots:{0:{structure:I,memory:{array:ns},address:1056360,slots:{0:{structure:C,memory:{array:us},address:1056457}}}}}}}},slot:45});Object.assign(Q,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 500, comptime displayName: *const [10:0]u8 = "Roll Width"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_e}],methods:[],template:null},slot:44});const cs=new Uint8Array([]),ys=new Uint8Array([48,30,16,0]),ps=new Uint8Array([96,30,16,0]),fs=new Uint8Array([48,30,16,0]),ds=new Uint8Array([92,30,16,0]),bs=new Uint8Array([187,30,16,0]),hs=new Uint8Array([82,111,108,108,32,79,102,102,115,101,116,32,88,0]);Object.assign(we,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 0, comptime displayName: *const [13:0]u8 = "Roll Offset X"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:r},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"displayName",structure:z}],methods:[],template:{memory:{array:cs},slots:{0:{structure:s,memory:{array:ys},slots:{0:{structure:a,memory:{array:p},address:1056304}}},1:{structure:s,memory:{array:ps},slots:{0:{structure:a,memory:{array:j},address:1056352}}},2:{structure:s,memory:{array:fs},slots:{0:{structure:a,memory:{array:p},address:1056304}}},3:{structure:z,memory:{array:ds},slots:{0:{structure:A,memory:{array:bs},address:1056348,slots:{0:{structure:w,memory:{array:hs},address:1056443}}}}}}}},slot:47});Object.assign(Z,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 0, comptime displayName: *const [13:0]u8 = "Roll Offset X"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:we}],methods:[],template:null},slot:46});Object.assign(Ae,{...t,type:13,name:"@Vector(3, f32)",length:3,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:r}],methods:[],template:null},slot:31});const gs=new Uint8Array([]),Ss=new Uint8Array([48,30,16,0]),zs=new Uint8Array([48,30,16,0]),Rs=new Uint8Array([48,30,16,0]);Object.assign(O,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:gs},slots:{0:{structure:s,memory:{array:Ss},slots:{0:{structure:a,memory:{array:p},address:1056304}}},1:{structure:s,memory:{array:zs},slots:{0:{structure:a,memory:{array:p},address:1056304}}},2:{structure:s,memory:{array:Rs},slots:{0:{structure:a,memory:{array:p},address:1056304}}}}}},slot:77});Object.assign(g,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:O}],methods:[],template:null},slot:76});Object.assign(Ue,{...t,type:1,name:"[8:0]u8",length:8,byteSize:9,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:80});Object.assign(je,{...t,type:11,name:"*const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ue}],methods:[],template:null},slot:79});Object.assign(ee,{...t,type:11,name:"*const *const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:je}],methods:[],template:null},slot:78});const Vs=new Uint8Array([]),Os=new Uint8Array([170,170,170,170]),l=new Uint8Array([]),qs=new Uint8Array([170,170,170,170]),_s=new Uint8Array([170,170,170,170]),ws=new Uint8Array([88,30,16,0]),As=new Uint8Array([178,30,16,0]),Us=new Uint8Array([99,111,108,111,114,82,71,66,0]),js=new Uint8Array([84,30,16,0]),xs=new Uint8Array([167,30,16,0]),Ps=new Uint8Array([70,111,103,32,67,111,108,111,117,114,0]);Object.assign(xe,{...t,type:2,name:'struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime parameterType: *const [8:0]u8 = "colorRGB", comptime displayName: *const [10:0]u8 = "Fog Colour"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:Ae},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:g},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:g},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:g},{...e,type:8,isRequired:!1,slot:3,name:"parameterType",structure:ee},{...e,type:8,isRequired:!1,slot:4,name:"displayName",structure:q}],methods:[],template:{memory:{array:Vs},slots:{0:{structure:g,memory:{array:Os},slots:{0:{structure:O,memory:{array:l},address:-1431655766}}},1:{structure:g,memory:{array:qs},slots:{0:{structure:O,memory:{array:l},address:-1431655766}}},2:{structure:g,memory:{array:_s},slots:{0:{structure:O,memory:{array:l},address:-1431655766}}},3:{structure:ee,memory:{array:ws},slots:{0:{structure:je,memory:{array:As},address:1056344,slots:{0:{structure:Ue,memory:{array:Us},address:1056434}}}}},4:{structure:q,memory:{array:js},slots:{0:{structure:I,memory:{array:xs},address:1056340,slots:{0:{structure:C,memory:{array:Ps},address:1056423}}}}}}}},slot:49});Object.assign(te,{...t,type:11,name:'*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime parameterType: *const [8:0]u8 = "colorRGB", comptime displayName: *const [10:0]u8 = "Fog Colour"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:xe}],methods:[],template:null},slot:48});const Ns=new Uint8Array([]),Cs=new Uint8Array([48,30,16,0]),Is=new Uint8Array([72,30,16,0]),it=new Uint8Array([0,0,0,0,0,0,36,64]),vs=new Uint8Array([64,30,16,0]),ot=new Uint8Array([0,0,0,0,0,0,240,63]),Fs=new Uint8Array([80,30,16,0]),ks=new Uint8Array([153,30,16,0]),Ts=new Uint8Array([70,111,103,32,73,110,102,108,117,101,110,99,101,0]);Object.assign(Pe,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1, comptime displayName: *const [13:0]u8 = "Fog Influence"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:r},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"displayName",structure:z}],methods:[],template:{memory:{array:Ns},slots:{0:{structure:s,memory:{array:Cs},slots:{0:{structure:a,memory:{array:p},address:1056304}}},1:{structure:s,memory:{array:Is},slots:{0:{structure:a,memory:{array:it},address:1056328}}},2:{structure:s,memory:{array:vs},slots:{0:{structure:a,memory:{array:ot},address:1056320}}},3:{structure:z,memory:{array:Fs},slots:{0:{structure:A,memory:{array:ks},address:1056336,slots:{0:{structure:w,memory:{array:Ts},address:1056409}}}}}}}},slot:51});Object.assign(se,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1, comptime displayName: *const [13:0]u8 = "Fog Influence"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Pe}],methods:[],template:null},slot:50});Object.assign(Ne,{...t,type:1,name:"[4:0]u8",length:4,byteSize:5,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:83});Object.assign(Ce,{...t,type:11,name:"*const [4:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ne}],methods:[],template:null},slot:82});Object.assign(ae,{...t,type:11,name:"*const *const [4:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ce}],methods:[],template:null},slot:81});const Bs=new Uint8Array([]),Es=new Uint8Array([48,30,16,0]),Hs=new Uint8Array([72,30,16,0]),Ws=new Uint8Array([64,30,16,0]),Xs=new Uint8Array([60,30,16,0]),Ys=new Uint8Array([148,30,16,0]),Ks=new Uint8Array([70,97,100,101,0]);Object.assign(Ie,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1, comptime displayName: *const [4:0]u8 = "Fade"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:r},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"displayName",structure:ae}],methods:[],template:{memory:{array:Bs},slots:{0:{structure:s,memory:{array:Es},slots:{0:{structure:a,memory:{array:p},address:1056304}}},1:{structure:s,memory:{array:Hs},slots:{0:{structure:a,memory:{array:it},address:1056328}}},2:{structure:s,memory:{array:Ws},slots:{0:{structure:a,memory:{array:ot},address:1056320}}},3:{structure:ae,memory:{array:Xs},slots:{0:{structure:Ce,memory:{array:Ys},address:1056316,slots:{0:{structure:Ne,memory:{array:Ks},address:1056404}}}}}}}},slot:53});Object.assign(re,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1, comptime displayName: *const [4:0]u8 = "Fade"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ie}],methods:[],template:null},slot:52});const Ds=new Uint8Array([]),Gs=new Uint8Array([170,170,170,170]),Ms=new Uint8Array([170,170,170,170]),$s=new Uint8Array([170,170,170,170]),Ls=new Uint8Array([170,170,170,170]),Js=new Uint8Array([170,170,170,170]),Qs=new Uint8Array([170,170,170,170]),Zs=new Uint8Array([170,170,170,170]),ea=new Uint8Array([170,170,170,170]),ta=new Uint8Array([170,170,170,170]);Object.assign(ve,{...t,type:2,name:'struct{comptime topRollRadius: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 100, comptime displayName: *const [15:0]u8 = "Top Roll Radius"} = .{.type = f32, .minValue = 0, .maxValue = 1000, .defaultValue = 100, .displayName = "Top Roll Radius"}, comptime bottomRollRadius: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 100, comptime displayName: *const [18:0]u8 = "Bottom Roll Radius"} = .{.type = f32, .minValue = 0, .maxValue = 1000, .defaultValue = 100, .displayName = "Bottom Roll Radius"}, comptime rollHeight: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 500, comptime displayName: *const [11:0]u8 = "Roll Height"} = .{.type = f32, .minValue = 0, .maxValue = 1000, .defaultValue = 500, .displayName = "Roll Height"}, comptime rollOffsetY: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 0, comptime displayName: *const [13:0]u8 = "Roll Offset Y"} = .{.type = f32, .minValue = 0, .maxValue = 1000, .defaultValue = 0, .displayName = "Roll Offset Y"}, comptime rollWidth: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 500, comptime displayName: *const [10:0]u8 = "Roll Width"} = .{.type = f32, .minValue = 0, .maxValue = 1000, .defaultValue = 500, .displayName = "Roll Width"}, comptime rollOffsetX: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 0, comptime displayName: *const [13:0]u8 = "Roll Offset X"} = .{.type = f32, .minValue = 0, .maxValue = 1000, .defaultValue = 0, .displayName = "Roll Offset X"}, comptime fogColour: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime parameterType: *const [8:0]u8 = "colorRGB", comptime displayName: *const [10:0]u8 = "Fog Colour"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{0, 0, 0}, .defaultValue = .{0, 0, 0}, .parameterType = "colorRGB", .displayName = "Fog Colour"}, comptime fogInfluence: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1, comptime displayName: *const [13:0]u8 = "Fog Influence"} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 1, .displayName = "Fog Influence"}, comptime fade: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1, comptime displayName: *const [4:0]u8 = "Fade"} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 1, .displayName = "Fade"}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"topRollRadius",structure:D},{...e,type:8,isRequired:!1,slot:1,name:"bottomRollRadius",structure:M},{...e,type:8,isRequired:!1,slot:2,name:"rollHeight",structure:L},{...e,type:8,isRequired:!1,slot:3,name:"rollOffsetY",structure:J},{...e,type:8,isRequired:!1,slot:4,name:"rollWidth",structure:Q},{...e,type:8,isRequired:!1,slot:5,name:"rollOffsetX",structure:Z},{...e,type:8,isRequired:!1,slot:6,name:"fogColour",structure:te},{...e,type:8,isRequired:!1,slot:7,name:"fogInfluence",structure:se},{...e,type:8,isRequired:!1,slot:8,name:"fade",structure:re}],methods:[],template:{memory:{array:Ds},slots:{0:{structure:D,memory:{array:Gs},slots:{0:{structure:he,memory:{array:l},address:-1431655766}}},1:{structure:M,memory:{array:Ms},slots:{0:{structure:ze,memory:{array:l},address:-1431655766}}},2:{structure:L,memory:{array:$s},slots:{0:{structure:Oe,memory:{array:l},address:-1431655766}}},3:{structure:J,memory:{array:Ls},slots:{0:{structure:qe,memory:{array:l},address:-1431655766}}},4:{structure:Q,memory:{array:Js},slots:{0:{structure:_e,memory:{array:l},address:-1431655766}}},5:{structure:Z,memory:{array:Qs},slots:{0:{structure:we,memory:{array:l},address:-1431655766}}},6:{structure:te,memory:{array:Zs},slots:{0:{structure:xe,memory:{array:l},address:-1431655766}}},7:{structure:se,memory:{array:ea},slots:{0:{structure:Pe,memory:{array:l},address:-1431655766}}},8:{structure:re,memory:{array:ta},slots:{0:{structure:Ie,memory:{array:l},address:-1431655766}}}}}},slot:12});Object.assign(me,{...t,type:11,name:'*struct{comptime topRollRadius: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 100, comptime displayName: *const [15:0]u8 = "Top Roll Radius"} = .{.type = f32, .minValue = 0, .maxValue = 1000, .defaultValue = 100, .displayName = "Top Roll Radius"}, comptime bottomRollRadius: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 100, comptime displayName: *const [18:0]u8 = "Bottom Roll Radius"} = .{.type = f32, .minValue = 0, .maxValue = 1000, .defaultValue = 100, .displayName = "Bottom Roll Radius"}, comptime rollHeight: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 500, comptime displayName: *const [11:0]u8 = "Roll Height"} = .{.type = f32, .minValue = 0, .maxValue = 1000, .defaultValue = 500, .displayName = "Roll Height"}, comptime rollOffsetY: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 0, comptime displayName: *const [13:0]u8 = "Roll Offset Y"} = .{.type = f32, .minValue = 0, .maxValue = 1000, .defaultValue = 0, .displayName = "Roll Offset Y"}, comptime rollWidth: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 500, comptime displayName: *const [10:0]u8 = "Roll Width"} = .{.type = f32, .minValue = 0, .maxValue = 1000, .defaultValue = 500, .displayName = "Roll Width"}, comptime rollOffsetX: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 0, comptime displayName: *const [13:0]u8 = "Roll Offset X"} = .{.type = f32, .minValue = 0, .maxValue = 1000, .defaultValue = 0, .displayName = "Roll Offset X"}, comptime fogColour: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime parameterType: *const [8:0]u8 = "colorRGB", comptime displayName: *const [10:0]u8 = "Fog Colour"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{0, 0, 0}, .defaultValue = .{0, 0, 0}, .parameterType = "colorRGB", .displayName = "Fog Colour"}, comptime fogInfluence: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1, comptime displayName: *const [13:0]u8 = "Fog Influence"} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 1, .displayName = "Fog Influence"}, comptime fade: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1, comptime displayName: *const [4:0]u8 = "Fade"} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 1, .displayName = "Fade"}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ve}],methods:[],template:null},slot:11});Object.assign(ie,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:d}],methods:[],template:null},slot:84});const sa=new Uint8Array([]),aa=new Uint8Array([56,30,16,0]),ra=new Uint8Array([4,0,0,0]);Object.assign(v,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:ie}],methods:[],template:{memory:{array:sa},slots:{0:{structure:ie,memory:{array:aa},slots:{0:{structure:d,memory:{array:ra},address:1056312}}}}}},slot:55});Object.assign(_,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:v}],methods:[],template:null},slot:54});const ma=new Uint8Array([]),ia=new Uint8Array([170,170,170,170]);Object.assign(Fe,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:_}],methods:[],template:{memory:{array:ma},slots:{0:{structure:_,memory:{array:ia},slots:{0:{structure:v,memory:{array:l},address:-1431655766}}}}}},slot:14});Object.assign(oe,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Fe}],methods:[],template:null},slot:13});const oa=new Uint8Array([]),la=new Uint8Array([170,170,170,170]);Object.assign(ke,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:_}],methods:[],template:{memory:{array:oa},slots:{0:{structure:_,memory:{array:la},slots:{0:{structure:v,memory:{array:l},address:-1431655766}}}}}},slot:16});Object.assign(le,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ke}],methods:[],template:null},slot:15});const na=new Uint8Array([]),ua=new Uint8Array([]),ca=new Uint8Array([100,253,15,0]),ya=new Uint8Array([88,86,16,0]),pa=new Uint8Array([119,119,119,46,116,98,121,114,110,101,46,111,114,103,0]),fa=new Uint8Array([132,253,15,0]),da=new Uint8Array([78,86,16,0]),ba=new Uint8Array([84,111,109,32,66,121,114,110,101,0]),ha=new Uint8Array([164,253,15,0]),ga=new Uint8Array([1,0,0,0]),Sa=new Uint8Array([170,170,170,170]),za=new Uint8Array([170,170,170,170]),Ra=new Uint8Array([170,170,170,170]);Object.assign(De,{...t,type:2,name:"vertical-scroll.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:na}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:X},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:Y},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:S},{...e,type:6,isRequired:!1,slot:3,name:"parameters",structure:me},{...e,type:6,isRequired:!1,slot:4,name:"inputImages",structure:oe},{...e,type:6,isRequired:!1,slot:5,name:"outputImages",structure:le}],methods:[],template:{memory:{array:ua},slots:{0:{structure:X,memory:{array:ca},slots:{0:{structure:ye,memory:{array:ya},slots:{0:{structure:ce,memory:{array:pa},address:1070680}}}}},1:{structure:Y,memory:{array:fa},slots:{0:{structure:fe,memory:{array:da},slots:{0:{structure:pe,memory:{array:ba},address:1070670}}}}},2:{structure:S,memory:{array:ha},slots:{0:{structure:d,memory:{array:ga}}}},3:{structure:me,memory:{array:Sa},slots:{0:{structure:ve,memory:{array:l},address:-1431655766}}},4:{structure:oe,memory:{array:za},slots:{0:{structure:Fe,memory:{array:l},address:-1431655766}}},5:{structure:le,memory:{array:Ra},slots:{0:{structure:ke,memory:{array:l},address:-1431655766}}}}}},slot:1});Object.assign(U,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:21});Object.assign(Te,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:U}],methods:[],template:null},slot:20});Object.assign(Be,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Te}],methods:[],template:null},slot:19});Object.assign(y,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:22});const Va=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Ee,{...t,type:9,name:"vertical-scroll.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:d},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:d}],methods:[],template:{memory:{array:Va}}},slot:23});Object.assign(P,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:P}],methods:[],template:null},slot:24});Object.assign(N,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:N}],methods:[],template:null},slot:25});Object.assign(He,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:r}],methods:[],template:null},slot:56});const Oa=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),qa=new Uint8Array([]),_a=new Uint8Array([56,252,15,0]),wa=new Uint8Array([4,0,0,0]);Object.assign(ne,{...t,type:2,name:"vertical-scroll.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Be},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:y},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:y},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Ee},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:P},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:N}],methods:[],template:{memory:{array:Oa}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:U},{...e,type:7,isRequired:!1,name:"FPixel",structure:He},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:S}],methods:[],template:{memory:{array:qa},slots:{0:{structure:S,memory:{array:_a},slots:{0:{structure:d,memory:{array:wa}}}}}}},slot:18});const Aa=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ua=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ja=new Uint8Array([0,0,0,0,0,0,0,0]),et=new Uint8Array([]);Object.assign(F,{...t,type:2,name:"vertical-scroll.KernelInput(u8,vertical-scroll.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:ne}],methods:[],template:{memory:{array:Aa},slots:{0:{structure:ne,memory:{array:Ua},slots:{0:{structure:Be,memory:{array:ja},slots:{0:{structure:Te,memory:{array:et}}}}}}}}},slot:17});Object.assign(We,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:U}],methods:[],template:null},slot:20});Object.assign(Xe,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:We}],methods:[],template:null},slot:28});const xa=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Pa=new Uint8Array([]),Na=new Uint8Array([56,252,15,0]),Ca=new Uint8Array([4,0,0,0]);Object.assign(ue,{...t,type:2,name:"vertical-scroll.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Xe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:y},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:y},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Ee},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:P},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:N}],methods:[],template:{memory:{array:xa}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:U},{...e,type:7,isRequired:!1,name:"FPixel",structure:He},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:S}],methods:[],template:{memory:{array:Pa},slots:{0:{structure:S,memory:{array:Na},slots:{0:{structure:d,memory:{array:Ca}}}}}}},slot:27});const Ia=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),va=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Fa=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(k,{...t,type:2,name:"vertical-scroll.KernelOutput(u8,vertical-scroll.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:ue}],methods:[],template:{memory:{array:Ia},slots:{0:{structure:ue,memory:{array:va},slots:{0:{structure:Xe,memory:{array:Fa},slots:{0:{structure:We,memory:{array:et}}}}}}}}},slot:26});const ka=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,66,0,0,200,66,0,0,250,67,0,0,0,0,0,0,250,67,0,0,0,0,0,0,128,63,0,0,128,63]);Object.assign(T,{...t,type:2,name:"vertical-scroll.KernelParameters(vertical-scroll.kernel)",length:1,byteSize:48,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"topRollRadius",structure:r},{...e,type:4,isRequired:!1,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"bottomRollRadius",structure:r},{...e,type:4,isRequired:!1,bitOffset:192,bitSize:32,byteSize:4,slot:2,name:"rollHeight",structure:r},{...e,type:4,isRequired:!1,bitOffset:224,bitSize:32,byteSize:4,slot:3,name:"rollOffsetY",structure:r},{...e,type:4,isRequired:!1,bitOffset:256,bitSize:32,byteSize:4,slot:4,name:"rollWidth",structure:r},{...e,type:4,isRequired:!1,bitOffset:288,bitSize:32,byteSize:4,slot:5,name:"rollOffsetX",structure:r},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:96,byteSize:16,slot:6,name:"fogColour",structure:Ae},{...e,type:4,isRequired:!1,bitOffset:320,bitSize:32,byteSize:4,slot:7,name:"fogInfluence",structure:r},{...e,type:4,isRequired:!1,bitOffset:352,bitSize:32,byteSize:4,slot:8,name:"fade",structure:r}],methods:[],template:{memory:{array:ka}}},slot:29});Object.assign(Ge,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(vertical-scroll.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:57});Object.assign(Me,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(vertical-scroll.createOutput)).Fn.return_type.?).ErrorUnion.error_set!vertical-scroll.KernelOutput(u8,vertical-scroll.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Ge}],methods:[],template:null},slot:34});Object.assign($e,{...t,type:3,name:"createOutput",length:1,byteSize:112,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:384,bitSize:32,byteSize:4,slot:0,name:"0",structure:y},{...e,type:3,bitOffset:416,bitSize:32,byteSize:4,slot:1,name:"1",structure:y},{...e,type:6,bitOffset:448,bitSize:192,byteSize:24,slot:2,name:"2",structure:F},{...e,type:6,bitOffset:0,bitSize:384,byteSize:48,slot:3,name:"3",structure:T},{...e,type:6,bitOffset:640,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Me}],methods:[],template:null},slot:32});Object.assign(Le,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(vertical-scroll.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:58});Object.assign(Je,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(vertical-scroll.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!vertical-scroll.KernelOutput(u8,vertical-scroll.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Le}],methods:[],template:null},slot:35});Object.assign(Qe,{...t,type:3,name:"createPartialOutput",length:1,byteSize:128,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:384,bitSize:32,byteSize:4,slot:0,name:"0",structure:y},{...e,type:3,bitOffset:416,bitSize:32,byteSize:4,slot:1,name:"1",structure:y},{...e,type:3,bitOffset:448,bitSize:32,byteSize:4,slot:2,name:"2",structure:y},{...e,type:3,bitOffset:480,bitSize:32,byteSize:4,slot:3,name:"3",structure:y},{...e,type:6,bitOffset:512,bitSize:192,byteSize:24,slot:4,name:"4",structure:F},{...e,type:6,bitOffset:0,bitSize:384,byteSize:48,slot:5,name:"5",structure:T},{...e,type:6,bitOffset:704,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Je}],methods:[],template:null},slot:33});const Ta={argStruct:$e,thunk:6,name:"createOutput"},Ba={argStruct:Qe,thunk:1,name:"createPartialOutput"};Object.assign(Ze,{...t,type:2,name:"vertical-scroll",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:et}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:De},{...e,type:7,isRequired:!1,name:"Input",structure:F},{...e,type:7,isRequired:!1,name:"Output",structure:k},{...e,type:7,isRequired:!1,name:"Parameters",structure:T}],methods:[Ta,Ba],template:null},slot:0});const Ea=[f,ce,ye,X,pe,fe,Y,d,S,r,a,s,de,be,K,he,D,ge,Se,G,ze,M,Re,Ve,$,Oe,L,w,A,z,qe,J,C,I,q,_e,Q,we,Z,Ae,O,g,Ue,je,ee,xe,te,Pe,se,Ne,Ce,ae,Ie,re,ve,me,ie,v,_,Fe,oe,ke,le,De,U,Te,Be,y,Ee,P,N,He,ne,F,We,Xe,ue,k,T,Ge,Me,$e,Le,Je,Qe,Ze],Ha=Ut(Ea),Wa=Ze.constructor,Xa=(async()=>{const n=new URL("vertical-scroll-79d34511.wasm",import.meta.url).href;return fetch(n)})();jt(Xa,{...Ha,writeBack:!0});const{createOutput:Ja,createPartialOutput:Ya,kernel:Ke,Input:Ka,Output:Qa,Parameters:Za}=Wa;function Da(n,c,i,m,o={},R={}){if(Array.isArray(o)){const h=o;o={};for(const[b,V]of Object.keys(Ke.inputImages).entries())o[V]=h[b]}const B=new Ka(void 0),E=Object.keys(Ke.inputImages),u=[];let x;for(const h of E){let b=o[h];if(b||(E.length===1&&["data","width","height"].every(V=>!!o[V])?b=o:u.push(h)),B[h]=b,x){if(b.colorSpace!==x)throw new Error(`Input images must all use the same color space: ${x}`)}else x=b.colorSpace}if(u.length>0)throw new Error(`Missing input image${u.length>1?"s":""}: ${u.join(", ")}`);const Ye=Ya(n,c,i,m,B,R),tt=h=>{const b=Object.keys(h),V={};for(const st of b){const{data:{typedArray:H},width:at,height:nt}=h[st];let W;if(typeof ImageData=="function"){const ut=new Uint8ClampedArray(H.buffer,H.byteOffset,H.byteLength);W=new ImageData(ut,at,m,{colorSpace:x})}else W={data:H,width:at,height:nt};if(b.length===1)return W;V[st]=W}return V};return Ye[Symbol.toStringTag]==="Promise"?Ye.then(tt):tt(Ye)}function Ga(){const n={};for(let[c,i]of Object.entries(Ke)){if(c==="parameters"){const m={};for(const[o,R]of Object.entries(i)){const B=m[o]={};for(let[E,u]of Object.entries(R))typeof u=="object"?"string"in u?u=u.string:u=lt(u):typeof u=="function"&&(u=Ma(u.name)),B[E]=u}i=m}else typeof i=="object"&&("string"in i?i=i.string:i=i.valueOf());n[c]=i}return n}function lt(n){const c=[];for(let[i,m]of Object.entries(n))typeof m=="object"&&(m=lt(m)),c[i]=m;return c}function Ma(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[c,i,...m]=n.data;$a(c,m).then(([o,R])=>{postMessage([c,i,o],{transfer:R})}).catch(o=>{postMessage(["error",i,o])})};async function $a(n,c){switch(n){case"getKernelInfo":return[Ga(...c)];case"createPartialImageData":const m=await Da(...c),o=[];if("data"in m&&"width"in m&&"height"in m)o.push(m.data.buffer);else for(const R of Object.entries(m))o.push(m.data.buffer);return[m,o];default:throw new Error(`Unknown function: ${n}`)}}
