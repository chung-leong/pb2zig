import{u as Ue,a as je,b as Pe,d as ve,c as ke,e as Ie,f as Ve,g as Ce,h as Ee,i as xe,j as Ke,k as De,l as Fe,m as Me,o as _e,n as Te,p as $e,q as Be}from"./index-d64bc850.js";Ue();je();Pe();ve();ke();Ie();Ve();Ce();Ee();xe();Ke();De();Fe();Me();_e();Te();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},h={},G={},H={},E={},J={},N={},x={},c={},b={},Q={},W={},K={},q={},S={},p={},o={},X={},D={},Y={},F={},Z={},M={},d={},y={},ee={},_={},U={},O={},te={},T={},se={},$={},ye={},w={},re={},ae={},l={},ne={},A={},ie={},B={},j={},ue={},oe={},L={},P={},v={},ce={},be={},pe={},fe={},Se={},de={},he={};Object.assign(h,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:5});Object.assign(G,{...t,type:1,name:"[15:0]u8",length:15,byteSize:16,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:4});Object.assign(H,{...t,type:11,name:"*const [15:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:3});Object.assign(E,{...t,type:11,name:"*const *const [15:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:2});Object.assign(J,{...t,type:1,name:"[12:0]u8",length:12,byteSize:13,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:8});Object.assign(N,{...t,type:11,name:"*const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:7});Object.assign(x,{...t,type:11,name:"*const *const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:6});Object.assign(c,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:10});Object.assign(b,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:9});Object.assign(Q,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:13});Object.assign(W,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:12});Object.assign(K,{...t,type:11,name:"*const *const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:11});Object.assign(q,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:42});Object.assign(S,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:32});Object.assign(p,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:p}],methods:[],template:null},slot:52});Object.assign(o,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:51});const Le=new Uint8Array,Ge=new Uint8Array([32,250,15,0]),He=new Uint8Array([0,0,0,0,0,0,0,0]),Je=new Uint8Array([72,250,15,0]),Ne=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(X,{...t,type:2,name:"Struct0013",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:o}],methods:[],template:{memory:{array:Le},slots:{0:{structure:o,memory:{array:Ge},slots:{0:{structure:p,memory:{array:He}}}},1:{structure:o,memory:{array:Je},slots:{0:{structure:p,memory:{array:Ne}}}}}}},slot:46});Object.assign(D,{...t,type:11,name:"Struct0010",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:45});const Qe=new Uint8Array,We=new Uint8Array([32,250,15,0]),Xe=new Uint8Array([0,0,0,0,0,0,240,63]),Ye=new Uint8Array([72,250,15,0]),Ze=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(Y,{...t,type:2,name:"Struct0014",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:o}],methods:[],template:{memory:{array:Qe},slots:{0:{structure:o,memory:{array:We},slots:{0:{structure:p,memory:{array:Xe}}}},1:{structure:o,memory:{array:Ye},slots:{0:{structure:p,memory:{array:Ze}}}}}}},slot:48});Object.assign(F,{...t,type:11,name:"Struct0011",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:47});const et=new Uint8Array,tt=new Uint8Array([32,250,15,0]),st=new Uint8Array([0,0,0,0,0,0,0,0]),rt=new Uint8Array([72,250,15,0]),at=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(Z,{...t,type:2,name:"Struct0015",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:o}],methods:[],template:{memory:{array:et},slots:{0:{structure:o,memory:{array:tt},slots:{0:{structure:p,memory:{array:st}}}},1:{structure:o,memory:{array:rt},slots:{0:{structure:p,memory:{array:at}}}}}}},slot:50});Object.assign(M,{...t,type:11,name:"Struct0012",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:49});const nt=new Uint8Array,it=new Uint8Array([170,170,170,170]),ut=new Uint8Array,ot=new Uint8Array([170,170,170,170]),lt=new Uint8Array,mt=new Uint8Array([170,170,170,170]),yt=new Uint8Array;Object.assign(d,{...t,type:2,name:"Struct0008",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:D},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:F},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:M}],methods:[],template:{memory:{array:nt},slots:{0:{structure:D,memory:{array:it},slots:{0:{structure:X,memory:{array:ut}}}},1:{structure:F,memory:{array:ot},slots:{0:{structure:Y,memory:{array:lt}}}},2:{structure:M,memory:{array:mt},slots:{0:{structure:Z,memory:{array:yt}}}}}}},slot:38});Object.assign(y,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:d}],methods:[],template:null},slot:37});const ct=new Uint8Array,bt=new Uint8Array([170,170,170,170]),pt=new Uint8Array,ft=new Uint8Array([170,170,170,170]),St=new Uint8Array,dt=new Uint8Array([170,170,170,170]),ht=new Uint8Array,gt=new Uint8Array([170,170,170,170]),zt=new Uint8Array;Object.assign(ee,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"red",structure:y},{...e,type:8,isRequired:!1,slot:1,name:"green",structure:y},{...e,type:8,isRequired:!1,slot:2,name:"blue",structure:y},{...e,type:8,isRequired:!1,slot:3,name:"luminance",structure:y}],methods:[],template:{memory:{array:ct},slots:{0:{structure:y,memory:{array:bt},slots:{0:{structure:d,memory:{array:pt}}}},1:{structure:y,memory:{array:ft},slots:{0:{structure:d,memory:{array:St}}}},2:{structure:y,memory:{array:dt},slots:{0:{structure:d,memory:{array:ht}}}},3:{structure:y,memory:{array:gt},slots:{0:{structure:d,memory:{array:zt}}}}}}},slot:15});Object.assign(_,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:14});const Ot=new Uint8Array,wt=new Uint8Array([64,250,15,0]),Rt=new Uint8Array([4,0,0,0]);Object.assign(U,{...t,type:2,name:"Struct0009",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:Ot},slots:{0:{structure:b,memory:{array:wt},slots:{0:{structure:c,memory:{array:Rt}}}}}}},slot:40});Object.assign(O,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:U}],methods:[],template:null},slot:39});const qt=new Uint8Array,At=new Uint8Array([170,170,170,170]),Ut=new Uint8Array;Object.assign(te,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:O}],methods:[],template:{memory:{array:qt},slots:{0:{structure:O,memory:{array:At},slots:{0:{structure:U,memory:{array:Ut}}}}}}},slot:17});Object.assign(T,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:16});const jt=new Uint8Array,Pt=new Uint8Array([170,170,170,170]),vt=new Uint8Array;Object.assign(se,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:O}],methods:[],template:{memory:{array:jt},slots:{0:{structure:O,memory:{array:Pt},slots:{0:{structure:U,memory:{array:vt}}}}}}},slot:19});Object.assign($,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:18});const kt=new Uint8Array,It=new Uint8Array,Vt=new Uint8Array([72,8,16,0]),Ct=new Uint8Array([251,7,16,0]),Et=new Uint8Array([99,111,109,46,97,110,116,116,105,107,117,112,105,108,97,0]),xt=new Uint8Array([68,8,16,0]),Kt=new Uint8Array([227,7,16,0]),Dt=new Uint8Array([65,110,116,116,105,32,75,117,112,105,108,97,0]),Ft=new Uint8Array([64,8,16,0]),Mt=new Uint8Array([1,0,0,0]),_t=new Uint8Array([60,8,16,0]),Tt=new Uint8Array([196,7,16,0]),$t=new Uint8Array([76,101,118,101,108,115,32,102,105,108,116,101,114,0]),Bt=new Uint8Array([170,170,170,170]),Lt=new Uint8Array,Gt=new Uint8Array([170,170,170,170]),Ht=new Uint8Array,Jt=new Uint8Array([170,170,170,170]),Nt=new Uint8Array;Object.assign(ye,{...t,type:2,name:"levels.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:kt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:E},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:x},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:b},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:K},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:_},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:T},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:$}],methods:[],template:{memory:{array:It},slots:{0:{structure:E,memory:{array:Vt},slots:{0:{structure:H,memory:{array:Ct},slots:{0:{structure:G,memory:{array:Et}}}}}},1:{structure:x,memory:{array:xt},slots:{0:{structure:N,memory:{array:Kt},slots:{0:{structure:J,memory:{array:Dt}}}}}},2:{structure:b,memory:{array:Ft},slots:{0:{structure:c,memory:{array:Mt}}}},3:{structure:K,memory:{array:_t},slots:{0:{structure:W,memory:{array:Tt},slots:{0:{structure:Q,memory:{array:$t}}}}}},4:{structure:_,memory:{array:Bt},slots:{0:{structure:ee,memory:{array:Lt}}}},5:{structure:T,memory:{array:Gt},slots:{0:{structure:te,memory:{array:Ht}}}},6:{structure:$,memory:{array:Jt},slots:{0:{structure:se,memory:{array:Nt}}}}}}},slot:1});Object.assign(w,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:24});Object.assign(re,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(ae,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:re}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const Qt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ne,{...t,type:9,name:"levels.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:c},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:c}],methods:[],template:{memory:{array:Qt}}},slot:26});Object.assign(A,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:27});Object.assign(ie,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:41});const Wt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Xt=new Uint8Array,Yt=new Uint8Array([140,7,16,0]),Zt=new Uint8Array([4,0,0,0]);Object.assign(B,{...t,type:2,name:"levels.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ae},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ne},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:A}],methods:[],template:{memory:{array:Wt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:ie},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:Xt},slots:{0:{structure:b,memory:{array:Yt},slots:{0:{structure:c,memory:{array:Zt}}}}}}},slot:21});const es=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ts=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),we=new Uint8Array([0,0,0,0,0,0,0,0]),ss=new Uint8Array;Object.assign(j,{...t,type:2,name:"levels.KernelInput(u8,levels.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:B}],methods:[],template:{memory:{array:es},slots:{0:{structure:B,memory:{array:ts},slots:{0:{structure:ae,memory:{array:we},address:1047568,slots:{0:{structure:re,memory:{array:ss},address:0}}}}}}}},slot:20});Object.assign(ue,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(oe,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ue}],methods:[],template:null},slot:30});const rs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),as=new Uint8Array,ns=new Uint8Array([140,7,16,0]),is=new Uint8Array([4,0,0,0]);Object.assign(L,{...t,type:2,name:"levels.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:oe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ne},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:A}],methods:[],template:{memory:{array:rs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:ie},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:as},slots:{0:{structure:b,memory:{array:ns},slots:{0:{structure:c,memory:{array:is}}}}}}},slot:29});const us=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),os=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ls=new Uint8Array;Object.assign(P,{...t,type:2,name:"levels.KernelOutput(u8,levels.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:L}],methods:[],template:{memory:{array:us},slots:{0:{structure:L,memory:{array:os},slots:{0:{structure:oe,memory:{array:we},address:1047568,slots:{0:{structure:ue,memory:{array:ls},address:0}}}}}}}},slot:28});const ms=new Uint8Array([0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63]);Object.assign(v,{...t,type:2,name:"levels.KernelParameters(levels.kernel)",length:1,byteSize:32,align:3,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"red",structure:S},{...e,type:6,isRequired:!1,bitOffset:64,bitSize:64,byteSize:8,slot:1,name:"green",structure:S},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:64,byteSize:8,slot:2,name:"blue",structure:S},{...e,type:6,isRequired:!1,bitOffset:192,bitSize:64,byteSize:8,slot:3,name:"luminance",structure:S}],methods:[],template:{memory:{array:ms}}},slot:31});Object.assign(ce,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(levels.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:43});Object.assign(be,{...t,type:7,name:"ErrorSet0000!levels.KernelOutput(u8,levels.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ce}],methods:[],template:null},slot:35});Object.assign(pe,{...t,type:3,name:"createOutput",length:1,byteSize:96,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:320,bitSize:192,byteSize:24,slot:2,name:"2",structure:j},{...e,type:6,bitOffset:0,bitSize:256,byteSize:32,slot:3,name:"3",structure:v},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:4,name:"retval",structure:be}],methods:[],template:null},slot:33});Object.assign(fe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(levels.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:44});Object.assign(Se,{...t,type:7,name:"ErrorSet0001!levels.KernelOutput(u8,levels.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:fe}],methods:[],template:null},slot:36});Object.assign(de,{...t,type:3,name:"createPartialOutput",length:1,byteSize:104,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:320,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:352,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:384,bitSize:192,byteSize:24,slot:4,name:"4",structure:j},{...e,type:6,bitOffset:0,bitSize:256,byteSize:32,slot:5,name:"5",structure:v},{...e,type:6,bitOffset:576,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Se}],methods:[],template:null},slot:34});const ys=new Uint8Array,cs={argStruct:pe,thunk:8,name:"createOutput"},bs={argStruct:de,thunk:2,name:"createPartialOutput"};Object.assign(he,{...t,type:2,name:"levels",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ys}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ye},{...e,type:7,isRequired:!1,name:"Input",structure:j},{...e,type:7,isRequired:!1,name:"Output",structure:P},{...e,type:7,isRequired:!1,name:"Parameters",structure:v}],methods:[cs,bs],template:null},slot:0});const ps=[h,G,H,E,J,N,x,c,b,Q,W,K,q,S,p,o,X,D,Y,F,Z,M,d,y,ee,_,U,O,te,T,se,$,ye,w,re,ae,l,ne,A,ie,B,j,ue,oe,L,P,v,ce,be,pe,fe,Se,de,he],fs=$e(ps),Ss=he.constructor,ds=(async()=>{const n=new URL("levels-773e4fc5.wasm",import.meta.url).href;return fetch(n)})();Be(ds,{...fs,writeBack:!0});const{createOutput:As,createPartialOutput:hs,kernel:me,Input:gs,Output:Us,Parameters:js}=Ss;function zs(n,u,r,s,a={},g={}){if(Array.isArray(a)){const f=a;a={};for(const[m,z]of Object.keys(me.inputImages).entries())a[z]=f[m]}const k=new gs(void 0),I=Object.keys(me.inputImages),i=[];let R;for(const f of I){let m=a[f];if(m||(I.length===1&&["data","width","height"].every(z=>!!a[z])?m=a:i.push(f)),k[f]=m,R){if(m.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=m.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const le=hs(n,u,r,s,k,g),ge=f=>{const m=Object.keys(f),z={};for(const ze of m){const{data:{typedArray:V},width:Oe,height:qe}=f[ze];let C;if(typeof ImageData=="function"){const Ae=new Uint8ClampedArray(V.buffer,V.byteOffset,V.byteLength);C=new ImageData(Ae,Oe,s,{colorSpace:R})}else C={data:V,width:Oe,height:qe};if(m.length===1)return C;z[ze]=C}return z};return le[Symbol.toStringTag]==="Promise"?le.then(ge):ge(le)}function Os(){const n={};for(let[u,r]of Object.entries(me)){if(u==="parameters"){const s={};for(const[a,g]of Object.entries(r)){const k=s[a]={};for(let[I,i]of Object.entries(g))typeof i=="object"?"string"in i?i=i.string:i=Re(i):typeof i=="function"&&(i=ws(i.name)),k[I]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[u]=r}return n}function Re(n){const u=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=Re(s)),u[r]=s;return u}function ws(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[u,r,...s]=n.data;Rs(u,s).then(([a,g])=>{postMessage([u,r,a],{transfer:g})}).catch(a=>{postMessage(["error",r,a])})};async function Rs(n,u){switch(n){case"getKernelInfo":return[Os(...u)];case"createPartialImageData":const s=await zs(...u),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const g of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
