import{u as Pe,a as Ve,b as ke,d as Ie,c as Ce,e as ve,f as xe,g as De,h as Ee,i as Ke,j as Fe,k as Me,l as _e,m as Te,o as $e,n as Be,p as Le,q as Ge}from"./index-d64bc850.js";Pe();Ve();ke();Ie();Ce();ve();xe();De();Ee();Ke();Fe();Me();_e();Te();$e();Be();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},S={},H={},J={},D={},N={},Q={},E={},b={},p={},W={},X={},K={},c={},Y={},l={},s={},R={},g={},Z={},F={},ee={},M={},te={},_={},q={},z={},se={},T={},j={},O={},re={},$={},ae={},B={},be={},w={},ne={},ie={},m={},ue={},U={},oe={},L={},P={},le={},me={},G={},V={},k={},pe={},fe={},Se={},he={},de={},ge={},ze={};Object.assign(S,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:5});Object.assign(H,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:4});Object.assign(J,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:3});Object.assign(D,{...t,type:11,name:"*const *const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:2});Object.assign(N,{...t,type:1,name:"[11:0]u8",length:11,byteSize:12,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:8});Object.assign(Q,{...t,type:11,name:"*const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:7});Object.assign(E,{...t,type:11,name:"*const *const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:6});Object.assign(b,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:10});Object.assign(p,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:b}],methods:[],template:null},slot:9});Object.assign(W,{...t,type:1,name:"[44:0]u8",length:44,byteSize:45,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:13});Object.assign(X,{...t,type:11,name:"*const [44:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:12});Object.assign(K,{...t,type:11,name:"*const *const [44:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:11});Object.assign(c,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:33});Object.assign(Y,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:32});Object.assign(l,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:l}],methods:[],template:null},slot:54});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:l}],methods:[],template:null},slot:53});const He=new Uint8Array,Je=new Uint8Array([240,247,15,0]),Ne=new Uint8Array([0,0,0,0,0,0,0,0]),Qe=new Uint8Array([24,248,15,0]),We=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(R,{...t,type:2,name:"Struct0016",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:He},slots:{0:{structure:s,memory:{array:Je},slots:{0:{structure:l,memory:{array:Ne}}}},1:{structure:s,memory:{array:Qe},slots:{0:{structure:l,memory:{array:We}}}}}}},slot:50});Object.assign(g,{...t,type:11,name:"Struct0014",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:49});const Xe=new Uint8Array,Ye=new Uint8Array([96,253,15,0]),Ze=new Uint8Array([0,0,0,0,0,0,176,64]),et=new Uint8Array([120,253,15,0]),tt=new Uint8Array([0,0,0,0,0,0,176,64]);Object.assign(Z,{...t,type:2,name:"Struct0017",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Xe},slots:{0:{structure:s,memory:{array:Ye},slots:{0:{structure:l,memory:{array:Ze}}}},1:{structure:s,memory:{array:et},slots:{0:{structure:l,memory:{array:tt}}}}}}},slot:52});Object.assign(F,{...t,type:11,name:"Struct0015",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:51});const st=new Uint8Array,rt=new Uint8Array([170,170,170,170]),at=new Uint8Array,nt=new Uint8Array([170,170,170,170]),it=new Uint8Array,ut=new Uint8Array([170,170,170,170]),ot=new Uint8Array;Object.assign(ee,{...t,type:2,name:"Struct0010",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:Y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:g},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:F},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:g}],methods:[],template:{memory:{array:st},slots:{0:{structure:g,memory:{array:rt},slots:{0:{structure:R,memory:{array:at}}}},1:{structure:F,memory:{array:nt},slots:{0:{structure:Z,memory:{array:it}}}},2:{structure:g,memory:{array:ut},slots:{0:{structure:R,memory:{array:ot}}}}}}},slot:39});Object.assign(M,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:38});const lt=new Uint8Array,mt=new Uint8Array([112,253,15,0]),yt=new Uint8Array([0,0,0,0,0,0,0,0]),ct=new Uint8Array([136,253,15,0]),bt=new Uint8Array([0,0,0,0,0,64,159,64]),pt=new Uint8Array([144,252,15,0]),ft=new Uint8Array([0,0,0,0,0,224,101,64]);Object.assign(te,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:lt},slots:{0:{structure:s,memory:{array:mt},slots:{0:{structure:l,memory:{array:yt}}}},1:{structure:s,memory:{array:ct},slots:{0:{structure:l,memory:{array:bt}}}},2:{structure:s,memory:{array:pt},slots:{0:{structure:l,memory:{array:ft}}}}}}},slot:41});Object.assign(_,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:40});const St=new Uint8Array,ht=new Uint8Array([200,247,15,0]),dt=new Uint8Array([0,0,0,0,0,0,0,0]),gt=new Uint8Array([240,247,15,0]),zt=new Uint8Array([0,0,0,0,0,0,0,64]),Ot=new Uint8Array([24,248,15,0]),wt=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(q,{...t,type:2,name:"Struct0012",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:St},slots:{0:{structure:s,memory:{array:ht},slots:{0:{structure:l,memory:{array:dt}}}},1:{structure:s,memory:{array:gt},slots:{0:{structure:l,memory:{array:zt}}}},2:{structure:s,memory:{array:Ot},slots:{0:{structure:l,memory:{array:wt}}}}}}},slot:43});Object.assign(z,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:42});const At=new Uint8Array,Rt=new Uint8Array([170,170,170,170]),qt=new Uint8Array,Ut=new Uint8Array([170,170,170,170]),jt=new Uint8Array,Pt=new Uint8Array([170,170,170,170]),Vt=new Uint8Array,kt=new Uint8Array([170,170,170,170]),It=new Uint8Array;Object.assign(se,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"center",structure:M},{...e,type:8,isRequired:!1,slot:1,name:"attenuationDelta",structure:_},{...e,type:8,isRequired:!1,slot:2,name:"attenuationSpeed",structure:z},{...e,type:8,isRequired:!1,slot:3,name:"attenuationDecay",structure:z}],methods:[],template:{memory:{array:At},slots:{0:{structure:M,memory:{array:Rt},slots:{0:{structure:ee,memory:{array:qt}}}},1:{structure:_,memory:{array:Ut},slots:{0:{structure:te,memory:{array:jt}}}},2:{structure:z,memory:{array:Pt},slots:{0:{structure:q,memory:{array:Vt}}}},3:{structure:z,memory:{array:kt},slots:{0:{structure:q,memory:{array:It}}}}}}},slot:15});Object.assign(T,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:14});const Ct=new Uint8Array,vt=new Uint8Array([16,248,15,0]),xt=new Uint8Array([4,0,0,0]);Object.assign(j,{...t,type:2,name:"Struct0013",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:Ct},slots:{0:{structure:p,memory:{array:vt},slots:{0:{structure:b,memory:{array:xt}}}}}}},slot:45});Object.assign(O,{...t,type:11,name:"Struct0009",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:j}],methods:[],template:null},slot:44});const Dt=new Uint8Array,Et=new Uint8Array([170,170,170,170]),Kt=new Uint8Array;Object.assign(re,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:O}],methods:[],template:{memory:{array:Dt},slots:{0:{structure:O,memory:{array:Et},slots:{0:{structure:j,memory:{array:Kt}}}}}}},slot:17});Object.assign($,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:16});const Ft=new Uint8Array,Mt=new Uint8Array([170,170,170,170]),_t=new Uint8Array;Object.assign(ae,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:O}],methods:[],template:{memory:{array:Ft},slots:{0:{structure:O,memory:{array:Mt},slots:{0:{structure:j,memory:{array:_t}}}}}}},slot:19});Object.assign(B,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:18});const Tt=new Uint8Array,$t=new Uint8Array,Bt=new Uint8Array([16,37,16,0]),Lt=new Uint8Array([189,36,16,0]),Gt=new Uint8Array([110,97,118,104,97,108,105,0]),Ht=new Uint8Array([12,37,16,0]),Jt=new Uint8Array([166,36,16,0]),Nt=new Uint8Array([74,111,104,110,32,69,110,103,108,101,114,0]),Qt=new Uint8Array([8,37,16,0]),Wt=new Uint8Array([0,0,0,0]),Xt=new Uint8Array([4,37,16,0]),Yt=new Uint8Array([104,36,16,0]),Zt=new Uint8Array([83,105,109,112,108,101,32,112,111,105,110,116,32,108,105,103,104,116,45,45,112,108,97,121,105,110,103,32,119,105,116,104,32,80,105,120,101,108,66,101,110,100,101,114,0]),es=new Uint8Array([170,170,170,170]),ts=new Uint8Array,ss=new Uint8Array([170,170,170,170]),rs=new Uint8Array,as=new Uint8Array([170,170,170,170]),ns=new Uint8Array;Object.assign(be,{...t,type:2,name:"simple-point-light.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Tt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:D},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:E},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:p},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:K},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:T},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:$},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:B}],methods:[],template:{memory:{array:$t},slots:{0:{structure:D,memory:{array:Bt},slots:{0:{structure:J,memory:{array:Lt},slots:{0:{structure:H,memory:{array:Gt}}}}}},1:{structure:E,memory:{array:Ht},slots:{0:{structure:Q,memory:{array:Jt},slots:{0:{structure:N,memory:{array:Nt}}}}}},2:{structure:p,memory:{array:Qt},slots:{0:{structure:b,memory:{array:Wt}}}},3:{structure:K,memory:{array:Xt},slots:{0:{structure:X,memory:{array:Yt},slots:{0:{structure:W,memory:{array:Zt}}}}}},4:{structure:T,memory:{array:es},slots:{0:{structure:se,memory:{array:ts}}}},5:{structure:$,memory:{array:ss},slots:{0:{structure:re,memory:{array:rs}}}},6:{structure:B,memory:{array:as},slots:{0:{structure:ae,memory:{array:ns}}}}}}},slot:1});Object.assign(w,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:24});Object.assign(ne,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(ie,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ne}],methods:[],template:null},slot:22});Object.assign(m,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:25});const is=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ue,{...t,type:9,name:"simple-point-light.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:b},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:b}],methods:[],template:{memory:{array:is}}},slot:26});Object.assign(U,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:U}],methods:[],template:null},slot:27});Object.assign(oe,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:46});const us=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),os=new Uint8Array,ls=new Uint8Array([48,36,16,0]),ms=new Uint8Array([4,0,0,0]);Object.assign(L,{...t,type:2,name:"simple-point-light.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ie},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ue},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:U}],methods:[],template:{memory:{array:us}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:oe},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:os},slots:{0:{structure:p,memory:{array:ls},slots:{0:{structure:b,memory:{array:ms}}}}}}},slot:21});const ys=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),cs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Re=new Uint8Array([0,0,0,0,0,0,0,0]),bs=new Uint8Array;Object.assign(P,{...t,type:2,name:"simple-point-light.KernelInput(u8,simple-point-light.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:L}],methods:[],template:{memory:{array:ys},slots:{0:{structure:L,memory:{array:cs},slots:{0:{structure:ie,memory:{array:Re},address:1047568,slots:{0:{structure:ne,memory:{array:bs},address:0}}}}}}}},slot:20});Object.assign(le,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(me,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:le}],methods:[],template:null},slot:30});const ps=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),fs=new Uint8Array,Ss=new Uint8Array([48,36,16,0]),hs=new Uint8Array([4,0,0,0]);Object.assign(G,{...t,type:2,name:"simple-point-light.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:me},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ue},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:U}],methods:[],template:{memory:{array:ps}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:oe},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:fs},slots:{0:{structure:p,memory:{array:Ss},slots:{0:{structure:b,memory:{array:hs}}}}}}},slot:29});const ds=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),gs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),zs=new Uint8Array;Object.assign(V,{...t,type:2,name:"simple-point-light.KernelOutput(u8,simple-point-light.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:G}],methods:[],template:{memory:{array:ds},slots:{0:{structure:G,memory:{array:gs},slots:{0:{structure:me,memory:{array:Re},address:1047568,slots:{0:{structure:le,memory:{array:zs},address:0}}}}}}}},slot:28});const Os=new Uint8Array([0,0,0,0,0,0,0,0,0,0,47,67,0,0,128,63,0,0,128,63,0,0,0,0]);Object.assign(k,{...t,type:2,name:"simple-point-light.KernelParameters(simple-point-light.kernel)",length:1,byteSize:24,align:3,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"center",structure:Y},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"attenuationDelta",structure:c},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"attenuationSpeed",structure:c},{...e,type:4,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:3,name:"attenuationDecay",structure:c}],methods:[],template:{memory:{array:Os}}},slot:31});Object.assign(pe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(simple-point-light.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:47});Object.assign(fe,{...t,type:7,name:"ErrorSet0000!simple-point-light.KernelOutput(u8,simple-point-light.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:V},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:pe}],methods:[],template:null},slot:36});Object.assign(Se,{...t,type:3,name:"createOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:2,name:"2",structure:P},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:3,name:"3",structure:k},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:4,name:"retval",structure:fe}],methods:[],template:null},slot:34});Object.assign(he,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(simple-point-light.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(de,{...t,type:7,name:"ErrorSet0001!simple-point-light.KernelOutput(u8,simple-point-light.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:V},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:he}],methods:[],template:null},slot:37});Object.assign(ge,{...t,type:3,name:"createPartialOutput",length:1,byteSize:96,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:2,name:"2",structure:m},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:3,name:"3",structure:m},{...e,type:6,bitOffset:320,bitSize:192,byteSize:24,slot:4,name:"4",structure:P},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:5,name:"5",structure:k},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:6,name:"retval",structure:de}],methods:[],template:null},slot:35});const ws=new Uint8Array,As={argStruct:Se,thunk:8,name:"createOutput"},Rs={argStruct:ge,thunk:2,name:"createPartialOutput"};Object.assign(ze,{...t,type:2,name:"simple-point-light",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ws}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:be},{...e,type:7,isRequired:!1,name:"Input",structure:P},{...e,type:7,isRequired:!1,name:"Output",structure:V},{...e,type:7,isRequired:!1,name:"Parameters",structure:k}],methods:[As,Rs],template:null},slot:0});const qs=[S,H,J,D,N,Q,E,b,p,W,X,K,c,Y,l,s,R,g,Z,F,ee,M,te,_,q,z,se,T,j,O,re,$,ae,B,be,w,ne,ie,m,ue,U,oe,L,P,le,me,G,V,k,pe,fe,Se,he,de,ge,ze],Us=Le(qs),js=ze.constructor,Ps=(async()=>{const i=new URL("simple-point-light-09625445.wasm",import.meta.url).href;return fetch(i)})();Ge(Ps,{...Us,writeBack:!0});const{createOutput:Es,createPartialOutput:Vs,kernel:ce,Input:ks,Output:Ks,Parameters:Fs}=js;function Is(i,o,a,r,n={},h={}){if(Array.isArray(n)){const f=n;n={};for(const[y,d]of Object.keys(ce.inputImages).entries())n[d]=f[y]}const I=new ks(void 0),C=Object.keys(ce.inputImages),u=[];let A;for(const f of C){let y=n[f];if(y||(C.length===1&&["data","width","height"].every(d=>!!n[d])?y=n:u.push(f)),I[f]=y,A){if(y.colorSpace!==A)throw new Error(`Input images must all use the same color space: ${A}`)}else A=y.colorSpace}if(u.length>0)throw new Error(`Missing input image${u.length>1?"s":""}: ${u.join(", ")}`);const ye=Vs(i,o,a,r,I,h),Oe=f=>{const y=Object.keys(f),d={};for(const we of y){const{data:{typedArray:v},width:Ae,height:Ue}=f[we];let x;if(typeof ImageData=="function"){const je=new Uint8ClampedArray(v.buffer,v.byteOffset,v.byteLength);x=new ImageData(je,Ae,r,{colorSpace:A})}else x={data:v,width:Ae,height:Ue};if(y.length===1)return x;d[we]=x}return d};return ye[Symbol.toStringTag]==="Promise"?ye.then(Oe):Oe(ye)}function Cs(){const i={};for(let[o,a]of Object.entries(ce)){if(o==="parameters"){const r={};for(const[n,h]of Object.entries(a)){const I=r[n]={};for(let[C,u]of Object.entries(h))typeof u=="object"?"string"in u?u=u.string:u=qe(u):typeof u=="function"&&(u=vs(u.name)),I[C]=u}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());i[o]=a}return i}function qe(i){const o=[];for(let[a,r]of Object.entries(i))typeof r=="object"&&(r=qe(r)),o[a]=r;return o}function vs(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[o,a,...r]=i.data;xs(o,r).then(([n,h])=>{postMessage([o,a,n],{transfer:h})}).catch(n=>{postMessage(["error",a,n])})};async function xs(i,o){switch(i){case"getKernelInfo":return[Cs(...o)];case"createPartialImageData":const r=await Is(...o),n=[];if("data"in r&&"width"in r&&"height"in r)n.push(r.data.buffer);else for(const h of Object.entries(r))n.push(r.data.buffer);return[r,n];default:throw new Error(`Unknown function: ${i}`)}}
