import{u as Ze,a as ts,b as es,c as ss,d as rs,e as ns,f as as,g as is,h as os,i as cs,j as us,k as ms,l as ys,m as bs,n as ls,o as gs,p as ps,q as fs}from"./index-33238b17.js";Ze();ms();ys();ts();es();bs();ls();gs();ps();ss();rs();ns();as();fs();is();os();cs();const e={constructor:null,typedArray:null,type:0,name:void 0,byteSize:0,align:0,isConst:!1,isTuple:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null}},t={type:0,isRequired:!1},s={},f={},D={},T={},F={},_={},b={},O={},$={},L={},n={},g={},A={},B={},S={},G={},H={},J={},N={},U={},Q={},W={},ot={},k={},X={},q={},c={},p={},R={},ct={},Y={},I={},Z={},v={},tt={},E={},x={},h={},ut={},mt={},w={},yt={},bt={},lt={},Ct={},et={},Mt={},st={},Dt={},Tt={},gt={},Ft={},pt={},_t={},$t={},ft={},Lt={},Ot={},St={},jt={},Bt={},zt={},Gt={},dt={},Ht={},ht={},Jt={},wt={},Nt={},Qt={},At={},Ut={},Wt={},rt={},Xt={},Yt={},Pt={},Zt={},Vt={},te={},ee={},se={},re={},ne={},ae={},ie={},oe={},ce={},ue={},me={},ye={},be={},le={},ge={},pe={},fe={},Rt={},Oe={},Se={},kt={},je={},qt={},ze={},de={},he={},we={},Ae={},Ue={},Pe={},It={},Ve={},Re={},ke={},qe={},Ie={},ve={},Ee={},xe={},Ke={},Ce={},Me={},De={},Te={},Fe={},_e={},$e={},Le={},Be={},Ge={},He={},Je={},Ne={},Os=new Uint8Array,Ss=new Uint8Array([0,0,0,0,0,0,0,0]),js=new Uint8Array,zs=new Uint8Array([0,0,0,0,0,0,0,0]),ds=new Uint8Array,hs=new Uint8Array([0,0,0,0,0,0,176,64]),ws=new Uint8Array,As=new Uint8Array([0,0,0,0,0,0,176,64]),Us=new Uint8Array,Ps=new Uint8Array,Vs=new Uint8Array,Rs=new Uint8Array,ks=new Uint8Array,qs=new Uint8Array,Is=new Uint8Array([123,20,174,71,225,122,132,63]),vs=new Uint8Array,Es=new Uint8Array([0,0,0,0,0,0,0,64]),xs=new Uint8Array,Ks=new Uint8Array([154,153,153,153,153,153,185,63]),Cs=new Uint8Array,Ms=new Uint8Array,Ds=new Uint8Array,Ts=new Uint8Array([4]),Fs=new Uint8Array,_s=new Uint8Array,$s=new Uint8Array([76,16,0,1]),Ls=new Uint8Array([110,101,116,46,110,105,99,111,112,116,101,114,101,46,102,105,108,116,101,114,115,0]),Bs=new Uint8Array([109,16,0,1]),Gs=new Uint8Array([110,105,99,111,112,116,101,114,101,0]),Hs=new Uint8Array,Js=new Uint8Array([1]),Ns=new Uint8Array([136,16,0,1]),Qs=new Uint8Array([106,105,116,116,101,114,0]),Ws=new Uint8Array,Xs=new Uint8Array,Ys=new Uint8Array,Zs=new Uint8Array([0]),tr=new Uint8Array([1]),Qe=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),er=new Uint8Array,sr=new Uint8Array,rr=new Uint8Array,nr=new Uint8Array,ar=new Uint8Array([4]),vt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),We=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ir=new Uint8Array,or=new Uint8Array,cr=new Uint8Array,ur=new Uint8Array,mr=new Uint8Array([4]),Et=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),yr=new Uint8Array([0,0,0,0,0,0,0,0,205,204,204,61,0,0,0,0]),br=new Uint8Array([27,0]),lr=new Uint8Array([27,0]),gr=new Uint8Array,pr=new Uint8Array,fr=new Uint8Array,Or=new Uint8Array;Object.assign(Ct,{slots:{0:et,1:st}});Object.assign(et,{structure:n,memory:{array:Os},const:!0,slots:{0:Mt}});Object.assign(Mt,{structure:g,memory:{array:Ss},const:!0});Object.assign(st,{structure:n,memory:{array:js},const:!0,slots:{0:Dt}});Object.assign(Dt,{structure:g,memory:{array:zs},const:!0});Object.assign(Tt,{slots:{0:gt,1:pt}});Object.assign(gt,{structure:n,memory:{array:ds},const:!0,slots:{0:Ft}});Object.assign(Ft,{structure:g,memory:{array:hs},const:!0});Object.assign(pt,{structure:n,memory:{array:ws},const:!0,slots:{0:_t}});Object.assign(_t,{structure:g,memory:{array:As},const:!0});Object.assign($t,{slots:{0:ft,1:Ot,2:St,3:jt}});Object.assign(ft,{structure:s,memory:{array:Us},const:!0,slots:{0:Lt}});Object.assign(Lt,{structure:G});Object.assign(Ot,{structure:A,memory:{array:Ps},const:!0,slots:{0:et,1:st}});Object.assign(St,{structure:B,memory:{array:Vs},const:!0,slots:{0:gt,1:pt}});Object.assign(jt,{structure:A,memory:{array:Rs},const:!0,slots:{0:et,1:st}});Object.assign(Bt,{slots:{0:zt,1:dt,2:ht,3:wt}});Object.assign(zt,{structure:s,memory:{array:ks},const:!0,slots:{0:Gt}});Object.assign(Gt,{structure:S});Object.assign(dt,{structure:n,memory:{array:qs},const:!0,slots:{0:Ht}});Object.assign(Ht,{structure:g,memory:{array:Is},const:!0});Object.assign(ht,{structure:n,memory:{array:vs},const:!0,slots:{0:Jt}});Object.assign(Jt,{structure:g,memory:{array:Es},const:!0});Object.assign(wt,{structure:n,memory:{array:xs},const:!0,slots:{0:Nt}});Object.assign(Nt,{structure:g,memory:{array:Ks},const:!0});Object.assign(Qt,{slots:{0:At,1:Ut}});Object.assign(At,{structure:H,memory:{array:Cs},const:!0,slots:{0:ft,1:Ot,2:St,3:jt}});Object.assign(Ut,{structure:J,memory:{array:Ms},const:!0,slots:{0:zt,1:dt,2:ht,3:wt}});Object.assign(Wt,{slots:{0:rt}});Object.assign(rt,{structure:b,memory:{array:Ds},const:!0,slots:{0:Xt}});Object.assign(Xt,{structure:O,memory:{array:Ts},const:!0});Object.assign(Yt,{slots:{0:Pt}});Object.assign(Pt,{structure:U,memory:{array:Fs},const:!0,slots:{0:rt}});Object.assign(Zt,{slots:{0:Vt}});Object.assign(Vt,{structure:U,memory:{array:_s},const:!0,slots:{0:rt}});Object.assign(te,{slots:{0:ee,1:re,2:ae,3:oe,4:ue,5:me,6:ye}});Object.assign(ee,{structure:T,memory:{array:$s},const:!0,slots:{0:se}});Object.assign(se,{structure:D,memory:{array:Ls},reloc:16781388});Object.assign(re,{structure:_,memory:{array:Bs},const:!0,slots:{0:ne}});Object.assign(ne,{structure:F,memory:{array:Gs},reloc:16781421});Object.assign(ae,{structure:b,memory:{array:Hs},const:!0,slots:{0:ie}});Object.assign(ie,{structure:O,memory:{array:Js},const:!0});Object.assign(oe,{structure:L,memory:{array:Ns},const:!0,slots:{0:ce}});Object.assign(ce,{structure:$,memory:{array:Qs},reloc:16781448});Object.assign(ue,{structure:N,memory:{array:Ws},const:!0,slots:{0:At,1:Ut}});Object.assign(me,{structure:Q,memory:{array:Xs},const:!0,slots:{0:Pt}});Object.assign(ye,{structure:W,memory:{array:Ys},const:!0,slots:{0:Vt}});Object.assign(be,{slots:{0:le,1:ge}});Object.assign(le,{structure:p,memory:{array:Zs},const:!0});Object.assign(ge,{structure:p,memory:{array:tr},const:!0});Object.assign(pe,{memory:{array:Qe},slots:{0:fe}});Object.assign(fe,{structure:q,memory:{array:Qe,offset:0,length:8},slots:{0:Rt}});Object.assign(Rt,{structure:X,memory:{array:er},reloc:0});Object.assign(Oe,{slots:{0:Se,1:je,2:ze}});Object.assign(Se,{structure:s,memory:{array:sr},const:!0,slots:{0:kt}});Object.assign(kt,{structure:k});Object.assign(je,{structure:s,memory:{array:rr},const:!0,slots:{0:qt}});Object.assign(qt,{structure:ct});Object.assign(ze,{structure:b,memory:{array:nr},const:!0,slots:{0:de}});Object.assign(de,{structure:O,memory:{array:ar},const:!0});Object.assign(he,{memory:{array:vt},slots:{0:we}});Object.assign(we,{structure:Y,memory:{array:vt},slots:{0:Ae}});Object.assign(Ae,{structure:q,memory:{array:vt,offset:0,length:8},slots:{0:Rt}});Object.assign(Ue,{memory:{array:We},slots:{0:Pe}});Object.assign(Pe,{structure:v,memory:{array:We,offset:0,length:8},slots:{0:It}});Object.assign(It,{structure:Z,memory:{array:ir},reloc:0});Object.assign(Ve,{slots:{0:Re,1:ke,2:qe}});Object.assign(Re,{structure:s,memory:{array:or},const:!0,slots:{0:kt}});Object.assign(ke,{structure:s,memory:{array:cr},const:!0,slots:{0:qt}});Object.assign(qe,{structure:b,memory:{array:ur},const:!0,slots:{0:Ie}});Object.assign(Ie,{structure:O,memory:{array:mr},const:!0});Object.assign(ve,{memory:{array:Et},slots:{0:Ee}});Object.assign(Ee,{structure:tt,memory:{array:Et},slots:{0:xe}});Object.assign(xe,{structure:v,memory:{array:Et,offset:0,length:8},slots:{0:It}});Object.assign(Ke,{memory:{array:yr}});Object.assign(Ce,{slots:{0:Me}});Object.assign(Me,{structure:h,memory:{array:br},const:!0});Object.assign(De,{slots:{0:Te}});Object.assign(Te,{structure:w,memory:{array:lr},const:!0});Object.assign(Fe,{slots:{0:_e,1:Le,2:Ge,3:Je}});Object.assign(_e,{structure:s,memory:{array:gr},const:!0,slots:{0:$e}});Object.assign($e,{structure:ot});Object.assign(Le,{structure:s,memory:{array:pr},const:!0,slots:{0:Be}});Object.assign(Be,{structure:I});Object.assign(Ge,{structure:s,memory:{array:fr},const:!0,slots:{0:He}});Object.assign(He,{structure:E});Object.assign(Je,{structure:s,memory:{array:Or},const:!0,slots:{0:Ne}});Object.assign(Ne,{structure:x});const Sr={argStruct:mt,thunkId:2,name:"createOutput"},jr={argStruct:bt,thunkId:3,name:"createPartialOutput"};Object.assign(s,{...e,name:"type",align:1,instance:{members:[{...t,type:6,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:s}],methods:[]}});Object.assign(f,{...e,name:"u8",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign(D,{...e,type:1,name:"[21:0]u8",length:21,byteSize:22,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign(T,{...e,type:13,name:"*const [21:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:D}],methods:[]}});Object.assign(F,{...e,type:1,name:"[9:0]u8",length:9,byteSize:10,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign(_,{...e,type:13,name:"*const [9:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:F}],methods:[]}});Object.assign(b,{...e,name:"comptime_int",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:b}],methods:[]}});Object.assign(O,{...e,name:"i8",byteSize:1,align:1,instance:{members:[{...t,type:2,bitOffset:0,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign($,{...e,type:1,name:"[6:0]u8",length:6,byteSize:7,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign(L,{...e,type:13,name:"*const [6:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[]}});Object.assign(n,{...e,name:"comptime_float",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:n}],methods:[]}});Object.assign(g,{...e,name:"f64",byteSize:8,align:8,instance:{members:[{...t,type:4,bitOffset:0,bitSize:64,byteSize:8,structure:g}],methods:[]}});Object.assign(A,{...e,type:2,name:"Struct738220547",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:n},{...t,type:7,slot:1,name:"1",structure:n}],methods:[],template:Ct}});Object.assign(B,{...e,type:2,name:"Struct2662133551",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:n},{...t,type:7,slot:1,name:"1",structure:n}],methods:[],template:Tt}});Object.assign(S,{...e,name:"f32",byteSize:4,align:4,instance:{members:[{...t,type:4,bitOffset:0,bitSize:32,byteSize:4,structure:S}],methods:[]}});Object.assign(G,{...e,type:15,name:"@Vector(2, f32)",length:2,byteSize:8,align:8,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:S}],methods:[]}});Object.assign(H,{...e,type:2,name:"Struct2812903031",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:A},{...t,type:7,slot:2,name:"maxValue",structure:B},{...t,type:7,slot:3,name:"defaultValue",structure:A}],methods:[],template:$t}});Object.assign(J,{...e,type:2,name:"Struct1648557512",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:n},{...t,type:7,slot:2,name:"maxValue",structure:n},{...t,type:7,slot:3,name:"defaultValue",structure:n}],methods:[],template:Bt}});Object.assign(N,{...e,type:2,name:"Struct1532877655",align:1,instance:{members:[{...t,type:7,slot:0,name:"center",structure:H},{...t,type:7,slot:1,name:"amplitude",structure:J}],methods:[],template:Qt}});Object.assign(U,{...e,type:2,name:"Struct3832472641",align:1,instance:{members:[{...t,type:7,slot:0,name:"channels",structure:b}],methods:[],template:Wt}});Object.assign(Q,{...e,type:2,name:"Struct2242867897",align:1,instance:{members:[{...t,type:7,slot:0,name:"src",structure:U}],methods:[],template:Yt}});Object.assign(W,{...e,type:2,name:"Struct172100005",align:1,instance:{members:[{...t,type:7,slot:0,name:"dst",structure:U}],methods:[],template:Zt}});Object.assign(ot,{...e,type:2,name:"jitter.kernel",align:1,static:{members:[{...t,type:7,slot:0,name:"namespace",structure:T},{...t,type:7,slot:1,name:"vendor",structure:_},{...t,type:7,slot:2,name:"version",structure:b},{...t,type:7,slot:3,name:"description",structure:L},{...t,type:7,slot:4,name:"parameters",structure:N},{...t,type:7,slot:5,name:"inputImages",structure:Q},{...t,type:7,slot:6,name:"outputImages",structure:W}],methods:[],template:te}});Object.assign(k,{...e,type:15,name:"@Vector(4, u8)",length:4,byteSize:4,align:4,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign(X,{...e,type:14,name:"[_]const @Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:k}],methods:[]}});Object.assign(q,{...e,type:13,name:"[]const @Vector(4, u8)",byteSize:8,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:X}],methods:[]}});Object.assign(c,{...e,name:"u32",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[]}});Object.assign(p,{...e,type:11,name:"jitter.ColorSpace",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:1,byteSize:1,structure:p}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"srgb",structure:p},{...t,type:7,slot:1,name:"display-p3",structure:p}],methods:[],template:be}});Object.assign(R,{...e,name:"usize",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:R}],methods:[]}});Object.assign(ct,{...e,type:15,name:"@Vector(4, f32)",length:4,byteSize:16,align:16,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:S}],methods:[]}});Object.assign(Y,{...e,type:2,name:"jitter.Image(u8,4,false)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:q},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:p},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:R}],methods:[],template:pe},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:b}],methods:[],template:Oe}});Object.assign(I,{...e,type:2,name:"jitter.KernelInput(u8,jitter.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:Y}],methods:[],template:he}});Object.assign(Z,{...e,type:14,name:"[_]@Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:k}],methods:[]}});Object.assign(v,{...e,type:13,name:"[]@Vector(4, u8)",byteSize:8,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:Z}],methods:[]}});Object.assign(tt,{...e,type:2,name:"jitter.Image(u8,4,true)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:v},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:p},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:R}],methods:[],template:Ue},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:b}],methods:[],template:Ve}});Object.assign(E,{...e,type:2,name:"jitter.KernelOutput(u8,jitter.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:tt}],methods:[],template:ve}});Object.assign(x,{...e,type:2,name:"jitter.KernelParameters(jitter.kernel)",byteSize:16,align:8,instance:{members:[{...t,type:5,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"center",structure:G},{...t,type:4,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"amplitude",structure:S}],methods:[],template:Ke}});Object.assign(h,{...e,type:10,name:"ErrorSet555559574",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:h}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:h}],methods:[],template:Ce}});Object.assign(ut,{...e,type:9,name:"ErrorSet555559574!jitter.KernelOutput(u8,jitter.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:E},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:h}],methods:[]}});Object.assign(mt,{...e,type:5,name:"createOutput",byteSize:80,align:8,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:128,bitSize:32,byteSize:4,slot:3,name:"0",structure:c},{...t,type:3,isRequired:!0,bitOffset:160,bitSize:32,byteSize:4,slot:4,name:"1",structure:c},{...t,type:5,isRequired:!0,bitOffset:192,bitSize:192,byteSize:24,slot:0,name:"2",structure:I},{...t,type:5,isRequired:!0,bitOffset:0,bitSize:128,byteSize:16,slot:1,name:"3",structure:x},{...t,type:5,isRequired:!0,bitOffset:384,bitSize:224,byteSize:28,slot:2,name:"retval",structure:ut}],methods:[]}});Object.assign(w,{...e,type:10,name:"ErrorSet1725766987",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:w}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:w}],methods:[],template:De}});Object.assign(yt,{...e,type:9,name:"ErrorSet1725766987!jitter.KernelOutput(u8,jitter.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:E},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:w}],methods:[]}});Object.assign(bt,{...e,type:5,name:"createPartialOutput",byteSize:88,align:8,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:128,bitSize:32,byteSize:4,slot:3,name:"0",structure:c},{...t,type:3,isRequired:!0,bitOffset:160,bitSize:32,byteSize:4,slot:4,name:"1",structure:c},{...t,type:3,isRequired:!0,bitOffset:192,bitSize:32,byteSize:4,slot:5,name:"2",structure:c},{...t,type:3,isRequired:!0,bitOffset:224,bitSize:32,byteSize:4,slot:6,name:"3",structure:c},{...t,type:5,isRequired:!0,bitOffset:256,bitSize:192,byteSize:24,slot:0,name:"4",structure:I},{...t,type:5,isRequired:!0,bitOffset:0,bitSize:128,byteSize:16,slot:1,name:"5",structure:x},{...t,type:5,isRequired:!0,bitOffset:448,bitSize:224,byteSize:28,slot:2,name:"retval",structure:yt}],methods:[]}});Object.assign(lt,{...e,type:2,name:"jitter",align:1,static:{members:[{...t,type:7,slot:0,name:"kernel",structure:s},{...t,type:7,slot:1,name:"Input",structure:s},{...t,type:7,slot:2,name:"Output",structure:s},{...t,type:7,slot:3,name:"Parameters",structure:s}],methods:[Sr,jr],template:Fe}});const zr=[s,f,D,T,F,_,b,O,$,L,n,g,A,B,S,G,H,J,N,U,Q,W,ot,k,X,q,c,p,R,ct,Y,I,Z,v,tt,E,x,h,ut,mt,w,yt,bt,lt],dr=lt,hr={runtimeSafety:!1,littleEndian:!0},nt=us();nt.getSpecialExports();nt.recreateStructures(zr,hr);const wr=(async()=>{const i=new URL("jitter-996d23b7.wasm",import.meta.url).href;return fetch(i)})();nt.loadModule(wr);nt.linkVariables(!0);const{constructor:Ar}=dr,{createPartialOutput:Ur,Input:Pr,kernel:it}=Ar;function Vr(i,u,o,a,r={},j={}){const z=[];for(const[y]of it.inputImages)z.push(y);const P=[];for(const[y]of it.outputImages)P.push(y);if(Array.isArray(r)){const y=r;r={};for(const[l,d]of z.entries())r[d]=y[l]}const m=new Pr(void 0),K=[];let V;for(const y of z){let l=r[y];if(l||(z.length===1&&["data","width","height"].every(d=>!!r[d])?l=r:K.push(y)),m[y]=l,V){if(l.colorSpace!==V)throw new Error(`Input images must all use the same color space: ${V}`)}else V=l.colorSpace}if(K.length>0)throw new Error(`Missing input image${K.length>1?"s":""}: ${K.join(", ")}`);const at=Ur(i,u,o,a,m,j),xt=y=>{const l={};for(const d of P){const{data:{typedArray:C},width:Kt,height:Xe}=y[d];let M;if(typeof ImageData=="function"){const Ye=new Uint8ClampedArray(C.buffer,C.byteOffset,C.byteLength);M=new ImageData(Ye,Kt,a,{colorSpace:V})}else M={data:C,width:Kt,height:Xe};if(P.length===1)return M;l[d]=M}return l};return at[Symbol.toStringTag]==="Promise"?at.then(xt):xt(at)}function Rr(){const i={};for(let[u,o]of it){if(u==="parameters"){const a={};for(const[r,j]of o){const z=a[r]={};for(let[P,m]of j)typeof m=="object"?m=m.string??m.valueOf():typeof m=="function"&&(m=kr(m.name)),z[P]=m}o=a}else typeof o=="object"&&(o=o.string??o.valueOf());i[u]=o}return i}function kr(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=async i=>{if(!Array.isArray(i.data))return;const[u,o,...a]=i.data;try{const[r,j]=await qr(u,a);postMessage([u,o,r],{transfer:j})}catch(r){postMessage(["error",o,r])}};async function qr(i,u){switch(i){case"getKernelInfo":return[Rr(...u)];case"createPartialImageData":const a=await Vr(...u),r=[];if("data"in a&&"width"in a&&"height"in a)r.push(a.data.buffer);else for(const j of Object.entries(a))r.push(a.data.buffer);return[a,r];default:throw new Error(`Unknown function: ${i}`)}}postMessage("ready");
