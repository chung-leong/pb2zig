import{u as we,a as Re,b as qe,c as Ae,d as Ue,e as je,f as Pe,g as ke,h as Ie,i as Ve,j as Ce,k as ve,l as Ee,m as xe,o as Ke,n as De,p as Fe,q as Me}from"./index-d64bc850.js";we();Re();qe();Ae();Ue();je();Pe();ke();Ie();Ve();Ce();ve();Ee();xe();Ke();De();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},p={},T={},$={},V={},B={},L={},C={},m={},y={},G={},H={},v={},S={},f={},b={},J={},N={},E={},Q={},x={},W={},K={},R={},h={},X={},D={},Y={},F={},ue={},z={},Z={},ee={},o={},te={},w={},se={},M={},q={},re={},ae={},_={},A={},U={},oe={},le={},me={},ye={},ce={},be={},pe={};Object.assign(p,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:5});Object.assign(T,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:4});Object.assign($,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[],template:null},slot:3});Object.assign(V,{...t,type:11,name:"*const *const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:2});Object.assign(B,{...t,type:1,name:"[16:0]u8",length:16,byteSize:17,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:8});Object.assign(L,{...t,type:11,name:"*const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:7});Object.assign(C,{...t,type:11,name:"*const *const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:6});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:10});Object.assign(y,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:9});Object.assign(G,{...t,type:1,name:"[27:0]u8",length:27,byteSize:28,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:13});Object.assign(H,{...t,type:11,name:"*const [27:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:12});Object.assign(v,{...t,type:11,name:"*const *const [27:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:11});Object.assign(S,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:32});Object.assign(f,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:f}],methods:[],template:null},slot:45});Object.assign(b,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:f}],methods:[],template:null},slot:44});Object.assign(J,{...t,type:1,name:"[6:0]u8",length:6,byteSize:7,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:48});Object.assign(N,{...t,type:11,name:"*const [6:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:47});Object.assign(E,{...t,type:11,name:"*const *const [6:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:46});const _e=new Uint8Array,Te=new Uint8Array([128,252,15,0]),$e=new Uint8Array([0,0,0,0,0,0,0,0]),Be=new Uint8Array([168,252,15,0]),Le=new Uint8Array([0,0,0,0,0,0,20,64]),Ge=new Uint8Array([208,252,15,0]),He=new Uint8Array([0,0,0,0,0,0,224,63]),Je=new Uint8Array([248,252,15,0]),Ne=new Uint8Array([102,32,16,0]),Qe=new Uint8Array([97,109,111,117,110,116,0]);Object.assign(Q,{...t,type:2,name:"Struct0008",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:b},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:b},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:E}],methods:[],template:{memory:{array:_e},slots:{0:{structure:b,memory:{array:Te},slots:{0:{structure:f,memory:{array:$e}}}},1:{structure:b,memory:{array:Be},slots:{0:{structure:f,memory:{array:Le}}}},2:{structure:b,memory:{array:Ge},slots:{0:{structure:f,memory:{array:He}}}},3:{structure:E,memory:{array:Je},slots:{0:{structure:N,memory:{array:Ne},slots:{0:{structure:J,memory:{array:Qe}}}}}}}}},slot:38});Object.assign(x,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:37});const We=new Uint8Array,Xe=new Uint8Array([170,170,170,170]),Ye=new Uint8Array;Object.assign(W,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"amount",structure:x}],methods:[],template:{memory:{array:We},slots:{0:{structure:x,memory:{array:Xe},slots:{0:{structure:Q,memory:{array:Ye}}}}}}},slot:15});Object.assign(K,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:14});const Ze=new Uint8Array,et=new Uint8Array([160,248,15,0]),tt=new Uint8Array([4,0,0,0]);Object.assign(R,{...t,type:2,name:"Struct0009",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:y}],methods:[],template:{memory:{array:Ze},slots:{0:{structure:y,memory:{array:et},slots:{0:{structure:m,memory:{array:tt}}}}}}},slot:40});Object.assign(h,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:39});const st=new Uint8Array,rt=new Uint8Array([170,170,170,170]),at=new Uint8Array;Object.assign(X,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:h}],methods:[],template:{memory:{array:st},slots:{0:{structure:h,memory:{array:rt},slots:{0:{structure:R,memory:{array:at}}}}}}},slot:17});Object.assign(D,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:16});const nt=new Uint8Array,it=new Uint8Array([170,170,170,170]),ut=new Uint8Array;Object.assign(Y,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:h}],methods:[],template:{memory:{array:nt},slots:{0:{structure:h,memory:{array:it},slots:{0:{structure:R,memory:{array:ut}}}}}}},slot:19});Object.assign(F,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:18});const ot=new Uint8Array,lt=new Uint8Array,mt=new Uint8Array([216,35,16,0]),yt=new Uint8Array([144,35,16,0]),ct=new Uint8Array([115,109,117,100,103,101,114,0]),bt=new Uint8Array([212,35,16,0]),pt=new Uint8Array([116,35,16,0]),ft=new Uint8Array([70,114,97,110,107,32,82,101,105,116,98,101,114,103,101,114,0]),dt=new Uint8Array([208,35,16,0]),gt=new Uint8Array([1,0,0,0]),St=new Uint8Array([204,35,16,0]),ht=new Uint8Array([71,35,16,0]),zt=new Uint8Array([103,101,110,101,114,97,116,101,115,32,97,32,115,109,117,100,103,101,100,32,112,97,116,116,101,114,110,0]),Ot=new Uint8Array([170,170,170,170]),wt=new Uint8Array,Rt=new Uint8Array([170,170,170,170]),qt=new Uint8Array,At=new Uint8Array([170,170,170,170]),Ut=new Uint8Array;Object.assign(ue,{...t,type:2,name:"smudger.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ot}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:V},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:C},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:y},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:v},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:K},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:D},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:F}],methods:[],template:{memory:{array:lt},slots:{0:{structure:V,memory:{array:mt},slots:{0:{structure:$,memory:{array:yt},slots:{0:{structure:T,memory:{array:ct}}}}}},1:{structure:C,memory:{array:bt},slots:{0:{structure:L,memory:{array:pt},slots:{0:{structure:B,memory:{array:ft}}}}}},2:{structure:y,memory:{array:dt},slots:{0:{structure:m,memory:{array:gt}}}},3:{structure:v,memory:{array:St},slots:{0:{structure:H,memory:{array:ht},slots:{0:{structure:G,memory:{array:zt}}}}}},4:{structure:K,memory:{array:Ot},slots:{0:{structure:W,memory:{array:wt}}}},5:{structure:D,memory:{array:Rt},slots:{0:{structure:X,memory:{array:qt}}}},6:{structure:F,memory:{array:At},slots:{0:{structure:Y,memory:{array:Ut}}}}}}},slot:1});Object.assign(z,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:24});Object.assign(Z,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:23});Object.assign(ee,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Z}],methods:[],template:null},slot:22});Object.assign(o,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:o}],methods:[],template:null},slot:25});const jt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(te,{...t,type:9,name:"smudger.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:jt}}},slot:26});Object.assign(w,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:27});Object.assign(se,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:41});const Pt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),kt=new Uint8Array,It=new Uint8Array([28,35,16,0]),Vt=new Uint8Array([4,0,0,0]);Object.assign(M,{...t,type:2,name:"smudger.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ee},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:o},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:o},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:te},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:w}],methods:[],template:{memory:{array:Pt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:z},{...e,type:7,isRequired:!1,name:"FPixel",structure:se},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:y}],methods:[],template:{memory:{array:kt},slots:{0:{structure:y,memory:{array:It},slots:{0:{structure:m,memory:{array:Vt}}}}}}},slot:21});const Ct=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),vt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Se=new Uint8Array([0,0,0,0,0,0,0,0]),Et=new Uint8Array;Object.assign(q,{...t,type:2,name:"smudger.KernelInput(u8,smudger.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:M}],methods:[],template:{memory:{array:Ct},slots:{0:{structure:M,memory:{array:vt},slots:{0:{structure:ee,memory:{array:Se},address:1047568,slots:{0:{structure:Z,memory:{array:Et},address:0}}}}}}}},slot:20});Object.assign(re,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:23});Object.assign(ae,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:re}],methods:[],template:null},slot:30});const xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Kt=new Uint8Array,Dt=new Uint8Array([28,35,16,0]),Ft=new Uint8Array([4,0,0,0]);Object.assign(_,{...t,type:2,name:"smudger.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ae},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:o},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:o},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:te},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:w}],methods:[],template:{memory:{array:xt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:z},{...e,type:7,isRequired:!1,name:"FPixel",structure:se},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:y}],methods:[],template:{memory:{array:Kt},slots:{0:{structure:y,memory:{array:Dt},slots:{0:{structure:m,memory:{array:Ft}}}}}}},slot:29});const Mt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),_t=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Tt=new Uint8Array;Object.assign(A,{...t,type:2,name:"smudger.KernelOutput(u8,smudger.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:_}],methods:[],template:{memory:{array:Mt},slots:{0:{structure:_,memory:{array:_t},slots:{0:{structure:ae,memory:{array:Se},address:1047568,slots:{0:{structure:re,memory:{array:Tt},address:0}}}}}}}},slot:28});const $t=new Uint8Array([0,0,0,63]);Object.assign(U,{...t,type:2,name:"smudger.KernelParameters(smudger.kernel)",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"amount",structure:S}],methods:[],template:{memory:{array:$t}}},slot:31});Object.assign(oe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(smudger.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:42});Object.assign(le,{...t,type:7,name:"ErrorSet0000!smudger.KernelOutput(u8,smudger.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:A},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:oe}],methods:[],template:null},slot:35});Object.assign(me,{...t,type:3,name:"createOutput",length:1,byteSize:64,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:o},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:o},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:q},{...e,type:6,bitOffset:256,bitSize:32,byteSize:4,slot:3,name:"3",structure:U},{...e,type:6,bitOffset:288,bitSize:224,byteSize:28,slot:4,name:"retval",structure:le}],methods:[],template:null},slot:33});Object.assign(ye,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(smudger.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:43});Object.assign(ce,{...t,type:7,name:"ErrorSet0001!smudger.KernelOutput(u8,smudger.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:A},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ye}],methods:[],template:null},slot:36});Object.assign(be,{...t,type:3,name:"createPartialOutput",length:1,byteSize:72,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:o},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:o},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:o},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:o},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:q},{...e,type:6,bitOffset:320,bitSize:32,byteSize:4,slot:5,name:"5",structure:U},{...e,type:6,bitOffset:352,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ce}],methods:[],template:null},slot:34});const Bt=new Uint8Array,Lt={argStruct:me,thunk:8,name:"createOutput"},Gt={argStruct:be,thunk:2,name:"createPartialOutput"};Object.assign(pe,{...t,type:2,name:"smudger",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Bt}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ue},{...e,type:7,isRequired:!1,name:"Input",structure:q},{...e,type:7,isRequired:!1,name:"Output",structure:A},{...e,type:7,isRequired:!1,name:"Parameters",structure:U}],methods:[Lt,Gt],template:null},slot:0});const Ht=[p,T,$,V,B,L,C,m,y,G,H,v,S,f,b,J,N,E,Q,x,W,K,R,h,X,D,Y,F,ue,z,Z,ee,o,te,w,se,M,q,re,ae,_,A,U,oe,le,me,ye,ce,be,pe],Jt=Fe(Ht),Nt=pe.constructor,Qt=(async()=>{const n=new URL("smudger-7a2e2a2b.wasm",import.meta.url).href;return fetch(n)})();Me(Qt,{...Jt,writeBack:!0});const{createOutput:rs,createPartialOutput:Wt,kernel:ie,Input:Xt,Output:as,Parameters:ns}=Nt;function Yt(n,u,r,s,a={},d={}){if(Array.isArray(a)){const c=a;a={};for(const[l,g]of Object.keys(ie.inputImages).entries())a[g]=c[l]}const j=new Xt(void 0),P=Object.keys(ie.inputImages),i=[];let O;for(const c of P){let l=a[c];if(l||(P.length===1&&["data","width","height"].every(g=>!!a[g])?l=a:i.push(c)),j[c]=l,O){if(l.colorSpace!==O)throw new Error(`Input images must all use the same color space: ${O}`)}else O=l.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const ne=Wt(n,u,r,s,j,d),fe=c=>{const l=Object.keys(c),g={};for(const de of l){const{data:{typedArray:k},width:ge,height:ze}=c[de];let I;if(typeof ImageData=="function"){const Oe=new Uint8ClampedArray(k.buffer,k.byteOffset,k.byteLength);I=new ImageData(Oe,ge,s,{colorSpace:O})}else I={data:k,width:ge,height:ze};if(l.length===1)return I;g[de]=I}return g};return ne[Symbol.toStringTag]==="Promise"?ne.then(fe):fe(ne)}function Zt(){const n={};for(let[u,r]of Object.entries(ie)){if(u==="parameters"){const s={};for(const[a,d]of Object.entries(r)){const j=s[a]={};for(let[P,i]of Object.entries(d))typeof i=="object"?"string"in i?i=i.string:i=he(i):typeof i=="function"&&(i=es(i.name)),j[P]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[u]=r}return n}function he(n){const u=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=he(s)),u[r]=s;return u}function es(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[u,r,...s]=n.data;ts(u,s).then(([a,d])=>{postMessage([u,r,a],{transfer:d})}).catch(a=>{postMessage(["error",r,a])})};async function ts(n,u){switch(n){case"getKernelInfo":return[Zt(...u)];case"createPartialImageData":const s=await Yt(...u),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const d of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
