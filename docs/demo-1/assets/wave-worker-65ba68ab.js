import{u as ve,a as Ve,b as ke,d as Ie,c as Ce,e as xe,f as Ee,g as Ke,h as De,i as Fe,j as Me,k as _e,l as Te,m as $e,o as Be,n as Le,p as Ge,q as He}from"./index-422d9c98.js";ve();Ve();ke();Ie();Ce();xe();Ee();Ke();De();Fe();Me();_e();Te();$e();Be();Le();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},S={},H={},J={},x={},N={},Q={},E={},b={},p={},W={},X={},K={},f={},Y={},l={},s={},R={},z={},Z={},D={},ee={},F={},te={},M={},se={},_={},re={},T={},U={},O={},ae={},$={},ne={},B={},pe={},w={},ie={},ue={},m={},oe={},A={},le={},L={},j={},me={},ye={},G={},P={},v={},fe={},de={},Se={},he={},ge={},ze={},Oe={};Object.assign(S,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:5});Object.assign(H,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:4});Object.assign(J,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:3});Object.assign(x,{...t,type:11,name:"*const *const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:2});Object.assign(N,{...t,type:1,name:"[9:0]u8",length:9,byteSize:10,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:8});Object.assign(Q,{...t,type:11,name:"*const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:7});Object.assign(E,{...t,type:11,name:"*const *const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:6});Object.assign(b,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:10});Object.assign(p,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:b}],methods:[],template:null},slot:9});Object.assign(W,{...t,type:1,name:"[4:0]u8",length:4,byteSize:5,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:13});Object.assign(X,{...t,type:11,name:"*const [4:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:12});Object.assign(K,{...t,type:11,name:"*const *const [4:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:11});Object.assign(f,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:33});Object.assign(Y,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:32});Object.assign(l,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:l}],methods:[],template:null},slot:54});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:l}],methods:[],template:null},slot:53});const Je=new Uint8Array([]),Ne=new Uint8Array([80,248,15,0]),Qe=new Uint8Array([0,0,0,0,0,0,0,0]),We=new Uint8Array([120,248,15,0]),Xe=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(R,{...t,type:2,name:"Struct0016",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Je},slots:{0:{structure:s,memory:{array:Ne},slots:{0:{structure:l,memory:{array:Qe}}}},1:{structure:s,memory:{array:We},slots:{0:{structure:l,memory:{array:Xe}}}}}}},slot:50});Object.assign(z,{...t,type:11,name:"Struct0014",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:49});const Ye=new Uint8Array([]),Ze=new Uint8Array([96,253,15,0]),et=new Uint8Array([0,0,0,0,0,0,176,64]),tt=new Uint8Array([120,253,15,0]),st=new Uint8Array([0,0,0,0,0,0,176,64]);Object.assign(Z,{...t,type:2,name:"Struct0017",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Ye},slots:{0:{structure:s,memory:{array:Ze},slots:{0:{structure:l,memory:{array:et}}}},1:{structure:s,memory:{array:tt},slots:{0:{structure:l,memory:{array:st}}}}}}},slot:52});Object.assign(D,{...t,type:11,name:"Struct0015",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:51});const rt=new Uint8Array([]),at=new Uint8Array([170,170,170,170]),y=new Uint8Array([]),nt=new Uint8Array([170,170,170,170]),it=new Uint8Array([170,170,170,170]);Object.assign(ee,{...t,type:2,name:"Struct0010",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:Y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:z},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:D},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:z}],methods:[],template:{memory:{array:rt},slots:{0:{structure:z,memory:{array:at},slots:{0:{structure:R,memory:{array:y},address:-1431655766}}},1:{structure:D,memory:{array:nt},slots:{0:{structure:Z,memory:{array:y},address:-1431655766}}},2:{structure:z,memory:{array:it},slots:{0:{structure:R,memory:{array:y},address:-1431655766}}}}}},slot:39});Object.assign(F,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:38});const ut=new Uint8Array([]),ot=new Uint8Array([112,253,15,0]),lt=new Uint8Array([0,0,0,0,0,0,0,0]),mt=new Uint8Array([136,253,15,0]),yt=new Uint8Array([0,0,0,0,0,0,89,64]),ct=new Uint8Array([144,252,15,0]),bt=new Uint8Array([0,0,0,0,0,0,36,64]);Object.assign(te,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:ut},slots:{0:{structure:s,memory:{array:ot},slots:{0:{structure:l,memory:{array:lt}}}},1:{structure:s,memory:{array:mt},slots:{0:{structure:l,memory:{array:yt}}}},2:{structure:s,memory:{array:ct},slots:{0:{structure:l,memory:{array:bt}}}}}}},slot:41});Object.assign(M,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:40});const pt=new Uint8Array([]),ft=new Uint8Array([112,253,15,0]),dt=new Uint8Array([0,0,0,0,0,0,0,0]),St=new Uint8Array([136,253,15,0]),ht=new Uint8Array([0,0,0,0,0,0,89,64]),gt=new Uint8Array([144,252,15,0]),zt=new Uint8Array([0,0,0,0,0,0,20,64]);Object.assign(se,{...t,type:2,name:"Struct0012",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:pt},slots:{0:{structure:s,memory:{array:ft},slots:{0:{structure:l,memory:{array:dt}}}},1:{structure:s,memory:{array:St},slots:{0:{structure:l,memory:{array:ht}}}},2:{structure:s,memory:{array:gt},slots:{0:{structure:l,memory:{array:zt}}}}}}},slot:43});Object.assign(_,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:42});const Ot=new Uint8Array([]),wt=new Uint8Array([170,170,170,170]),qt=new Uint8Array([170,170,170,170]),Rt=new Uint8Array([170,170,170,170]);Object.assign(re,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"center",structure:F},{...e,type:8,isRequired:!1,slot:1,name:"amplitude",structure:M},{...e,type:8,isRequired:!1,slot:2,name:"frequency",structure:_}],methods:[],template:{memory:{array:Ot},slots:{0:{structure:F,memory:{array:wt},slots:{0:{structure:ee,memory:{array:y},address:-1431655766}}},1:{structure:M,memory:{array:qt},slots:{0:{structure:te,memory:{array:y},address:-1431655766}}},2:{structure:_,memory:{array:Rt},slots:{0:{structure:se,memory:{array:y},address:-1431655766}}}}}},slot:15});Object.assign(T,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:14});const At=new Uint8Array([]),Ut=new Uint8Array([112,248,15,0]),jt=new Uint8Array([4,0,0,0]);Object.assign(U,{...t,type:2,name:"Struct0013",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:At},slots:{0:{structure:p,memory:{array:Ut},slots:{0:{structure:b,memory:{array:jt}}}}}}},slot:45});Object.assign(O,{...t,type:11,name:"Struct0009",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:U}],methods:[],template:null},slot:44});const Pt=new Uint8Array([]),vt=new Uint8Array([170,170,170,170]);Object.assign(ae,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:O}],methods:[],template:{memory:{array:Pt},slots:{0:{structure:O,memory:{array:vt},slots:{0:{structure:U,memory:{array:y},address:-1431655766}}}}}},slot:17});Object.assign($,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:16});const Vt=new Uint8Array([]),kt=new Uint8Array([170,170,170,170]);Object.assign(ne,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:O}],methods:[],template:{memory:{array:Vt},slots:{0:{structure:O,memory:{array:kt},slots:{0:{structure:U,memory:{array:y},address:-1431655766}}}}}},slot:19});Object.assign(B,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:18});const It=new Uint8Array([]),Ct=new Uint8Array([]),xt=new Uint8Array([164,248,15,0]),Et=new Uint8Array([250,35,16,0]),Kt=new Uint8Array([110,101,116,46,110,105,99,111,112,116,101,114,101,46,102,105,108,116,101,114,115,0]),Dt=new Uint8Array([228,248,15,0]),Ft=new Uint8Array([240,35,16,0]),Mt=new Uint8Array([110,105,99,111,112,116,101,114,101,0]),_t=new Uint8Array([36,249,15,0]),Tt=new Uint8Array([1,0,0,0]),$t=new Uint8Array([124,249,15,0]),Bt=new Uint8Array([235,35,16,0]),Lt=new Uint8Array([119,97,118,101,0]),Gt=new Uint8Array([170,170,170,170]),Ht=new Uint8Array([170,170,170,170]),Jt=new Uint8Array([170,170,170,170]);Object.assign(pe,{...t,type:2,name:"wave.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:It}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:x},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:E},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:p},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:K},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:T},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:$},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:B}],methods:[],template:{memory:{array:Ct},slots:{0:{structure:x,memory:{array:xt},slots:{0:{structure:J,memory:{array:Et},slots:{0:{structure:H,memory:{array:Kt},address:1057786}}}}},1:{structure:E,memory:{array:Dt},slots:{0:{structure:Q,memory:{array:Ft},slots:{0:{structure:N,memory:{array:Mt},address:1057776}}}}},2:{structure:p,memory:{array:_t},slots:{0:{structure:b,memory:{array:Tt}}}},3:{structure:K,memory:{array:$t},slots:{0:{structure:X,memory:{array:Bt},slots:{0:{structure:W,memory:{array:Lt},address:1057771}}}}},4:{structure:T,memory:{array:Gt},slots:{0:{structure:re,memory:{array:y},address:-1431655766}}},5:{structure:$,memory:{array:Ht},slots:{0:{structure:ae,memory:{array:y},address:-1431655766}}},6:{structure:B,memory:{array:Jt},slots:{0:{structure:ne,memory:{array:y},address:-1431655766}}}}}},slot:1});Object.assign(w,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:24});Object.assign(ie,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(ue,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ie}],methods:[],template:null},slot:22});Object.assign(m,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:25});const Nt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(oe,{...t,type:9,name:"wave.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:b},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:b}],methods:[],template:{memory:{array:Nt}}},slot:26});Object.assign(A,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:27});Object.assign(le,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:46});const Qt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Wt=new Uint8Array([]),Xt=new Uint8Array([72,253,15,0]),Yt=new Uint8Array([4,0,0,0]);Object.assign(L,{...t,type:2,name:"wave.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ue},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:oe},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:A}],methods:[],template:{memory:{array:Qt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:le},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:Wt},slots:{0:{structure:p,memory:{array:Xt},slots:{0:{structure:b,memory:{array:Yt}}}}}}},slot:21});const Zt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),es=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ts=new Uint8Array([0,0,0,0,0,0,0,0]),we=new Uint8Array([]);Object.assign(j,{...t,type:2,name:"wave.KernelInput(u8,wave.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:L}],methods:[],template:{memory:{array:Zt},slots:{0:{structure:L,memory:{array:es},slots:{0:{structure:ue,memory:{array:ts},slots:{0:{structure:ie,memory:{array:we}}}}}}}}},slot:20});Object.assign(me,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(ye,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:me}],methods:[],template:null},slot:30});const ss=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),rs=new Uint8Array([]),as=new Uint8Array([72,253,15,0]),ns=new Uint8Array([4,0,0,0]);Object.assign(G,{...t,type:2,name:"wave.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ye},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:oe},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:A}],methods:[],template:{memory:{array:ss}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:le},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:rs},slots:{0:{structure:p,memory:{array:as},slots:{0:{structure:b,memory:{array:ns}}}}}}},slot:29});const is=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),us=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),os=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(P,{...t,type:2,name:"wave.KernelOutput(u8,wave.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:G}],methods:[],template:{memory:{array:is},slots:{0:{structure:G,memory:{array:us},slots:{0:{structure:ye,memory:{array:os},slots:{0:{structure:me,memory:{array:we}}}}}}}}},slot:28});const ls=new Uint8Array([0,0,0,0,0,0,0,0,0,0,32,65,0,0,160,64]);Object.assign(v,{...t,type:2,name:"wave.KernelParameters(wave.kernel)",length:1,byteSize:16,align:3,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"center",structure:Y},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"amplitude",structure:f},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"frequency",structure:f}],methods:[],template:{memory:{array:ls}}},slot:31});Object.assign(fe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(wave.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:47});Object.assign(de,{...t,type:7,name:"ErrorSet0000!wave.KernelOutput(u8,wave.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:fe}],methods:[],template:null},slot:36});Object.assign(Se,{...t,type:3,name:"createOutput",length:1,byteSize:80,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:6,bitOffset:192,bitSize:192,byteSize:24,slot:2,name:"2",structure:j},{...e,type:6,bitOffset:0,bitSize:128,byteSize:16,slot:3,name:"3",structure:v},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:de}],methods:[],template:null},slot:34});Object.assign(he,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(wave.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(ge,{...t,type:7,name:"ErrorSet0001!wave.KernelOutput(u8,wave.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:he}],methods:[],template:null},slot:37});Object.assign(ze,{...t,type:3,name:"createPartialOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:2,name:"2",structure:m},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:3,name:"3",structure:m},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:4,name:"4",structure:j},{...e,type:6,bitOffset:0,bitSize:128,byteSize:16,slot:5,name:"5",structure:v},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ge}],methods:[],template:null},slot:35});const ms={argStruct:Se,thunk:7,name:"createOutput"},ys={argStruct:ze,thunk:2,name:"createPartialOutput"};Object.assign(Oe,{...t,type:2,name:"wave",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:we}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:pe},{...e,type:7,isRequired:!1,name:"Input",structure:j},{...e,type:7,isRequired:!1,name:"Output",structure:P},{...e,type:7,isRequired:!1,name:"Parameters",structure:v}],methods:[ms,ys],template:null},slot:0});const cs=[S,H,J,x,N,Q,E,b,p,W,X,K,f,Y,l,s,R,z,Z,D,ee,F,te,M,se,_,re,T,U,O,ae,$,ne,B,pe,w,ie,ue,m,oe,A,le,L,j,me,ye,G,P,v,fe,de,Se,he,ge,ze,Oe],bs=Ge(cs),ps=Oe.constructor,fs=(async()=>{const i=new URL("wave-59d7b878.wasm",import.meta.url).href;return fetch(i)})();He(fs,{...bs,writeBack:!0});const{createOutput:qs,createPartialOutput:ds,kernel:be,Input:Ss,Output:Rs,Parameters:As}=ps;function hs(i,o,a,r,n={},h={}){if(Array.isArray(n)){const d=n;n={};for(const[c,g]of Object.keys(be.inputImages).entries())n[g]=d[c]}const V=new Ss(void 0),k=Object.keys(be.inputImages),u=[];let q;for(const d of k){let c=n[d];if(c||(k.length===1&&["data","width","height"].every(g=>!!n[g])?c=n:u.push(d)),V[d]=c,q){if(c.colorSpace!==q)throw new Error(`Input images must all use the same color space: ${q}`)}else q=c.colorSpace}if(u.length>0)throw new Error(`Missing input image${u.length>1?"s":""}: ${u.join(", ")}`);const ce=ds(i,o,a,r,V,h),qe=d=>{const c=Object.keys(d),g={};for(const Re of c){const{data:{typedArray:I},width:Ae,height:je}=d[Re];let C;if(typeof ImageData=="function"){const Pe=new Uint8ClampedArray(I.buffer,I.byteOffset,I.byteLength);C=new ImageData(Pe,Ae,r,{colorSpace:q})}else C={data:I,width:Ae,height:je};if(c.length===1)return C;g[Re]=C}return g};return ce[Symbol.toStringTag]==="Promise"?ce.then(qe):qe(ce)}function gs(){const i={};for(let[o,a]of Object.entries(be)){if(o==="parameters"){const r={};for(const[n,h]of Object.entries(a)){const V=r[n]={};for(let[k,u]of Object.entries(h))typeof u=="object"?"string"in u?u=u.string:u=Ue(u):typeof u=="function"&&(u=zs(u.name)),V[k]=u}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());i[o]=a}return i}function Ue(i){const o=[];for(let[a,r]of Object.entries(i))typeof r=="object"&&(r=Ue(r)),o[a]=r;return o}function zs(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[o,a,...r]=i.data;Os(o,r).then(([n,h])=>{postMessage([o,a,n],{transfer:h})}).catch(n=>{postMessage(["error",a,n])})};async function Os(i,o){switch(i){case"getKernelInfo":return[gs(...o)];case"createPartialImageData":const r=await hs(...o),n=[];if("data"in r&&"width"in r&&"height"in r)n.push(r.data.buffer);else for(const h of Object.entries(r))n.push(r.data.buffer);return[r,n];default:throw new Error(`Unknown function: ${i}`)}}
