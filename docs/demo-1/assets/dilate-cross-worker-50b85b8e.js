import{u as Se,a as Oe,b as ze,c as de,d as he,e as je,f as we,g as Ae,h as Ue,i as Pe,j as Re,k as ke,l as qe,m as Ie,n as Ve,o as ve,p as Ee,q as xe}from"./index-67c7daa1.js";Se();ke();qe();Oe();ze();Ie();Ve();ve();de();he();je();we();xe();Ee();Ae();Ue();Pe();const e={constructor:null,typedArray:null,type:0,name:void 0,byteSize:0,align:0,isConst:!1,isTuple:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null}},t={type:0,isRequired:!1},s={},p={},K={},C={},M={},D={},y={},g={},T={},F={},$={},h={},_={},L={},Y={},U={},B={},P={},o={},l={},A={},x={},Z={},G={},R={},H={},k={},J={},q={},I={},z={},tt={},et={},d={},st={},rt={},at={},gt={},N={},ft={},St={},nt={},Ot={},it={},zt={},dt={},ht={},jt={},wt={},At={},Ut={},Pt={},Rt={},kt={},qt={},It={},Vt={},vt={},Et={},xt={},Kt={},ot={},Ct={},Mt={},ct={},Dt={},ut={},Tt={},Ft={},$t={},_t={},Lt={},Bt={},Gt={},mt={},Ht={},Jt={},Nt={},Qt={},Wt={},Xt={},Yt={},Zt={},te={},ee={},se={},re={},ae={},ne={},ie={},oe={},ce={},ue={},me={},ye={},be={},Ke=new Uint8Array,Ce=new Uint8Array([4]),Me=new Uint8Array,De=new Uint8Array,Te=new Uint8Array([252,4,0,1]),Fe=new Uint8Array([99,111,109,46,103,97,115,117,98,97,115,117,0]),$e=new Uint8Array([20,5,0,1]),_e=new Uint8Array([103,97,115,117,98,97,115,117,0]),Le=new Uint8Array,Be=new Uint8Array([1]),Ge=new Uint8Array([46,5,0,1]),He=new Uint8Array([102,108,97,115,104,32,99,111,109,112,97,116,105,98,108,101,32,100,105,108,97,116,101,32,102,105,108,116,101,114,32,39,99,114,111,115,115,39,0]),Je=new Uint8Array,Ne=new Uint8Array,Qe=new Uint8Array,We=new Uint8Array([0]),Xe=new Uint8Array([1]),le=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ye=new Uint8Array,Ze=new Uint8Array,ts=new Uint8Array,es=new Uint8Array,ss=new Uint8Array([4]),yt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),pe=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),rs=new Uint8Array,as=new Uint8Array,ns=new Uint8Array,is=new Uint8Array,os=new Uint8Array([4]),bt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),cs=new Uint8Array([27,0]),us=new Uint8Array([27,0]),ms=new Uint8Array,ys=new Uint8Array,bs=new Uint8Array,ls=new Uint8Array;Object.assign(gt,{slots:{0:N}});Object.assign(N,{structure:y,memory:{array:Ke},const:!0,slots:{0:ft}});Object.assign(ft,{structure:g,memory:{array:Ce},const:!0});Object.assign(St,{slots:{0:nt}});Object.assign(nt,{structure:h,memory:{array:Me},const:!0,slots:{0:N}});Object.assign(Ot,{slots:{0:it}});Object.assign(it,{structure:h,memory:{array:De},const:!0,slots:{0:N}});Object.assign(zt,{slots:{0:dt,1:jt,2:At,3:Pt,4:kt,5:qt,6:It}});Object.assign(dt,{structure:C,memory:{array:Te},const:!0,slots:{0:ht}});Object.assign(ht,{structure:K,memory:{array:Fe},reloc:16778492});Object.assign(jt,{structure:D,memory:{array:$e},const:!0,slots:{0:wt}});Object.assign(wt,{structure:M,memory:{array:_e},reloc:16778516});Object.assign(At,{structure:y,memory:{array:Le},const:!0,slots:{0:Ut}});Object.assign(Ut,{structure:g,memory:{array:Be},const:!0});Object.assign(Pt,{structure:F,memory:{array:Ge},const:!0,slots:{0:Rt}});Object.assign(Rt,{structure:T,memory:{array:He},reloc:16778542});Object.assign(kt,{structure:$,memory:{array:Je},const:!0});Object.assign(qt,{structure:_,memory:{array:Ne},const:!0,slots:{0:nt}});Object.assign(It,{structure:L,memory:{array:Qe},const:!0,slots:{0:it}});Object.assign(Vt,{slots:{0:vt,1:Et}});Object.assign(vt,{structure:l,memory:{array:We},const:!0});Object.assign(Et,{structure:l,memory:{array:Xe},const:!0});Object.assign(xt,{memory:{array:le},slots:{0:Kt}});Object.assign(Kt,{structure:P,memory:{array:le,offset:0,length:8},slots:{0:ot}});Object.assign(ot,{structure:B,memory:{array:Ye},reloc:0});Object.assign(Ct,{slots:{0:Mt,1:Dt,2:Tt}});Object.assign(Mt,{structure:s,memory:{array:Ze},const:!0,slots:{0:ct}});Object.assign(ct,{structure:U});Object.assign(Dt,{structure:s,memory:{array:ts},const:!0,slots:{0:ut}});Object.assign(ut,{structure:Z});Object.assign(Tt,{structure:y,memory:{array:es},const:!0,slots:{0:Ft}});Object.assign(Ft,{structure:g,memory:{array:ss},const:!0});Object.assign($t,{memory:{array:yt},slots:{0:_t}});Object.assign(_t,{structure:G,memory:{array:yt},slots:{0:Lt}});Object.assign(Lt,{structure:P,memory:{array:yt,offset:0,length:8},slots:{0:ot}});Object.assign(Bt,{memory:{array:pe},slots:{0:Gt}});Object.assign(Gt,{structure:k,memory:{array:pe,offset:0,length:8},slots:{0:mt}});Object.assign(mt,{structure:H,memory:{array:rs},reloc:0});Object.assign(Ht,{slots:{0:Jt,1:Nt,2:Qt}});Object.assign(Jt,{structure:s,memory:{array:as},const:!0,slots:{0:ct}});Object.assign(Nt,{structure:s,memory:{array:ns},const:!0,slots:{0:ut}});Object.assign(Qt,{structure:y,memory:{array:is},const:!0,slots:{0:Wt}});Object.assign(Wt,{structure:g,memory:{array:os},const:!0});Object.assign(Xt,{memory:{array:bt},slots:{0:Yt}});Object.assign(Yt,{structure:J,memory:{array:bt},slots:{0:Zt}});Object.assign(Zt,{structure:k,memory:{array:bt,offset:0,length:8},slots:{0:mt}});Object.assign(te,{slots:{0:ee}});Object.assign(ee,{structure:z,memory:{array:cs},const:!0});Object.assign(se,{slots:{0:re}});Object.assign(re,{structure:d,memory:{array:us},const:!0});Object.assign(ae,{slots:{0:ne,1:oe,2:ue,3:ye}});Object.assign(ne,{structure:s,memory:{array:ms},const:!0,slots:{0:ie}});Object.assign(ie,{structure:Y});Object.assign(oe,{structure:s,memory:{array:ys},const:!0,slots:{0:ce}});Object.assign(ce,{structure:R});Object.assign(ue,{structure:s,memory:{array:bs},const:!0,slots:{0:me}});Object.assign(me,{structure:q});Object.assign(ye,{structure:s,memory:{array:ls},const:!0,slots:{0:be}});Object.assign(be,{structure:I});const ps={argStruct:et,thunkId:2,name:"createOutput"},gs={argStruct:rt,thunkId:3,name:"createPartialOutput"};Object.assign(s,{...e,name:"type",align:1,instance:{members:[{...t,type:6,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:s}],methods:[]}});Object.assign(p,{...e,name:"u8",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(K,{...e,type:1,name:"[12:0]u8",length:12,byteSize:13,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(C,{...e,type:13,name:"*const [12:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:K}],methods:[]}});Object.assign(M,{...e,type:1,name:"[8:0]u8",length:8,byteSize:9,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(D,{...e,type:13,name:"*const [8:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:M}],methods:[]}});Object.assign(y,{...e,name:"comptime_int",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:y}],methods:[]}});Object.assign(g,{...e,name:"i8",byteSize:1,align:1,instance:{members:[{...t,type:2,bitOffset:0,bitSize:8,byteSize:1,structure:g}],methods:[]}});Object.assign(T,{...e,type:1,name:"[38:0]u8",length:38,byteSize:39,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(F,{...e,type:13,name:"*const [38:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[]}});Object.assign($,{...e,type:2,name:"@TypeOf(.{})",align:1,isTuple:!0});Object.assign(h,{...e,type:2,name:"Struct3832472641",align:1,instance:{members:[{...t,type:7,slot:0,name:"channels",structure:y}],methods:[],template:gt}});Object.assign(_,{...e,type:2,name:"Struct1223234931",align:1,instance:{members:[{...t,type:7,slot:0,name:"i",structure:h}],methods:[],template:St}});Object.assign(L,{...e,type:2,name:"Struct851752505",align:1,instance:{members:[{...t,type:7,slot:0,name:"o",structure:h}],methods:[],template:Ot}});Object.assign(Y,{...e,type:2,name:"dilate-cross.kernel",align:1,static:{members:[{...t,type:7,slot:0,name:"namespace",structure:C},{...t,type:7,slot:1,name:"vendor",structure:D},{...t,type:7,slot:2,name:"version",structure:y},{...t,type:7,slot:3,name:"description",structure:F},{...t,type:7,slot:4,name:"parameters",structure:$},{...t,type:7,slot:5,name:"inputImages",structure:_},{...t,type:7,slot:6,name:"outputImages",structure:L}],methods:[],template:zt}});Object.assign(U,{...e,type:15,name:"@Vector(4, u8)",length:4,byteSize:4,align:4,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(B,{...e,type:14,name:"[_]const @Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:U}],methods:[]}});Object.assign(P,{...e,type:13,name:"[]const @Vector(4, u8)",byteSize:8,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:B}],methods:[]}});Object.assign(o,{...e,name:"u32",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:o}],methods:[]}});Object.assign(l,{...e,type:11,name:"dilate-cross.ColorSpace",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:1,byteSize:1,structure:l}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"srgb",structure:l},{...t,type:7,slot:1,name:"display-p3",structure:l}],methods:[],template:Vt}});Object.assign(A,{...e,name:"usize",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:A}],methods:[]}});Object.assign(x,{...e,name:"f32",byteSize:4,align:4,instance:{members:[{...t,type:4,bitOffset:0,bitSize:32,byteSize:4,structure:x}],methods:[]}});Object.assign(Z,{...e,type:15,name:"@Vector(4, f32)",length:4,byteSize:16,align:16,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:x}],methods:[]}});Object.assign(G,{...e,type:2,name:"dilate-cross.Image(u8,4,false)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:P},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:o},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:o},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:l},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:A}],methods:[],template:xt},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:y}],methods:[],template:Ct}});Object.assign(R,{...e,type:2,name:"dilate-cross.KernelInput(u8,dilate-cross.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"i",structure:G}],methods:[],template:$t}});Object.assign(H,{...e,type:14,name:"[_]@Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:U}],methods:[]}});Object.assign(k,{...e,type:13,name:"[]@Vector(4, u8)",byteSize:8,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:H}],methods:[]}});Object.assign(J,{...e,type:2,name:"dilate-cross.Image(u8,4,true)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:k},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:o},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:o},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:l},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:A}],methods:[],template:Bt},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:y}],methods:[],template:Ht}});Object.assign(q,{...e,type:2,name:"dilate-cross.KernelOutput(u8,dilate-cross.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"o",structure:J}],methods:[],template:Xt}});Object.assign(I,{...e,type:2,name:"dilate-cross.KernelParameters(dilate-cross.kernel)",align:1});Object.assign(z,{...e,type:10,name:"ErrorSet4161604127",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:z}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:z}],methods:[],template:te}});Object.assign(tt,{...e,type:9,name:"ErrorSet4161604127!dilate-cross.KernelOutput(u8,dilate-cross.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:q},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:z}],methods:[]}});Object.assign(et,{...e,type:5,name:"createOutput",byteSize:60,align:4,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:0,bitSize:32,byteSize:4,slot:3,name:"0",structure:o},{...t,type:3,isRequired:!0,bitOffset:32,bitSize:32,byteSize:4,slot:4,name:"1",structure:o},{...t,type:5,isRequired:!0,bitOffset:64,bitSize:192,byteSize:24,slot:0,name:"2",structure:R},{...t,type:5,isRequired:!0,bitOffset:480,bitSize:0,byteSize:0,slot:1,name:"3",structure:I},{...t,type:5,isRequired:!0,bitOffset:256,bitSize:224,byteSize:28,slot:2,name:"retval",structure:tt}],methods:[]}});Object.assign(d,{...e,type:10,name:"ErrorSet140139086",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:d}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:d}],methods:[],template:se}});Object.assign(st,{...e,type:9,name:"ErrorSet140139086!dilate-cross.KernelOutput(u8,dilate-cross.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:q},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:d}],methods:[]}});Object.assign(rt,{...e,type:5,name:"createPartialOutput",byteSize:68,align:4,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:0,bitSize:32,byteSize:4,slot:3,name:"0",structure:o},{...t,type:3,isRequired:!0,bitOffset:32,bitSize:32,byteSize:4,slot:4,name:"1",structure:o},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:5,name:"2",structure:o},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:6,name:"3",structure:o},{...t,type:5,isRequired:!0,bitOffset:128,bitSize:192,byteSize:24,slot:0,name:"4",structure:R},{...t,type:5,isRequired:!0,bitOffset:544,bitSize:0,byteSize:0,slot:1,name:"5",structure:I},{...t,type:5,isRequired:!0,bitOffset:320,bitSize:224,byteSize:28,slot:2,name:"retval",structure:st}],methods:[]}});Object.assign(at,{...e,type:2,name:"dilate-cross",align:1,static:{members:[{...t,type:7,slot:0,name:"kernel",structure:s},{...t,type:7,slot:1,name:"Input",structure:s},{...t,type:7,slot:2,name:"Output",structure:s},{...t,type:7,slot:3,name:"Parameters",structure:s}],methods:[ps,gs],template:ae}});const fs=[s,p,K,C,M,D,y,g,T,F,$,h,_,L,Y,U,B,P,o,l,A,x,Z,G,R,H,k,J,q,I,z,tt,et,d,st,rt,at],Ss=at,Os={runtimeSafety:!1,littleEndian:!0},Q=Re();Q.getSpecialExports();Q.recreateStructures(fs,Os);const zs=(async()=>{const n=new URL("dilate-cross-b8198161.wasm",import.meta.url).href;return fetch(n)})();Q.loadModule(zs);Q.linkVariables(!0);const{constructor:ds}=Ss,{createPartialOutput:hs,Input:js,kernel:X}=ds;function ws(n,c,i,a,r={},f={}){const S=[];for(const[m]of X.inputImages)S.push(m);const j=[];for(const[m]of X.outputImages)j.push(m);if(Array.isArray(r)){const m=r;r={};for(const[b,O]of S.entries())r[O]=m[b]}const u=new js(void 0),V=[];let w;for(const m of S){let b=r[m];if(b||(S.length===1&&["data","width","height"].every(O=>!!r[O])?b=r:V.push(m)),u[m]=b,w){if(b.colorSpace!==w)throw new Error(`Input images must all use the same color space: ${w}`)}else w=b.colorSpace}if(V.length>0)throw new Error(`Missing input image${V.length>1?"s":""}: ${V.join(", ")}`);const W=hs(n,c,i,a,u,f),lt=m=>{const b={};for(const O of j){const{data:{typedArray:v},width:pt,height:ge}=m[O];let E;if(typeof ImageData=="function"){const fe=new Uint8ClampedArray(v.buffer,v.byteOffset,v.byteLength);E=new ImageData(fe,pt,a,{colorSpace:w})}else E={data:v,width:pt,height:ge};if(j.length===1)return E;b[O]=E}return b};return W[Symbol.toStringTag]==="Promise"?W.then(lt):lt(W)}function As(){const n={};for(let[c,i]of X){if(c==="parameters"){const a={};for(const[r,f]of i){const S=a[r]={};for(let[j,u]of f)typeof u=="object"?u=u.string??u.valueOf():typeof u=="function"&&(u=Us(u.name)),S[j]=u}i=a}else typeof i=="object"&&(i=i.string??i.valueOf());n[c]=i}return n}function Us(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=async n=>{if(!Array.isArray(n.data))return;const[c,i,...a]=n.data;try{const[r,f]=await Ps(c,a);postMessage([c,i,r],{transfer:f})}catch(r){postMessage(["error",i,r])}};async function Ps(n,c){switch(n){case"getKernelInfo":return[As(...c)];case"createPartialImageData":const a=await ws(...c),r=[];if("data"in a&&"width"in a&&"height"in a)r.push(a.data.buffer);else for(const f of Object.entries(a))r.push(a.data.buffer);return[a,r];default:throw new Error(`Unknown function: ${n}`)}}postMessage("ready");
