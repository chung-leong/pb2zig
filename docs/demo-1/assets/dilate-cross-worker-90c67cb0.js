import{u as de,a as Se,b as he,c as ge,d as ze,e as Oe,f as we,g as Re,h as qe,i as je,j as Ae,k as Ue,l as Pe,m as ke,n as Ie,o as Ve,p as Ce,q as ve}from"./index-422d9c98.js";de();Se();he();ge();ze();Oe();we();Re();qe();je();Ae();Ue();Pe();ke();Ie();Ve();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},b={},F={},M={},k={},_={},T={},I={},m={},c={},$={},B={},V={},L={},C={},O={},d={},G={},v={},H={},E={},te={},S={},J={},N={},u={},Q={},z={},x={},W={},K={},w={},X={},Y={},D={},R={},q={},se={},re={},ae={},ne={},ie={},oe={},ue={};Object.assign(b,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:5});Object.assign(F,{...t,type:1,name:"[12:0]u8",length:12,byteSize:13,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:4});Object.assign(M,{...t,type:11,name:"*const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:F}],methods:[],template:null},slot:3});Object.assign(k,{...t,type:11,name:"*const *const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:M}],methods:[],template:null},slot:2});Object.assign(_,{...t,type:1,name:"[8:0]u8",length:8,byteSize:9,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:8});Object.assign(T,{...t,type:11,name:"*const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_}],methods:[],template:null},slot:7});Object.assign(I,{...t,type:11,name:"*const *const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[],template:null},slot:6});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:10});Object.assign(c,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:9});Object.assign($,{...t,type:1,name:"[38:0]u8",length:38,byteSize:39,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:13});Object.assign(B,{...t,type:11,name:"*const [38:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:12});Object.assign(V,{...t,type:11,name:"*const *const [38:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:11});const Ee=new Uint8Array([]);Object.assign(L,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ee}}},slot:15});Object.assign(C,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:14});const xe=new Uint8Array([]),Ke=new Uint8Array([48,250,15,0]),De=new Uint8Array([4,0,0,0]);Object.assign(O,{...t,type:2,name:"Struct0007",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:xe},slots:{0:{structure:c,memory:{array:Ke},slots:{0:{structure:m,memory:{array:De}}}}}}},slot:37});Object.assign(d,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:O}],methods:[],template:null},slot:36});const Fe=new Uint8Array([]),Me=new Uint8Array([170,170,170,170]),g=new Uint8Array([]);Object.assign(G,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"i",structure:d}],methods:[],template:{memory:{array:Fe},slots:{0:{structure:d,memory:{array:Me},slots:{0:{structure:O,memory:{array:g},address:-1431655766}}}}}},slot:17});Object.assign(v,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:16});const _e=new Uint8Array([]),Te=new Uint8Array([170,170,170,170]);Object.assign(H,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"o",structure:d}],methods:[],template:{memory:{array:_e},slots:{0:{structure:d,memory:{array:Te},slots:{0:{structure:O,memory:{array:g},address:-1431655766}}}}}},slot:19});Object.assign(E,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:18});const $e=new Uint8Array([]),Be=new Uint8Array([]),Le=new Uint8Array([28,251,15,0]),Ge=new Uint8Array([207,7,16,0]),He=new Uint8Array([99,111,109,46,103,97,115,117,98,97,115,117,0]),Je=new Uint8Array([92,251,15,0]),Ne=new Uint8Array([198,7,16,0]),Qe=new Uint8Array([103,97,115,117,98,97,115,117,0]),We=new Uint8Array([156,251,15,0]),Xe=new Uint8Array([1,0,0,0]),Ye=new Uint8Array([244,251,15,0]),Ze=new Uint8Array([159,7,16,0]),et=new Uint8Array([102,108,97,115,104,32,99,111,109,112,97,116,105,98,108,101,32,100,105,108,97,116,101,32,102,105,108,116,101,114,32,39,99,114,111,115,115,39,0]),tt=new Uint8Array([170,170,170,170]),st=new Uint8Array([170,170,170,170]),rt=new Uint8Array([170,170,170,170]);Object.assign(te,{...t,type:2,name:"dilate-cross.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:$e}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:k},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:I},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:c},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:V},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:C},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:v},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:E}],methods:[],template:{memory:{array:Be},slots:{0:{structure:k,memory:{array:Le},slots:{0:{structure:M,memory:{array:Ge},slots:{0:{structure:F,memory:{array:He},address:1050575}}}}},1:{structure:I,memory:{array:Je},slots:{0:{structure:T,memory:{array:Ne},slots:{0:{structure:_,memory:{array:Qe},address:1050566}}}}},2:{structure:c,memory:{array:We},slots:{0:{structure:m,memory:{array:Xe}}}},3:{structure:V,memory:{array:Ye},slots:{0:{structure:B,memory:{array:Ze},slots:{0:{structure:$,memory:{array:et},address:1050527}}}}},4:{structure:C,memory:{array:tt},slots:{0:{structure:L,memory:{array:g},address:-1431655766}}},5:{structure:v,memory:{array:st},slots:{0:{structure:G,memory:{array:g},address:-1431655766}}},6:{structure:E,memory:{array:rt},slots:{0:{structure:H,memory:{array:g},address:-1431655766}}}}}},slot:1});Object.assign(S,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:24});Object.assign(J,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:23});Object.assign(N,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:J}],methods:[],template:null},slot:22});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:25});const at=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Q,{...t,type:9,name:"dilate-cross.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:at}}},slot:26});Object.assign(z,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:27});Object.assign(x,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:x}],methods:[],template:null},slot:41});Object.assign(W,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:x}],methods:[],template:null},slot:38});const nt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),it=new Uint8Array([]),ot=new Uint8Array([216,249,15,0]),ut=new Uint8Array([4,0,0,0]);Object.assign(K,{...t,type:2,name:"dilate-cross.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:N},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Q},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:z}],methods:[],template:{memory:{array:nt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:S},{...e,type:7,isRequired:!1,name:"FPixel",structure:W},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:it},slots:{0:{structure:c,memory:{array:ot},slots:{0:{structure:m,memory:{array:ut}}}}}}},slot:21});const lt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),mt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ct=new Uint8Array([0,0,0,0,0,0,0,0]),le=new Uint8Array([]);Object.assign(w,{...t,type:2,name:"dilate-cross.KernelInput(u8,dilate-cross.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"i",structure:K}],methods:[],template:{memory:{array:lt},slots:{0:{structure:K,memory:{array:mt},slots:{0:{structure:N,memory:{array:ct},slots:{0:{structure:J,memory:{array:le}}}}}}}}},slot:20});Object.assign(X,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:23});Object.assign(Y,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:X}],methods:[],template:null},slot:30});const yt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),bt=new Uint8Array([]),pt=new Uint8Array([216,249,15,0]),ft=new Uint8Array([4,0,0,0]);Object.assign(D,{...t,type:2,name:"dilate-cross.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Y},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Q},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:z}],methods:[],template:{memory:{array:yt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:S},{...e,type:7,isRequired:!1,name:"FPixel",structure:W},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:bt},slots:{0:{structure:c,memory:{array:pt},slots:{0:{structure:m,memory:{array:ft}}}}}}},slot:29});const dt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),St=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ht=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(R,{...t,type:2,name:"dilate-cross.KernelOutput(u8,dilate-cross.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"o",structure:D}],methods:[],template:{memory:{array:dt},slots:{0:{structure:D,memory:{array:St},slots:{0:{structure:Y,memory:{array:ht},slots:{0:{structure:X,memory:{array:le}}}}}}}}},slot:28});const gt=new Uint8Array([]);Object.assign(q,{...t,type:2,name:"dilate-cross.KernelParameters(dilate-cross.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:gt}}},slot:31});Object.assign(se,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(dilate-cross.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:39});Object.assign(re,{...t,type:7,name:"ErrorSet0000!dilate-cross.KernelOutput(u8,dilate-cross.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:R},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:se}],methods:[],template:null},slot:34});Object.assign(ae,{...t,type:3,name:"createOutput",length:1,byteSize:60,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:w},{...e,type:6,bitOffset:480,bitSize:0,byteSize:0,slot:3,name:"3",structure:q},{...e,type:6,bitOffset:256,bitSize:224,byteSize:28,slot:4,name:"retval",structure:re}],methods:[],template:null},slot:32});Object.assign(ne,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(dilate-cross.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:40});Object.assign(ie,{...t,type:7,name:"ErrorSet0001!dilate-cross.KernelOutput(u8,dilate-cross.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:R},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ne}],methods:[],template:null},slot:35});Object.assign(oe,{...t,type:3,name:"createPartialOutput",length:1,byteSize:68,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:w},{...e,type:6,bitOffset:544,bitSize:0,byteSize:0,slot:5,name:"5",structure:q},{...e,type:6,bitOffset:320,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ie}],methods:[],template:null},slot:33});const zt={argStruct:ae,thunk:1,name:"createOutput"},Ot={argStruct:oe,thunk:5,name:"createPartialOutput"};Object.assign(ue,{...t,type:2,name:"dilate-cross",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:le}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:te},{...e,type:7,isRequired:!1,name:"Input",structure:w},{...e,type:7,isRequired:!1,name:"Output",structure:R},{...e,type:7,isRequired:!1,name:"Parameters",structure:q}],methods:[zt,Ot],template:null},slot:0});const wt=[b,F,M,k,_,T,I,m,c,$,B,V,L,C,O,d,G,v,H,E,te,S,J,N,u,Q,z,x,W,K,w,X,Y,D,R,q,se,re,ae,ne,ie,oe,ue],Rt=Ce(wt),qt=ue.constructor,jt=(async()=>{const n=new URL("dilate-cross-1625d9b5.wasm",import.meta.url).href;return fetch(n)})();ve(jt,{...Rt,writeBack:!0});const{createOutput:vt,createPartialOutput:At,kernel:ee,Input:Ut,Output:Et,Parameters:xt}=qt;function Pt(n,o,r,s,a={},p={}){if(Array.isArray(a)){const y=a;a={};for(const[l,f]of Object.keys(ee.inputImages).entries())a[f]=y[l]}const j=new Ut(void 0),A=Object.keys(ee.inputImages),i=[];let h;for(const y of A){let l=a[y];if(l||(A.length===1&&["data","width","height"].every(f=>!!a[f])?l=a:i.push(y)),j[y]=l,h){if(l.colorSpace!==h)throw new Error(`Input images must all use the same color space: ${h}`)}else h=l.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const Z=At(n,o,r,s,j,p),me=y=>{const l=Object.keys(y),f={};for(const ce of l){const{data:{typedArray:U},width:ye,height:pe}=y[ce];let P;if(typeof ImageData=="function"){const fe=new Uint8ClampedArray(U.buffer,U.byteOffset,U.byteLength);P=new ImageData(fe,ye,s,{colorSpace:h})}else P={data:U,width:ye,height:pe};if(l.length===1)return P;f[ce]=P}return f};return Z[Symbol.toStringTag]==="Promise"?Z.then(me):me(Z)}function kt(){const n={};for(let[o,r]of Object.entries(ee)){if(o==="parameters"){const s={};for(const[a,p]of Object.entries(r)){const j=s[a]={};for(let[A,i]of Object.entries(p))typeof i=="object"?"string"in i?i=i.string:i=be(i):typeof i=="function"&&(i=It(i.name)),j[A]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[o]=r}return n}function be(n){const o=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=be(s)),o[r]=s;return o}function It(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,r,...s]=n.data;Vt(o,s).then(([a,p])=>{postMessage([o,r,a],{transfer:p})}).catch(a=>{postMessage(["error",r,a])})};async function Vt(n,o){switch(n){case"getKernelInfo":return[kt(...o)];case"createPartialImageData":const s=await Pt(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const p of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
