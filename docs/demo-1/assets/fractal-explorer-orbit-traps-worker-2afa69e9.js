import{u as Sr,a as _r,b as Rr,d as qr,c as wr,e as Ur,f as Ar,g as Or,h as xr,i as jr,j as Pr,k as Cr,l as Tr,n as Fr,m as kr,o as Ir,p as vr,q as Er,r as Mr}from"./index-778418ea.js";Sr();_r();Rr();qr();wr();Ur();Ar();Or();xr();jr();Pr();Cr();Tr();Fr();kr();Ir();vr();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},n={},D={},q={},fe={},zt={},Vt={},be={},i={},_={},L={},G={},A={},St={},_t={},he={},m={},W={},X={},x={},Rt={},ge={},o={},h={},r={},s={},qt={},ze={},wt={},Ve={},K={},R={},Ut={},At={},Se={},Ot={},_e={},Y={},j={},Z={},P={},xt={},jt={},Re={},Pt={},qe={},C={},ee={},T={},te={},F={},Ct={},we={},Tt={},Ft={},Ue={},kt={},Ae={},It={},Oe={},vt={},Et={},xe={},Mt={},je={},g={},k={},Bt={},Dt={},Pe={},Kt={},Ce={},Nt={},Te={},$t={},Lt={},Fe={},Gt={},ke={},se={},I={},Ht={},Jt={},Ie={},Qt={},ve={},Wt={},Ee={},Xt={},Me={},re={},ae={},v={},Yt={},Be={},Zt={},es={},De={},ts={},Ke={},me={},ie={},E={},ss={},Ne={},rs={},H={},O={},as={},$e={},ms={},is={},Le={},os={},ns={},Ge={},cs={},He={},us={},ls={},Je={},ps={},Qe={},ys={},ds={},We={},fs={},Xe={},bs={},hs={},Ye={},gs={},Ze={},zs={},et={},Vs={},Ss={},tt={},_s={},st={},Rs={},qs={},rt={},ws={},at={},Us={},mt={},As={},it={},Os={},xs={},ot={},js={},nt={},Ps={},Cs={},ct={},Ts={},ut={},M={},Fs={},lt={},ks={},pt={},Is={},yt={},vs={},dt={},oe={},B={},Es={},ft={},Ms={},bt={},Zs={},N={},Bs={},Ds={},b={},Ks={},J={},Ns={},ht={},ne={},$s={},Ls={},gt={},ce={},ue={},er={},tr={},sr={},rr={},ar={},mr={},ir={};Object.assign(n,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:5});Object.assign(D,{...t,type:1,name:"[19:0]u8",length:19,byteSize:20,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:4});Object.assign(q,{...t,type:11,name:"*const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:D}],methods:[],template:null},slot:3});Object.assign(fe,{...t,type:11,name:"**const [19:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:2});Object.assign(zt,{...t,type:1,name:"[11:0]u8",length:11,byteSize:12,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:8});Object.assign(Vt,{...t,type:11,name:"*const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:zt}],methods:[],template:null},slot:7});Object.assign(be,{...t,type:11,name:"**const [11:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Vt}],methods:[],template:null},slot:6});Object.assign(i,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:i}],methods:[],template:null},slot:10});Object.assign(_,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:i}],methods:[],template:null},slot:9});Object.assign(L,{...t,type:1,name:"[33:0]u8",length:33,byteSize:34,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:13});Object.assign(G,{...t,type:11,name:"*const [33:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:12});Object.assign(A,{...t,type:11,name:"**const [33:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:11});Object.assign(St,{...t,type:1,name:"[12:0]u8",length:12,byteSize:13,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:16});Object.assign(_t,{...t,type:11,name:"*const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:St}],methods:[],template:null},slot:15});Object.assign(he,{...t,type:11,name:"**const [12:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_t}],methods:[],template:null},slot:14});Object.assign(m,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:i}],methods:[],template:null},slot:97});Object.assign(W,{...t,type:1,name:"[60:0]u8",length:60,byteSize:61,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:100});Object.assign(X,{...t,type:11,name:"*const [60:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:99});Object.assign(x,{...t,type:11,name:"*const *const [60:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:98});const Br=new Uint8Array([]),Dr=new Uint8Array([80,31,16,0]),Hs=new Uint8Array([1,0,0,0]),Kr=new Uint8Array([164,31,16,0]),Nr=new Uint8Array([3,0,0,0]),$r=new Uint8Array([80,31,16,0]),Lr=new Uint8Array([160,31,16,0]),Gr=new Uint8Array([78,35,16,0]),Hr=new Uint8Array([83,117,112,101,114,32,115,97,109,112,108,105,110,103,32,113,117,97,108,105,116,121,46,32,78,117,109,98,101,114,32,111,102,32,115,97,109,112,108,101,115,32,115,113,117,97,114,101,100,32,112,101,114,32,112,105,120,101,108,46,0]);Object.assign(Rt,{...t,type:2,name:'struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 1, comptime description: *const [60:0]u8 = "Super sampling quality. Number of samples squared per pixel."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:i},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:m},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:m},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:x}],methods:[],template:{memory:{array:Br},slots:{0:{structure:m,memory:{array:Dr},slots:{0:{structure:i,memory:{array:Hs},address:1056592}}},1:{structure:m,memory:{array:Kr},slots:{0:{structure:i,memory:{array:Nr},address:1056676}}},2:{structure:m,memory:{array:$r},slots:{0:{structure:i,memory:{array:Hs},address:1056592}}},3:{structure:x,memory:{array:Lr},slots:{0:{structure:X,memory:{array:Gr},address:1056672,slots:{0:{structure:W,memory:{array:Hr},address:1057614}}}}}}}},slot:45});Object.assign(ge,{...t,type:11,name:'*const struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 1, comptime description: *const [60:0]u8 = "Super sampling quality. Number of samples squared per pixel."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Rt}],methods:[],template:null},slot:44});Object.assign(o,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:o}],methods:[],template:null},slot:38});Object.assign(h,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:o}],methods:[],template:null},slot:36});Object.assign(r,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:r}],methods:[],template:null},slot:136});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:r}],methods:[],template:null},slot:135});const Jr=new Uint8Array([]),Qr=new Uint8Array([88,30,16,0]),Js=new Uint8Array([0,0,0,0,0,0,0,192]),Wr=new Uint8Array([160,30,16,0]),Q=new Uint8Array([0,0,0,0,0,0,240,191]);Object.assign(qt,{...t,type:2,name:"struct{comptime comptime_float = -2, comptime comptime_float = -1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Jr},slots:{0:{structure:s,memory:{array:Qr},slots:{0:{structure:r,memory:{array:Js},address:1056344}}},1:{structure:s,memory:{array:Wr},slots:{0:{structure:r,memory:{array:Q},address:1056416}}}}}},slot:102});Object.assign(ze,{...t,type:11,name:"*const struct{comptime comptime_float = -2, comptime comptime_float = -1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:qt}],methods:[],template:null},slot:101});const Xr=new Uint8Array([]),Yr=new Uint8Array([80,30,16,0]),Qs=new Uint8Array([0,0,0,0,0,0,0,64]),Zr=new Uint8Array([96,30,16,0]),V=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(wt,{...t,type:2,name:"struct{comptime comptime_float = 2, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Xr},slots:{0:{structure:s,memory:{array:Yr},slots:{0:{structure:r,memory:{array:Qs},address:1056336}}},1:{structure:s,memory:{array:Zr},slots:{0:{structure:r,memory:{array:V},address:1056352}}}}}},slot:104});Object.assign(Ve,{...t,type:11,name:"*const struct{comptime comptime_float = 2, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:wt}],methods:[],template:null},slot:103});const ea=new Uint8Array([]),ta=new Uint8Array([104,30,16,0]),f=new Uint8Array([0,0,0,0,0,0,0,0]),sa=new Uint8Array([104,30,16,0]);Object.assign(K,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:ea},slots:{0:{structure:s,memory:{array:ta},slots:{0:{structure:r,memory:{array:f},address:1056360}}},1:{structure:s,memory:{array:sa},slots:{0:{structure:r,memory:{array:f},address:1056360}}}}}},slot:106});Object.assign(R,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:K}],methods:[],template:null},slot:105});Object.assign(Ut,{...t,type:1,name:"[26:0]u8",length:26,byteSize:27,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:109});Object.assign(At,{...t,type:11,name:"*const [26:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ut}],methods:[],template:null},slot:108});Object.assign(Se,{...t,type:11,name:"*const *const [26:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:At}],methods:[],template:null},slot:107});const ra=new Uint8Array([]),aa=new Uint8Array([170,170,170,170]),a=new Uint8Array([]),ma=new Uint8Array([170,170,170,170]),ia=new Uint8Array([170,170,170,170]),oa=new Uint8Array([156,31,16,0]),na=new Uint8Array([51,35,16,0]),ca=new Uint8Array([84,104,101,32,99,101,110,116,101,114,32,111,102,32,116,104,101,32,102,114,97,99,116,97,108,46,0]);Object.assign(Ot,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -1} = .{-2, -1}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 1} = .{2, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [26:0]u8 = "The center of the fractal."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:ze},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:Ve},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:R},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Se}],methods:[],template:{memory:{array:ra},slots:{0:{structure:ze,memory:{array:aa},slots:{0:{structure:qt,memory:{array:a},address:-1431655766}}},1:{structure:Ve,memory:{array:ma},slots:{0:{structure:wt,memory:{array:a},address:-1431655766}}},2:{structure:R,memory:{array:ia},slots:{0:{structure:K,memory:{array:a},address:-1431655766}}},3:{structure:Se,memory:{array:oa},slots:{0:{structure:At,memory:{array:na},address:1056668,slots:{0:{structure:Ut,memory:{array:ca},address:1057587}}}}}}}},slot:47});Object.assign(_e,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -1} = .{-2, -1}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 1} = .{2, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [26:0]u8 = "The center of the fractal."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ot}],methods:[],template:null},slot:46});const ua=new Uint8Array([]),la=new Uint8Array([160,30,16,0]),pa=new Uint8Array([160,30,16,0]);Object.assign(Y,{...t,type:2,name:"struct{comptime comptime_float = -1, comptime comptime_float = -1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:ua},slots:{0:{structure:s,memory:{array:la},slots:{0:{structure:r,memory:{array:Q},address:1056416}}},1:{structure:s,memory:{array:pa},slots:{0:{structure:r,memory:{array:Q},address:1056416}}}}}},slot:111});Object.assign(j,{...t,type:11,name:"*const struct{comptime comptime_float = -1, comptime comptime_float = -1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:110});const ya=new Uint8Array([]),da=new Uint8Array([96,30,16,0]),fa=new Uint8Array([96,30,16,0]);Object.assign(Z,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:ya},slots:{0:{structure:s,memory:{array:da},slots:{0:{structure:r,memory:{array:V},address:1056352}}},1:{structure:s,memory:{array:fa},slots:{0:{structure:r,memory:{array:V},address:1056352}}}}}},slot:113});Object.assign(P,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:112});Object.assign(xt,{...t,type:1,name:"[30:0]u8",length:30,byteSize:31,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:116});Object.assign(jt,{...t,type:11,name:"*const [30:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:xt}],methods:[],template:null},slot:115});Object.assign(Re,{...t,type:11,name:"*const *const [30:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:jt}],methods:[],template:null},slot:114});const ba=new Uint8Array([]),ha=new Uint8Array([170,170,170,170]),ga=new Uint8Array([170,170,170,170]),za=new Uint8Array([170,170,170,170]),Va=new Uint8Array([152,31,16,0]),Sa=new Uint8Array([20,35,16,0]),_a=new Uint8Array([70,105,110,101,32,116,117,110,101,32,116,104,101,32,99,101,110,116,101,114,32,112,111,115,105,116,105,111,110,46,0]);Object.assign(Pt,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [30:0]u8 = "Fine tune the center position."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:j},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:P},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:R},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Re}],methods:[],template:{memory:{array:ba},slots:{0:{structure:j,memory:{array:ha},slots:{0:{structure:Y,memory:{array:a},address:-1431655766}}},1:{structure:P,memory:{array:ga},slots:{0:{structure:Z,memory:{array:a},address:-1431655766}}},2:{structure:R,memory:{array:za},slots:{0:{structure:K,memory:{array:a},address:-1431655766}}},3:{structure:Re,memory:{array:Va},slots:{0:{structure:jt,memory:{array:Sa},address:1056664,slots:{0:{structure:xt,memory:{array:_a},address:1057556}}}}}}}},slot:49});Object.assign(qe,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [30:0]u8 = "Fine tune the center position."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Pt}],methods:[],template:null},slot:48});Object.assign(C,{...t,type:13,name:"@Vector(2, i32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,structure:i}],methods:[],template:null},slot:37});const Ra=new Uint8Array([]),qa=new Uint8Array([152,30,16,0]),Ws=new Uint8Array([100,0,0,0]),wa=new Uint8Array([152,30,16,0]);Object.assign(ee,{...t,type:2,name:"struct{comptime comptime_int = 100, comptime comptime_int = 100}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:Ra},slots:{0:{structure:m,memory:{array:qa},slots:{0:{structure:i,memory:{array:Ws},address:1056408}}},1:{structure:m,memory:{array:wa},slots:{0:{structure:i,memory:{array:Ws},address:1056408}}}}}},slot:118});Object.assign(T,{...t,type:11,name:"*const struct{comptime comptime_int = 100, comptime comptime_int = 100}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:117});const Ua=new Uint8Array([]),Aa=new Uint8Array([148,30,16,0]),yr=new Uint8Array([0,16,0,0]),Oa=new Uint8Array([148,30,16,0]);Object.assign(te,{...t,type:2,name:"struct{comptime comptime_int = 4096, comptime comptime_int = 4096}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:Ua},slots:{0:{structure:m,memory:{array:Aa},slots:{0:{structure:i,memory:{array:yr},address:1056404}}},1:{structure:m,memory:{array:Oa},slots:{0:{structure:i,memory:{array:yr},address:1056404}}}}}},slot:120});Object.assign(F,{...t,type:11,name:"*const struct{comptime comptime_int = 4096, comptime comptime_int = 4096}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:119});const xa=new Uint8Array([]),ja=new Uint8Array([144,30,16,0]),dr=new Uint8Array([44,1,0,0]),Pa=new Uint8Array([144,30,16,0]);Object.assign(Ct,{...t,type:2,name:"struct{comptime comptime_int = 300, comptime comptime_int = 300}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:xa},slots:{0:{structure:m,memory:{array:ja},slots:{0:{structure:i,memory:{array:dr},address:1056400}}},1:{structure:m,memory:{array:Pa},slots:{0:{structure:i,memory:{array:dr},address:1056400}}}}}},slot:122});Object.assign(we,{...t,type:11,name:"*const struct{comptime comptime_int = 300, comptime comptime_int = 300}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ct}],methods:[],template:null},slot:121});Object.assign(Tt,{...t,type:1,name:"[34:0]u8",length:34,byteSize:35,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:125});Object.assign(Ft,{...t,type:11,name:"*const [34:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Tt}],methods:[],template:null},slot:124});Object.assign(Ue,{...t,type:11,name:"*const *const [34:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ft}],methods:[],template:null},slot:123});const Ca=new Uint8Array([]),Ta=new Uint8Array([170,170,170,170]),Fa=new Uint8Array([170,170,170,170]),ka=new Uint8Array([170,170,170,170]),Ia=new Uint8Array([148,31,16,0]),va=new Uint8Array([241,34,16,0]),Ea=new Uint8Array([84,104,101,32,105,110,112,117,116,32,115,105,122,101,32,111,102,32,116,104,101,32,115,111,117,114,99,101,32,105,109,97,103,101,0]);Object.assign(kt,{...t,type:2,name:'struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 4096, comptime comptime_int = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_int = 300, comptime comptime_int = 300} = .{300, 300}, comptime description: *const [34:0]u8 = "The input size of the source image"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:C},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:T},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:F},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:we},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Ue}],methods:[],template:{memory:{array:Ca},slots:{0:{structure:T,memory:{array:Ta},slots:{0:{structure:ee,memory:{array:a},address:-1431655766}}},1:{structure:F,memory:{array:Fa},slots:{0:{structure:te,memory:{array:a},address:-1431655766}}},2:{structure:we,memory:{array:ka},slots:{0:{structure:Ct,memory:{array:a},address:-1431655766}}},3:{structure:Ue,memory:{array:Ia},slots:{0:{structure:Ft,memory:{array:va},address:1056660,slots:{0:{structure:Tt,memory:{array:Ea},address:1057521}}}}}}}},slot:51});Object.assign(Ae,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 4096, comptime comptime_int = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_int = 300, comptime comptime_int = 300} = .{300, 300}, comptime description: *const [34:0]u8 = "The input size of the source image"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:kt}],methods:[],template:null},slot:50});const Ma=new Uint8Array([]),Ba=new Uint8Array([140,30,16,0]),Da=new Uint8Array([128,2,0,0]),Ka=new Uint8Array([136,30,16,0]),Na=new Uint8Array([224,1,0,0]);Object.assign(It,{...t,type:2,name:"struct{comptime comptime_int = 640, comptime comptime_int = 480}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:Ma},slots:{0:{structure:m,memory:{array:Ba},slots:{0:{structure:i,memory:{array:Da},address:1056396}}},1:{structure:m,memory:{array:Ka},slots:{0:{structure:i,memory:{array:Na},address:1056392}}}}}},slot:127});Object.assign(Oe,{...t,type:11,name:"*const struct{comptime comptime_int = 640, comptime comptime_int = 480}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:It}],methods:[],template:null},slot:126});Object.assign(vt,{...t,type:1,name:"[40:0]u8",length:40,byteSize:41,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:130});Object.assign(Et,{...t,type:11,name:"*const [40:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:vt}],methods:[],template:null},slot:129});Object.assign(xe,{...t,type:11,name:"*const *const [40:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Et}],methods:[],template:null},slot:128});const $a=new Uint8Array([]),La=new Uint8Array([170,170,170,170]),Ga=new Uint8Array([170,170,170,170]),Ha=new Uint8Array([170,170,170,170]),Ja=new Uint8Array([144,31,16,0]),Qa=new Uint8Array([200,34,16,0]),Wa=new Uint8Array([84,104,101,32,111,117,116,112,117,116,32,115,105,122,101,32,111,102,32,116,104,101,32,114,101,110,100,101,114,101,100,32,102,114,97,99,116,97,108,46,0]);Object.assign(Mt,{...t,type:2,name:'struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 4096, comptime comptime_int = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_int = 640, comptime comptime_int = 480} = .{640, 480}, comptime description: *const [40:0]u8 = "The output size of the rendered fractal."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:C},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:T},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:F},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:Oe},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:xe}],methods:[],template:{memory:{array:$a},slots:{0:{structure:T,memory:{array:La},slots:{0:{structure:ee,memory:{array:a},address:-1431655766}}},1:{structure:F,memory:{array:Ga},slots:{0:{structure:te,memory:{array:a},address:-1431655766}}},2:{structure:Oe,memory:{array:Ha},slots:{0:{structure:It,memory:{array:a},address:-1431655766}}},3:{structure:xe,memory:{array:Ja},slots:{0:{structure:Et,memory:{array:Qa},address:1056656,slots:{0:{structure:vt,memory:{array:Wa},address:1057480}}}}}}}},slot:53});Object.assign(je,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 4096, comptime comptime_int = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_int = 640, comptime comptime_int = 480} = .{640, 480}, comptime description: *const [40:0]u8 = "The output size of the rendered fractal."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Mt}],methods:[],template:null},slot:52});Object.assign(g,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:g}],methods:[],template:null},slot:30});Object.assign(k,{...t,type:11,name:"*const bool",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:g}],methods:[],template:null},slot:131});Object.assign(Bt,{...t,type:1,name:"[37:0]u8",length:37,byteSize:38,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:134});Object.assign(Dt,{...t,type:11,name:"*const [37:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Bt}],methods:[],template:null},slot:133});Object.assign(Pe,{...t,type:11,name:"*const *const [37:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Dt}],methods:[],template:null},slot:132});const Xa=new Uint8Array([]),Ya=new Uint8Array([140,31,16,0]),Za=new Uint8Array([0]),em=new Uint8Array([136,31,16,0]),tm=new Uint8Array([162,34,16,0]),sm=new Uint8Array([85,115,101,32,116,104,101,32,115,116,97,110,100,97,114,100,32,77,97,110,100,101,108,98,114,111,116,32,101,113,117,97,116,105,111,110,46,0]);Object.assign(Kt,{...t,type:2,name:'struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [37:0]u8 = "Use the standard Mandelbrot equation."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:g},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:k},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:Pe}],methods:[],template:{memory:{array:Xa},slots:{0:{structure:k,memory:{array:Ya},slots:{0:{structure:g,memory:{array:Za},address:1056652}}},1:{structure:Pe,memory:{array:em},slots:{0:{structure:Dt,memory:{array:tm},address:1056648,slots:{0:{structure:Bt,memory:{array:sm},address:1057442}}}}}}}},slot:55});Object.assign(Ce,{...t,type:11,name:'*const struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [37:0]u8 = "Use the standard Mandelbrot equation."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Kt}],methods:[],template:null},slot:54});const rm=new Uint8Array([]),am=new Uint8Array([128,31,16,0]),mm=new Uint8Array([0,0,0,0,0,0,40,192]),im=new Uint8Array([120,31,16,0]),om=new Uint8Array([0,0,0,0,0,0,40,64]),nm=new Uint8Array([112,31,16,0]),cm=new Uint8Array([0,0,0,0,0,0,8,64]),um=new Uint8Array([104,31,16,0]),lm=new Uint8Array([101,34,16,0]),pm=new Uint8Array([82,97,105,115,101,32,122,32,116,111,32,116,104,101,32,112,111,119,101,114,32,101,32,105,110,32,116,104,101,32,102,114,97,99,116,97,108,32,102,111,114,109,117,108,97,58,32,122,39,32,61,32,122,94,101,32,43,32,109,117,0]);Object.assign(Nt,{...t,type:2,name:`struct{comptime type: type = f32, comptime minValue: comptime_float = -12, comptime maxValue: comptime_float = 12, comptime defaultValue: comptime_float = 3, comptime description: *const [60:0]u8 = "Raise z to the power e in the fractal formula: z' = z^e + mu"}`,length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:x}],methods:[],template:{memory:{array:rm},slots:{0:{structure:s,memory:{array:am},slots:{0:{structure:r,memory:{array:mm},address:1056640}}},1:{structure:s,memory:{array:im},slots:{0:{structure:r,memory:{array:om},address:1056632}}},2:{structure:s,memory:{array:nm},slots:{0:{structure:r,memory:{array:cm},address:1056624}}},3:{structure:x,memory:{array:um},slots:{0:{structure:X,memory:{array:lm},address:1056616,slots:{0:{structure:W,memory:{array:pm},address:1057381}}}}}}}},slot:57});Object.assign(Te,{...t,type:11,name:`*const struct{comptime type: type = f32, comptime minValue: comptime_float = -12, comptime maxValue: comptime_float = 12, comptime defaultValue: comptime_float = 3, comptime description: *const [60:0]u8 = "Raise z to the power e in the fractal formula: z' = z^e + mu"}`,length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Nt}],methods:[],template:null},slot:56});Object.assign($t,{...t,type:1,name:"[23:0]u8",length:23,byteSize:24,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:139});Object.assign(Lt,{...t,type:11,name:"*const [23:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$t}],methods:[],template:null},slot:138});Object.assign(Fe,{...t,type:11,name:"*const *const [23:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Lt}],methods:[],template:null},slot:137});const ym=new Uint8Array([]),dm=new Uint8Array([96,31,16,0]),fm=new Uint8Array([154,153,153,153,153,153,185,191]),bm=new Uint8Array([184,30,16,0]),hr=new Uint8Array([154,153,153,153,153,153,185,63]),hm=new Uint8Array([104,30,16,0]),gm=new Uint8Array([92,31,16,0]),zm=new Uint8Array([77,34,16,0]),Vm=new Uint8Array([70,105,110,101,32,116,117,110,101,32,116,104,101,32,101,120,112,111,110,101,110,116,46,0]);Object.assign(Gt,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = -0.1, comptime maxValue: comptime_float = 0.1, comptime defaultValue: comptime_float = 0, comptime description: *const [23:0]u8 = "Fine tune the exponent."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Fe}],methods:[],template:{memory:{array:ym},slots:{0:{structure:s,memory:{array:dm},slots:{0:{structure:r,memory:{array:fm},address:1056608}}},1:{structure:s,memory:{array:bm},slots:{0:{structure:r,memory:{array:hr},address:1056440}}},2:{structure:s,memory:{array:hm},slots:{0:{structure:r,memory:{array:f},address:1056360}}},3:{structure:Fe,memory:{array:gm},slots:{0:{structure:Lt,memory:{array:zm},address:1056604,slots:{0:{structure:$t,memory:{array:Vm},address:1057357}}}}}}}},slot:59});Object.assign(ke,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = -0.1, comptime maxValue: comptime_float = 0.1, comptime defaultValue: comptime_float = 0, comptime description: *const [23:0]u8 = "Fine tune the exponent."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Gt}],methods:[],template:null},slot:58});const Sm=new Uint8Array([]),_m=new Uint8Array([128,30,16,0]),Rm=new Uint8Array([0,0,0,0,0,0,224,63]),qm=new Uint8Array([104,30,16,0]);Object.assign(se,{...t,type:2,name:"struct{comptime comptime_float = 0.5, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Sm},slots:{0:{structure:s,memory:{array:_m},slots:{0:{structure:r,memory:{array:Rm},address:1056384}}},1:{structure:s,memory:{array:qm},slots:{0:{structure:r,memory:{array:f},address:1056360}}}}}},slot:141});Object.assign(I,{...t,type:11,name:"*const struct{comptime comptime_float = 0.5, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:140});Object.assign(Ht,{...t,type:1,name:"[59:0]u8",length:59,byteSize:60,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:144});Object.assign(Jt,{...t,type:11,name:"*const [59:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ht}],methods:[],template:null},slot:143});Object.assign(Ie,{...t,type:11,name:"*const *const [59:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Jt}],methods:[],template:null},slot:142});const wm=new Uint8Array([]),Um=new Uint8Array([170,170,170,170]),Am=new Uint8Array([170,170,170,170]),Om=new Uint8Array([170,170,170,170]),xm=new Uint8Array([88,31,16,0]),jm=new Uint8Array([17,34,16,0]),Pm=new Uint8Array([84,104,101,32,99,111,109,112,108,101,120,32,112,97,114,97,109,101,116,101,114,32,111,102,32,116,104,101,32,102,114,97,99,116,97,108,32,102,111,114,109,117,108,97,58,32,122,39,32,61,32,122,94,101,32,43,32,109,117,0]);Object.assign(Qt,{...t,type:2,name:`struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.5, comptime comptime_float = 0} = .{0.5, 0}, comptime description: *const [59:0]u8 = "The complex parameter of the fractal formula: z' = z^e + mu"}`,length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:j},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:P},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:I},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Ie}],methods:[],template:{memory:{array:wm},slots:{0:{structure:j,memory:{array:Um},slots:{0:{structure:Y,memory:{array:a},address:-1431655766}}},1:{structure:P,memory:{array:Am},slots:{0:{structure:Z,memory:{array:a},address:-1431655766}}},2:{structure:I,memory:{array:Om},slots:{0:{structure:se,memory:{array:a},address:-1431655766}}},3:{structure:Ie,memory:{array:xm},slots:{0:{structure:Jt,memory:{array:jm},address:1056600,slots:{0:{structure:Ht,memory:{array:Pm},address:1057297}}}}}}}},slot:61});Object.assign(ve,{...t,type:11,name:`*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.5, comptime comptime_float = 0} = .{0.5, 0}, comptime description: *const [59:0]u8 = "The complex parameter of the fractal formula: z' = z^e + mu"}`,length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Qt}],methods:[],template:null},slot:60});const Cm=new Uint8Array([]),Tm=new Uint8Array([120,30,16,0]),fr=new Uint8Array([123,20,174,71,225,122,132,191]),Fm=new Uint8Array([120,30,16,0]);Object.assign(Wt,{...t,type:2,name:"struct{comptime comptime_float = -0.01, comptime comptime_float = -0.01}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Cm},slots:{0:{structure:s,memory:{array:Tm},slots:{0:{structure:r,memory:{array:fr},address:1056376}}},1:{structure:s,memory:{array:Fm},slots:{0:{structure:r,memory:{array:fr},address:1056376}}}}}},slot:146});Object.assign(Ee,{...t,type:11,name:"*const struct{comptime comptime_float = -0.01, comptime comptime_float = -0.01}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Wt}],methods:[],template:null},slot:145});const km=new Uint8Array([]),Im=new Uint8Array([112,30,16,0]),Xs=new Uint8Array([123,20,174,71,225,122,132,63]),vm=new Uint8Array([112,30,16,0]);Object.assign(Xt,{...t,type:2,name:"struct{comptime comptime_float = 0.01, comptime comptime_float = 0.01}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:km},slots:{0:{structure:s,memory:{array:Im},slots:{0:{structure:r,memory:{array:Xs},address:1056368}}},1:{structure:s,memory:{array:vm},slots:{0:{structure:r,memory:{array:Xs},address:1056368}}}}}},slot:148});Object.assign(Me,{...t,type:11,name:"*const struct{comptime comptime_float = 0.01, comptime comptime_float = 0.01}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Xt}],methods:[],template:null},slot:147});Object.assign(re,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:151});Object.assign(ae,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:150});Object.assign(v,{...t,type:11,name:"*const *const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:149});const Em=new Uint8Array([]),Mm=new Uint8Array([170,170,170,170]),Bm=new Uint8Array([170,170,170,170]),Dm=new Uint8Array([170,170,170,170]),Km=new Uint8Array([84,31,16,0]),Nm=new Uint8Array([3,34,16,0]),$m=new Uint8Array([70,105,110,101,32,116,117,110,101,32,109,117,46,0]);Object.assign(Yt,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -0.01, comptime comptime_float = -0.01} = .{-0.01, -0.01}, comptime maxValue: struct{comptime comptime_float = 0.01, comptime comptime_float = 0.01} = .{0.01, 0.01}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [13:0]u8 = "Fine tune mu."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:Ee},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:Me},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:R},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:v}],methods:[],template:{memory:{array:Em},slots:{0:{structure:Ee,memory:{array:Mm},slots:{0:{structure:Wt,memory:{array:a},address:-1431655766}}},1:{structure:Me,memory:{array:Bm},slots:{0:{structure:Xt,memory:{array:a},address:-1431655766}}},2:{structure:R,memory:{array:Dm},slots:{0:{structure:K,memory:{array:a},address:-1431655766}}},3:{structure:v,memory:{array:Km},slots:{0:{structure:ae,memory:{array:Nm},address:1056596,slots:{0:{structure:re,memory:{array:$m},address:1057283}}}}}}}},slot:63});Object.assign(Be,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -0.01, comptime comptime_float = -0.01} = .{-0.01, -0.01}, comptime maxValue: struct{comptime comptime_float = 0.01, comptime comptime_float = 0.01} = .{0.01, 0.01}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [13:0]u8 = "Fine tune mu."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Yt}],methods:[],template:null},slot:62});Object.assign(Zt,{...t,type:1,name:"[108:0]u8",length:108,byteSize:109,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:154});Object.assign(es,{...t,type:11,name:"*const [108:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Zt}],methods:[],template:null},slot:153});Object.assign(De,{...t,type:11,name:"*const *const [108:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:es}],methods:[],template:null},slot:152});const Lm=new Uint8Array([]),Gm=new Uint8Array([80,31,16,0]),Hm=new Uint8Array([152,30,16,0]),Jm=new Uint8Array([76,31,16,0]),Qm=new Uint8Array([10,0,0,0]),Wm=new Uint8Array([72,31,16,0]),Xm=new Uint8Array([150,33,16,0]),Ym=new Uint8Array([84,104,101,32,109,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,105,116,101,114,97,116,105,111,110,115,32,102,111,114,32,101,97,99,104,32,112,105,120,101,108,32,98,101,102,111,114,101,32,98,97,105,108,111,117,116,46,32,85,115,101,32,116,111,32,105,110,99,114,101,97,115,101,32,100,101,116,97,105,108,32,97,116,32,116,104,101,32,102,114,97,99,116,97,108,32,101,100,103,101,115,46,0]);Object.assign(ts,{...t,type:2,name:'struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 100, comptime defaultValue: comptime_int = 10, comptime description: *const [108:0]u8 = "The maximum number of iterations for each pixel before bailout. Use to increase detail at the fractal edges."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:i},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:m},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:m},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:De}],methods:[],template:{memory:{array:Lm},slots:{0:{structure:m,memory:{array:Gm},slots:{0:{structure:i,memory:{array:Hs},address:1056592}}},1:{structure:m,memory:{array:Hm},slots:{0:{structure:i,memory:{array:Ws},address:1056408}}},2:{structure:m,memory:{array:Jm},slots:{0:{structure:i,memory:{array:Qm},address:1056588}}},3:{structure:De,memory:{array:Wm},slots:{0:{structure:es,memory:{array:Xm},address:1056584,slots:{0:{structure:Zt,memory:{array:Ym},address:1057174}}}}}}}},slot:65});Object.assign(Ke,{...t,type:11,name:'*const struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 100, comptime defaultValue: comptime_int = 10, comptime description: *const [108:0]u8 = "The maximum number of iterations for each pixel before bailout. Use to increase detail at the fractal edges."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ts}],methods:[],template:null},slot:64});Object.assign(me,{...t,type:1,name:"[39:0]u8",length:39,byteSize:40,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:157});Object.assign(ie,{...t,type:11,name:"*const [39:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:156});Object.assign(E,{...t,type:11,name:"*const *const [39:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:155});const Zm=new Uint8Array([]),ei=new Uint8Array([64,31,16,0]),br=new Uint8Array([0,0,0,0]),ti=new Uint8Array([68,31,16,0]),si=new Uint8Array([20,0,0,0]),ri=new Uint8Array([64,31,16,0]),ai=new Uint8Array([60,31,16,0]),mi=new Uint8Array([110,33,16,0]),ii=new Uint8Array([79,102,102,115,101,116,32,116,104,101,32,115,116,97,114,116,32,111,102,32,116,104,101,32,105,116,101,114,97,116,105,111,110,32,99,111,117,110,116,0]);Object.assign(ss,{...t,type:2,name:'struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 20, comptime defaultValue: comptime_int = 0, comptime description: *const [39:0]u8 = "Offset the start of the iteration count"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:i},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:m},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:m},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:E}],methods:[],template:{memory:{array:Zm},slots:{0:{structure:m,memory:{array:ei},slots:{0:{structure:i,memory:{array:br},address:1056576}}},1:{structure:m,memory:{array:ti},slots:{0:{structure:i,memory:{array:si},address:1056580}}},2:{structure:m,memory:{array:ri},slots:{0:{structure:i,memory:{array:br},address:1056576}}},3:{structure:E,memory:{array:ai},slots:{0:{structure:ie,memory:{array:mi},address:1056572,slots:{0:{structure:me,memory:{array:ii},address:1057134}}}}}}}},slot:67});Object.assign(Ne,{...t,type:11,name:'*const struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 20, comptime defaultValue: comptime_int = 0, comptime description: *const [39:0]u8 = "Offset the start of the iteration count"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ss}],methods:[],template:null},slot:66});Object.assign(rs,{...t,type:13,name:"@Vector(3, f32)",length:3,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:o}],methods:[],template:null},slot:39});const oi=new Uint8Array([]),ni=new Uint8Array([104,30,16,0]),ci=new Uint8Array([104,30,16,0]),ui=new Uint8Array([104,30,16,0]);Object.assign(H,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:oi},slots:{0:{structure:s,memory:{array:ni},slots:{0:{structure:r,memory:{array:f},address:1056360}}},1:{structure:s,memory:{array:ci},slots:{0:{structure:r,memory:{array:f},address:1056360}}},2:{structure:s,memory:{array:ui},slots:{0:{structure:r,memory:{array:f},address:1056360}}}}}},slot:159});Object.assign(O,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:158});const li=new Uint8Array([]),pi=new Uint8Array([96,30,16,0]),yi=new Uint8Array([96,30,16,0]),di=new Uint8Array([96,30,16,0]);Object.assign(as,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:li},slots:{0:{structure:s,memory:{array:pi},slots:{0:{structure:r,memory:{array:V},address:1056352}}},1:{structure:s,memory:{array:yi},slots:{0:{structure:r,memory:{array:V},address:1056352}}},2:{structure:s,memory:{array:di},slots:{0:{structure:r,memory:{array:V},address:1056352}}}}}},slot:161});Object.assign($e,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:as}],methods:[],template:null},slot:160});Object.assign(ms,{...t,type:1,name:"[22:0]u8",length:22,byteSize:23,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:164});Object.assign(is,{...t,type:11,name:"*const [22:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ms}],methods:[],template:null},slot:163});Object.assign(Le,{...t,type:11,name:"*const *const [22:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:is}],methods:[],template:null},slot:162});Object.assign(os,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:167});Object.assign(ns,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:os}],methods:[],template:null},slot:166});Object.assign(Ge,{...t,type:11,name:"*const *const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ns}],methods:[],template:null},slot:165});const fi=new Uint8Array([]),bi=new Uint8Array([170,170,170,170]),hi=new Uint8Array([170,170,170,170]),gi=new Uint8Array([170,170,170,170]),zi=new Uint8Array([56,31,16,0]),Vi=new Uint8Array([87,33,16,0]),Si=new Uint8Array([84,104,101,32,98,97,99,107,103,114,111,117,110,100,32,99,111,108,111,117,114,46,0]),_i=new Uint8Array([52,31,16,0]),Ri=new Uint8Array([79,33,16,0]),qi=new Uint8Array([97,101,67,111,108,111,114,0]);Object.assign(cs,{...t,type:2,name:'struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime description: *const [22:0]u8 = "The background colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:rs},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:O},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:$e},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:O},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Le},{...e,type:8,isRequired:!1,slot:4,name:"aeUIControl",structure:Ge}],methods:[],template:{memory:{array:fi},slots:{0:{structure:O,memory:{array:bi},slots:{0:{structure:H,memory:{array:a},address:-1431655766}}},1:{structure:$e,memory:{array:hi},slots:{0:{structure:as,memory:{array:a},address:-1431655766}}},2:{structure:O,memory:{array:gi},slots:{0:{structure:H,memory:{array:a},address:-1431655766}}},3:{structure:Le,memory:{array:zi},slots:{0:{structure:is,memory:{array:Vi},address:1056568,slots:{0:{structure:ms,memory:{array:Si},address:1057111}}}}},4:{structure:Ge,memory:{array:_i},slots:{0:{structure:ns,memory:{array:Ri},address:1056564,slots:{0:{structure:os,memory:{array:qi},address:1057103}}}}}}}},slot:69});Object.assign(He,{...t,type:11,name:'*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime description: *const [22:0]u8 = "The background colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:cs}],methods:[],template:null},slot:68});Object.assign(us,{...t,type:1,name:"[55:0]u8",length:55,byteSize:56,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:170});Object.assign(ls,{...t,type:11,name:"*const [55:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:us}],methods:[],template:null},slot:169});Object.assign(Je,{...t,type:11,name:"*const *const [55:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ls}],methods:[],template:null},slot:168});const wi=new Uint8Array([]),Ui=new Uint8Array([104,30,16,0]),Ai=new Uint8Array([96,30,16,0]),Oi=new Uint8Array([96,30,16,0]),xi=new Uint8Array([48,31,16,0]),ji=new Uint8Array([23,33,16,0]),Pi=new Uint8Array([83,101,112,97,114,97,116,101,32,97,108,112,104,97,32,99,104,97,110,110,101,108,32,102,111,114,32,65,102,116,101,114,32,69,102,102,101,99,116,115,32,99,111,109,112,97,116,105,98,105,108,105,116,121,46,0]);Object.assign(ps,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [55:0]u8 = "Separate alpha channel for After Effects compatibility."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Je}],methods:[],template:{memory:{array:wi},slots:{0:{structure:s,memory:{array:Ui},slots:{0:{structure:r,memory:{array:f},address:1056360}}},1:{structure:s,memory:{array:Ai},slots:{0:{structure:r,memory:{array:V},address:1056352}}},2:{structure:s,memory:{array:Oi},slots:{0:{structure:r,memory:{array:V},address:1056352}}},3:{structure:Je,memory:{array:xi},slots:{0:{structure:ls,memory:{array:ji},address:1056560,slots:{0:{structure:us,memory:{array:Pi},address:1057047}}}}}}}},slot:71});Object.assign(Qe,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [55:0]u8 = "Separate alpha channel for After Effects compatibility."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ps}],methods:[],template:null},slot:70});Object.assign(ys,{...t,type:1,name:"[38:0]u8",length:38,byteSize:39,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:173});Object.assign(ds,{...t,type:11,name:"*const [38:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ys}],methods:[],template:null},slot:172});Object.assign(We,{...t,type:11,name:"*const *const [38:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ds}],methods:[],template:null},slot:171});const Ci=new Uint8Array([]),Ti=new Uint8Array([44,31,16,0]),Fi=new Uint8Array([1]),ki=new Uint8Array([40,31,16,0]),Ii=new Uint8Array([240,32,16,0]),vi=new Uint8Array([85,115,101,32,116,104,101,32,115,111,117,114,99,101,32,105,109,97,103,101,32,97,115,32,97,110,32,111,114,98,105,116,32,116,114,97,112,46,0]);Object.assign(fs,{...t,type:2,name:'struct{comptime type: type = bool, comptime defaultValue: bool = true, comptime description: *const [38:0]u8 = "Use the source image as an orbit trap."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:g},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:k},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:We}],methods:[],template:{memory:{array:Ci},slots:{0:{structure:k,memory:{array:Ti},slots:{0:{structure:g,memory:{array:Fi},address:1056556}}},1:{structure:We,memory:{array:ki},slots:{0:{structure:ds,memory:{array:Ii},address:1056552,slots:{0:{structure:ys,memory:{array:vi},address:1057008}}}}}}}},slot:73});Object.assign(Xe,{...t,type:11,name:'*const struct{comptime type: type = bool, comptime defaultValue: bool = true, comptime description: *const [38:0]u8 = "Use the source image as an orbit trap."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fs}],methods:[],template:null},slot:72});Object.assign(bs,{...t,type:1,name:"[66:0]u8",length:66,byteSize:67,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:176});Object.assign(hs,{...t,type:11,name:"*const [66:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:bs}],methods:[],template:null},slot:175});Object.assign(Ye,{...t,type:11,name:"*const *const [66:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:hs}],methods:[],template:null},slot:174});const Ei=new Uint8Array([]),Mi=new Uint8Array([32,31,16,0]),Bi=new Uint8Array([154,153,153,153,153,153,201,63]),Di=new Uint8Array([24,31,16,0]),Ki=new Uint8Array([174,71,225,122,20,174,239,63]),Ni=new Uint8Array([16,31,16,0]),$i=new Uint8Array([205,204,204,204,204,204,236,63]),Li=new Uint8Array([8,31,16,0]),Gi=new Uint8Array([173,32,16,0]),Hi=new Uint8Array([70,105,110,101,32,116,117,110,101,32,116,104,101,32,109,97,115,107,105,110,103,32,97,116,32,116,104,101,32,116,114,97,110,115,112,97,114,101,110,116,32,101,100,103,101,32,111,102,32,116,104,101,32,115,111,117,114,99,101,32,105,109,97,103,101,46,0]);Object.assign(gs,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0.2, comptime maxValue: comptime_float = 0.99, comptime defaultValue: comptime_float = 0.9, comptime description: *const [66:0]u8 = "Fine tune the masking at the transparent edge of the source image."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Ye}],methods:[],template:{memory:{array:Ei},slots:{0:{structure:s,memory:{array:Mi},slots:{0:{structure:r,memory:{array:Bi},address:1056544}}},1:{structure:s,memory:{array:Di},slots:{0:{structure:r,memory:{array:Ki},address:1056536}}},2:{structure:s,memory:{array:Ni},slots:{0:{structure:r,memory:{array:$i},address:1056528}}},3:{structure:Ye,memory:{array:Li},slots:{0:{structure:hs,memory:{array:Gi},address:1056520,slots:{0:{structure:bs,memory:{array:Hi},address:1056941}}}}}}}},slot:75});Object.assign(Ze,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.2, comptime maxValue: comptime_float = 0.99, comptime defaultValue: comptime_float = 0.9, comptime description: *const [66:0]u8 = "Fine tune the masking at the transparent edge of the source image."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:gs}],methods:[],template:null},slot:74});const Ji=new Uint8Array([]),Qi=new Uint8Array([112,30,16,0]),Wi=new Uint8Array([0,31,16,0]),Xi=new Uint8Array([0,0,0,0,0,0,20,64]),Yi=new Uint8Array([248,30,16,0]),Zi=new Uint8Array([51,51,51,51,51,51,227,63]),eo=new Uint8Array([240,30,16,0]),to=new Uint8Array([133,32,16,0]),so=new Uint8Array([84,104,101,32,114,101,108,97,116,105,118,101,32,115,99,97,108,101,32,111,102,32,116,104,101,32,115,111,117,114,99,101,32,105,109,97,103,101,46,0]);Object.assign(zs,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 0.6, comptime description: *const [39:0]u8 = "The relative scale of the source image."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:E}],methods:[],template:{memory:{array:Ji},slots:{0:{structure:s,memory:{array:Qi},slots:{0:{structure:r,memory:{array:Xs},address:1056368}}},1:{structure:s,memory:{array:Wi},slots:{0:{structure:r,memory:{array:Xi},address:1056512}}},2:{structure:s,memory:{array:Yi},slots:{0:{structure:r,memory:{array:Zi},address:1056504}}},3:{structure:E,memory:{array:eo},slots:{0:{structure:ie,memory:{array:to},address:1056496,slots:{0:{structure:me,memory:{array:so},address:1056901}}}}}}}},slot:77});Object.assign(et,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 0.6, comptime description: *const [39:0]u8 = "The relative scale of the source image."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:zs}],methods:[],template:null},slot:76});Object.assign(Vs,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:179});Object.assign(Ss,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Vs}],methods:[],template:null},slot:178});Object.assign(tt,{...t,type:11,name:"*const *const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ss}],methods:[],template:null},slot:177});const ro=new Uint8Array([]),ao=new Uint8Array([216,30,16,0]),or=new Uint8Array([0,0,0,0,0,128,102,192]),mo=new Uint8Array([208,30,16,0]),nr=new Uint8Array([0,0,0,0,0,128,102,64]),io=new Uint8Array([104,30,16,0]),oo=new Uint8Array([236,30,16,0]),no=new Uint8Array([111,32,16,0]),co=new Uint8Array([82,111,116,97,116,101,32,116,104,101,32,105,109,97,103,101,32,109,97,112,46,0]);Object.assign(_s,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0, comptime description: *const [21:0]u8 = "Rotate the image map."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:tt}],methods:[],template:{memory:{array:ro},slots:{0:{structure:s,memory:{array:ao},slots:{0:{structure:r,memory:{array:or},address:1056472}}},1:{structure:s,memory:{array:mo},slots:{0:{structure:r,memory:{array:nr},address:1056464}}},2:{structure:s,memory:{array:io},slots:{0:{structure:r,memory:{array:f},address:1056360}}},3:{structure:tt,memory:{array:oo},slots:{0:{structure:Ss,memory:{array:no},address:1056492,slots:{0:{structure:Vs,memory:{array:co},address:1056879}}}}}}}},slot:79});Object.assign(st,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0, comptime description: *const [21:0]u8 = "Rotate the image map."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_s}],methods:[],template:null},slot:78});Object.assign(Rs,{...t,type:1,name:"[20:0]u8",length:20,byteSize:21,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:182});Object.assign(qs,{...t,type:11,name:"*const [20:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Rs}],methods:[],template:null},slot:181});Object.assign(rt,{...t,type:11,name:"*const *const [20:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:qs}],methods:[],template:null},slot:180});const uo=new Uint8Array([]),lo=new Uint8Array([216,30,16,0]),po=new Uint8Array([208,30,16,0]),yo=new Uint8Array([104,30,16,0]),fo=new Uint8Array([232,30,16,0]),bo=new Uint8Array([90,32,16,0]),ho=new Uint8Array([82,111,116,97,116,101,32,109,97,112,112,101,100,32,105,109,97,103,101,46,0]);Object.assign(ws,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0, comptime description: *const [20:0]u8 = "Rotate mapped image."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:rt}],methods:[],template:{memory:{array:uo},slots:{0:{structure:s,memory:{array:lo},slots:{0:{structure:r,memory:{array:or},address:1056472}}},1:{structure:s,memory:{array:po},slots:{0:{structure:r,memory:{array:nr},address:1056464}}},2:{structure:s,memory:{array:yo},slots:{0:{structure:r,memory:{array:f},address:1056360}}},3:{structure:rt,memory:{array:fo},slots:{0:{structure:qs,memory:{array:bo},address:1056488,slots:{0:{structure:Rs,memory:{array:ho},address:1056858}}}}}}}},slot:81});Object.assign(at,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0, comptime description: *const [20:0]u8 = "Rotate mapped image."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ws}],methods:[],template:null},slot:80});const go=new Uint8Array([]),zo=new Uint8Array([88,30,16,0]),Vo=new Uint8Array([88,30,16,0]);Object.assign(Us,{...t,type:2,name:"struct{comptime comptime_float = -2, comptime comptime_float = -2}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:go},slots:{0:{structure:s,memory:{array:zo},slots:{0:{structure:r,memory:{array:Js},address:1056344}}},1:{structure:s,memory:{array:Vo},slots:{0:{structure:r,memory:{array:Js},address:1056344}}}}}},slot:184});Object.assign(mt,{...t,type:11,name:"*const struct{comptime comptime_float = -2, comptime comptime_float = -2}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Us}],methods:[],template:null},slot:183});const So=new Uint8Array([]),_o=new Uint8Array([80,30,16,0]),Ro=new Uint8Array([80,30,16,0]);Object.assign(As,{...t,type:2,name:"struct{comptime comptime_float = 2, comptime comptime_float = 2}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:So},slots:{0:{structure:s,memory:{array:_o},slots:{0:{structure:r,memory:{array:Qs},address:1056336}}},1:{structure:s,memory:{array:Ro},slots:{0:{structure:r,memory:{array:Qs},address:1056336}}}}}},slot:186});Object.assign(it,{...t,type:11,name:"*const struct{comptime comptime_float = 2, comptime comptime_float = 2}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:As}],methods:[],template:null},slot:185});Object.assign(Os,{...t,type:1,name:"[42:0]u8",length:42,byteSize:43,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:189});Object.assign(xs,{...t,type:11,name:"*const [42:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Os}],methods:[],template:null},slot:188});Object.assign(ot,{...t,type:11,name:"*const *const [42:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:xs}],methods:[],template:null},slot:187});const qo=new Uint8Array([]),wo=new Uint8Array([170,170,170,170]),Uo=new Uint8Array([170,170,170,170]),Ao=new Uint8Array([170,170,170,170]),Oo=new Uint8Array([228,30,16,0]),xo=new Uint8Array([47,32,16,0]),jo=new Uint8Array([84,104,101,32,114,101,108,97,116,105,118,101,32,112,111,115,105,116,105,111,110,32,111,102,32,116,104,101,32,115,111,117,114,99,101,32,105,109,97,103,101,46,0]);Object.assign(js,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -2} = .{-2, -2}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 2} = .{2, 2}, comptime defaultValue: struct{comptime comptime_float = 0.5, comptime comptime_float = 0} = .{0.5, 0}, comptime description: *const [42:0]u8 = "The relative position of the source image."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:mt},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:it},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:I},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:ot}],methods:[],template:{memory:{array:qo},slots:{0:{structure:mt,memory:{array:wo},slots:{0:{structure:Us,memory:{array:a},address:-1431655766}}},1:{structure:it,memory:{array:Uo},slots:{0:{structure:As,memory:{array:a},address:-1431655766}}},2:{structure:I,memory:{array:Ao},slots:{0:{structure:se,memory:{array:a},address:-1431655766}}},3:{structure:ot,memory:{array:Oo},slots:{0:{structure:xs,memory:{array:xo},address:1056484,slots:{0:{structure:Os,memory:{array:jo},address:1056815}}}}}}}},slot:83});Object.assign(nt,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -2} = .{-2, -2}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 2} = .{2, 2}, comptime defaultValue: struct{comptime comptime_float = 0.5, comptime comptime_float = 0} = .{0.5, 0}, comptime description: *const [42:0]u8 = "The relative position of the source image."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:js}],methods:[],template:null},slot:82});Object.assign(Ps,{...t,type:1,name:"[80:0]u8",length:80,byteSize:81,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:192});Object.assign(Cs,{...t,type:11,name:"*const [80:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ps}],methods:[],template:null},slot:191});Object.assign(ct,{...t,type:11,name:"*const *const [80:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Cs}],methods:[],template:null},slot:190});const Po=new Uint8Array([]),Co=new Uint8Array([104,30,16,0]),To=new Uint8Array([96,30,16,0]),Fo=new Uint8Array([104,30,16,0]),ko=new Uint8Array([224,30,16,0]),Io=new Uint8Array([222,31,16,0]),vo=new Uint8Array([65,100,100,32,116,104,101,32,105,108,108,117,115,105,111,110,32,111,102,32,100,101,112,116,104,32,98,121,32,98,108,101,110,100,105,110,103,32,115,117,98,115,101,113,117,101,110,116,32,105,116,101,114,97,116,105,111,110,115,32,105,110,116,111,32,116,104,101,32,98,97,99,107,103,114,111,117,110,100,46,0]);Object.assign(Ts,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [80:0]u8 = "Add the illusion of depth by blending subsequent iterations into the background."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:ct}],methods:[],template:{memory:{array:Po},slots:{0:{structure:s,memory:{array:Co},slots:{0:{structure:r,memory:{array:f},address:1056360}}},1:{structure:s,memory:{array:To},slots:{0:{structure:r,memory:{array:V},address:1056352}}},2:{structure:s,memory:{array:Fo},slots:{0:{structure:r,memory:{array:f},address:1056360}}},3:{structure:ct,memory:{array:ko},slots:{0:{structure:Cs,memory:{array:Io},address:1056480,slots:{0:{structure:Ps,memory:{array:vo},address:1056734}}}}}}}},slot:85});Object.assign(ut,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [80:0]u8 = "Add the illusion of depth by blending subsequent iterations into the background."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ts}],methods:[],template:null},slot:84});Object.assign(M,{...t,type:11,name:"*const *const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:193});const Eo=new Uint8Array([]),Mo=new Uint8Array([216,30,16,0]),Bo=new Uint8Array([208,30,16,0]),Do=new Uint8Array([104,30,16,0]),Ko=new Uint8Array([200,30,16,0]),No=new Uint8Array([202,31,16,0]),$o=new Uint8Array([82,111,116,97,116,101,32,116,104,101,32,102,114,97,99,116,97,108,46,0]);Object.assign(Fs,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0, comptime description: *const [19:0]u8 = "Rotate the fractal."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:M}],methods:[],template:{memory:{array:Eo},slots:{0:{structure:s,memory:{array:Mo},slots:{0:{structure:r,memory:{array:or},address:1056472}}},1:{structure:s,memory:{array:Bo},slots:{0:{structure:r,memory:{array:nr},address:1056464}}},2:{structure:s,memory:{array:Do},slots:{0:{structure:r,memory:{array:f},address:1056360}}},3:{structure:M,memory:{array:Ko},slots:{0:{structure:q,memory:{array:No},address:1056456,slots:{0:{structure:D,memory:{array:$o},address:1056714}}}}}}}},slot:87});Object.assign(lt,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0, comptime description: *const [19:0]u8 = "Rotate the fractal."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Fs}],methods:[],template:null},slot:86});const Lo=new Uint8Array([]),Go=new Uint8Array([160,30,16,0]),Ho=new Uint8Array([192,30,16,0]),Jo=new Uint8Array([0,0,0,0,0,0,42,64]),Qo=new Uint8Array([184,30,16,0]),Wo=new Uint8Array([176,30,16,0]),Xo=new Uint8Array([188,31,16,0]),Yo=new Uint8Array([80,114,105,109,97,114,121,32,122,111,111,109,46,0]);Object.assign(ks,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 13, comptime defaultValue: comptime_float = 0.1, comptime description: *const [13:0]u8 = "Primary zoom."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:v}],methods:[],template:{memory:{array:Lo},slots:{0:{structure:s,memory:{array:Go},slots:{0:{structure:r,memory:{array:Q},address:1056416}}},1:{structure:s,memory:{array:Ho},slots:{0:{structure:r,memory:{array:Jo},address:1056448}}},2:{structure:s,memory:{array:Qo},slots:{0:{structure:r,memory:{array:hr},address:1056440}}},3:{structure:v,memory:{array:Wo},slots:{0:{structure:ae,memory:{array:Xo},address:1056432,slots:{0:{structure:re,memory:{array:Yo},address:1056700}}}}}}}},slot:89});Object.assign(pt,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 13, comptime defaultValue: comptime_float = 0.1, comptime description: *const [13:0]u8 = "Primary zoom."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ks}],methods:[],template:null},slot:88});const Zo=new Uint8Array([]),en=new Uint8Array([160,30,16,0]),tn=new Uint8Array([96,30,16,0]),sn=new Uint8Array([104,30,16,0]),rn=new Uint8Array([172,30,16,0]),an=new Uint8Array([168,31,16,0]),mn=new Uint8Array([70,105,110,101,32,116,117,110,101,32,116,104,101,32,122,111,111,109,46,0]);Object.assign(Is,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [19:0]u8 = "Fine tune the zoom."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:o},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:M}],methods:[],template:{memory:{array:Zo},slots:{0:{structure:s,memory:{array:en},slots:{0:{structure:r,memory:{array:Q},address:1056416}}},1:{structure:s,memory:{array:tn},slots:{0:{structure:r,memory:{array:V},address:1056352}}},2:{structure:s,memory:{array:sn},slots:{0:{structure:r,memory:{array:f},address:1056360}}},3:{structure:M,memory:{array:rn},slots:{0:{structure:q,memory:{array:an},address:1056428,slots:{0:{structure:D,memory:{array:mn},address:1056680}}}}}}}},slot:91});Object.assign(yt,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [19:0]u8 = "Fine tune the zoom."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Is}],methods:[],template:null},slot:90});const on=new Uint8Array([]),nn=new Uint8Array([170,170,170,170]),cn=new Uint8Array([170,170,170,170]),un=new Uint8Array([170,170,170,170]),ln=new Uint8Array([170,170,170,170]),pn=new Uint8Array([170,170,170,170]),yn=new Uint8Array([170,170,170,170]),dn=new Uint8Array([170,170,170,170]),fn=new Uint8Array([170,170,170,170]),bn=new Uint8Array([170,170,170,170]),hn=new Uint8Array([170,170,170,170]),gn=new Uint8Array([170,170,170,170]),zn=new Uint8Array([170,170,170,170]),Vn=new Uint8Array([170,170,170,170]),Sn=new Uint8Array([170,170,170,170]),_n=new Uint8Array([170,170,170,170]),Rn=new Uint8Array([170,170,170,170]),qn=new Uint8Array([170,170,170,170]),wn=new Uint8Array([170,170,170,170]),Un=new Uint8Array([170,170,170,170]),An=new Uint8Array([170,170,170,170]),On=new Uint8Array([170,170,170,170]),xn=new Uint8Array([170,170,170,170]),jn=new Uint8Array([170,170,170,170]),Pn=new Uint8Array([170,170,170,170]);Object.assign(vs,{...t,type:2,name:`struct{comptime antialiasing: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 1, comptime description: *const [60:0]u8 = "Super sampling quality. Number of samples squared per pixel."} = .{.type = i32, .minValue = 1, .maxValue = 3, .defaultValue = 1, .description = "Super sampling quality. Number of samples squared per pixel."}, comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -1} = .{-2, -1}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 1} = .{2, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [26:0]u8 = "The center of the fractal."} = .{.type = @Vector(2, f32), .minValue = .{-2, -1}, .maxValue = .{2, 1}, .defaultValue = .{0, 0}, .description = "The center of the fractal."}, comptime centerFineTune: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [30:0]u8 = "Fine tune the center position."} = .{.type = @Vector(2, f32), .minValue = .{-1, -1}, .maxValue = .{1, 1}, .defaultValue = .{0, 0}, .description = "Fine tune the center position."}, comptime sizeInput: struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 4096, comptime comptime_int = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_int = 300, comptime comptime_int = 300} = .{300, 300}, comptime description: *const [34:0]u8 = "The input size of the source image"} = .{.type = @Vector(2, i32), .minValue = .{100, 100}, .maxValue = .{4096, 4096}, .defaultValue = .{300, 300}, .description = "The input size of the source image"}, comptime sizeOutput: struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 4096, comptime comptime_int = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_int = 640, comptime comptime_int = 480} = .{640, 480}, comptime description: *const [40:0]u8 = "The output size of the rendered fractal."} = .{.type = @Vector(2, i32), .minValue = .{100, 100}, .maxValue = .{4096, 4096}, .defaultValue = .{640, 480}, .description = "The output size of the rendered fractal."}, comptime mandelbrot: struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [37:0]u8 = "Use the standard Mandelbrot equation."} = .{.type = bool, .defaultValue = false, .description = "Use the standard Mandelbrot equation."}, comptime power: struct{comptime type: type = f32, comptime minValue: comptime_float = -12, comptime maxValue: comptime_float = 12, comptime defaultValue: comptime_float = 3, comptime description: *const [60:0]u8 = "Raise z to the power e in the fractal formula: z' = z^e + mu"} = .{.type = f32, .minValue = -12, .maxValue = 12, .defaultValue = 3, .description = "Raise z to the power e in the fractal formula: z' = z^e + mu"}, comptime powerFineTune: struct{comptime type: type = f32, comptime minValue: comptime_float = -0.1, comptime maxValue: comptime_float = 0.1, comptime defaultValue: comptime_float = 0, comptime description: *const [23:0]u8 = "Fine tune the exponent."} = .{.type = f32, .minValue = -0.1, .maxValue = 0.1, .defaultValue = 0, .description = "Fine tune the exponent."}, comptime mu: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.5, comptime comptime_float = 0} = .{0.5, 0}, comptime description: *const [59:0]u8 = "The complex parameter of the fractal formula: z' = z^e + mu"} = .{.type = @Vector(2, f32), .minValue = .{-1, -1}, .maxValue = .{1, 1}, .defaultValue = .{0.5, 0}, .description = "The complex parameter of the fractal formula: z' = z^e + mu"}, comptime muFineTune: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -0.01, comptime comptime_float = -0.01} = .{-0.01, -0.01}, comptime maxValue: struct{comptime comptime_float = 0.01, comptime comptime_float = 0.01} = .{0.01, 0.01}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [13:0]u8 = "Fine tune mu."} = .{.type = @Vector(2, f32), .minValue = .{-0.01, -0.01}, .maxValue = .{0.01, 0.01}, .defaultValue = .{0, 0}, .description = "Fine tune mu."}, comptime iterations: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 100, comptime defaultValue: comptime_int = 10, comptime description: *const [108:0]u8 = "The maximum number of iterations for each pixel before bailout. Use to increase detail at the fractal edges."} = .{.type = i32, .minValue = 1, .maxValue = 100, .defaultValue = 10, .description = "The maximum number of iterations for each pixel before bailout. Use to increase detail at the fractal edges."}, comptime iterationsOffset: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 20, comptime defaultValue: comptime_int = 0, comptime description: *const [39:0]u8 = "Offset the start of the iteration count"} = .{.type = i32, .minValue = 0, .maxValue = 20, .defaultValue = 0, .description = "Offset the start of the iteration count"}, comptime colorBackground: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime description: *const [22:0]u8 = "The background colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{0, 0, 0}, .description = "The background colour.", .aeUIControl = "aeColor"}, comptime colorAlpha: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [55:0]u8 = "Separate alpha channel for After Effects compatibility."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 1, .description = "Separate alpha channel for After Effects compatibility."}, comptime orbitTrap: struct{comptime type: type = bool, comptime defaultValue: bool = true, comptime description: *const [38:0]u8 = "Use the source image as an orbit trap."} = .{.type = bool, .defaultValue = true, .description = "Use the source image as an orbit trap."}, comptime orbitTrapEdgeDetail: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.2, comptime maxValue: comptime_float = 0.99, comptime defaultValue: comptime_float = 0.9, comptime description: *const [66:0]u8 = "Fine tune the masking at the transparent edge of the source image."} = .{.type = f32, .minValue = 0.2, .maxValue = 0.99, .defaultValue = 0.9, .description = "Fine tune the masking at the transparent edge of the source image."}, comptime orbitTrapScale: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 0.6, comptime description: *const [39:0]u8 = "The relative scale of the source image."} = .{.type = f32, .minValue = 0.01, .maxValue = 5, .defaultValue = 0.6, .description = "The relative scale of the source image."}, comptime orbitTrapRotation: struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0, comptime description: *const [21:0]u8 = "Rotate the image map."} = .{.type = f32, .minValue = -180, .maxValue = 180, .defaultValue = 0, .description = "Rotate the image map."}, comptime orbitTrapSpin: struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0, comptime description: *const [20:0]u8 = "Rotate mapped image."} = .{.type = f32, .minValue = -180, .maxValue = 180, .defaultValue = 0, .description = "Rotate mapped image."}, comptime orbitTrapOffset: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -2} = .{-2, -2}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 2} = .{2, 2}, comptime defaultValue: struct{comptime comptime_float = 0.5, comptime comptime_float = 0} = .{0.5, 0}, comptime description: *const [42:0]u8 = "The relative position of the source image."} = .{.type = @Vector(2, f32), .minValue = .{-2, -2}, .maxValue = .{2, 2}, .defaultValue = .{0.5, 0}, .description = "The relative position of the source image."}, comptime iterationColorBlend: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [80:0]u8 = "Add the illusion of depth by blending subsequent iterations into the background."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0, .description = "Add the illusion of depth by blending subsequent iterations into the background."}, comptime rotate: struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0, comptime description: *const [19:0]u8 = "Rotate the fractal."} = .{.type = f32, .minValue = -180, .maxValue = 180, .defaultValue = 0, .description = "Rotate the fractal."}, comptime zoom: struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 13, comptime defaultValue: comptime_float = 0.1, comptime description: *const [13:0]u8 = "Primary zoom."} = .{.type = f32, .minValue = -1, .maxValue = 13, .defaultValue = 0.1, .description = "Primary zoom."}, comptime zoomFineTune: struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [19:0]u8 = "Fine tune the zoom."} = .{.type = f32, .minValue = -1, .maxValue = 1, .defaultValue = 0, .description = "Fine tune the zoom."}}`,length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"antialiasing",structure:ge},{...e,type:8,isRequired:!1,slot:1,name:"center",structure:_e},{...e,type:8,isRequired:!1,slot:2,name:"centerFineTune",structure:qe},{...e,type:8,isRequired:!1,slot:3,name:"sizeInput",structure:Ae},{...e,type:8,isRequired:!1,slot:4,name:"sizeOutput",structure:je},{...e,type:8,isRequired:!1,slot:5,name:"mandelbrot",structure:Ce},{...e,type:8,isRequired:!1,slot:6,name:"power",structure:Te},{...e,type:8,isRequired:!1,slot:7,name:"powerFineTune",structure:ke},{...e,type:8,isRequired:!1,slot:8,name:"mu",structure:ve},{...e,type:8,isRequired:!1,slot:9,name:"muFineTune",structure:Be},{...e,type:8,isRequired:!1,slot:10,name:"iterations",structure:Ke},{...e,type:8,isRequired:!1,slot:11,name:"iterationsOffset",structure:Ne},{...e,type:8,isRequired:!1,slot:12,name:"colorBackground",structure:He},{...e,type:8,isRequired:!1,slot:13,name:"colorAlpha",structure:Qe},{...e,type:8,isRequired:!1,slot:14,name:"orbitTrap",structure:Xe},{...e,type:8,isRequired:!1,slot:15,name:"orbitTrapEdgeDetail",structure:Ze},{...e,type:8,isRequired:!1,slot:16,name:"orbitTrapScale",structure:et},{...e,type:8,isRequired:!1,slot:17,name:"orbitTrapRotation",structure:st},{...e,type:8,isRequired:!1,slot:18,name:"orbitTrapSpin",structure:at},{...e,type:8,isRequired:!1,slot:19,name:"orbitTrapOffset",structure:nt},{...e,type:8,isRequired:!1,slot:20,name:"iterationColorBlend",structure:ut},{...e,type:8,isRequired:!1,slot:21,name:"rotate",structure:lt},{...e,type:8,isRequired:!1,slot:22,name:"zoom",structure:pt},{...e,type:8,isRequired:!1,slot:23,name:"zoomFineTune",structure:yt}],methods:[],template:{memory:{array:on},slots:{0:{structure:ge,memory:{array:nn},slots:{0:{structure:Rt,memory:{array:a},address:-1431655766}}},1:{structure:_e,memory:{array:cn},slots:{0:{structure:Ot,memory:{array:a},address:-1431655766}}},2:{structure:qe,memory:{array:un},slots:{0:{structure:Pt,memory:{array:a},address:-1431655766}}},3:{structure:Ae,memory:{array:ln},slots:{0:{structure:kt,memory:{array:a},address:-1431655766}}},4:{structure:je,memory:{array:pn},slots:{0:{structure:Mt,memory:{array:a},address:-1431655766}}},5:{structure:Ce,memory:{array:yn},slots:{0:{structure:Kt,memory:{array:a},address:-1431655766}}},6:{structure:Te,memory:{array:dn},slots:{0:{structure:Nt,memory:{array:a},address:-1431655766}}},7:{structure:ke,memory:{array:fn},slots:{0:{structure:Gt,memory:{array:a},address:-1431655766}}},8:{structure:ve,memory:{array:bn},slots:{0:{structure:Qt,memory:{array:a},address:-1431655766}}},9:{structure:Be,memory:{array:hn},slots:{0:{structure:Yt,memory:{array:a},address:-1431655766}}},10:{structure:Ke,memory:{array:gn},slots:{0:{structure:ts,memory:{array:a},address:-1431655766}}},11:{structure:Ne,memory:{array:zn},slots:{0:{structure:ss,memory:{array:a},address:-1431655766}}},12:{structure:He,memory:{array:Vn},slots:{0:{structure:cs,memory:{array:a},address:-1431655766}}},13:{structure:Qe,memory:{array:Sn},slots:{0:{structure:ps,memory:{array:a},address:-1431655766}}},14:{structure:Xe,memory:{array:_n},slots:{0:{structure:fs,memory:{array:a},address:-1431655766}}},15:{structure:Ze,memory:{array:Rn},slots:{0:{structure:gs,memory:{array:a},address:-1431655766}}},16:{structure:et,memory:{array:qn},slots:{0:{structure:zs,memory:{array:a},address:-1431655766}}},17:{structure:st,memory:{array:wn},slots:{0:{structure:_s,memory:{array:a},address:-1431655766}}},18:{structure:at,memory:{array:Un},slots:{0:{structure:ws,memory:{array:a},address:-1431655766}}},19:{structure:nt,memory:{array:An},slots:{0:{structure:js,memory:{array:a},address:-1431655766}}},20:{structure:ut,memory:{array:On},slots:{0:{structure:Ts,memory:{array:a},address:-1431655766}}},21:{structure:lt,memory:{array:xn},slots:{0:{structure:Fs,memory:{array:a},address:-1431655766}}},22:{structure:pt,memory:{array:jn},slots:{0:{structure:ks,memory:{array:a},address:-1431655766}}},23:{structure:yt,memory:{array:Pn},slots:{0:{structure:Is,memory:{array:a},address:-1431655766}}}}}},slot:18});Object.assign(dt,{...t,type:11,name:`*struct{comptime antialiasing: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 1, comptime description: *const [60:0]u8 = "Super sampling quality. Number of samples squared per pixel."} = .{.type = i32, .minValue = 1, .maxValue = 3, .defaultValue = 1, .description = "Super sampling quality. Number of samples squared per pixel."}, comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -1} = .{-2, -1}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 1} = .{2, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [26:0]u8 = "The center of the fractal."} = .{.type = @Vector(2, f32), .minValue = .{-2, -1}, .maxValue = .{2, 1}, .defaultValue = .{0, 0}, .description = "The center of the fractal."}, comptime centerFineTune: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [30:0]u8 = "Fine tune the center position."} = .{.type = @Vector(2, f32), .minValue = .{-1, -1}, .maxValue = .{1, 1}, .defaultValue = .{0, 0}, .description = "Fine tune the center position."}, comptime sizeInput: struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 4096, comptime comptime_int = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_int = 300, comptime comptime_int = 300} = .{300, 300}, comptime description: *const [34:0]u8 = "The input size of the source image"} = .{.type = @Vector(2, i32), .minValue = .{100, 100}, .maxValue = .{4096, 4096}, .defaultValue = .{300, 300}, .description = "The input size of the source image"}, comptime sizeOutput: struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 4096, comptime comptime_int = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_int = 640, comptime comptime_int = 480} = .{640, 480}, comptime description: *const [40:0]u8 = "The output size of the rendered fractal."} = .{.type = @Vector(2, i32), .minValue = .{100, 100}, .maxValue = .{4096, 4096}, .defaultValue = .{640, 480}, .description = "The output size of the rendered fractal."}, comptime mandelbrot: struct{comptime type: type = bool, comptime defaultValue: bool = false, comptime description: *const [37:0]u8 = "Use the standard Mandelbrot equation."} = .{.type = bool, .defaultValue = false, .description = "Use the standard Mandelbrot equation."}, comptime power: struct{comptime type: type = f32, comptime minValue: comptime_float = -12, comptime maxValue: comptime_float = 12, comptime defaultValue: comptime_float = 3, comptime description: *const [60:0]u8 = "Raise z to the power e in the fractal formula: z' = z^e + mu"} = .{.type = f32, .minValue = -12, .maxValue = 12, .defaultValue = 3, .description = "Raise z to the power e in the fractal formula: z' = z^e + mu"}, comptime powerFineTune: struct{comptime type: type = f32, comptime minValue: comptime_float = -0.1, comptime maxValue: comptime_float = 0.1, comptime defaultValue: comptime_float = 0, comptime description: *const [23:0]u8 = "Fine tune the exponent."} = .{.type = f32, .minValue = -0.1, .maxValue = 0.1, .defaultValue = 0, .description = "Fine tune the exponent."}, comptime mu: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1} = .{-1, -1}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.5, comptime comptime_float = 0} = .{0.5, 0}, comptime description: *const [59:0]u8 = "The complex parameter of the fractal formula: z' = z^e + mu"} = .{.type = @Vector(2, f32), .minValue = .{-1, -1}, .maxValue = .{1, 1}, .defaultValue = .{0.5, 0}, .description = "The complex parameter of the fractal formula: z' = z^e + mu"}, comptime muFineTune: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -0.01, comptime comptime_float = -0.01} = .{-0.01, -0.01}, comptime maxValue: struct{comptime comptime_float = 0.01, comptime comptime_float = 0.01} = .{0.01, 0.01}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime description: *const [13:0]u8 = "Fine tune mu."} = .{.type = @Vector(2, f32), .minValue = .{-0.01, -0.01}, .maxValue = .{0.01, 0.01}, .defaultValue = .{0, 0}, .description = "Fine tune mu."}, comptime iterations: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 100, comptime defaultValue: comptime_int = 10, comptime description: *const [108:0]u8 = "The maximum number of iterations for each pixel before bailout. Use to increase detail at the fractal edges."} = .{.type = i32, .minValue = 1, .maxValue = 100, .defaultValue = 10, .description = "The maximum number of iterations for each pixel before bailout. Use to increase detail at the fractal edges."}, comptime iterationsOffset: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 20, comptime defaultValue: comptime_int = 0, comptime description: *const [39:0]u8 = "Offset the start of the iteration count"} = .{.type = i32, .minValue = 0, .maxValue = 20, .defaultValue = 0, .description = "Offset the start of the iteration count"}, comptime colorBackground: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}, comptime description: *const [22:0]u8 = "The background colour.", comptime aeUIControl: *const [7:0]u8 = "aeColor"} = .{.type = @Vector(3, f32), .minValue = .{0, 0, 0}, .maxValue = .{1, 1, 1}, .defaultValue = .{0, 0, 0}, .description = "The background colour.", .aeUIControl = "aeColor"}, comptime colorAlpha: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [55:0]u8 = "Separate alpha channel for After Effects compatibility."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 1, .description = "Separate alpha channel for After Effects compatibility."}, comptime orbitTrap: struct{comptime type: type = bool, comptime defaultValue: bool = true, comptime description: *const [38:0]u8 = "Use the source image as an orbit trap."} = .{.type = bool, .defaultValue = true, .description = "Use the source image as an orbit trap."}, comptime orbitTrapEdgeDetail: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.2, comptime maxValue: comptime_float = 0.99, comptime defaultValue: comptime_float = 0.9, comptime description: *const [66:0]u8 = "Fine tune the masking at the transparent edge of the source image."} = .{.type = f32, .minValue = 0.2, .maxValue = 0.99, .defaultValue = 0.9, .description = "Fine tune the masking at the transparent edge of the source image."}, comptime orbitTrapScale: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 0.6, comptime description: *const [39:0]u8 = "The relative scale of the source image."} = .{.type = f32, .minValue = 0.01, .maxValue = 5, .defaultValue = 0.6, .description = "The relative scale of the source image."}, comptime orbitTrapRotation: struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0, comptime description: *const [21:0]u8 = "Rotate the image map."} = .{.type = f32, .minValue = -180, .maxValue = 180, .defaultValue = 0, .description = "Rotate the image map."}, comptime orbitTrapSpin: struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0, comptime description: *const [20:0]u8 = "Rotate mapped image."} = .{.type = f32, .minValue = -180, .maxValue = 180, .defaultValue = 0, .description = "Rotate mapped image."}, comptime orbitTrapOffset: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -2} = .{-2, -2}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 2} = .{2, 2}, comptime defaultValue: struct{comptime comptime_float = 0.5, comptime comptime_float = 0} = .{0.5, 0}, comptime description: *const [42:0]u8 = "The relative position of the source image."} = .{.type = @Vector(2, f32), .minValue = .{-2, -2}, .maxValue = .{2, 2}, .defaultValue = .{0.5, 0}, .description = "The relative position of the source image."}, comptime iterationColorBlend: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [80:0]u8 = "Add the illusion of depth by blending subsequent iterations into the background."} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0, .description = "Add the illusion of depth by blending subsequent iterations into the background."}, comptime rotate: struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0, comptime description: *const [19:0]u8 = "Rotate the fractal."} = .{.type = f32, .minValue = -180, .maxValue = 180, .defaultValue = 0, .description = "Rotate the fractal."}, comptime zoom: struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 13, comptime defaultValue: comptime_float = 0.1, comptime description: *const [13:0]u8 = "Primary zoom."} = .{.type = f32, .minValue = -1, .maxValue = 13, .defaultValue = 0.1, .description = "Primary zoom."}, comptime zoomFineTune: struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0, comptime description: *const [19:0]u8 = "Fine tune the zoom."} = .{.type = f32, .minValue = -1, .maxValue = 1, .defaultValue = 0, .description = "Fine tune the zoom."}}`,length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:vs}],methods:[],template:null},slot:17});const Cn=new Uint8Array([]),Tn=new Uint8Array([168,30,16,0]),Fn=new Uint8Array([4,0,0,0]);Object.assign(oe,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:m}],methods:[],template:{memory:{array:Cn},slots:{0:{structure:m,memory:{array:Tn},slots:{0:{structure:i,memory:{array:Fn},address:1056424}}}}}},slot:93});Object.assign(B,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:92});const kn=new Uint8Array([]),In=new Uint8Array([170,170,170,170]);Object.assign(Es,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:B}],methods:[],template:{memory:{array:kn},slots:{0:{structure:B,memory:{array:In},slots:{0:{structure:oe,memory:{array:a},address:-1431655766}}}}}},slot:20});Object.assign(ft,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Es}],methods:[],template:null},slot:19});const vn=new Uint8Array([]),En=new Uint8Array([170,170,170,170]);Object.assign(Ms,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:B}],methods:[],template:{memory:{array:vn},slots:{0:{structure:B,memory:{array:En},slots:{0:{structure:oe,memory:{array:a},address:-1431655766}}}}}},slot:22});Object.assign(bt,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ms}],methods:[],template:null},slot:21});const Mn=new Uint8Array([]),Bn=new Uint8Array([]),Dn=new Uint8Array([124,250,15,0]),Kn=new Uint8Array([131,206,16,0]),Nn=new Uint8Array([99,111,109,46,115,117,98,98,108,117,101,46,102,105,108,116,101,114,115,0]),$n=new Uint8Array([188,250,15,0]),Ln=new Uint8Array([119,206,16,0]),Gn=new Uint8Array([84,111,109,32,66,101,100,100,97,114,100,0]),Hn=new Uint8Array([252,250,15,0]),Jn=new Uint8Array([1,0,0,0]),Qn=new Uint8Array([84,251,15,0]),Wn=new Uint8Array([85,206,16,0]),Xn=new Uint8Array([70,114,97,99,116,97,108,32,101,120,112,108,111,114,101,114,32,119,105,116,104,32,111,114,98,105,116,32,116,114,97,112,115,0]),Yn=new Uint8Array([172,251,15,0]),Zn=new Uint8Array([51,206,16,0]),ec=new Uint8Array([70,114,97,99,116,97,108,32,69,120,112,108,111,114,101,114,32,119,105,116,104,32,79,114,98,105,116,32,84,114,97,112,115,0]),tc=new Uint8Array([4,252,15,0]),sc=new Uint8Array([38,206,16,0]),rc=new Uint8Array([80,105,120,101,108,32,66,101,110,100,101,114,0]),ac=new Uint8Array([170,170,170,170]),mc=new Uint8Array([170,170,170,170]),ic=new Uint8Array([170,170,170,170]);Object.assign(Zs,{...t,type:2,name:"fractal-explorer-orbit-traps.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Mn}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:fe},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:be},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:_},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:A},{...e,type:6,isRequired:!1,slot:4,name:"displayName",structure:A},{...e,type:6,isRequired:!1,slot:5,name:"category",structure:he},{...e,type:6,isRequired:!1,slot:6,name:"parameters",structure:dt},{...e,type:6,isRequired:!1,slot:7,name:"inputImages",structure:ft},{...e,type:6,isRequired:!1,slot:8,name:"outputImages",structure:bt}],methods:[],template:{memory:{array:Bn},slots:{0:{structure:fe,memory:{array:Dn},slots:{0:{structure:q,memory:{array:Kn},slots:{0:{structure:D,memory:{array:Nn},address:1101443}}}}},1:{structure:be,memory:{array:$n},slots:{0:{structure:Vt,memory:{array:Ln},slots:{0:{structure:zt,memory:{array:Gn},address:1101431}}}}},2:{structure:_,memory:{array:Hn},slots:{0:{structure:i,memory:{array:Jn}}}},3:{structure:A,memory:{array:Qn},slots:{0:{structure:G,memory:{array:Wn},slots:{0:{structure:L,memory:{array:Xn},address:1101397}}}}},4:{structure:A,memory:{array:Yn},slots:{0:{structure:G,memory:{array:Zn},slots:{0:{structure:L,memory:{array:ec},address:1101363}}}}},5:{structure:he,memory:{array:tc},slots:{0:{structure:_t,memory:{array:sc},slots:{0:{structure:St,memory:{array:rc},address:1101350}}}}},6:{structure:dt,memory:{array:ac},slots:{0:{structure:vs,memory:{array:a},address:-1431655766}}},7:{structure:ft,memory:{array:mc},slots:{0:{structure:Es,memory:{array:a},address:-1431655766}}},8:{structure:bt,memory:{array:ic},slots:{0:{structure:Ms,memory:{array:a},address:-1431655766}}}}}},slot:1});Object.assign(N,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:n}],methods:[],template:null},slot:27});Object.assign(Bs,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:N}],methods:[],template:null},slot:26});Object.assign(Ds,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Bs}],methods:[],template:null},slot:25});Object.assign(b,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:28});const oc=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Ks,{...t,type:9,name:"fractal-explorer-orbit-traps.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:i},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:i}],methods:[],template:{memory:{array:oc}}},slot:29});Object.assign(J,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:J}],methods:[],template:null},slot:31});Object.assign(Ns,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:o}],methods:[],template:null},slot:94});const nc=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),cc=new Uint8Array([]),uc=new Uint8Array([88,249,15,0]),lc=new Uint8Array([4,0,0,0]);Object.assign(ht,{...t,type:2,name:"fractal-explorer-orbit-traps.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Ds},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:b},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:b},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Ks},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:g},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:J}],methods:[],template:{memory:{array:nc}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:N},{...e,type:7,isRequired:!1,name:"FPixel",structure:Ns},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:_}],methods:[],template:{memory:{array:cc},slots:{0:{structure:_,memory:{array:uc},slots:{0:{structure:i,memory:{array:lc}}}}}}},slot:24});const pc=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),yc=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),dc=new Uint8Array([0,0,0,0,0,0,0,0]),cr=new Uint8Array([]);Object.assign(ne,{...t,type:2,name:"fractal-explorer-orbit-traps.KernelInput(u8,fractal-explorer-orbit-traps.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:ht}],methods:[],template:{memory:{array:pc},slots:{0:{structure:ht,memory:{array:yc},slots:{0:{structure:Ds,memory:{array:dc},slots:{0:{structure:Bs,memory:{array:cr}}}}}}}}},slot:23});Object.assign($s,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:N}],methods:[],template:null},slot:26});Object.assign(Ls,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:$s}],methods:[],template:null},slot:34});const fc=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),bc=new Uint8Array([]),hc=new Uint8Array([88,249,15,0]),gc=new Uint8Array([4,0,0,0]);Object.assign(gt,{...t,type:2,name:"fractal-explorer-orbit-traps.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Ls},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:b},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:b},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Ks},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:g},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:J}],methods:[],template:{memory:{array:fc}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:N},{...e,type:7,isRequired:!1,name:"FPixel",structure:Ns},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:_}],methods:[],template:{memory:{array:bc},slots:{0:{structure:_,memory:{array:hc},slots:{0:{structure:i,memory:{array:gc}}}}}}},slot:33});const zc=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Vc=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Sc=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(ce,{...t,type:2,name:"fractal-explorer-orbit-traps.KernelOutput(u8,fractal-explorer-orbit-traps.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:gt}],methods:[],template:{memory:{array:zc},slots:{0:{structure:gt,memory:{array:Vc},slots:{0:{structure:Ls,memory:{array:Sc},slots:{0:{structure:$s,memory:{array:cr}}}}}}}}},slot:32});const _c=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,1,0,0,44,1,0,0,128,2,0,0,224,1,0,0,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,0,0,0,0,1,0,0,0,0,0,64,64,0,0,0,0,10,0,0,0,0,0,0,0,0,0,128,63,102,102,102,63,154,153,25,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,61,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);Object.assign(ue,{...t,type:2,name:"fractal-explorer-orbit-traps.KernelParameters(fractal-explorer-orbit-traps.kernel)",length:1,byteSize:144,align:4,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:576,bitSize:32,byteSize:4,slot:0,name:"antialiasing",structure:i},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:64,byteSize:8,slot:1,name:"center",structure:h},{...e,type:6,isRequired:!1,bitOffset:192,bitSize:64,byteSize:8,slot:2,name:"centerFineTune",structure:h},{...e,type:6,isRequired:!1,bitOffset:256,bitSize:64,byteSize:8,slot:3,name:"sizeInput",structure:C},{...e,type:6,isRequired:!1,bitOffset:320,bitSize:64,byteSize:8,slot:4,name:"sizeOutput",structure:C},{...e,type:1,isRequired:!1,bitOffset:1024,bitSize:1,byteSize:1,slot:5,name:"mandelbrot",structure:g},{...e,type:4,isRequired:!1,bitOffset:608,bitSize:32,byteSize:4,slot:6,name:"power",structure:o},{...e,type:4,isRequired:!1,bitOffset:640,bitSize:32,byteSize:4,slot:7,name:"powerFineTune",structure:o},{...e,type:6,isRequired:!1,bitOffset:384,bitSize:64,byteSize:8,slot:8,name:"mu",structure:h},{...e,type:6,isRequired:!1,bitOffset:448,bitSize:64,byteSize:8,slot:9,name:"muFineTune",structure:h},{...e,type:2,isRequired:!1,bitOffset:672,bitSize:32,byteSize:4,slot:10,name:"iterations",structure:i},{...e,type:2,isRequired:!1,bitOffset:704,bitSize:32,byteSize:4,slot:11,name:"iterationsOffset",structure:i},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:96,byteSize:16,slot:12,name:"colorBackground",structure:rs},{...e,type:4,isRequired:!1,bitOffset:736,bitSize:32,byteSize:4,slot:13,name:"colorAlpha",structure:o},{...e,type:1,isRequired:!1,bitOffset:1032,bitSize:1,byteSize:1,slot:14,name:"orbitTrap",structure:g},{...e,type:4,isRequired:!1,bitOffset:768,bitSize:32,byteSize:4,slot:15,name:"orbitTrapEdgeDetail",structure:o},{...e,type:4,isRequired:!1,bitOffset:800,bitSize:32,byteSize:4,slot:16,name:"orbitTrapScale",structure:o},{...e,type:4,isRequired:!1,bitOffset:832,bitSize:32,byteSize:4,slot:17,name:"orbitTrapRotation",structure:o},{...e,type:4,isRequired:!1,bitOffset:864,bitSize:32,byteSize:4,slot:18,name:"orbitTrapSpin",structure:o},{...e,type:6,isRequired:!1,bitOffset:512,bitSize:64,byteSize:8,slot:19,name:"orbitTrapOffset",structure:h},{...e,type:4,isRequired:!1,bitOffset:896,bitSize:32,byteSize:4,slot:20,name:"iterationColorBlend",structure:o},{...e,type:4,isRequired:!1,bitOffset:928,bitSize:32,byteSize:4,slot:21,name:"rotate",structure:o},{...e,type:4,isRequired:!1,bitOffset:960,bitSize:32,byteSize:4,slot:22,name:"zoom",structure:o},{...e,type:4,isRequired:!1,bitOffset:992,bitSize:32,byteSize:4,slot:23,name:"zoomFineTune",structure:o}],methods:[],template:{memory:{array:_c}}},slot:35});Object.assign(er,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(fractal-explorer-orbit-traps.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:95});Object.assign(tr,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(fractal-explorer-orbit-traps.createOutput)).Fn.return_type.?).ErrorUnion.error_set!fractal-explorer-orbit-traps.KernelOutput(u8,fractal-explorer-orbit-traps.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:ce},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:er}],methods:[],template:null},slot:42});Object.assign(sr,{...t,type:3,name:"createOutput",length:1,byteSize:208,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:1152,bitSize:32,byteSize:4,slot:0,name:"0",structure:b},{...e,type:3,bitOffset:1184,bitSize:32,byteSize:4,slot:1,name:"1",structure:b},{...e,type:6,bitOffset:1216,bitSize:192,byteSize:24,slot:2,name:"2",structure:ne},{...e,type:6,bitOffset:0,bitSize:1152,byteSize:144,slot:3,name:"3",structure:ue},{...e,type:6,bitOffset:1408,bitSize:224,byteSize:28,slot:4,name:"retval",structure:tr}],methods:[],template:null},slot:40});Object.assign(rr,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(fractal-explorer-orbit-traps.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:96});Object.assign(ar,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(fractal-explorer-orbit-traps.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!fractal-explorer-orbit-traps.KernelOutput(u8,fractal-explorer-orbit-traps.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:ce},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:rr}],methods:[],template:null},slot:43});Object.assign(mr,{...t,type:3,name:"createPartialOutput",length:1,byteSize:224,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:1152,bitSize:32,byteSize:4,slot:0,name:"0",structure:b},{...e,type:3,bitOffset:1184,bitSize:32,byteSize:4,slot:1,name:"1",structure:b},{...e,type:3,bitOffset:1216,bitSize:32,byteSize:4,slot:2,name:"2",structure:b},{...e,type:3,bitOffset:1248,bitSize:32,byteSize:4,slot:3,name:"3",structure:b},{...e,type:6,bitOffset:1280,bitSize:192,byteSize:24,slot:4,name:"4",structure:ne},{...e,type:6,bitOffset:0,bitSize:1152,byteSize:144,slot:5,name:"5",structure:ue},{...e,type:6,bitOffset:1472,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ar}],methods:[],template:null},slot:41});const Rc={argStruct:sr,thunk:1,name:"createOutput"},qc={argStruct:mr,thunk:6,name:"createPartialOutput"};Object.assign(ir,{...t,type:2,name:"fractal-explorer-orbit-traps",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:cr}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:Zs},{...e,type:7,isRequired:!1,name:"Input",structure:ne},{...e,type:7,isRequired:!1,name:"Output",structure:ce},{...e,type:7,isRequired:!1,name:"Parameters",structure:ue}],methods:[Rc,qc],template:null},slot:0});const wc=[n,D,q,fe,zt,Vt,be,i,_,L,G,A,St,_t,he,m,W,X,x,Rt,ge,o,h,r,s,qt,ze,wt,Ve,K,R,Ut,At,Se,Ot,_e,Y,j,Z,P,xt,jt,Re,Pt,qe,C,ee,T,te,F,Ct,we,Tt,Ft,Ue,kt,Ae,It,Oe,vt,Et,xe,Mt,je,g,k,Bt,Dt,Pe,Kt,Ce,Nt,Te,$t,Lt,Fe,Gt,ke,se,I,Ht,Jt,Ie,Qt,ve,Wt,Ee,Xt,Me,re,ae,v,Yt,Be,Zt,es,De,ts,Ke,me,ie,E,ss,Ne,rs,H,O,as,$e,ms,is,Le,os,ns,Ge,cs,He,us,ls,Je,ps,Qe,ys,ds,We,fs,Xe,bs,hs,Ye,gs,Ze,zs,et,Vs,Ss,tt,_s,st,Rs,qs,rt,ws,at,Us,mt,As,it,Os,xs,ot,js,nt,Ps,Cs,ct,Ts,ut,M,Fs,lt,ks,pt,Is,yt,vs,dt,oe,B,Es,ft,Ms,bt,Zs,N,Bs,Ds,b,Ks,J,Ns,ht,ne,$s,Ls,gt,ce,ue,er,tr,sr,rr,ar,mr,ir],Uc=Er(wc),Ac=ir.constructor,Oc=(async()=>{const p=new URL("fractal-explorer-orbit-traps-b96a536f.wasm",import.meta.url).href;return fetch(p)})();Mr(Oc,{...Uc,writeBack:!0});const{createOutput:Ic,createPartialOutput:xc,kernel:Ys,Input:jc,Output:vc,Parameters:Ec}=Ac;function Pc(p,d,u,c,l={},w={}){if(Array.isArray(l)){const S=l;l={};for(const[z,U]of Object.keys(Ys.inputImages).entries())l[U]=S[z]}const le=new jc(void 0),pe=Object.keys(Ys.inputImages),y=[];let $;for(const S of pe){let z=l[S];if(z||(pe.length===1&&["data","width","height"].every(U=>!!l[U])?z=l:y.push(S)),le[S]=z,$){if(z.colorSpace!==$)throw new Error(`Input images must all use the same color space: ${$}`)}else $=z.colorSpace}if(y.length>0)throw new Error(`Missing input image${y.length>1?"s":""}: ${y.join(", ")}`);const Gs=xc(p,d,u,c,le,w),ur=S=>{const z=Object.keys(S),U={};for(const lr of z){const{data:{typedArray:ye},width:pr,height:zr}=S[lr];let de;if(typeof ImageData=="function"){const Vr=new Uint8ClampedArray(ye.buffer,ye.byteOffset,ye.byteLength);de=new ImageData(Vr,pr,c,{colorSpace:$})}else de={data:ye,width:pr,height:zr};if(z.length===1)return de;U[lr]=de}return U};return Gs[Symbol.toStringTag]==="Promise"?Gs.then(ur):ur(Gs)}function Cc(){const p={};for(let[d,u]of Object.entries(Ys)){if(d==="parameters"){const c={};for(const[l,w]of Object.entries(u)){const le=c[l]={};for(let[pe,y]of Object.entries(w))typeof y=="object"?"string"in y?y=y.string:y=gr(y):typeof y=="function"&&(y=Tc(y.name)),le[pe]=y}u=c}else typeof u=="object"&&("string"in u?u=u.string:u=u.valueOf());p[d]=u}return p}function gr(p){const d=[];for(let[u,c]of Object.entries(p))typeof c=="object"&&(c=gr(c)),d[u]=c;return d}function Tc(p){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[p]}onmessage=p=>{const[d,u,...c]=p.data;Fc(d,c).then(([l,w])=>{postMessage([d,u,l],{transfer:w})}).catch(l=>{postMessage(["error",u,l])})};async function Fc(p,d){switch(p){case"getKernelInfo":return[Cc(...d)];case"createPartialImageData":const c=await Pc(...d),l=[];if("data"in c&&"width"in c&&"height"in c)l.push(c.data.buffer);else for(const w of Object.entries(c))l.push(c.data.buffer);return[c,l];default:throw new Error(`Unknown function: ${p}`)}}
