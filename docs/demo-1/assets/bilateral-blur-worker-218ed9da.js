import{u as je,a as Pe,b as Ve,c as ke,d as Ie,e as Ce,f as ve,g as xe,h as Ee,i as Ke,j as De,k as Fe,l as Me,m as _e,o as Te,n as $e,p as Be,q as Le}from"./index-d64bc850.js";je();Pe();Ve();ke();Ie();Ce();ve();xe();Ee();Ke();De();Fe();Me();_e();Te();$e();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},p={},B={},L={},I={},G={},H={},C={},c={},b={},J={},N={},v={},S={},y={},l={},Q={},W={},x={},X={},E={},Y={},Z={},K={},ee={},D={},te={},F={},R={},g={},se={},M={},re={},_={},ce={},z={},ae={},ne={},o={},ie={},w={},ue={},T={},q={},le={},oe={},$={},A={},U={},be={},pe={},fe={},Se={},de={},he={},ge={};Object.assign(p,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:5});Object.assign(B,{...t,type:1,name:"[22:0]u8",length:22,byteSize:23,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:4});Object.assign(L,{...t,type:11,name:"*const [22:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:3});Object.assign(I,{...t,type:11,name:"*const *const [22:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:2});Object.assign(G,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:8});Object.assign(H,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:7});Object.assign(C,{...t,type:11,name:"*const *const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:6});Object.assign(c,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:10});Object.assign(b,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:9});Object.assign(J,{...t,type:1,name:"[15:0]u8",length:15,byteSize:16,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:13});Object.assign(N,{...t,type:11,name:"*const [15:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:12});Object.assign(v,{...t,type:11,name:"*const *const [15:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:11});Object.assign(S,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:32});Object.assign(y,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:y}],methods:[],template:null},slot:47});Object.assign(l,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:46});Object.assign(Q,{...t,type:1,name:"[54:0]u8",length:54,byteSize:55,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:50});Object.assign(W,{...t,type:11,name:"*const [54:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:49});Object.assign(x,{...t,type:11,name:"*const *const [54:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:48});const Ge=new Uint8Array,He=new Uint8Array([128,252,15,0]),Je=new Uint8Array([252,169,241,210,77,98,80,63]),Ne=new Uint8Array([168,252,15,0]),Qe=new Uint8Array([0,0,0,0,0,0,36,64]),We=new Uint8Array([208,252,15,0]),Xe=new Uint8Array([0,0,0,0,0,0,0,64]),Ye=new Uint8Array([248,252,15,0]),Ze=new Uint8Array([22,33,16,0]),et=new Uint8Array([65,102,102,97,99,116,115,32,116,104,101,32,71,97,117,115,115,105,97,110,32,102,117,110,99,116,105,111,110,32,119,104,105,99,104,32,98,97,115,101,100,32,111,110,32,100,105,115,116,97,110,99,101,46,0]);Object.assign(X,{...t,type:2,name:"Struct0009",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:l},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:l},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:l},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:x}],methods:[],template:{memory:{array:Ge},slots:{0:{structure:l,memory:{array:He},slots:{0:{structure:y,memory:{array:Je}}}},1:{structure:l,memory:{array:Ne},slots:{0:{structure:y,memory:{array:Qe}}}},2:{structure:l,memory:{array:We},slots:{0:{structure:y,memory:{array:Xe}}}},3:{structure:x,memory:{array:Ye},slots:{0:{structure:W,memory:{array:Ze},slots:{0:{structure:Q,memory:{array:et}}}}}}}}},slot:38});Object.assign(E,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:37});Object.assign(Y,{...t,type:1,name:"[76:0]u8",length:76,byteSize:77,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:53});Object.assign(Z,{...t,type:11,name:"*const [76:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:52});Object.assign(K,{...t,type:11,name:"*const *const [76:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:51});const tt=new Uint8Array,st=new Uint8Array([128,252,15,0]),rt=new Uint8Array([252,169,241,210,77,98,80,63]),at=new Uint8Array([168,252,15,0]),nt=new Uint8Array([0,0,0,0,0,0,36,64]),it=new Uint8Array([208,252,15,0]),ut=new Uint8Array([51,51,51,51,51,51,219,63]),lt=new Uint8Array([248,252,15,0]),ot=new Uint8Array([201,32,16,0]),mt=new Uint8Array([65,102,102,101,99,116,115,32,116,104,101,32,71,97,117,115,115,105,97,110,32,102,117,110,99,116,105,111,110,32,119,104,105,99,104,32,98,97,115,101,100,32,111,110,32,99,111,108,111,114,32,99,104,97,110,110,101,108,115,40,105,110,99,108,117,100,105,110,103,32,97,108,112,104,97,41,0]);Object.assign(ee,{...t,type:2,name:"Struct0010",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:l},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:l},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:l},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:K}],methods:[],template:{memory:{array:tt},slots:{0:{structure:l,memory:{array:st},slots:{0:{structure:y,memory:{array:rt}}}},1:{structure:l,memory:{array:at},slots:{0:{structure:y,memory:{array:nt}}}},2:{structure:l,memory:{array:it},slots:{0:{structure:y,memory:{array:ut}}}},3:{structure:K,memory:{array:lt},slots:{0:{structure:Z,memory:{array:ot},slots:{0:{structure:Y,memory:{array:mt}}}}}}}}},slot:40});Object.assign(D,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:39});const yt=new Uint8Array,ct=new Uint8Array([170,170,170,170]),bt=new Uint8Array,pt=new Uint8Array([170,170,170,170]),ft=new Uint8Array;Object.assign(te,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"d",structure:E},{...e,type:8,isRequired:!1,slot:1,name:"r",structure:D}],methods:[],template:{memory:{array:yt},slots:{0:{structure:E,memory:{array:ct},slots:{0:{structure:X,memory:{array:bt}}}},1:{structure:D,memory:{array:pt},slots:{0:{structure:ee,memory:{array:ft}}}}}}},slot:15});Object.assign(F,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:14});const St=new Uint8Array,dt=new Uint8Array([112,248,15,0]),ht=new Uint8Array([4,0,0,0]);Object.assign(R,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:St},slots:{0:{structure:b,memory:{array:dt},slots:{0:{structure:c,memory:{array:ht}}}}}}},slot:42});Object.assign(g,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:41});const gt=new Uint8Array,zt=new Uint8Array([170,170,170,170]),Ot=new Uint8Array;Object.assign(se,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:g}],methods:[],template:{memory:{array:gt},slots:{0:{structure:g,memory:{array:zt},slots:{0:{structure:R,memory:{array:Ot}}}}}}},slot:17});Object.assign(M,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:16});const wt=new Uint8Array,Rt=new Uint8Array([170,170,170,170]),qt=new Uint8Array;Object.assign(re,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:g}],methods:[],template:{memory:{array:wt},slots:{0:{structure:g,memory:{array:Rt},slots:{0:{structure:R,memory:{array:qt}}}}}}},slot:19});Object.assign(_,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:18});const At=new Uint8Array,Ut=new Uint8Array,jt=new Uint8Array([16,37,16,0]),Pt=new Uint8Array([179,36,16,0]),Vt=new Uint8Array([110,101,116,46,111,110,116,104,101,119,105,110,103,115,46,102,105,108,116,101,114,115,0]),kt=new Uint8Array([12,37,16,0]),It=new Uint8Array([160,36,16,0]),Ct=new Uint8Array([65,110,100,121,32,76,105,0]),vt=new Uint8Array([8,37,16,0]),xt=new Uint8Array([1,0,0,0]),Et=new Uint8Array([4,37,16,0]),Kt=new Uint8Array([127,36,16,0]),Dt=new Uint8Array([66,105,108,97,116,101,114,97,108,32,66,108,117,114,46,0]),Ft=new Uint8Array([170,170,170,170]),Mt=new Uint8Array,_t=new Uint8Array([170,170,170,170]),Tt=new Uint8Array,$t=new Uint8Array([170,170,170,170]),Bt=new Uint8Array;Object.assign(ce,{...t,type:2,name:"bilateral-blur.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:At}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:I},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:C},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:b},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:v},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:F},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:M},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:_}],methods:[],template:{memory:{array:Ut},slots:{0:{structure:I,memory:{array:jt},slots:{0:{structure:L,memory:{array:Pt},slots:{0:{structure:B,memory:{array:Vt}}}}}},1:{structure:C,memory:{array:kt},slots:{0:{structure:H,memory:{array:It},slots:{0:{structure:G,memory:{array:Ct}}}}}},2:{structure:b,memory:{array:vt},slots:{0:{structure:c,memory:{array:xt}}}},3:{structure:v,memory:{array:Et},slots:{0:{structure:N,memory:{array:Kt},slots:{0:{structure:J,memory:{array:Dt}}}}}},4:{structure:F,memory:{array:Ft},slots:{0:{structure:te,memory:{array:Mt}}}},5:{structure:M,memory:{array:_t},slots:{0:{structure:se,memory:{array:Tt}}}},6:{structure:_,memory:{array:$t},slots:{0:{structure:re,memory:{array:Bt}}}}}}},slot:1});Object.assign(z,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:24});Object.assign(ae,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:23});Object.assign(ne,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ae}],methods:[],template:null},slot:22});Object.assign(o,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:o}],methods:[],template:null},slot:25});const Lt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ie,{...t,type:9,name:"bilateral-blur.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:c},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:c}],methods:[],template:{memory:{array:Lt}}},slot:26});Object.assign(w,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:27});Object.assign(ue,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:43});const Gt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ht=new Uint8Array,Jt=new Uint8Array([84,36,16,0]),Nt=new Uint8Array([4,0,0,0]);Object.assign(T,{...t,type:2,name:"bilateral-blur.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ne},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:o},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:o},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ie},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:w}],methods:[],template:{memory:{array:Gt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:z},{...e,type:7,isRequired:!1,name:"FPixel",structure:ue},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:Ht},slots:{0:{structure:b,memory:{array:Jt},slots:{0:{structure:c,memory:{array:Nt}}}}}}},slot:21});const Qt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Wt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Re=new Uint8Array([0,0,0,0,0,0,0,0]),Xt=new Uint8Array;Object.assign(q,{...t,type:2,name:"bilateral-blur.KernelInput(u8,bilateral-blur.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:T}],methods:[],template:{memory:{array:Qt},slots:{0:{structure:T,memory:{array:Wt},slots:{0:{structure:ne,memory:{array:Re},address:1047568,slots:{0:{structure:ae,memory:{array:Xt},address:0}}}}}}}},slot:20});Object.assign(le,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:23});Object.assign(oe,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:le}],methods:[],template:null},slot:30});const Yt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Zt=new Uint8Array,es=new Uint8Array([84,36,16,0]),ts=new Uint8Array([4,0,0,0]);Object.assign($,{...t,type:2,name:"bilateral-blur.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:oe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:o},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:o},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ie},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:w}],methods:[],template:{memory:{array:Yt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:z},{...e,type:7,isRequired:!1,name:"FPixel",structure:ue},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:Zt},slots:{0:{structure:b,memory:{array:es},slots:{0:{structure:c,memory:{array:ts}}}}}}},slot:29});const ss=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),rs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),as=new Uint8Array;Object.assign(A,{...t,type:2,name:"bilateral-blur.KernelOutput(u8,bilateral-blur.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:$}],methods:[],template:{memory:{array:ss},slots:{0:{structure:$,memory:{array:rs},slots:{0:{structure:oe,memory:{array:Re},address:1047568,slots:{0:{structure:le,memory:{array:as},address:0}}}}}}}},slot:28});const ns=new Uint8Array([0,0,0,64,154,153,217,62]);Object.assign(U,{...t,type:2,name:"bilateral-blur.KernelParameters(bilateral-blur.kernel)",length:1,byteSize:8,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"d",structure:S},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"r",structure:S}],methods:[],template:{memory:{array:ns}}},slot:31});Object.assign(be,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(bilateral-blur.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:44});Object.assign(pe,{...t,type:7,name:"ErrorSet0000!bilateral-blur.KernelOutput(u8,bilateral-blur.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:A},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:be}],methods:[],template:null},slot:35});Object.assign(fe,{...t,type:3,name:"createOutput",length:1,byteSize:68,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:o},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:o},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:q},{...e,type:6,bitOffset:256,bitSize:64,byteSize:8,slot:3,name:"3",structure:U},{...e,type:6,bitOffset:320,bitSize:224,byteSize:28,slot:4,name:"retval",structure:pe}],methods:[],template:null},slot:33});Object.assign(Se,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(bilateral-blur.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:45});Object.assign(de,{...t,type:7,name:"ErrorSet0001!bilateral-blur.KernelOutput(u8,bilateral-blur.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:A},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Se}],methods:[],template:null},slot:36});Object.assign(he,{...t,type:3,name:"createPartialOutput",length:1,byteSize:76,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:o},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:o},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:o},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:o},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:q},{...e,type:6,bitOffset:320,bitSize:64,byteSize:8,slot:5,name:"5",structure:U},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:6,name:"retval",structure:de}],methods:[],template:null},slot:34});const is=new Uint8Array,us={argStruct:fe,thunk:8,name:"createOutput"},ls={argStruct:he,thunk:2,name:"createPartialOutput"};Object.assign(ge,{...t,type:2,name:"bilateral-blur",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:is}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ce},{...e,type:7,isRequired:!1,name:"Input",structure:q},{...e,type:7,isRequired:!1,name:"Output",structure:A},{...e,type:7,isRequired:!1,name:"Parameters",structure:U}],methods:[us,ls],template:null},slot:0});const os=[p,B,L,I,G,H,C,c,b,J,N,v,S,y,l,Q,W,x,X,E,Y,Z,K,ee,D,te,F,R,g,se,M,re,_,ce,z,ae,ne,o,ie,w,ue,T,q,le,oe,$,A,U,be,pe,fe,Se,de,he,ge],ms=Be(os),ys=ge.constructor,cs=(async()=>{const n=new URL("bilateral-blur-55dbaa76.wasm",import.meta.url).href;return fetch(n)})();Le(cs,{...ms,writeBack:!0});const{createOutput:zs,createPartialOutput:bs,kernel:ye,Input:ps,Output:Os,Parameters:ws}=ys;function fs(n,u,r,s,a={},d={}){if(Array.isArray(a)){const f=a;a={};for(const[m,h]of Object.keys(ye.inputImages).entries())a[h]=f[m]}const j=new ps(void 0),P=Object.keys(ye.inputImages),i=[];let O;for(const f of P){let m=a[f];if(m||(P.length===1&&["data","width","height"].every(h=>!!a[h])?m=a:i.push(f)),j[f]=m,O){if(m.colorSpace!==O)throw new Error(`Input images must all use the same color space: ${O}`)}else O=m.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const me=bs(n,u,r,s,j,d),ze=f=>{const m=Object.keys(f),h={};for(const Oe of m){const{data:{typedArray:V},width:we,height:Ae}=f[Oe];let k;if(typeof ImageData=="function"){const Ue=new Uint8ClampedArray(V.buffer,V.byteOffset,V.byteLength);k=new ImageData(Ue,we,s,{colorSpace:O})}else k={data:V,width:we,height:Ae};if(m.length===1)return k;h[Oe]=k}return h};return me[Symbol.toStringTag]==="Promise"?me.then(ze):ze(me)}function Ss(){const n={};for(let[u,r]of Object.entries(ye)){if(u==="parameters"){const s={};for(const[a,d]of Object.entries(r)){const j=s[a]={};for(let[P,i]of Object.entries(d))typeof i=="object"?"string"in i?i=i.string:i=qe(i):typeof i=="function"&&(i=ds(i.name)),j[P]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[u]=r}return n}function qe(n){const u=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=qe(s)),u[r]=s;return u}function ds(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[u,r,...s]=n.data;hs(u,s).then(([a,d])=>{postMessage([u,r,a],{transfer:d})}).catch(a=>{postMessage(["error",r,a])})};async function hs(n,u){switch(n){case"getKernelInfo":return[Ss(...u)];case"createPartialImageData":const s=await fs(...u),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const d of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
