import{u as je,a as Ae,b as Ue,d as Pe,c as Ve,e as _e,f as Ie,g as ke,h as xe,i as ve,j as Ce,k as Ee,l as Ke,m as Fe,n as De,o as Te,p as Me,q as $e,r as Be}from"./index-778418ea.js";je();Ae();Ue();Pe();Ve();_e();Ie();ke();xe();ve();Ce();Ee();Ke();Fe();De();Te();Me();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},p={},L={},G={},x={},H={},J={},v={},o={},b={},N={},Q={},C={},S={},f={},y={},W={},X={},E={},Y={},K={},Z={},F={},D={},j={},z={},ee={},T={},te={},M={},le={},O={},se={},re={},u={},ae={},q={},w={},ne={},$={},A={},ie={},me={},B={},U={},P={},ce={},ye={},pe={},be={},fe={},de={},ge={};Object.assign(p,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:5});Object.assign(L,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:4});Object.assign(G,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:3});Object.assign(x,{...t,type:11,name:"**const [7:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:2});Object.assign(H,{...t,type:1,name:"[16:0]u8",length:16,byteSize:17,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:8});Object.assign(J,{...t,type:11,name:"*const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:7});Object.assign(v,{...t,type:11,name:"**const [16:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:6});Object.assign(o,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:o}],methods:[],template:null},slot:10});Object.assign(b,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:o}],methods:[],template:null},slot:9});Object.assign(N,{...t,type:1,name:"[27:0]u8",length:27,byteSize:28,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:13});Object.assign(Q,{...t,type:11,name:"*const [27:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:12});Object.assign(C,{...t,type:11,name:"**const [27:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:11});Object.assign(S,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:33});Object.assign(f,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:f}],methods:[],template:null},slot:46});Object.assign(y,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:f}],methods:[],template:null},slot:45});Object.assign(W,{...t,type:1,name:"[6:0]u8",length:6,byteSize:7,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:49});Object.assign(X,{...t,type:11,name:"*const [6:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:48});Object.assign(E,{...t,type:11,name:"*const *const [6:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:47});const Le=new Uint8Array([]),Ge=new Uint8Array([72,30,16,0]),He=new Uint8Array([0,0,0,0,0,0,0,0]),Je=new Uint8Array([64,30,16,0]),Ne=new Uint8Array([0,0,0,0,0,0,20,64]),Qe=new Uint8Array([56,30,16,0]),We=new Uint8Array([0,0,0,0,0,0,224,63]),Xe=new Uint8Array([52,30,16,0]),Ye=new Uint8Array([80,30,16,0]),Ze=new Uint8Array([97,109,111,117,110,116,0]);Object.assign(Y,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 0.5, comptime description: *const [6:0]u8 = "amount"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:y},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:y},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:y},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:E}],methods:[],template:{memory:{array:Le},slots:{0:{structure:y,memory:{array:Ge},slots:{0:{structure:f,memory:{array:He},address:1056328}}},1:{structure:y,memory:{array:Je},slots:{0:{structure:f,memory:{array:Ne},address:1056320}}},2:{structure:y,memory:{array:Qe},slots:{0:{structure:f,memory:{array:We},address:1056312}}},3:{structure:E,memory:{array:Xe},slots:{0:{structure:X,memory:{array:Ye},address:1056308,slots:{0:{structure:W,memory:{array:Ze},address:1056336}}}}}}}},slot:39});Object.assign(K,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 0.5, comptime description: *const [6:0]u8 = "amount"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:38});const et=new Uint8Array([]),tt=new Uint8Array([170,170,170,170]),h=new Uint8Array([]);Object.assign(Z,{...t,type:2,name:'struct{comptime amount: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 0.5, comptime description: *const [6:0]u8 = "amount"} = .{.type = f32, .minValue = 0, .maxValue = 5, .defaultValue = 0.5, .description = "amount"}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"amount",structure:K}],methods:[],template:{memory:{array:et},slots:{0:{structure:K,memory:{array:tt},slots:{0:{structure:Y,memory:{array:h},address:-1431655766}}}}}},slot:15});Object.assign(F,{...t,type:11,name:'*struct{comptime amount: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 0.5, comptime description: *const [6:0]u8 = "amount"} = .{.type = f32, .minValue = 0, .maxValue = 5, .defaultValue = 0.5, .description = "amount"}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:14});Object.assign(D,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:o}],methods:[],template:null},slot:50});const st=new Uint8Array([]),rt=new Uint8Array([48,30,16,0]),at=new Uint8Array([4,0,0,0]);Object.assign(j,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:D}],methods:[],template:{memory:{array:st},slots:{0:{structure:D,memory:{array:rt},slots:{0:{structure:o,memory:{array:at},address:1056304}}}}}},slot:41});Object.assign(z,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:j}],methods:[],template:null},slot:40});const nt=new Uint8Array([]),it=new Uint8Array([170,170,170,170]);Object.assign(ee,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:z}],methods:[],template:{memory:{array:nt},slots:{0:{structure:z,memory:{array:it},slots:{0:{structure:j,memory:{array:h},address:-1431655766}}}}}},slot:17});Object.assign(T,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:16});const mt=new Uint8Array([]),ut=new Uint8Array([170,170,170,170]);Object.assign(te,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:z}],methods:[],template:{memory:{array:mt},slots:{0:{structure:z,memory:{array:ut},slots:{0:{structure:j,memory:{array:h},address:-1431655766}}}}}},slot:19});Object.assign(M,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:18});const ot=new Uint8Array([]),lt=new Uint8Array([]),ct=new Uint8Array([68,249,15,0]),yt=new Uint8Array([135,41,16,0]),pt=new Uint8Array([115,109,117,100,103,101,114,0]),bt=new Uint8Array([132,249,15,0]),ft=new Uint8Array([210,41,16,0]),dt=new Uint8Array([70,114,97,110,107,32,82,101,105,116,98,101,114,103,101,114,0]),gt=new Uint8Array([196,249,15,0]),ht=new Uint8Array([1,0,0,0]),St=new Uint8Array([28,250,15,0]),zt=new Uint8Array([182,41,16,0]),Ot=new Uint8Array([103,101,110,101,114,97,116,101,115,32,97,32,115,109,117,100,103,101,100,32,112,97,116,116,101,114,110,0]),Rt=new Uint8Array([170,170,170,170]),qt=new Uint8Array([170,170,170,170]),wt=new Uint8Array([170,170,170,170]);Object.assign(le,{...t,type:2,name:"smudger.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ot}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:x},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:v},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:b},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:C},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:F},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:T},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:M}],methods:[],template:{memory:{array:lt},slots:{0:{structure:x,memory:{array:ct},slots:{0:{structure:G,memory:{array:yt},slots:{0:{structure:L,memory:{array:pt},address:1059207}}}}},1:{structure:v,memory:{array:bt},slots:{0:{structure:J,memory:{array:ft},slots:{0:{structure:H,memory:{array:dt},address:1059282}}}}},2:{structure:b,memory:{array:gt},slots:{0:{structure:o,memory:{array:ht}}}},3:{structure:C,memory:{array:St},slots:{0:{structure:Q,memory:{array:zt},slots:{0:{structure:N,memory:{array:Ot},address:1059254}}}}},4:{structure:F,memory:{array:Rt},slots:{0:{structure:Z,memory:{array:h},address:-1431655766}}},5:{structure:T,memory:{array:qt},slots:{0:{structure:ee,memory:{array:h},address:-1431655766}}},6:{structure:M,memory:{array:wt},slots:{0:{structure:te,memory:{array:h},address:-1431655766}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:24});Object.assign(se,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(re,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:se}],methods:[],template:null},slot:22});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:25});const jt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ae,{...t,type:9,name:"smudger.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:o},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:o}],methods:[],template:{memory:{array:jt}}},slot:26});Object.assign(q,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:q}],methods:[],template:null},slot:27});Object.assign(w,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:28});Object.assign(ne,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:42});const At=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ut=new Uint8Array([]),Pt=new Uint8Array([104,253,15,0]),Vt=new Uint8Array([4,0,0,0]);Object.assign($,{...t,type:2,name:"smudger.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:re},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ae},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:q},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:w}],methods:[],template:{memory:{array:At}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:ne},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:Ut},slots:{0:{structure:b,memory:{array:Pt},slots:{0:{structure:o,memory:{array:Vt}}}}}}},slot:21});const _t=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),It=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),kt=new Uint8Array([0,0,0,0,0,0,0,0]),he=new Uint8Array([]);Object.assign(A,{...t,type:2,name:"smudger.KernelInput(u8,smudger.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:$}],methods:[],template:{memory:{array:_t},slots:{0:{structure:$,memory:{array:It},slots:{0:{structure:re,memory:{array:kt},slots:{0:{structure:se,memory:{array:he}}}}}}}}},slot:20});Object.assign(ie,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(me,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ie}],methods:[],template:null},slot:31});const xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),vt=new Uint8Array([]),Ct=new Uint8Array([104,253,15,0]),Et=new Uint8Array([4,0,0,0]);Object.assign(B,{...t,type:2,name:"smudger.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:me},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ae},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:q},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:w}],methods:[],template:{memory:{array:xt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:ne},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:vt},slots:{0:{structure:b,memory:{array:Ct},slots:{0:{structure:o,memory:{array:Et}}}}}}},slot:30});const Kt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ft=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Dt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(U,{...t,type:2,name:"smudger.KernelOutput(u8,smudger.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:B}],methods:[],template:{memory:{array:Kt},slots:{0:{structure:B,memory:{array:Ft},slots:{0:{structure:me,memory:{array:Dt},slots:{0:{structure:ie,memory:{array:he}}}}}}}}},slot:29});const Tt=new Uint8Array([0,0,0,63]);Object.assign(P,{...t,type:2,name:"smudger.KernelParameters(smudger.kernel)",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"amount",structure:S}],methods:[],template:{memory:{array:Tt}}},slot:32});Object.assign(ce,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(smudger.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:43});Object.assign(ye,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(smudger.createOutput)).Fn.return_type.?).ErrorUnion.error_set!smudger.KernelOutput(u8,smudger.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ce}],methods:[],template:null},slot:36});Object.assign(pe,{...t,type:3,name:"createOutput",length:1,byteSize:64,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:A},{...e,type:6,bitOffset:256,bitSize:32,byteSize:4,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:288,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ye}],methods:[],template:null},slot:34});Object.assign(be,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(smudger.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:44});Object.assign(fe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(smudger.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!smudger.KernelOutput(u8,smudger.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:be}],methods:[],template:null},slot:37});Object.assign(de,{...t,type:3,name:"createPartialOutput",length:1,byteSize:72,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:A},{...e,type:6,bitOffset:320,bitSize:32,byteSize:4,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:352,bitSize:224,byteSize:28,slot:6,name:"retval",structure:fe}],methods:[],template:null},slot:35});const Mt={argStruct:pe,thunk:7,name:"createOutput"},$t={argStruct:de,thunk:2,name:"createPartialOutput"};Object.assign(ge,{...t,type:2,name:"smudger",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:he}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:le},{...e,type:7,isRequired:!1,name:"Input",structure:A},{...e,type:7,isRequired:!1,name:"Output",structure:U},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[Mt,$t],template:null},slot:0});const Bt=[p,L,G,x,H,J,v,o,b,N,Q,C,S,f,y,W,X,E,Y,K,Z,F,D,j,z,ee,T,te,M,le,O,se,re,u,ae,q,w,ne,$,A,ie,me,B,U,P,ce,ye,pe,be,fe,de,ge],Lt=$e(Bt),Gt=ge.constructor,Ht=(async()=>{const n=new URL("smudger-866aa9a2.wasm",import.meta.url).href;return fetch(n)})();Be(Ht,{...Lt,writeBack:!0});const{createOutput:es,createPartialOutput:Jt,kernel:oe,Input:Nt,Output:ts,Parameters:ss}=Gt;function Qt(n,m,r,s,a={},d={}){if(Array.isArray(a)){const c=a;a={};for(const[l,g]of Object.keys(oe.inputImages).entries())a[g]=c[l]}const V=new Nt(void 0),_=Object.keys(oe.inputImages),i=[];let R;for(const c of _){let l=a[c];if(l||(_.length===1&&["data","width","height"].every(g=>!!a[g])?l=a:i.push(c)),V[c]=l,R){if(l.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=l.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const ue=Jt(n,m,r,s,V,d),Se=c=>{const l=Object.keys(c),g={};for(const ze of l){const{data:{typedArray:I},width:Oe,height:qe}=c[ze];let k;if(typeof ImageData=="function"){const we=new Uint8ClampedArray(I.buffer,I.byteOffset,I.byteLength);k=new ImageData(we,Oe,s,{colorSpace:R})}else k={data:I,width:Oe,height:qe};if(l.length===1)return k;g[ze]=k}return g};return ue[Symbol.toStringTag]==="Promise"?ue.then(Se):Se(ue)}function Wt(){const n={};for(let[m,r]of Object.entries(oe)){if(m==="parameters"){const s={};for(const[a,d]of Object.entries(r)){const V=s[a]={};for(let[_,i]of Object.entries(d))typeof i=="object"?"string"in i?i=i.string:i=Re(i):typeof i=="function"&&(i=Xt(i.name)),V[_]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[m]=r}return n}function Re(n){const m=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=Re(s)),m[r]=s;return m}function Xt(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[m,r,...s]=n.data;Yt(m,s).then(([a,d])=>{postMessage([m,r,a],{transfer:d})}).catch(a=>{postMessage(["error",r,a])})};async function Yt(n,m){switch(n){case"getKernelInfo":return[Wt(...m)];case"createPartialImageData":const s=await Qt(...m),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const d of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
