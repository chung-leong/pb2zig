import{u as ks,a as Ps,b as Vs,c as Is,d as Rs,e as qs,f as vs,g as Es,h as xs,i as Cs,j as Ks,k as _s,l as Ds,m as Fs,n as Ms,p as Ts,o as $s,q as Ls,r as Bs,s as Gs}from"./index-25a52593.js";ks();Ks();_s();Ps();Vs();Ds();Fs();Ms();Ts();Is();Rs();qs();vs();$s();Gs();Es();Ls();xs();Cs();const e={constructor:null,typedArray:null,type:0,name:void 0,byteSize:0,align:0,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null}},t={type:0,isRequired:!1},r={},f={},$={},L={},B={},G={},l={},S={},H={},J={},s={},c={},O={},w={},N={},P={},d={},Q={},W={},X={},Y={},Z={},tt={},et={},A={},st={},rt={},gt={},R={},at={},q={},y={},g={},V={},Ot={},nt={},v={},it={},E={},ot={},x={},C={},I={},ft={},St={},T={},jt={},zt={},ht={},se={},K={},re={},_={},ae={},ne={},ct={},ie={},ut={},oe={},ce={},dt={},ue={},wt={},me={},ye={},At={},mt={},Ut={},kt={},Pt={},be={},Vt={},le={},It={},pe={},ge={},Rt={},Oe={},qt={},fe={},Se={},vt={},Et={},xt={},Ct={},je={},Kt={},ze={},_t={},he={},de={},Dt={},Ft={},Mt={},Tt={},we={},$t={},Lt={},Bt={},Ae={},yt={},Ue={},ke={},Gt={},Pe={},Ht={},Ve={},Ie={},Re={},qe={},ve={},Ee={},xe={},Ce={},Ke={},_e={},De={},Fe={},Me={},Te={},$e={},Le={},Be={},Jt={},Ge={},He={},Nt={},Je={},Qt={},Ne={},Qe={},We={},Xe={},Ye={},Ze={},ts={},Wt={},es={},ss={},rs={},as={},ns={},is={},os={},cs={},us={},ms={},Xt={},ys={},bs={},ls={},ps={},gs={},Os={},fs={},Ss={},js={},zs={},Hs=new Uint8Array,Js=new Uint8Array([0,0,0,0,0,0,0,0]),Ns=new Uint8Array,Qs=new Uint8Array([0,0,0,0,0,0,0,0]),Ws=new Uint8Array,Xs=new Uint8Array([0,0,0,0,0,0,89,64]),Ys=new Uint8Array,Zs=new Uint8Array([0,0,0,0,0,0,89,64]),tr=new Uint8Array,er=new Uint8Array([0,0,0,0,0,0,52,64]),sr=new Uint8Array,rr=new Uint8Array([0,0,0,0,0,0,52,64]),ar=new Uint8Array,nr=new Uint8Array,ir=new Uint8Array,or=new Uint8Array,cr=new Uint8Array,ur=new Uint8Array([0,0,0,0,0,0,240,63]),mr=new Uint8Array,yr=new Uint8Array([0,0,0,0,0,0,240,63]),br=new Uint8Array,lr=new Uint8Array([0,0,0,0,0,0,36,64]),pr=new Uint8Array,gr=new Uint8Array([0,0,0,0,0,0,36,64]),Or=new Uint8Array,fr=new Uint8Array,Sr=new Uint8Array,jr=new Uint8Array,zr=new Uint8Array,hr=new Uint8Array([111,18,131,192,202,33,25,64]),dr=new Uint8Array,wr=new Uint8Array([111,18,131,192,202,33,25,64]),Ar=new Uint8Array,Ur=new Uint8Array,kr=new Uint8Array,Pr=new Uint8Array,Vr=new Uint8Array,Ir=new Uint8Array,Rr=new Uint8Array,qr=new Uint8Array,vr=new Uint8Array([4]),Er=new Uint8Array,xr=new Uint8Array,Cr=new Uint8Array([18,16,0,1]),Kr=new Uint8Array([65,108,108,101,110,32,67,104,111,117,0]),_r=new Uint8Array([32,62,0,1]),Dr=new Uint8Array([0]),Fr=new Uint8Array,Mr=new Uint8Array([1]),Tr=new Uint8Array([57,16,0,1]),$r=new Uint8Array([98,111,120,45,115,104,97,112,101,100,32,114,105,112,112,108,101,32,101,102,102,101,99,116,0]),Lr=new Uint8Array,Br=new Uint8Array,Gr=new Uint8Array,Hr=new Uint8Array([0]),Jr=new Uint8Array([1]),hs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Nr=new Uint8Array,Qr=new Uint8Array,Wr=new Uint8Array,Xr=new Uint8Array,Yr=new Uint8Array([4]),Yt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ds=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Zr=new Uint8Array,ta=new Uint8Array,ea=new Uint8Array,sa=new Uint8Array,ra=new Uint8Array([4]),Zt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),aa=new Uint8Array([0,0,160,65,0,0,160,65,0,0,32,65,0,0,32,65,0,0,0,0,0,0,0,0]),na=new Uint8Array([27,0]),ia=new Uint8Array,oa=new Uint8Array,ca=new Uint8Array,ua=new Uint8Array;Object.assign(se,{slots:{0:K,1:_}});Object.assign(K,{structure:s,memory:{array:Hs},slots:{0:re}});Object.assign(re,{structure:c,memory:{array:Js}});Object.assign(_,{structure:s,memory:{array:Ns},slots:{0:ae}});Object.assign(ae,{structure:c,memory:{array:Qs}});Object.assign(ne,{slots:{0:ct,1:ut}});Object.assign(ct,{structure:s,memory:{array:Ws},slots:{0:ie}});Object.assign(ie,{structure:c,memory:{array:Xs}});Object.assign(ut,{structure:s,memory:{array:Ys},slots:{0:oe}});Object.assign(oe,{structure:c,memory:{array:Zs}});Object.assign(ce,{slots:{0:dt,1:wt}});Object.assign(dt,{structure:s,memory:{array:tr},slots:{0:ue}});Object.assign(ue,{structure:c,memory:{array:er}});Object.assign(wt,{structure:s,memory:{array:sr},slots:{0:me}});Object.assign(me,{structure:c,memory:{array:rr}});Object.assign(ye,{slots:{0:At,1:Ut,2:kt,3:Pt}});Object.assign(At,{structure:r,memory:{array:ar},slots:{0:mt}});Object.assign(mt,{structure:d});Object.assign(Ut,{structure:O,memory:{array:nr},slots:{0:K,1:_}});Object.assign(kt,{structure:w,memory:{array:ir},slots:{0:ct,1:ut}});Object.assign(Pt,{structure:N,memory:{array:or},slots:{0:dt,1:wt}});Object.assign(be,{slots:{0:Vt,1:It}});Object.assign(Vt,{structure:s,memory:{array:cr},slots:{0:le}});Object.assign(le,{structure:c,memory:{array:ur}});Object.assign(It,{structure:s,memory:{array:mr},slots:{0:pe}});Object.assign(pe,{structure:c,memory:{array:yr}});Object.assign(ge,{slots:{0:Rt,1:qt}});Object.assign(Rt,{structure:s,memory:{array:br},slots:{0:Oe}});Object.assign(Oe,{structure:c,memory:{array:lr}});Object.assign(qt,{structure:s,memory:{array:pr},slots:{0:fe}});Object.assign(fe,{structure:c,memory:{array:gr}});Object.assign(Se,{slots:{0:vt,1:Et,2:xt,3:Ct}});Object.assign(vt,{structure:r,memory:{array:Or},slots:{0:mt}});Object.assign(Et,{structure:W,memory:{array:fr},slots:{0:Vt,1:It}});Object.assign(xt,{structure:w,memory:{array:Sr},slots:{0:ct,1:ut}});Object.assign(Ct,{structure:X,memory:{array:jr},slots:{0:Rt,1:qt}});Object.assign(je,{slots:{0:Kt,1:_t}});Object.assign(Kt,{structure:s,memory:{array:zr},slots:{0:ze}});Object.assign(ze,{structure:c,memory:{array:hr}});Object.assign(_t,{structure:s,memory:{array:dr},slots:{0:he}});Object.assign(he,{structure:c,memory:{array:wr}});Object.assign(de,{slots:{0:Dt,1:Ft,2:Mt,3:Tt}});Object.assign(Dt,{structure:r,memory:{array:Ar},slots:{0:mt}});Object.assign(Ft,{structure:O,memory:{array:Ur},slots:{0:K,1:_}});Object.assign(Mt,{structure:Z,memory:{array:kr},slots:{0:Kt,1:_t}});Object.assign(Tt,{structure:O,memory:{array:Pr},slots:{0:K,1:_}});Object.assign(we,{slots:{0:$t,1:Lt,2:Bt}});Object.assign($t,{structure:Q,memory:{array:Vr},slots:{0:At,1:Ut,2:kt,3:Pt}});Object.assign(Lt,{structure:Y,memory:{array:Ir},slots:{0:vt,1:Et,2:xt,3:Ct}});Object.assign(Bt,{structure:tt,memory:{array:Rr},slots:{0:Dt,1:Ft,2:Mt,3:Tt}});Object.assign(Ae,{slots:{0:yt}});Object.assign(yt,{structure:l,memory:{array:qr},slots:{0:Ue}});Object.assign(Ue,{structure:S,memory:{array:vr}});Object.assign(ke,{slots:{0:Gt}});Object.assign(Gt,{structure:A,memory:{array:Er},slots:{0:yt}});Object.assign(Pe,{slots:{0:Ht}});Object.assign(Ht,{structure:A,memory:{array:xr},slots:{0:yt}});Object.assign(Ve,{slots:{0:Ie,1:qe,2:Ee,3:Ce,4:_e,5:De,6:Fe}});Object.assign(Ie,{structure:L,memory:{array:Cr},slots:{0:Re}});Object.assign(Re,{structure:$,memory:{array:Kr},reloc:16781330,const:!0});Object.assign(qe,{structure:G,memory:{array:_r},slots:{0:ve}});Object.assign(ve,{structure:B,memory:{array:Dr},reloc:16793120,const:!0});Object.assign(Ee,{structure:l,memory:{array:Fr},slots:{0:xe}});Object.assign(xe,{structure:S,memory:{array:Mr}});Object.assign(Ce,{structure:J,memory:{array:Tr},slots:{0:Ke}});Object.assign(Ke,{structure:H,memory:{array:$r},reloc:16781369,const:!0});Object.assign(_e,{structure:et,memory:{array:Lr},slots:{0:$t,1:Lt,2:Bt}});Object.assign(De,{structure:st,memory:{array:Br},slots:{0:Gt}});Object.assign(Fe,{structure:rt,memory:{array:Gr},slots:{0:Ht}});Object.assign(Me,{slots:{0:Te,1:$e}});Object.assign(Te,{structure:g,memory:{array:Hr}});Object.assign($e,{structure:g,memory:{array:Jr}});Object.assign(Le,{memory:{array:hs},slots:{0:Be}});Object.assign(Be,{structure:q,memory:{array:hs,offset:0,length:8},slots:{0:Jt}});Object.assign(Jt,{structure:at,memory:{array:Nr},reloc:0,const:!0});Object.assign(Ge,{slots:{0:He,1:Je,2:Ne}});Object.assign(He,{structure:r,memory:{array:Qr},slots:{0:Nt}});Object.assign(Nt,{structure:R});Object.assign(Je,{structure:r,memory:{array:Wr},slots:{0:Qt}});Object.assign(Qt,{structure:Ot});Object.assign(Ne,{structure:l,memory:{array:Xr},slots:{0:Qe}});Object.assign(Qe,{structure:S,memory:{array:Yr}});Object.assign(We,{memory:{array:Yt},slots:{0:Xe}});Object.assign(Xe,{structure:nt,memory:{array:Yt},slots:{0:Ye}});Object.assign(Ye,{structure:q,memory:{array:Yt,offset:0,length:8},slots:{0:Jt}});Object.assign(Ze,{memory:{array:ds},slots:{0:ts}});Object.assign(ts,{structure:E,memory:{array:ds,offset:0,length:8},slots:{0:Wt}});Object.assign(Wt,{structure:it,memory:{array:Zr},reloc:0});Object.assign(es,{slots:{0:ss,1:rs,2:as}});Object.assign(ss,{structure:r,memory:{array:ta},slots:{0:Nt}});Object.assign(rs,{structure:r,memory:{array:ea},slots:{0:Qt}});Object.assign(as,{structure:l,memory:{array:sa},slots:{0:ns}});Object.assign(ns,{structure:S,memory:{array:ra}});Object.assign(is,{memory:{array:Zt},slots:{0:os}});Object.assign(os,{structure:ot,memory:{array:Zt},slots:{0:cs}});Object.assign(cs,{structure:E,memory:{array:Zt,offset:0,length:8},slots:{0:Wt}});Object.assign(us,{memory:{array:aa}});Object.assign(ms,{slots:{0:Xt}});Object.assign(Xt,{structure:I,memory:{array:na}});Object.assign(ys,{slots:{0:Xt}});Object.assign(bs,{slots:{0:ls,1:gs,2:fs,3:js}});Object.assign(ls,{structure:r,memory:{array:ia},slots:{0:ps}});Object.assign(ps,{structure:gt});Object.assign(gs,{structure:r,memory:{array:oa},slots:{0:Os}});Object.assign(Os,{structure:v});Object.assign(fs,{structure:r,memory:{array:ca},slots:{0:Ss}});Object.assign(Ss,{structure:x});Object.assign(js,{structure:r,memory:{array:ua},slots:{0:zs}});Object.assign(zs,{structure:C});const ma={argStruct:St,thunkId:2,name:"createOutput"},ya={argStruct:zt,thunkId:3,name:"createPartialOutput"};Object.assign(r,{...e,name:"type",align:1,instance:{members:[{...t,type:8,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:r}],methods:[]}});Object.assign(f,{...e,name:"u8",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign($,{...e,type:1,name:"[10:0]u8",length:10,byteSize:11,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign(L,{...e,type:13,name:"*const [10:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:7,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[]}});Object.assign(B,{...e,type:1,name:"[0:0]u8",length:0,byteSize:1,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign(G,{...e,type:13,name:"*const [0:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:7,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[]}});Object.assign(l,{...e,name:"comptime_int",align:1,instance:{members:[{...t,type:9,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:l}],methods:[]}});Object.assign(S,{...e,name:"i8",byteSize:1,align:1,instance:{members:[{...t,type:2,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(H,{...e,type:1,name:"[24:0]u8",length:24,byteSize:25,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign(J,{...e,type:13,name:"*const [24:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:7,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[]}});Object.assign(s,{...e,name:"comptime_float",align:1,instance:{members:[{...t,type:9,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:s}],methods:[]}});Object.assign(c,{...e,name:"f64",byteSize:8,align:8,instance:{members:[{...t,type:4,bitOffset:0,bitSize:64,byteSize:8,structure:c}],methods:[]}});Object.assign(O,{...e,type:2,name:"Struct738220547",align:1,instance:{members:[{...t,type:9,slot:0,name:"0",structure:s},{...t,type:9,slot:1,name:"1",structure:s}],methods:[],template:se}});Object.assign(w,{...e,type:2,name:"Struct2155520631",align:1,instance:{members:[{...t,type:9,slot:0,name:"0",structure:s},{...t,type:9,slot:1,name:"1",structure:s}],methods:[],template:ne}});Object.assign(N,{...e,type:2,name:"Struct1331017668",align:1,instance:{members:[{...t,type:9,slot:0,name:"0",structure:s},{...t,type:9,slot:1,name:"1",structure:s}],methods:[],template:ce}});Object.assign(P,{...e,name:"f32",byteSize:4,align:4,instance:{members:[{...t,type:4,bitOffset:0,bitSize:32,byteSize:4,structure:P}],methods:[]}});Object.assign(d,{...e,type:15,name:"@Vector(2, f32)",length:2,byteSize:8,align:8,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:P}],methods:[]}});Object.assign(Q,{...e,type:2,name:"Struct2584677341",align:1,instance:{members:[{...t,type:9,slot:0,name:"type",structure:r},{...t,type:9,slot:1,name:"minValue",structure:O},{...t,type:9,slot:2,name:"maxValue",structure:w},{...t,type:9,slot:3,name:"defaultValue",structure:N}],methods:[],template:ye}});Object.assign(W,{...e,type:2,name:"Struct2999377579",align:1,instance:{members:[{...t,type:9,slot:0,name:"0",structure:s},{...t,type:9,slot:1,name:"1",structure:s}],methods:[],template:be}});Object.assign(X,{...e,type:2,name:"Struct1464340365",align:1,instance:{members:[{...t,type:9,slot:0,name:"0",structure:s},{...t,type:9,slot:1,name:"1",structure:s}],methods:[],template:ge}});Object.assign(Y,{...e,type:2,name:"Struct2790032524",align:1,instance:{members:[{...t,type:9,slot:0,name:"type",structure:r},{...t,type:9,slot:1,name:"minValue",structure:W},{...t,type:9,slot:2,name:"maxValue",structure:w},{...t,type:9,slot:3,name:"defaultValue",structure:X}],methods:[],template:Se}});Object.assign(Z,{...e,type:2,name:"Struct3848840858",align:1,instance:{members:[{...t,type:9,slot:0,name:"0",structure:s},{...t,type:9,slot:1,name:"1",structure:s}],methods:[],template:je}});Object.assign(tt,{...e,type:2,name:"Struct3860118072",align:1,instance:{members:[{...t,type:9,slot:0,name:"type",structure:r},{...t,type:9,slot:1,name:"minValue",structure:O},{...t,type:9,slot:2,name:"maxValue",structure:Z},{...t,type:9,slot:3,name:"defaultValue",structure:O}],methods:[],template:de}});Object.assign(et,{...e,type:2,name:"Struct3075365331",align:1,instance:{members:[{...t,type:9,slot:0,name:"amplitude",structure:Q},{...t,type:9,slot:1,name:"wavelength",structure:Y},{...t,type:9,slot:2,name:"phase",structure:tt}],methods:[],template:we}});Object.assign(A,{...e,type:2,name:"Struct3832472641",align:1,instance:{members:[{...t,type:9,slot:0,name:"channels",structure:l}],methods:[],template:Ae}});Object.assign(st,{...e,type:2,name:"Struct2242867897",align:1,instance:{members:[{...t,type:9,slot:0,name:"src",structure:A}],methods:[],template:ke}});Object.assign(rt,{...e,type:2,name:"Struct172100005",align:1,instance:{members:[{...t,type:9,slot:0,name:"dst",structure:A}],methods:[],template:Pe}});Object.assign(gt,{...e,type:2,name:"ripple-blocks.kernel",align:1,static:{members:[{...t,type:9,slot:0,name:"namespace",structure:L},{...t,type:9,slot:1,name:"vendor",structure:G},{...t,type:9,slot:2,name:"version",structure:l},{...t,type:9,slot:3,name:"description",structure:J},{...t,type:9,slot:4,name:"parameters",structure:et},{...t,type:9,slot:5,name:"inputImages",structure:st},{...t,type:9,slot:6,name:"outputImages",structure:rt}],methods:[],template:Ve}});Object.assign(R,{...e,type:15,name:"@Vector(4, u8)",length:4,byteSize:4,align:4,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign(at,{...e,type:14,name:"[_]const @Vector(4, u8)",length:0,byteSize:4,align:4,instance:{members:[{...t,type:7,bitSize:32,byteSize:4,structure:R}],methods:[]}});Object.assign(q,{...e,type:13,name:"[]const @Vector(4, u8)",byteSize:8,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:7,bitSize:64,byteSize:8,slot:0,structure:at}],methods:[]}});Object.assign(y,{...e,name:"u32",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[]}});Object.assign(g,{...e,type:11,name:"ripple-blocks.ColorSpace",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:8,byteSize:1}],methods:[]},static:{members:[{...t,type:9,slot:0,name:"srgb",structure:g},{...t,type:9,slot:1,name:"display-p3",structure:g}],methods:[],template:Me}});Object.assign(V,{...e,name:"usize",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:V}],methods:[]}});Object.assign(Ot,{...e,type:15,name:"@Vector(4, f32)",length:4,byteSize:16,align:16,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:P}],methods:[]}});Object.assign(nt,{...e,type:2,name:"ripple-blocks.Image(u8,4,false)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:7,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:q},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:y},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:y},{...t,type:5,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:g},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:V}],methods:[],template:Le},static:{members:[{...t,type:9,slot:0,name:"Pixel",structure:r},{...t,type:9,slot:1,name:"FPixel",structure:r},{...t,type:9,slot:2,name:"channels",structure:l}],methods:[],template:Ge}});Object.assign(v,{...e,type:2,name:"ripple-blocks.KernelInput(u8,ripple-blocks.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:nt}],methods:[],template:We}});Object.assign(it,{...e,type:14,name:"[_]@Vector(4, u8)",length:0,byteSize:4,align:4,instance:{members:[{...t,type:7,bitSize:32,byteSize:4,structure:R}],methods:[]}});Object.assign(E,{...e,type:13,name:"[]@Vector(4, u8)",byteSize:8,align:4,hasPointer:!0,instance:{members:[{...t,type:7,bitSize:64,byteSize:8,slot:0,structure:it}],methods:[]}});Object.assign(ot,{...e,type:2,name:"ripple-blocks.Image(u8,4,true)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:7,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:E},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:y},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:y},{...t,type:5,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:g},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:V}],methods:[],template:Ze},static:{members:[{...t,type:9,slot:0,name:"Pixel",structure:r},{...t,type:9,slot:1,name:"FPixel",structure:r},{...t,type:9,slot:2,name:"channels",structure:l}],methods:[],template:es}});Object.assign(x,{...e,type:2,name:"ripple-blocks.KernelOutput(u8,ripple-blocks.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:ot}],methods:[],template:is}});Object.assign(C,{...e,type:2,name:"ripple-blocks.KernelParameters(ripple-blocks.kernel)",byteSize:24,align:8,instance:{members:[{...t,type:7,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"amplitude",structure:d},{...t,type:7,bitOffset:64,bitSize:64,byteSize:8,slot:1,name:"wavelength",structure:d},{...t,type:7,bitOffset:128,bitSize:64,byteSize:8,slot:2,name:"phase",structure:d}],methods:[],template:us}});Object.assign(I,{...e,type:10,name:"@typeInfo(@typeInfo(@TypeOf(ripple-blocks.createOutput)).Fn.return_type.?).ErrorUnion.error_set",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2}],methods:[]},static:{members:[{...t,type:9,slot:0,name:"OutOfMemory",structure:I}],methods:[],template:ms}});Object.assign(ft,{...e,type:9,name:"ErrorSet1833351990!ripple-blocks.KernelOutput(u8,ripple-blocks.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:x},{...t,type:6,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:I}],methods:[]}});Object.assign(St,{...e,type:5,name:"createOutput",byteSize:88,align:8,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:192,bitSize:32,byteSize:4,slot:3,name:"0",structure:y},{...t,type:3,isRequired:!0,bitOffset:224,bitSize:32,byteSize:4,slot:4,name:"1",structure:y},{...t,type:7,isRequired:!0,bitOffset:256,bitSize:192,byteSize:24,slot:0,name:"2",structure:v},{...t,type:7,isRequired:!0,bitOffset:0,bitSize:192,byteSize:24,slot:1,name:"3",structure:C},{...t,type:7,isRequired:!0,bitOffset:448,bitSize:224,byteSize:28,slot:2,name:"retval",structure:ft}],methods:[]}});Object.assign(T,{...e,type:10,name:"@typeInfo(@typeInfo(@TypeOf(ripple-blocks.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2}],methods:[]},static:{members:[{...t,type:9,slot:0,name:"OutOfMemory",structure:T}],methods:[],template:ys}});Object.assign(jt,{...e,type:9,name:"ErrorSet2763117649!ripple-blocks.KernelOutput(u8,ripple-blocks.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:x},{...t,type:6,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:T}],methods:[]}});Object.assign(zt,{...e,type:5,name:"createPartialOutput",byteSize:96,align:8,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:192,bitSize:32,byteSize:4,slot:3,name:"0",structure:y},{...t,type:3,isRequired:!0,bitOffset:224,bitSize:32,byteSize:4,slot:4,name:"1",structure:y},{...t,type:3,isRequired:!0,bitOffset:256,bitSize:32,byteSize:4,slot:5,name:"2",structure:y},{...t,type:3,isRequired:!0,bitOffset:288,bitSize:32,byteSize:4,slot:6,name:"3",structure:y},{...t,type:7,isRequired:!0,bitOffset:320,bitSize:192,byteSize:24,slot:0,name:"4",structure:v},{...t,type:7,isRequired:!0,bitOffset:0,bitSize:192,byteSize:24,slot:1,name:"5",structure:C},{...t,type:7,isRequired:!0,bitOffset:512,bitSize:224,byteSize:28,slot:2,name:"retval",structure:jt}],methods:[]}});Object.assign(ht,{...e,type:2,name:"ripple-blocks",align:1,static:{members:[{...t,type:9,slot:0,name:"kernel",structure:r},{...t,type:9,slot:1,name:"Input",structure:r},{...t,type:9,slot:2,name:"Output",structure:r},{...t,type:9,slot:3,name:"Parameters",structure:r}],methods:[ma,ya],template:bs}});const ba=[r,f,$,L,B,G,l,S,H,J,s,c,O,w,N,P,d,Q,W,X,Y,Z,tt,et,A,st,rt,gt,R,at,q,y,g,V,Ot,nt,v,it,E,ot,x,C,I,ft,St,T,jt,zt,ht],la=ht,pa={runtimeSafety:!1,littleEndian:!0},bt=Bs();bt.getControlObject();bt.recreateStructures(ba,pa);const ga=(async()=>{const o=new URL("ripple-blocks-16ea519d.wasm",import.meta.url).href;return fetch(o)})();bt.loadModule(ga);bt.linkVariables(!0);const{constructor:Oa}=la,{createPartialOutput:fa,Input:Sa,kernel:pt}=Oa;function ja(o,u,n,a,i={},j={}){const z=[];for(const[b]of pt.inputImages)z.push(b);const U=[];for(const[b]of pt.outputImages)U.push(b);if(Array.isArray(i)){const b=i;i={};for(const[p,h]of z.entries())i[h]=b[p]}const m=new Sa(void 0),D=[];let k;for(const b of z){let p=i[b];if(p||(z.length===1&&["data","width","height"].every(h=>!!i[h])?p=i:D.push(b)),m[b]=p,k){if(p.colorSpace!==k)throw new Error(`Input images must all use the same color space: ${k}`)}else k=p.colorSpace}if(D.length>0)throw new Error(`Missing input image${D.length>1?"s":""}: ${D.join(", ")}`);const lt=fa(o,u,n,a,m,j),te=b=>{const p={};for(const h of U){const{data:{typedArray:F},width:ee,height:As}=b[h];let M;if(typeof ImageData=="function"){const Us=new Uint8ClampedArray(F.buffer,F.byteOffset,F.byteLength);M=new ImageData(Us,ee,a,{colorSpace:k})}else M={data:F,width:ee,height:As};if(U.length===1)return M;p[h]=M}return p};return lt[Symbol.toStringTag]==="Promise"?lt.then(te):te(lt)}function za(){const o={};for(let[u,n]of pt){if(u==="parameters"){const a={};for(const[i,j]of n){const z=a[i]={};for(let[U,m]of j)typeof m=="object"?"string"in m?m=m.string:m=ws(m):typeof m=="function"&&(m=ha(m.name)),z[U]=m}n=a}else typeof n=="object"&&("string"in n?n=n.string:n=n.valueOf());o[u]=n}return o}function ws(o){const u=[];for(let[n,a]of o)typeof a=="object"&&(a=ws(a)),u[n]=a;return u}function ha(o){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[o]}onmessage=o=>{const[u,n,...a]=o.data;da(u,a).then(([i,j])=>{postMessage([u,n,i],{transfer:j})}).catch(i=>{postMessage(["error",n,i])})};async function da(o,u){switch(o){case"getKernelInfo":return[za(...u)];case"createPartialImageData":const a=await ja(...u),i=[];if("data"in a&&"width"in a&&"height"in a)i.push(a.data.buffer);else for(const j of Object.entries(a))i.push(a.data.buffer);return[a,i];default:throw new Error(`Unknown function: ${o}`)}}
