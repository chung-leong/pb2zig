import{u as st,a as rt,b as at,c as it,d as ot,e as nt,f as mt,g as ct,h as lt,i as ut,j as yt,k as pt,l as ft,m as dt,n as bt,o as ht,p as gt,q as St,r as zt}from"./index-778418ea.js";st();rt();at();it();ot();nt();mt();ct();lt();ut();yt();pt();ft();dt();bt();ht();gt();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},y={},ce={},le={},$={},ue={},ye={},B={},p={},g={},pe={},fe={},L={},V={},d={},l={},s={},z={},b={},de={},be={},G={},he={},H={},C={},F={},w={},ge={},J={},Se={},ze={},N={},Oe={},Q={},Re={},W={},S={},qe={},X={},we={},Ae={},Y={},Ue={},Z={},_e={},ee={},Ve={},je={},te={},Pe={},se={},Ce={},re={},ae={},I={},A={},Fe={},ie={},Ie={},oe={},Me={},U={},ke={},ve={},u={},Ee={},j={},P={},ne={},k={},xe={},Ke={},me={},v={},E={},$e={},Be={},Le={},Ge={},He={},Je={},Ne={};Object.assign(y,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:5});Object.assign(ce,{...t,type:1,name:"[22:0]u8",length:22,byteSize:23,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:4});Object.assign(le,{...t,type:11,name:"*const [22:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:3});Object.assign($,{...t,type:11,name:"**const [22:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:2});Object.assign(ue,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:8});Object.assign(ye,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:7});Object.assign(B,{...t,type:11,name:"**const [7:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:6});Object.assign(p,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:10});Object.assign(g,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:9});Object.assign(pe,{...t,type:1,name:"[112:0]u8",length:112,byteSize:113,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:13});Object.assign(fe,{...t,type:11,name:"*const [112:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pe}],methods:[],template:null},slot:12});Object.assign(L,{...t,type:11,name:"**const [112:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:11});Object.assign(V,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:V}],methods:[],template:null},slot:53});Object.assign(d,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:V}],methods:[],template:null},slot:33});Object.assign(l,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:l}],methods:[],template:null},slot:79});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:l}],methods:[],template:null},slot:78});const Ot=new Uint8Array([]),Rt=new Uint8Array([56,30,16,0]),M=new Uint8Array([0,0,0,0,0,0,0,0]),qt=new Uint8Array([48,30,16,0]),q=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(z,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Ot},slots:{0:{structure:s,memory:{array:Rt},slots:{0:{structure:l,memory:{array:M},address:1056312}}},1:{structure:s,memory:{array:qt},slots:{0:{structure:l,memory:{array:q},address:1056304}}}}}},slot:57});Object.assign(b,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:z}],methods:[],template:null},slot:56});Object.assign(de,{...t,type:1,name:"[16:0]u8",length:16,byteSize:17,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:60});Object.assign(be,{...t,type:11,name:"*const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:de}],methods:[],template:null},slot:59});Object.assign(G,{...t,type:11,name:"*const *const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:58});const wt=new Uint8Array([]),At=new Uint8Array([170,170,170,170]),o=new Uint8Array([]),Ut=new Uint8Array([88,30,16,0]),_t=new Uint8Array([223,30,16,0]),Vt=new Uint8Array([70,111,114,32,114,101,100,32,99,104,97,110,110,101,108,46,0]);Object.assign(he,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [16:0]u8 = "For red channel."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:G}],methods:[],template:{memory:{array:wt},slots:{0:{structure:b,memory:{array:At},slots:{0:{structure:z,memory:{array:o},address:-1431655766}}},1:{structure:G,memory:{array:Ut},slots:{0:{structure:be,memory:{array:_t},address:1056344,slots:{0:{structure:de,memory:{array:Vt},address:1056479}}}}}}}},slot:40});Object.assign(H,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [16:0]u8 = "For red channel."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:he}],methods:[],template:null},slot:39});Object.assign(C,{...t,type:1,name:"[18:0]u8",length:18,byteSize:19,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:63});Object.assign(F,{...t,type:11,name:"*const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:C}],methods:[],template:null},slot:62});Object.assign(w,{...t,type:11,name:"*const *const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:F}],methods:[],template:null},slot:61});const jt=new Uint8Array([]),Pt=new Uint8Array([170,170,170,170]),Ct=new Uint8Array([84,30,16,0]),Ft=new Uint8Array([204,30,16,0]),It=new Uint8Array([70,111,114,32,103,114,101,101,110,32,99,104,97,110,110,101,108,46,0]);Object.assign(ge,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [18:0]u8 = "For green channel."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:w}],methods:[],template:{memory:{array:jt},slots:{0:{structure:b,memory:{array:Pt},slots:{0:{structure:z,memory:{array:o},address:-1431655766}}},1:{structure:w,memory:{array:Ct},slots:{0:{structure:F,memory:{array:Ft},address:1056340,slots:{0:{structure:C,memory:{array:It},address:1056460}}}}}}}},slot:42});Object.assign(J,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [18:0]u8 = "For green channel."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ge}],methods:[],template:null},slot:41});Object.assign(Se,{...t,type:1,name:"[17:0]u8",length:17,byteSize:18,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:66});Object.assign(ze,{...t,type:11,name:"*const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Se}],methods:[],template:null},slot:65});Object.assign(N,{...t,type:11,name:"*const *const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ze}],methods:[],template:null},slot:64});const kt=new Uint8Array([]),vt=new Uint8Array([170,170,170,170]),Et=new Uint8Array([80,30,16,0]),xt=new Uint8Array([186,30,16,0]),Kt=new Uint8Array([70,111,114,32,98,108,117,101,32,99,104,97,110,110,101,108,46,0]);Object.assign(Oe,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [17:0]u8 = "For blue channel."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:N}],methods:[],template:{memory:{array:kt},slots:{0:{structure:b,memory:{array:vt},slots:{0:{structure:z,memory:{array:o},address:-1431655766}}},1:{structure:N,memory:{array:Et},slots:{0:{structure:ze,memory:{array:xt},address:1056336,slots:{0:{structure:Se,memory:{array:Kt},address:1056442}}}}}}}},slot:44});Object.assign(Q,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [17:0]u8 = "For blue channel."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Oe}],methods:[],template:null},slot:43});const Dt=new Uint8Array([]),Tt=new Uint8Array([170,170,170,170]),Mt=new Uint8Array([76,30,16,0]),$t=new Uint8Array([167,30,16,0]),Bt=new Uint8Array([70,111,114,32,97,108,112,104,97,32,99,104,97,110,110,101,108,46,0]);Object.assign(Re,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [18:0]u8 = "For alpha channel."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:w}],methods:[],template:{memory:{array:Dt},slots:{0:{structure:b,memory:{array:Tt},slots:{0:{structure:z,memory:{array:o},address:-1431655766}}},1:{structure:w,memory:{array:Mt},slots:{0:{structure:F,memory:{array:$t},address:1056332,slots:{0:{structure:C,memory:{array:Bt},address:1056423}}}}}}}},slot:46});Object.assign(W,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [18:0]u8 = "For alpha channel."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Re}],methods:[],template:null},slot:45});Object.assign(S,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:V}],methods:[],template:null},slot:34});const Lt=new Uint8Array([]),Gt=new Uint8Array([56,30,16,0]),Ht=new Uint8Array([56,30,16,0]),Jt=new Uint8Array([56,30,16,0]),Nt=new Uint8Array([48,30,16,0]);Object.assign(qe,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:s}],methods:[],template:{memory:{array:Lt},slots:{0:{structure:s,memory:{array:Gt},slots:{0:{structure:l,memory:{array:M},address:1056312}}},1:{structure:s,memory:{array:Ht},slots:{0:{structure:l,memory:{array:M},address:1056312}}},2:{structure:s,memory:{array:Jt},slots:{0:{structure:l,memory:{array:M},address:1056312}}},3:{structure:s,memory:{array:Nt},slots:{0:{structure:l,memory:{array:q},address:1056304}}}}}},slot:68});Object.assign(X,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:qe}],methods:[],template:null},slot:67});Object.assign(we,{...t,type:1,name:"[48:0]u8",length:48,byteSize:49,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:71});Object.assign(Ae,{...t,type:11,name:"*const [48:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:we}],methods:[],template:null},slot:70});Object.assign(Y,{...t,type:11,name:"*const *const [48:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ae}],methods:[],template:null},slot:69});const Qt=new Uint8Array([]),Wt=new Uint8Array([170,170,170,170]),Xt=new Uint8Array([72,30,16,0]),Yt=new Uint8Array([118,30,16,0]),Zt=new Uint8Array([67,111,108,111,114,32,102,111,114,32,116,104,114,101,115,104,111,108,100,101,100,32,97,114,101,97,46,99,111,108,111,114,70,111,114,65,108,108,80,97,115,115,101,100,65,114,101,97,0]);Object.assign(Ue,{...t,type:2,name:'struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 0, 0, 1}, comptime description: *const [48:0]u8 = "Color for thresholded area.colorForAllPassedArea"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:X},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:Y}],methods:[],template:{memory:{array:Qt},slots:{0:{structure:X,memory:{array:Wt},slots:{0:{structure:qe,memory:{array:o},address:-1431655766}}},1:{structure:Y,memory:{array:Xt},slots:{0:{structure:Ae,memory:{array:Yt},address:1056328,slots:{0:{structure:we,memory:{array:Zt},address:1056374}}}}}}}},slot:48});Object.assign(Z,{...t,type:11,name:'*const struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 0, 0, 1}, comptime description: *const [48:0]u8 = "Color for thresholded area.colorForAllPassedArea"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ue}],methods:[],template:null},slot:47});const es=new Uint8Array([]),ts=new Uint8Array([48,30,16,0]),ss=new Uint8Array([48,30,16,0]),rs=new Uint8Array([48,30,16,0]),as=new Uint8Array([48,30,16,0]);Object.assign(_e,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:s}],methods:[],template:{memory:{array:es},slots:{0:{structure:s,memory:{array:ts},slots:{0:{structure:l,memory:{array:q},address:1056304}}},1:{structure:s,memory:{array:ss},slots:{0:{structure:l,memory:{array:q},address:1056304}}},2:{structure:s,memory:{array:rs},slots:{0:{structure:l,memory:{array:q},address:1056304}}},3:{structure:s,memory:{array:as},slots:{0:{structure:l,memory:{array:q},address:1056304}}}}}},slot:73});Object.assign(ee,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_e}],methods:[],template:null},slot:72});Object.assign(Ve,{...t,type:1,name:"[25:0]u8",length:25,byteSize:26,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:76});Object.assign(je,{...t,type:11,name:"*const [25:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ve}],methods:[],template:null},slot:75});Object.assign(te,{...t,type:11,name:"*const *const [25:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:je}],methods:[],template:null},slot:74});const is=new Uint8Array([]),os=new Uint8Array([170,170,170,170]),ns=new Uint8Array([68,30,16,0]),ms=new Uint8Array([92,30,16,0]),cs=new Uint8Array([67,111,108,111,114,32,102,111,114,32,97,108,108,32,112,97,115,115,101,100,32,97,114,101,97,0]);Object.assign(Pe,{...t,type:2,name:'struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime description: *const [25:0]u8 = "Color for all passed area"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:ee},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:te}],methods:[],template:{memory:{array:is},slots:{0:{structure:ee,memory:{array:os},slots:{0:{structure:_e,memory:{array:o},address:-1431655766}}},1:{structure:te,memory:{array:ns},slots:{0:{structure:je,memory:{array:ms},address:1056324,slots:{0:{structure:Ve,memory:{array:cs},address:1056348}}}}}}}},slot:50});Object.assign(se,{...t,type:11,name:'*const struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime description: *const [25:0]u8 = "Color for all passed area"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Pe}],methods:[],template:null},slot:49});const ls=new Uint8Array([]),us=new Uint8Array([170,170,170,170]),ys=new Uint8Array([170,170,170,170]),ps=new Uint8Array([170,170,170,170]),fs=new Uint8Array([170,170,170,170]),ds=new Uint8Array([170,170,170,170]),bs=new Uint8Array([170,170,170,170]);Object.assign(Ce,{...t,type:2,name:'struct{comptime threshold0: struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [16:0]u8 = "For red channel."} = .{.type = @Vector(2, f32), .defaultValue = .{0, 1}, .description = "For red channel."}, comptime threshold1: struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [18:0]u8 = "For green channel."} = .{.type = @Vector(2, f32), .defaultValue = .{0, 1}, .description = "For green channel."}, comptime threshold2: struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [17:0]u8 = "For blue channel."} = .{.type = @Vector(2, f32), .defaultValue = .{0, 1}, .description = "For blue channel."}, comptime threshold3: struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [18:0]u8 = "For alpha channel."} = .{.type = @Vector(2, f32), .defaultValue = .{0, 1}, .description = "For alpha channel."}, comptime outputColor1: struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 0, 0, 1}, comptime description: *const [48:0]u8 = "Color for thresholded area.colorForAllPassedArea"} = .{.type = @Vector(4, f32), .defaultValue = .{0, 0, 0, 1}, .description = "Color for thresholded area.colorForAllPassedArea"}, comptime outputColor2: struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime description: *const [25:0]u8 = "Color for all passed area"} = .{.type = @Vector(4, f32), .defaultValue = .{1, 1, 1, 1}, .description = "Color for all passed area"}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"threshold0",structure:H},{...e,type:8,isRequired:!1,slot:1,name:"threshold1",structure:J},{...e,type:8,isRequired:!1,slot:2,name:"threshold2",structure:Q},{...e,type:8,isRequired:!1,slot:3,name:"threshold3",structure:W},{...e,type:8,isRequired:!1,slot:4,name:"outputColor1",structure:Z},{...e,type:8,isRequired:!1,slot:5,name:"outputColor2",structure:se}],methods:[],template:{memory:{array:ls},slots:{0:{structure:H,memory:{array:us},slots:{0:{structure:he,memory:{array:o},address:-1431655766}}},1:{structure:J,memory:{array:ys},slots:{0:{structure:ge,memory:{array:o},address:-1431655766}}},2:{structure:Q,memory:{array:ps},slots:{0:{structure:Oe,memory:{array:o},address:-1431655766}}},3:{structure:W,memory:{array:fs},slots:{0:{structure:Re,memory:{array:o},address:-1431655766}}},4:{structure:Z,memory:{array:ds},slots:{0:{structure:Ue,memory:{array:o},address:-1431655766}}},5:{structure:se,memory:{array:bs},slots:{0:{structure:Pe,memory:{array:o},address:-1431655766}}}}}},slot:15});Object.assign(re,{...t,type:11,name:'*struct{comptime threshold0: struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [16:0]u8 = "For red channel."} = .{.type = @Vector(2, f32), .defaultValue = .{0, 1}, .description = "For red channel."}, comptime threshold1: struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [18:0]u8 = "For green channel."} = .{.type = @Vector(2, f32), .defaultValue = .{0, 1}, .description = "For green channel."}, comptime threshold2: struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [17:0]u8 = "For blue channel."} = .{.type = @Vector(2, f32), .defaultValue = .{0, 1}, .description = "For blue channel."}, comptime threshold3: struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [18:0]u8 = "For alpha channel."} = .{.type = @Vector(2, f32), .defaultValue = .{0, 1}, .description = "For alpha channel."}, comptime outputColor1: struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 0, 0, 1}, comptime description: *const [48:0]u8 = "Color for thresholded area.colorForAllPassedArea"} = .{.type = @Vector(4, f32), .defaultValue = .{0, 0, 0, 1}, .description = "Color for thresholded area.colorForAllPassedArea"}, comptime outputColor2: struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime description: *const [25:0]u8 = "Color for all passed area"} = .{.type = @Vector(4, f32), .defaultValue = .{1, 1, 1, 1}, .description = "Color for all passed area"}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ce}],methods:[],template:null},slot:14});Object.assign(ae,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:77});const hs=new Uint8Array([]),gs=new Uint8Array([64,30,16,0]),Ss=new Uint8Array([4,0,0,0]);Object.assign(I,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:ae}],methods:[],template:{memory:{array:hs},slots:{0:{structure:ae,memory:{array:gs},slots:{0:{structure:p,memory:{array:Ss},address:1056320}}}}}},slot:52});Object.assign(A,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:I}],methods:[],template:null},slot:51});const zs=new Uint8Array([]),Os=new Uint8Array([170,170,170,170]);Object.assign(Fe,{...t,type:2,name:"struct{comptime source: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"source",structure:A}],methods:[],template:{memory:{array:zs},slots:{0:{structure:A,memory:{array:Os},slots:{0:{structure:I,memory:{array:o},address:-1431655766}}}}}},slot:17});Object.assign(ie,{...t,type:11,name:"*struct{comptime source: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Fe}],methods:[],template:null},slot:16});const Rs=new Uint8Array([]),qs=new Uint8Array([170,170,170,170]);Object.assign(Ie,{...t,type:2,name:"struct{comptime target: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"target",structure:A}],methods:[],template:{memory:{array:Rs},slots:{0:{structure:A,memory:{array:qs},slots:{0:{structure:I,memory:{array:o},address:-1431655766}}}}}},slot:19});Object.assign(oe,{...t,type:11,name:"*struct{comptime target: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ie}],methods:[],template:null},slot:18});const ws=new Uint8Array([]),As=new Uint8Array([]),Us=new Uint8Array([44,251,15,0]),_s=new Uint8Array([255,70,16,0]),Vs=new Uint8Array([110,101,116,46,111,110,116,104,101,119,105,110,103,115,46,102,105,108,116,101,114,115,0]),js=new Uint8Array([108,251,15,0]),Ps=new Uint8Array([247,70,16,0]),Cs=new Uint8Array([65,110,100,121,32,76,105,0]),Fs=new Uint8Array([172,251,15,0]),Is=new Uint8Array([1,0,0,0]),ks=new Uint8Array([4,252,15,0]),vs=new Uint8Array([134,70,16,0]),Es=new Uint8Array([84,104,114,101,115,104,111,108,100,105,110,103,32,98,97,115,101,115,32,111,110,32,116,104,101,32,99,104,97,110,110,101,108,115,46,32,79,110,108,121,32,116,104,101,32,112,105,120,101,108,115,32,112,97,115,115,101,100,32,65,76,76,32,116,104,114,101,115,104,111,108,100,115,32,119,105,108,108,32,98,101,32,119,104,105,116,101,32,40,111,114,32,99,111,108,111,114,32,121,111,117,32,99,111,110,102,105,103,101,100,41,46,0]),xs=new Uint8Array([170,170,170,170]),Ks=new Uint8Array([170,170,170,170]),Ds=new Uint8Array([170,170,170,170]);Object.assign(Me,{...t,type:2,name:"channel-threshold.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ws}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:$},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:B},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:g},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:L},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:re},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:ie},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:oe}],methods:[],template:{memory:{array:As},slots:{0:{structure:$,memory:{array:Us},slots:{0:{structure:le,memory:{array:_s},slots:{0:{structure:ce,memory:{array:Vs},address:1066751}}}}},1:{structure:B,memory:{array:js},slots:{0:{structure:ye,memory:{array:Ps},slots:{0:{structure:ue,memory:{array:Cs},address:1066743}}}}},2:{structure:g,memory:{array:Fs},slots:{0:{structure:p,memory:{array:Is}}}},3:{structure:L,memory:{array:ks},slots:{0:{structure:fe,memory:{array:vs},slots:{0:{structure:pe,memory:{array:Es},address:1066630}}}}},4:{structure:re,memory:{array:xs},slots:{0:{structure:Ce,memory:{array:o},address:-1431655766}}},5:{structure:ie,memory:{array:Ks},slots:{0:{structure:Fe,memory:{array:o},address:-1431655766}}},6:{structure:oe,memory:{array:Ds},slots:{0:{structure:Ie,memory:{array:o},address:-1431655766}}}}}},slot:1});Object.assign(U,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:24});Object.assign(ke,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:U}],methods:[],template:null},slot:23});Object.assign(ve,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ke}],methods:[],template:null},slot:22});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:25});const Ts=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Ee,{...t,type:9,name:"channel-threshold.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:p},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:p}],methods:[],template:{memory:{array:Ts}}},slot:26});Object.assign(j,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:j}],methods:[],template:null},slot:27});Object.assign(P,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:P}],methods:[],template:null},slot:28});const Ms=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),$s=new Uint8Array([]),Bs=new Uint8Array([8,250,15,0]),Ls=new Uint8Array([4,0,0,0]);Object.assign(ne,{...t,type:2,name:"channel-threshold.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ve},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Ee},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:j},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:P}],methods:[],template:{memory:{array:Ms}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:U},{...e,type:7,isRequired:!1,name:"FPixel",structure:S},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:g}],methods:[],template:{memory:{array:$s},slots:{0:{structure:g,memory:{array:Bs},slots:{0:{structure:p,memory:{array:Ls}}}}}}},slot:21});const Gs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Hs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Js=new Uint8Array([0,0,0,0,0,0,0,0]),Qe=new Uint8Array([]);Object.assign(k,{...t,type:2,name:"channel-threshold.KernelInput(u8,channel-threshold.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"source",structure:ne}],methods:[],template:{memory:{array:Gs},slots:{0:{structure:ne,memory:{array:Hs},slots:{0:{structure:ve,memory:{array:Js},slots:{0:{structure:ke,memory:{array:Qe}}}}}}}}},slot:20});Object.assign(xe,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:U}],methods:[],template:null},slot:23});Object.assign(Ke,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:xe}],methods:[],template:null},slot:31});const Ns=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Qs=new Uint8Array([]),Ws=new Uint8Array([8,250,15,0]),Xs=new Uint8Array([4,0,0,0]);Object.assign(me,{...t,type:2,name:"channel-threshold.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Ke},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Ee},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:j},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:P}],methods:[],template:{memory:{array:Ns}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:U},{...e,type:7,isRequired:!1,name:"FPixel",structure:S},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:g}],methods:[],template:{memory:{array:Qs},slots:{0:{structure:g,memory:{array:Ws},slots:{0:{structure:p,memory:{array:Xs}}}}}}},slot:30});const Ys=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Zs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),er=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(v,{...t,type:2,name:"channel-threshold.KernelOutput(u8,channel-threshold.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"target",structure:me}],methods:[],template:{memory:{array:Ys},slots:{0:{structure:me,memory:{array:Zs},slots:{0:{structure:Ke,memory:{array:er},slots:{0:{structure:xe,memory:{array:Qe}}}}}}}}},slot:29});const tr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63]);Object.assign(E,{...t,type:2,name:"channel-threshold.KernelParameters(channel-threshold.kernel)",length:1,byteSize:64,align:4,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:256,bitSize:64,byteSize:8,slot:0,name:"threshold0",structure:d},{...e,type:6,isRequired:!1,bitOffset:320,bitSize:64,byteSize:8,slot:1,name:"threshold1",structure:d},{...e,type:6,isRequired:!1,bitOffset:384,bitSize:64,byteSize:8,slot:2,name:"threshold2",structure:d},{...e,type:6,isRequired:!1,bitOffset:448,bitSize:64,byteSize:8,slot:3,name:"threshold3",structure:d},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:128,byteSize:16,slot:4,name:"outputColor1",structure:S},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:128,byteSize:16,slot:5,name:"outputColor2",structure:S}],methods:[],template:{memory:{array:tr}}},slot:32});Object.assign($e,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(channel-threshold.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:54});Object.assign(Be,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(channel-threshold.createOutput)).Fn.return_type.?).ErrorUnion.error_set!channel-threshold.KernelOutput(u8,channel-threshold.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:v},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:$e}],methods:[],template:null},slot:37});Object.assign(Le,{...t,type:3,name:"createOutput",length:1,byteSize:128,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:512,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:544,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:576,bitSize:192,byteSize:24,slot:2,name:"2",structure:k},{...e,type:6,bitOffset:0,bitSize:512,byteSize:64,slot:3,name:"3",structure:E},{...e,type:6,bitOffset:768,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Be}],methods:[],template:null},slot:35});Object.assign(Ge,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(channel-threshold.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:55});Object.assign(He,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(channel-threshold.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!channel-threshold.KernelOutput(u8,channel-threshold.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:v},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Ge}],methods:[],template:null},slot:38});Object.assign(Je,{...t,type:3,name:"createPartialOutput",length:1,byteSize:144,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:512,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:544,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:576,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:608,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:640,bitSize:192,byteSize:24,slot:4,name:"4",structure:k},{...e,type:6,bitOffset:0,bitSize:512,byteSize:64,slot:5,name:"5",structure:E},{...e,type:6,bitOffset:832,bitSize:224,byteSize:28,slot:6,name:"retval",structure:He}],methods:[],template:null},slot:36});const sr={argStruct:Le,thunk:1,name:"createOutput"},rr={argStruct:Je,thunk:4,name:"createPartialOutput"};Object.assign(Ne,{...t,type:2,name:"channel-threshold",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Qe}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:Me},{...e,type:7,isRequired:!1,name:"Input",structure:k},{...e,type:7,isRequired:!1,name:"Output",structure:v},{...e,type:7,isRequired:!1,name:"Parameters",structure:E}],methods:[sr,rr],template:null},slot:0});const ar=[y,ce,le,$,ue,ye,B,p,g,pe,fe,L,V,d,l,s,z,b,de,be,G,he,H,C,F,w,ge,J,Se,ze,N,Oe,Q,Re,W,S,qe,X,we,Ae,Y,Ue,Z,_e,ee,Ve,je,te,Pe,se,Ce,re,ae,I,A,Fe,ie,Ie,oe,Me,U,ke,ve,u,Ee,j,P,ne,k,xe,Ke,me,v,E,$e,Be,Le,Ge,He,Je,Ne],ir=St(ar),or=Ne.constructor,nr=(async()=>{const n=new URL("channel-threshold-8a43d40b.wasm",import.meta.url).href;return fetch(n)})();zt(nr,{...ir,writeBack:!0});const{createOutput:dr,createPartialOutput:mr,kernel:Te,Input:cr,Output:br,Parameters:hr}=or;function lr(n,c,a,r,i={},O={}){if(Array.isArray(i)){const h=i;i={};for(const[f,R]of Object.keys(Te.inputImages).entries())i[R]=h[f]}const x=new cr(void 0),K=Object.keys(Te.inputImages),m=[];let _;for(const h of K){let f=i[h];if(f||(K.length===1&&["data","width","height"].every(R=>!!i[R])?f=i:m.push(h)),x[h]=f,_){if(f.colorSpace!==_)throw new Error(`Input images must all use the same color space: ${_}`)}else _=f.colorSpace}if(m.length>0)throw new Error(`Missing input image${m.length>1?"s":""}: ${m.join(", ")}`);const De=mr(n,c,a,r,x,O),We=h=>{const f=Object.keys(h),R={};for(const Xe of f){const{data:{typedArray:D},width:Ye,height:et}=h[Xe];let T;if(typeof ImageData=="function"){const tt=new Uint8ClampedArray(D.buffer,D.byteOffset,D.byteLength);T=new ImageData(tt,Ye,r,{colorSpace:_})}else T={data:D,width:Ye,height:et};if(f.length===1)return T;R[Xe]=T}return R};return De[Symbol.toStringTag]==="Promise"?De.then(We):We(De)}function ur(){const n={};for(let[c,a]of Object.entries(Te)){if(c==="parameters"){const r={};for(const[i,O]of Object.entries(a)){const x=r[i]={};for(let[K,m]of Object.entries(O))typeof m=="object"?"string"in m?m=m.string:m=Ze(m):typeof m=="function"&&(m=yr(m.name)),x[K]=m}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());n[c]=a}return n}function Ze(n){const c=[];for(let[a,r]of Object.entries(n))typeof r=="object"&&(r=Ze(r)),c[a]=r;return c}function yr(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[c,a,...r]=n.data;pr(c,r).then(([i,O])=>{postMessage([c,a,i],{transfer:O})}).catch(i=>{postMessage(["error",a,i])})};async function pr(n,c){switch(n){case"getKernelInfo":return[ur(...c)];case"createPartialImageData":const r=await lr(...c),i=[];if("data"in r&&"width"in r&&"height"in r)i.push(r.data.buffer);else for(const O of Object.entries(r))i.push(r.data.buffer);return[r,i];default:throw new Error(`Unknown function: ${n}`)}}
