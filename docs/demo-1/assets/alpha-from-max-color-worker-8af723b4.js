import{u as Oe,a as we,b as Re,c as qe,d as je,e as Ae,f as Ue,g as Pe,h as xe,i as ke,j as Ie,k as Ce,l as Ve,m as ve,n as Ee,o as Ke,p as De,q as Fe}from"./index-d64bc850.js";Oe();we();Re();qe();je();Ae();Ue();Pe();xe();ke();Ie();Ce();Ve();ve();Ee();Ke();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},y={},M={},_={},P={},T={},$={},x={},m={},c={},B={},L={},k={},N={},G={},I={},H={},J={},C={},Q={},V={},z={},h={},W={},v={},X={},E={},ie={},S={},Y={},Z={},l={},ee={},g={},K={},te={},D={},O={},se={},re={},F={},w={},R={},oe={},le={},ue={},me={},ce={},ye={},be={};Object.assign(y,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:5});Object.assign(M,{...t,type:1,name:"[12:0]u8",length:12,byteSize:13,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:4});Object.assign(_,{...t,type:11,name:"*const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:M}],methods:[],template:null},slot:3});Object.assign(P,{...t,type:11,name:"*const *const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_}],methods:[],template:null},slot:2});Object.assign(T,{...t,type:1,name:"[26:0]u8",length:26,byteSize:27,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:8});Object.assign($,{...t,type:11,name:"*const [26:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[],template:null},slot:7});Object.assign(x,{...t,type:11,name:"*const *const [26:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:6});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:10});Object.assign(c,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:9});Object.assign(B,{...t,type:1,name:"[39:0]u8",length:39,byteSize:40,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:13});Object.assign(L,{...t,type:11,name:"*const [39:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:12});Object.assign(k,{...t,type:11,name:"*const *const [39:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:11});Object.assign(N,{...t,type:1,name:"[20:0]u8",length:20,byteSize:21,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:16});Object.assign(G,{...t,type:11,name:"*const [20:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:15});Object.assign(I,{...t,type:11,name:"*const *const [20:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:14});Object.assign(H,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:19});Object.assign(J,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:18});Object.assign(C,{...t,type:11,name:"*const *const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:17});const Me=new Uint8Array;Object.assign(Q,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Me}}},slot:21});Object.assign(V,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:20});const _e=new Uint8Array,Te=new Uint8Array([96,250,15,0]),$e=new Uint8Array([4,0,0,0]);Object.assign(z,{...t,type:2,name:"Struct0007",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:_e},slots:{0:{structure:c,memory:{array:Te},slots:{0:{structure:m,memory:{array:$e}}}}}}},slot:43});Object.assign(h,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:z}],methods:[],template:null},slot:42});const Be=new Uint8Array,Le=new Uint8Array([170,170,170,170]),Ne=new Uint8Array;Object.assign(W,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:h}],methods:[],template:{memory:{array:Be},slots:{0:{structure:h,memory:{array:Le},slots:{0:{structure:z,memory:{array:Ne}}}}}}},slot:23});Object.assign(v,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:22});const Ge=new Uint8Array,He=new Uint8Array([170,170,170,170]),Je=new Uint8Array;Object.assign(X,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:h}],methods:[],template:{memory:{array:Ge},slots:{0:{structure:h,memory:{array:He},slots:{0:{structure:z,memory:{array:Je}}}}}}},slot:25});Object.assign(E,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:24});const Qe=new Uint8Array,We=new Uint8Array,Xe=new Uint8Array([228,36,16,0]),Ye=new Uint8Array([131,36,16,0]),Ze=new Uint8Array([65,102,116,101,114,69,102,102,101,99,116,115,0]),et=new Uint8Array([224,36,16,0]),tt=new Uint8Array([93,36,16,0]),st=new Uint8Array([65,100,111,98,101,32,83,121,115,116,101,109,115,32,73,110,99,111,114,112,111,114,97,116,101,100,0]),rt=new Uint8Array([220,36,16,0]),at=new Uint8Array([2,0,0,0]),nt=new Uint8Array([216,36,16,0]),it=new Uint8Array([36,36,16,0]),ot=new Uint8Array([69,115,116,105,109,97,116,101,32,97,108,112,104,97,32,98,97,115,101,100,32,111,110,32,99,111,108,111,114,32,99,104,97,110,110,101,108,115,46,0]),lt=new Uint8Array([212,36,16,0]),ut=new Uint8Array([2,36,16,0]),mt=new Uint8Array([65,108,112,104,97,32,70,114,111,109,32,77,97,120,32,67,111,108,111,114,0]),ct=new Uint8Array([208,36,16,0]),yt=new Uint8Array([237,35,16,0]),bt=new Uint8Array([85,116,105,108,105,116,121,0]),pt=new Uint8Array([170,170,170,170]),ft=new Uint8Array,ht=new Uint8Array([170,170,170,170]),St=new Uint8Array,dt=new Uint8Array([170,170,170,170]),gt=new Uint8Array;Object.assign(ie,{...t,type:2,name:"alpha-from-max-color.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Qe}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:P},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:x},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:c},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:k},{...e,type:6,isRequired:!1,slot:4,name:"displayName",structure:I},{...e,type:6,isRequired:!1,slot:5,name:"category",structure:C},{...e,type:6,isRequired:!1,slot:6,name:"parameters",structure:V},{...e,type:6,isRequired:!1,slot:7,name:"inputImages",structure:v},{...e,type:6,isRequired:!1,slot:8,name:"outputImages",structure:E}],methods:[],template:{memory:{array:We},slots:{0:{structure:P,memory:{array:Xe},slots:{0:{structure:_,memory:{array:Ye},slots:{0:{structure:M,memory:{array:Ze}}}}}},1:{structure:x,memory:{array:et},slots:{0:{structure:$,memory:{array:tt},slots:{0:{structure:T,memory:{array:st}}}}}},2:{structure:c,memory:{array:rt},slots:{0:{structure:m,memory:{array:at}}}},3:{structure:k,memory:{array:nt},slots:{0:{structure:L,memory:{array:it},slots:{0:{structure:B,memory:{array:ot}}}}}},4:{structure:I,memory:{array:lt},slots:{0:{structure:G,memory:{array:ut},slots:{0:{structure:N,memory:{array:mt}}}}}},5:{structure:C,memory:{array:ct},slots:{0:{structure:J,memory:{array:yt},slots:{0:{structure:H,memory:{array:bt}}}}}},6:{structure:V,memory:{array:pt},slots:{0:{structure:Q,memory:{array:ft}}}},7:{structure:v,memory:{array:ht},slots:{0:{structure:W,memory:{array:St}}}},8:{structure:E,memory:{array:dt},slots:{0:{structure:X,memory:{array:gt}}}}}}},slot:1});Object.assign(S,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:30});Object.assign(Y,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:29});Object.assign(Z,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Y}],methods:[],template:null},slot:28});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:31});const zt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ee,{...t,type:9,name:"alpha-from-max-color.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:zt}}},slot:32});Object.assign(g,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:g}],methods:[],template:null},slot:33});Object.assign(K,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:K}],methods:[],template:null},slot:47});Object.assign(te,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:K}],methods:[],template:null},slot:44});const Ot=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),wt=new Uint8Array,Rt=new Uint8Array([184,35,16,0]),qt=new Uint8Array([4,0,0,0]);Object.assign(D,{...t,type:2,name:"alpha-from-max-color.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Z},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ee},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:g}],methods:[],template:{memory:{array:Ot}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:S},{...e,type:7,isRequired:!1,name:"FPixel",structure:te},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:wt},slots:{0:{structure:c,memory:{array:Rt},slots:{0:{structure:m,memory:{array:qt}}}}}}},slot:27});const jt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),At=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Se=new Uint8Array([0,0,0,0,0,0,0,0]),Ut=new Uint8Array;Object.assign(O,{...t,type:2,name:"alpha-from-max-color.KernelInput(u8,alpha-from-max-color.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:D}],methods:[],template:{memory:{array:jt},slots:{0:{structure:D,memory:{array:At},slots:{0:{structure:Z,memory:{array:Se},address:1047568,slots:{0:{structure:Y,memory:{array:Ut},address:0}}}}}}}},slot:26});Object.assign(se,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:29});Object.assign(re,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:se}],methods:[],template:null},slot:36});const Pt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),xt=new Uint8Array,kt=new Uint8Array([184,35,16,0]),It=new Uint8Array([4,0,0,0]);Object.assign(F,{...t,type:2,name:"alpha-from-max-color.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:re},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ee},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:g}],methods:[],template:{memory:{array:Pt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:S},{...e,type:7,isRequired:!1,name:"FPixel",structure:te},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:xt},slots:{0:{structure:c,memory:{array:kt},slots:{0:{structure:m,memory:{array:It}}}}}}},slot:35});const Ct=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Vt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),vt=new Uint8Array;Object.assign(w,{...t,type:2,name:"alpha-from-max-color.KernelOutput(u8,alpha-from-max-color.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:F}],methods:[],template:{memory:{array:Ct},slots:{0:{structure:F,memory:{array:Vt},slots:{0:{structure:re,memory:{array:Se},address:1047568,slots:{0:{structure:se,memory:{array:vt},address:0}}}}}}}},slot:34});const Et=new Uint8Array;Object.assign(R,{...t,type:2,name:"alpha-from-max-color.KernelParameters(alpha-from-max-color.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Et}}},slot:37});Object.assign(oe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(alpha-from-max-color.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:45});Object.assign(le,{...t,type:7,name:"ErrorSet0000!alpha-from-max-color.KernelOutput(u8,alpha-from-max-color.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:w},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:oe}],methods:[],template:null},slot:40});Object.assign(ue,{...t,type:3,name:"createOutput",length:1,byteSize:60,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:O},{...e,type:6,bitOffset:480,bitSize:0,byteSize:0,slot:3,name:"3",structure:R},{...e,type:6,bitOffset:256,bitSize:224,byteSize:28,slot:4,name:"retval",structure:le}],methods:[],template:null},slot:38});Object.assign(me,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(alpha-from-max-color.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:46});Object.assign(ce,{...t,type:7,name:"ErrorSet0001!alpha-from-max-color.KernelOutput(u8,alpha-from-max-color.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:w},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:me}],methods:[],template:null},slot:41});Object.assign(ye,{...t,type:3,name:"createPartialOutput",length:1,byteSize:68,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:O},{...e,type:6,bitOffset:544,bitSize:0,byteSize:0,slot:5,name:"5",structure:R},{...e,type:6,bitOffset:320,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ce}],methods:[],template:null},slot:39});const Kt=new Uint8Array,Dt={argStruct:ue,thunk:7,name:"createOutput"},Ft={argStruct:ye,thunk:2,name:"createPartialOutput"};Object.assign(be,{...t,type:2,name:"alpha-from-max-color",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Kt}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ie},{...e,type:7,isRequired:!1,name:"Input",structure:O},{...e,type:7,isRequired:!1,name:"Output",structure:w},{...e,type:7,isRequired:!1,name:"Parameters",structure:R}],methods:[Dt,Ft],template:null},slot:0});const Mt=[y,M,_,P,T,$,x,m,c,B,L,k,N,G,I,H,J,C,Q,V,z,h,W,v,X,E,ie,S,Y,Z,l,ee,g,K,te,D,O,se,re,F,w,R,oe,le,ue,me,ce,ye,be],_t=De(Mt),Tt=be.constructor,$t=(async()=>{const n=new URL("alpha-from-max-color-25724e10.wasm",import.meta.url).href;return fetch(n)})();Fe($t,{..._t,writeBack:!0});const{createOutput:Wt,createPartialOutput:Bt,kernel:ne,Input:Lt,Output:Xt,Parameters:Yt}=Tt;function Nt(n,o,r,s,a={},p={}){if(Array.isArray(a)){const b=a;a={};for(const[u,f]of Object.keys(ne.inputImages).entries())a[f]=b[u]}const q=new Lt(void 0),j=Object.keys(ne.inputImages),i=[];let d;for(const b of j){let u=a[b];if(u||(j.length===1&&["data","width","height"].every(f=>!!a[f])?u=a:i.push(b)),q[b]=u,d){if(u.colorSpace!==d)throw new Error(`Input images must all use the same color space: ${d}`)}else d=u.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const ae=Bt(n,o,r,s,q,p),pe=b=>{const u=Object.keys(b),f={};for(const fe of u){const{data:{typedArray:A},width:he,height:ge}=b[fe];let U;if(typeof ImageData=="function"){const ze=new Uint8ClampedArray(A.buffer,A.byteOffset,A.byteLength);U=new ImageData(ze,he,s,{colorSpace:d})}else U={data:A,width:he,height:ge};if(u.length===1)return U;f[fe]=U}return f};return ae[Symbol.toStringTag]==="Promise"?ae.then(pe):pe(ae)}function Gt(){const n={};for(let[o,r]of Object.entries(ne)){if(o==="parameters"){const s={};for(const[a,p]of Object.entries(r)){const q=s[a]={};for(let[j,i]of Object.entries(p))typeof i=="object"?"string"in i?i=i.string:i=de(i):typeof i=="function"&&(i=Ht(i.name)),q[j]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[o]=r}return n}function de(n){const o=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=de(s)),o[r]=s;return o}function Ht(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,r,...s]=n.data;Jt(o,s).then(([a,p])=>{postMessage([o,r,a],{transfer:p})}).catch(a=>{postMessage(["error",r,a])})};async function Jt(n,o){switch(n){case"getKernelInfo":return[Gt(...o)];case"createPartialImageData":const s=await Nt(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const p of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
