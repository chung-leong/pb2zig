import{u as ke,a as Ce,b as Ee,c as Ke,d as Fe,e as De,f as Te,g as Me,h as $e,i as Be,j as Le,k as Ge,l as He,m as Je,n as Ne,o as Qe,p as We,q as Xe,r as Ye}from"./index-778418ea.js";ke();Ce();Ee();Ke();Fe();De();Te();Me();$e();Be();Le();Ge();He();Je();Ne();Qe();We();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},h={},Q={},W={},C={},X={},Y={},E={},y={},d={},Z={},ee={},K={},f={},te={},u={},s={},R={},z={},se={},F={},re={},D={},ae={},T={},ie={},M={},me={},$={},B={},U={},O={},ne={},L={},oe={},G={},he={},w={},ue={},le={},l={},ce={},V={},A={},ye={},H={},j={},pe={},fe={},J={},_={},P={},Se={},ge={},ze={},Oe={},we={},qe={},Re={};Object.assign(h,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:5});Object.assign(Q,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:4});Object.assign(W,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:3});Object.assign(C,{...t,type:11,name:"**const [21:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:2});Object.assign(X,{...t,type:1,name:"[9:0]u8",length:9,byteSize:10,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:8});Object.assign(Y,{...t,type:11,name:"*const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:7});Object.assign(E,{...t,type:11,name:"**const [9:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:6});Object.assign(y,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:10});Object.assign(d,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:9});Object.assign(Z,{...t,type:1,name:"[4:0]u8",length:4,byteSize:5,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:13});Object.assign(ee,{...t,type:11,name:"*const [4:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:12});Object.assign(K,{...t,type:11,name:"**const [4:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:11});Object.assign(f,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:34});Object.assign(te,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:33});Object.assign(u,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:u}],methods:[],template:null},slot:55});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:54});const Ze=new Uint8Array([]),et=new Uint8Array([88,30,16,0]),N=new Uint8Array([0,0,0,0,0,0,0,0]),tt=new Uint8Array([88,30,16,0]);Object.assign(R,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Ze},slots:{0:{structure:s,memory:{array:et},slots:{0:{structure:u,memory:{array:N},address:1056344}}},1:{structure:s,memory:{array:tt},slots:{0:{structure:u,memory:{array:N},address:1056344}}}}}},slot:51});Object.assign(z,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:50});const st=new Uint8Array([]),rt=new Uint8Array([80,30,16,0]),_e=new Uint8Array([0,0,0,0,0,0,176,64]),at=new Uint8Array([80,30,16,0]);Object.assign(se,{...t,type:2,name:"struct{comptime comptime_float = 4096, comptime comptime_float = 4096}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:st},slots:{0:{structure:s,memory:{array:rt},slots:{0:{structure:u,memory:{array:_e},address:1056336}}},1:{structure:s,memory:{array:at},slots:{0:{structure:u,memory:{array:_e},address:1056336}}}}}},slot:53});Object.assign(F,{...t,type:11,name:"*const struct{comptime comptime_float = 4096, comptime comptime_float = 4096}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:52});const it=new Uint8Array([]),mt=new Uint8Array([170,170,170,170]),c=new Uint8Array([]),nt=new Uint8Array([170,170,170,170]),ot=new Uint8Array([170,170,170,170]);Object.assign(re,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 4096, comptime comptime_float = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:te},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:z},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:F},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:z}],methods:[],template:{memory:{array:it},slots:{0:{structure:z,memory:{array:mt},slots:{0:{structure:R,memory:{array:c},address:-1431655766}}},1:{structure:F,memory:{array:nt},slots:{0:{structure:se,memory:{array:c},address:-1431655766}}},2:{structure:z,memory:{array:ot},slots:{0:{structure:R,memory:{array:c},address:-1431655766}}}}}},slot:40});Object.assign(D,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 4096, comptime comptime_float = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:39});const ut=new Uint8Array([]),lt=new Uint8Array([88,30,16,0]),ct=new Uint8Array([112,30,16,0]),Pe=new Uint8Array([0,0,0,0,0,0,89,64]),yt=new Uint8Array([120,30,16,0]),pt=new Uint8Array([0,0,0,0,0,0,36,64]);Object.assign(ae,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 10}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:ut},slots:{0:{structure:s,memory:{array:lt},slots:{0:{structure:u,memory:{array:N},address:1056344}}},1:{structure:s,memory:{array:ct},slots:{0:{structure:u,memory:{array:Pe},address:1056368}}},2:{structure:s,memory:{array:yt},slots:{0:{structure:u,memory:{array:pt},address:1056376}}}}}},slot:42});Object.assign(T,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 10}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:41});const ft=new Uint8Array([]),bt=new Uint8Array([88,30,16,0]),dt=new Uint8Array([112,30,16,0]),ht=new Uint8Array([104,30,16,0]),St=new Uint8Array([0,0,0,0,0,0,20,64]);Object.assign(ie,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 5}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:ft},slots:{0:{structure:s,memory:{array:bt},slots:{0:{structure:u,memory:{array:N},address:1056344}}},1:{structure:s,memory:{array:dt},slots:{0:{structure:u,memory:{array:Pe},address:1056368}}},2:{structure:s,memory:{array:ht},slots:{0:{structure:u,memory:{array:St},address:1056360}}}}}},slot:44});Object.assign(M,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 5}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:43});const gt=new Uint8Array([]),zt=new Uint8Array([170,170,170,170]),Ot=new Uint8Array([170,170,170,170]),wt=new Uint8Array([170,170,170,170]);Object.assign(me,{...t,type:2,name:"struct{comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 4096, comptime comptime_float = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{4096, 4096}, .defaultValue = .{0, 0}}, comptime amplitude: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 10} = .{.type = f32, .minValue = 0, .maxValue = 100, .defaultValue = 10}, comptime frequency: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 5} = .{.type = f32, .minValue = 0, .maxValue = 100, .defaultValue = 5}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"center",structure:D},{...e,type:8,isRequired:!1,slot:1,name:"amplitude",structure:T},{...e,type:8,isRequired:!1,slot:2,name:"frequency",structure:M}],methods:[],template:{memory:{array:gt},slots:{0:{structure:D,memory:{array:zt},slots:{0:{structure:re,memory:{array:c},address:-1431655766}}},1:{structure:T,memory:{array:Ot},slots:{0:{structure:ae,memory:{array:c},address:-1431655766}}},2:{structure:M,memory:{array:wt},slots:{0:{structure:ie,memory:{array:c},address:-1431655766}}}}}},slot:15});Object.assign($,{...t,type:11,name:"*struct{comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 4096, comptime comptime_float = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{4096, 4096}, .defaultValue = .{0, 0}}, comptime amplitude: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 10} = .{.type = f32, .minValue = 0, .maxValue = 100, .defaultValue = 10}, comptime frequency: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 5} = .{.type = f32, .minValue = 0, .maxValue = 100, .defaultValue = 5}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:14});Object.assign(B,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:56});const qt=new Uint8Array([]),Rt=new Uint8Array([96,30,16,0]),Vt=new Uint8Array([4,0,0,0]);Object.assign(U,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:B}],methods:[],template:{memory:{array:qt},slots:{0:{structure:B,memory:{array:Rt},slots:{0:{structure:y,memory:{array:Vt},address:1056352}}}}}},slot:46});Object.assign(O,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:U}],methods:[],template:null},slot:45});const At=new Uint8Array([]),Ut=new Uint8Array([170,170,170,170]);Object.assign(ne,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:O}],methods:[],template:{memory:{array:At},slots:{0:{structure:O,memory:{array:Ut},slots:{0:{structure:U,memory:{array:c},address:-1431655766}}}}}},slot:17});Object.assign(L,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:16});const jt=new Uint8Array([]),_t=new Uint8Array([170,170,170,170]);Object.assign(oe,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:O}],methods:[],template:{memory:{array:jt},slots:{0:{structure:O,memory:{array:_t},slots:{0:{structure:U,memory:{array:c},address:-1431655766}}}}}},slot:19});Object.assign(G,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:18});const Pt=new Uint8Array([]),vt=new Uint8Array([]),xt=new Uint8Array([36,249,15,0]),It=new Uint8Array([152,51,16,0]),kt=new Uint8Array([110,101,116,46,110,105,99,111,112,116,101,114,101,46,102,105,108,116,101,114,115,0]),Ct=new Uint8Array([100,249,15,0]),Et=new Uint8Array([142,51,16,0]),Kt=new Uint8Array([110,105,99,111,112,116,101,114,101,0]),Ft=new Uint8Array([164,249,15,0]),Dt=new Uint8Array([1,0,0,0]),Tt=new Uint8Array([252,249,15,0]),Mt=new Uint8Array([98,51,16,0]),$t=new Uint8Array([119,97,118,101,0]),Bt=new Uint8Array([170,170,170,170]),Lt=new Uint8Array([170,170,170,170]),Gt=new Uint8Array([170,170,170,170]);Object.assign(he,{...t,type:2,name:"wave.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Pt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:C},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:E},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:d},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:K},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:$},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:L},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:G}],methods:[],template:{memory:{array:vt},slots:{0:{structure:C,memory:{array:xt},slots:{0:{structure:W,memory:{array:It},slots:{0:{structure:Q,memory:{array:kt},address:1061784}}}}},1:{structure:E,memory:{array:Ct},slots:{0:{structure:Y,memory:{array:Et},slots:{0:{structure:X,memory:{array:Kt},address:1061774}}}}},2:{structure:d,memory:{array:Ft},slots:{0:{structure:y,memory:{array:Dt}}}},3:{structure:K,memory:{array:Tt},slots:{0:{structure:ee,memory:{array:Mt},slots:{0:{structure:Z,memory:{array:$t},address:1061730}}}}},4:{structure:$,memory:{array:Bt},slots:{0:{structure:me,memory:{array:c},address:-1431655766}}},5:{structure:L,memory:{array:Lt},slots:{0:{structure:ne,memory:{array:c},address:-1431655766}}},6:{structure:G,memory:{array:Gt},slots:{0:{structure:oe,memory:{array:c},address:-1431655766}}}}}},slot:1});Object.assign(w,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:24});Object.assign(ue,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(le,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ue}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const Ht=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ce,{...t,type:9,name:"wave.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:y},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:y}],methods:[],template:{memory:{array:Ht}}},slot:26});Object.assign(V,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:V}],methods:[],template:null},slot:27});Object.assign(A,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:28});Object.assign(ye,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:47});const Jt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Nt=new Uint8Array([]),Qt=new Uint8Array([104,253,15,0]),Wt=new Uint8Array([4,0,0,0]);Object.assign(H,{...t,type:2,name:"wave.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:le},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ce},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:V},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:A}],methods:[],template:{memory:{array:Jt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:ye},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Nt},slots:{0:{structure:d,memory:{array:Qt},slots:{0:{structure:y,memory:{array:Wt}}}}}}},slot:21});const Xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Yt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Zt=new Uint8Array([0,0,0,0,0,0,0,0]),Ve=new Uint8Array([]);Object.assign(j,{...t,type:2,name:"wave.KernelInput(u8,wave.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:H}],methods:[],template:{memory:{array:Xt},slots:{0:{structure:H,memory:{array:Yt},slots:{0:{structure:le,memory:{array:Zt},slots:{0:{structure:ue,memory:{array:Ve}}}}}}}}},slot:20});Object.assign(pe,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(fe,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:pe}],methods:[],template:null},slot:31});const es=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ts=new Uint8Array([]),ss=new Uint8Array([104,253,15,0]),rs=new Uint8Array([4,0,0,0]);Object.assign(J,{...t,type:2,name:"wave.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:fe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ce},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:V},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:A}],methods:[],template:{memory:{array:es}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:ye},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:ts},slots:{0:{structure:d,memory:{array:ss},slots:{0:{structure:y,memory:{array:rs}}}}}}},slot:30});const as=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),is=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ms=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(_,{...t,type:2,name:"wave.KernelOutput(u8,wave.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:J}],methods:[],template:{memory:{array:as},slots:{0:{structure:J,memory:{array:is},slots:{0:{structure:fe,memory:{array:ms},slots:{0:{structure:pe,memory:{array:Ve}}}}}}}}},slot:29});const ns=new Uint8Array([0,0,0,0,0,0,0,0,0,0,32,65,0,0,160,64]);Object.assign(P,{...t,type:2,name:"wave.KernelParameters(wave.kernel)",length:1,byteSize:16,align:3,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"center",structure:te},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"amplitude",structure:f},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"frequency",structure:f}],methods:[],template:{memory:{array:ns}}},slot:32});Object.assign(Se,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(wave.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(ge,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(wave.createOutput)).Fn.return_type.?).ErrorUnion.error_set!wave.KernelOutput(u8,wave.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:_},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Se}],methods:[],template:null},slot:37});Object.assign(ze,{...t,type:3,name:"createOutput",length:1,byteSize:80,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:192,bitSize:192,byteSize:24,slot:2,name:"2",structure:j},{...e,type:6,bitOffset:0,bitSize:128,byteSize:16,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ge}],methods:[],template:null},slot:35});Object.assign(Oe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(wave.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:49});Object.assign(we,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(wave.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!wave.KernelOutput(u8,wave.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:_},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Oe}],methods:[],template:null},slot:38});Object.assign(qe,{...t,type:3,name:"createPartialOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:4,name:"4",structure:j},{...e,type:6,bitOffset:0,bitSize:128,byteSize:16,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:we}],methods:[],template:null},slot:36});const os={argStruct:ze,thunk:7,name:"createOutput"},us={argStruct:qe,thunk:2,name:"createPartialOutput"};Object.assign(Re,{...t,type:2,name:"wave",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ve}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:he},{...e,type:7,isRequired:!1,name:"Input",structure:j},{...e,type:7,isRequired:!1,name:"Output",structure:_},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[os,us],template:null},slot:0});const ls=[h,Q,W,C,X,Y,E,y,d,Z,ee,K,f,te,u,s,R,z,se,F,re,D,ae,T,ie,M,me,$,B,U,O,ne,L,oe,G,he,w,ue,le,l,ce,V,A,ye,H,j,pe,fe,J,_,P,Se,ge,ze,Oe,we,qe,Re],cs=Xe(ls),ys=Re.constructor,ps=(async()=>{const m=new URL("wave-55e6988d.wasm",import.meta.url).href;return fetch(m)})();Ye(ps,{...cs,writeBack:!0});const{createOutput:Os,createPartialOutput:fs,kernel:de,Input:bs,Output:ws,Parameters:qs}=ys;function ds(m,o,a,r,i={},S={}){if(Array.isArray(i)){const b=i;i={};for(const[p,g]of Object.keys(de.inputImages).entries())i[g]=b[p]}const v=new bs(void 0),x=Object.keys(de.inputImages),n=[];let q;for(const b of x){let p=i[b];if(p||(x.length===1&&["data","width","height"].every(g=>!!i[g])?p=i:n.push(b)),v[b]=p,q){if(p.colorSpace!==q)throw new Error(`Input images must all use the same color space: ${q}`)}else q=p.colorSpace}if(n.length>0)throw new Error(`Missing input image${n.length>1?"s":""}: ${n.join(", ")}`);const be=fs(m,o,a,r,v,S),Ae=b=>{const p=Object.keys(b),g={};for(const Ue of p){const{data:{typedArray:I},width:je,height:xe}=b[Ue];let k;if(typeof ImageData=="function"){const Ie=new Uint8ClampedArray(I.buffer,I.byteOffset,I.byteLength);k=new ImageData(Ie,je,r,{colorSpace:q})}else k={data:I,width:je,height:xe};if(p.length===1)return k;g[Ue]=k}return g};return be[Symbol.toStringTag]==="Promise"?be.then(Ae):Ae(be)}function hs(){const m={};for(let[o,a]of Object.entries(de)){if(o==="parameters"){const r={};for(const[i,S]of Object.entries(a)){const v=r[i]={};for(let[x,n]of Object.entries(S))typeof n=="object"?"string"in n?n=n.string:n=ve(n):typeof n=="function"&&(n=Ss(n.name)),v[x]=n}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());m[o]=a}return m}function ve(m){const o=[];for(let[a,r]of Object.entries(m))typeof r=="object"&&(r=ve(r)),o[a]=r;return o}function Ss(m){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[m]}onmessage=m=>{const[o,a,...r]=m.data;gs(o,r).then(([i,S])=>{postMessage([o,a,i],{transfer:S})}).catch(i=>{postMessage(["error",a,i])})};async function gs(m,o){switch(m){case"getKernelInfo":return[hs(...o)];case"createPartialImageData":const r=await ds(...o),i=[];if("data"in r&&"width"in r&&"height"in r)i.push(r.data.buffer);else for(const S of Object.entries(r))i.push(r.data.buffer);return[r,i];default:throw new Error(`Unknown function: ${m}`)}}
