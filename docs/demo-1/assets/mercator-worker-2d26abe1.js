import{u as qe,a as we,b as je,d as Ae,c as Ue,e as Ve,f as Pe,g as _e,h as Ie,i as ke,j as xe,k as ve,l as Ce,m as Ee,n as Ke,o as Fe,p as De,q as Te,r as Me}from"./index-778418ea.js";qe();we();je();Ae();Ue();Ve();Pe();_e();Ie();ke();xe();ve();Ce();Ee();Ke();Fe();De();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},d={},L={},G={},C={},H={},J={},E={},u={},p={},N={},Q={},K={},h={},b={},y={},w={},z={},W={},F={},D={},U={},O={},X={},T={},Y={},M={},me={},R={},Z={},ee={},o={},te={},j={},A={},se={},$={},V={},re={},ae={},B={},P={},_={},oe={},ue={},le={},ce={},ye={},pe={},be={};Object.assign(d,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:5});Object.assign(L,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:4});Object.assign(G,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:3});Object.assign(C,{...t,type:11,name:"**const [21:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:2});Object.assign(H,{...t,type:1,name:"[9:0]u8",length:9,byteSize:10,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:8});Object.assign(J,{...t,type:11,name:"*const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:7});Object.assign(E,{...t,type:11,name:"**const [9:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:6});Object.assign(u,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:10});Object.assign(p,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:9});Object.assign(N,{...t,type:1,name:"[8:0]u8",length:8,byteSize:9,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:13});Object.assign(Q,{...t,type:11,name:"*const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:12});Object.assign(K,{...t,type:11,name:"**const [8:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:11});Object.assign(h,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:33});Object.assign(b,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:b}],methods:[],template:null},slot:46});Object.assign(y,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:b}],methods:[],template:null},slot:45});const $e=new Uint8Array([]),Be=new Uint8Array([56,30,16,0]),ge=new Uint8Array([0,0,0,0,0,0,0,0]),Le=new Uint8Array([64,30,16,0]),Ge=new Uint8Array([0,0,0,0,0,0,176,64]),He=new Uint8Array([56,30,16,0]);Object.assign(w,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 4096, comptime defaultValue: comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:y},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:y},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:y}],methods:[],template:{memory:{array:$e},slots:{0:{structure:y,memory:{array:Be},slots:{0:{structure:b,memory:{array:ge},address:1056312}}},1:{structure:y,memory:{array:Le},slots:{0:{structure:b,memory:{array:Ge},address:1056320}}},2:{structure:y,memory:{array:He},slots:{0:{structure:b,memory:{array:ge},address:1056312}}}}}},slot:39});Object.assign(z,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 4096, comptime defaultValue: comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:w}],methods:[],template:null},slot:38});const Je=new Uint8Array([]),Ne=new Uint8Array([170,170,170,170]),f=new Uint8Array([]),Qe=new Uint8Array([170,170,170,170]);Object.assign(W,{...t,type:2,name:"struct{comptime center: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 4096, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = 0, .maxValue = 4096, .defaultValue = 0}, comptime width: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 4096, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = 0, .maxValue = 4096, .defaultValue = 0}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"center",structure:z},{...e,type:8,isRequired:!1,slot:1,name:"width",structure:z}],methods:[],template:{memory:{array:Je},slots:{0:{structure:z,memory:{array:Ne},slots:{0:{structure:w,memory:{array:f},address:-1431655766}}},1:{structure:z,memory:{array:Qe},slots:{0:{structure:w,memory:{array:f},address:-1431655766}}}}}},slot:15});Object.assign(F,{...t,type:11,name:"*struct{comptime center: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 4096, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = 0, .maxValue = 4096, .defaultValue = 0}, comptime width: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 4096, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = 0, .maxValue = 4096, .defaultValue = 0}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:14});Object.assign(D,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:47});const We=new Uint8Array([]),Xe=new Uint8Array([48,30,16,0]),Ye=new Uint8Array([4,0,0,0]);Object.assign(U,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:D}],methods:[],template:{memory:{array:We},slots:{0:{structure:D,memory:{array:Xe},slots:{0:{structure:u,memory:{array:Ye},address:1056304}}}}}},slot:41});Object.assign(O,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:U}],methods:[],template:null},slot:40});const Ze=new Uint8Array([]),et=new Uint8Array([170,170,170,170]);Object.assign(X,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:O}],methods:[],template:{memory:{array:Ze},slots:{0:{structure:O,memory:{array:et},slots:{0:{structure:U,memory:{array:f},address:-1431655766}}}}}},slot:17});Object.assign(T,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:16});const tt=new Uint8Array([]),st=new Uint8Array([170,170,170,170]);Object.assign(Y,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:O}],methods:[],template:{memory:{array:tt},slots:{0:{structure:O,memory:{array:st},slots:{0:{structure:U,memory:{array:f},address:-1431655766}}}}}},slot:19});Object.assign(M,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:18});const rt=new Uint8Array([]),at=new Uint8Array([]),it=new Uint8Array([12,251,15,0]),nt=new Uint8Array([116,42,16,0]),mt=new Uint8Array([110,101,116,46,110,105,99,111,112,116,101,114,101,46,102,105,108,116,101,114,115,0]),ot=new Uint8Array([76,251,15,0]),ut=new Uint8Array([106,42,16,0]),lt=new Uint8Array([110,105,99,111,112,116,101,114,101,0]),ct=new Uint8Array([140,251,15,0]),yt=new Uint8Array([1,0,0,0]),pt=new Uint8Array([228,251,15,0]),bt=new Uint8Array([60,42,16,0]),ft=new Uint8Array([109,101,114,99,97,116,111,114,0]),dt=new Uint8Array([170,170,170,170]),ht=new Uint8Array([170,170,170,170]),St=new Uint8Array([170,170,170,170]);Object.assign(me,{...t,type:2,name:"mercator.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:rt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:C},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:E},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:p},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:K},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:F},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:T},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:M}],methods:[],template:{memory:{array:at},slots:{0:{structure:C,memory:{array:it},slots:{0:{structure:G,memory:{array:nt},slots:{0:{structure:L,memory:{array:mt},address:1059444}}}}},1:{structure:E,memory:{array:ot},slots:{0:{structure:J,memory:{array:ut},slots:{0:{structure:H,memory:{array:lt},address:1059434}}}}},2:{structure:p,memory:{array:ct},slots:{0:{structure:u,memory:{array:yt}}}},3:{structure:K,memory:{array:pt},slots:{0:{structure:Q,memory:{array:bt},slots:{0:{structure:N,memory:{array:ft},address:1059388}}}}},4:{structure:F,memory:{array:dt},slots:{0:{structure:W,memory:{array:f},address:-1431655766}}},5:{structure:T,memory:{array:ht},slots:{0:{structure:X,memory:{array:f},address:-1431655766}}},6:{structure:M,memory:{array:St},slots:{0:{structure:Y,memory:{array:f},address:-1431655766}}}}}},slot:1});Object.assign(R,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:24});Object.assign(Z,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:23});Object.assign(ee,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Z}],methods:[],template:null},slot:22});Object.assign(o,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:o}],methods:[],template:null},slot:25});const gt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(te,{...t,type:9,name:"mercator.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:u},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:u}],methods:[],template:{memory:{array:gt}}},slot:26});Object.assign(j,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:j}],methods:[],template:null},slot:27});Object.assign(A,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:28});Object.assign(se,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:42});const zt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ot=new Uint8Array([]),Rt=new Uint8Array([104,253,15,0]),qt=new Uint8Array([4,0,0,0]);Object.assign($,{...t,type:2,name:"mercator.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ee},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:o},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:o},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:te},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:j},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:A}],methods:[],template:{memory:{array:zt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:R},{...e,type:7,isRequired:!1,name:"FPixel",structure:se},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:Ot},slots:{0:{structure:p,memory:{array:Rt},slots:{0:{structure:u,memory:{array:qt}}}}}}},slot:21});const wt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),jt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),At=new Uint8Array([0,0,0,0,0,0,0,0]),fe=new Uint8Array([]);Object.assign(V,{...t,type:2,name:"mercator.KernelInput(u8,mercator.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:$}],methods:[],template:{memory:{array:wt},slots:{0:{structure:$,memory:{array:jt},slots:{0:{structure:ee,memory:{array:At},slots:{0:{structure:Z,memory:{array:fe}}}}}}}}},slot:20});Object.assign(re,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:23});Object.assign(ae,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:re}],methods:[],template:null},slot:31});const Ut=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Vt=new Uint8Array([]),Pt=new Uint8Array([104,253,15,0]),_t=new Uint8Array([4,0,0,0]);Object.assign(B,{...t,type:2,name:"mercator.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ae},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:o},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:o},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:te},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:j},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:A}],methods:[],template:{memory:{array:Ut}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:R},{...e,type:7,isRequired:!1,name:"FPixel",structure:se},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:Vt},slots:{0:{structure:p,memory:{array:Pt},slots:{0:{structure:u,memory:{array:_t}}}}}}},slot:30});const It=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),kt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),xt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(P,{...t,type:2,name:"mercator.KernelOutput(u8,mercator.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:B}],methods:[],template:{memory:{array:It},slots:{0:{structure:B,memory:{array:kt},slots:{0:{structure:ae,memory:{array:xt},slots:{0:{structure:re,memory:{array:fe}}}}}}}}},slot:29});const vt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(_,{...t,type:2,name:"mercator.KernelParameters(mercator.kernel)",length:1,byteSize:8,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"center",structure:h},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"width",structure:h}],methods:[],template:{memory:{array:vt}}},slot:32});Object.assign(oe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(mercator.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:43});Object.assign(ue,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(mercator.createOutput)).Fn.return_type.?).ErrorUnion.error_set!mercator.KernelOutput(u8,mercator.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:oe}],methods:[],template:null},slot:36});Object.assign(le,{...t,type:3,name:"createOutput",length:1,byteSize:68,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:o},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:o},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:V},{...e,type:6,bitOffset:256,bitSize:64,byteSize:8,slot:3,name:"3",structure:_},{...e,type:6,bitOffset:320,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ue}],methods:[],template:null},slot:34});Object.assign(ce,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(mercator.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:44});Object.assign(ye,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(mercator.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!mercator.KernelOutput(u8,mercator.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ce}],methods:[],template:null},slot:37});Object.assign(pe,{...t,type:3,name:"createPartialOutput",length:1,byteSize:76,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:o},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:o},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:o},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:o},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:V},{...e,type:6,bitOffset:320,bitSize:64,byteSize:8,slot:5,name:"5",structure:_},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ye}],methods:[],template:null},slot:35});const Ct={argStruct:le,thunk:8,name:"createOutput"},Et={argStruct:pe,thunk:2,name:"createPartialOutput"};Object.assign(be,{...t,type:2,name:"mercator",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:fe}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:me},{...e,type:7,isRequired:!1,name:"Input",structure:V},{...e,type:7,isRequired:!1,name:"Output",structure:P},{...e,type:7,isRequired:!1,name:"Parameters",structure:_}],methods:[Ct,Et],template:null},slot:0});const Kt=[d,L,G,C,H,J,E,u,p,N,Q,K,h,b,y,w,z,W,F,D,U,O,X,T,Y,M,me,R,Z,ee,o,te,j,A,se,$,V,re,ae,B,P,_,oe,ue,le,ce,ye,pe,be],Ft=Te(Kt),Dt=be.constructor,Tt=(async()=>{const i=new URL("mercator-ba83872f.wasm",import.meta.url).href;return fetch(i)})();Me(Tt,{...Ft,writeBack:!0});const{createOutput:Nt,createPartialOutput:Mt,kernel:ne,Input:$t,Output:Qt,Parameters:Wt}=Dt;function Bt(i,m,r,s,a={},S={}){if(Array.isArray(a)){const c=a;a={};for(const[l,g]of Object.keys(ne.inputImages).entries())a[g]=c[l]}const I=new $t(void 0),k=Object.keys(ne.inputImages),n=[];let q;for(const c of k){let l=a[c];if(l||(k.length===1&&["data","width","height"].every(g=>!!a[g])?l=a:n.push(c)),I[c]=l,q){if(l.colorSpace!==q)throw new Error(`Input images must all use the same color space: ${q}`)}else q=l.colorSpace}if(n.length>0)throw new Error(`Missing input image${n.length>1?"s":""}: ${n.join(", ")}`);const ie=Mt(i,m,r,s,I,S),de=c=>{const l=Object.keys(c),g={};for(const he of l){const{data:{typedArray:x},width:Se,height:Oe}=c[he];let v;if(typeof ImageData=="function"){const Re=new Uint8ClampedArray(x.buffer,x.byteOffset,x.byteLength);v=new ImageData(Re,Se,s,{colorSpace:q})}else v={data:x,width:Se,height:Oe};if(l.length===1)return v;g[he]=v}return g};return ie[Symbol.toStringTag]==="Promise"?ie.then(de):de(ie)}function Lt(){const i={};for(let[m,r]of Object.entries(ne)){if(m==="parameters"){const s={};for(const[a,S]of Object.entries(r)){const I=s[a]={};for(let[k,n]of Object.entries(S))typeof n=="object"?"string"in n?n=n.string:n=ze(n):typeof n=="function"&&(n=Gt(n.name)),I[k]=n}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());i[m]=r}return i}function ze(i){const m=[];for(let[r,s]of Object.entries(i))typeof s=="object"&&(s=ze(s)),m[r]=s;return m}function Gt(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[m,r,...s]=i.data;Ht(m,s).then(([a,S])=>{postMessage([m,r,a],{transfer:S})}).catch(a=>{postMessage(["error",r,a])})};async function Ht(i,m){switch(i){case"getKernelInfo":return[Lt(...m)];case"createPartialImageData":const s=await Bt(...m),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const S of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${i}`)}}
