import{u as ze,a as Oe,b as we,c as Re,d as qe,e as Ae,f as Ue,g as je,h as Pe,i as Ve,j as ke,k as Ie,l as Ce,m as ve,o as xe,n as Ee,p as Ke,q as De}from"./index-d64bc850.js";ze();Oe();we();Re();qe();Ae();Ue();je();Pe();Ve();ke();Ie();Ce();ve();xe();Ee();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},g={},$={},B={},v={},L={},G={},x={},b={},f={},y={},m={},r={},R={},d={},H={},E={},J={},K={},N={},D={},A={},z={},Q={},F={},W={},M={},ne={},O={},X={},Y={},l={},Z={},q={},ee={},_={},U={},te={},se={},T={},j={},P={},ie={},ue={},oe={},le={},me={},ye={},ce={};Object.assign(g,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:5});Object.assign($,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:4});Object.assign(B,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:3});Object.assign(v,{...t,type:11,name:"*const *const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:2});Object.assign(L,{...t,type:1,name:"[16:0]u8",length:16,byteSize:17,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:8});Object.assign(G,{...t,type:11,name:"*const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:7});Object.assign(x,{...t,type:11,name:"*const *const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:6});Object.assign(b,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:10});Object.assign(f,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:b}],methods:[],template:null},slot:9});Object.assign(y,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:29});Object.assign(m,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:m}],methods:[],template:null},slot:46});Object.assign(r,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:45});const Fe=new Uint8Array,Me=new Uint8Array([216,248,15,0]),_e=new Uint8Array([0,0,0,0,0,0,0,0]),Te=new Uint8Array([0,249,15,0]),$e=new Uint8Array([0,0,0,0,0,0,240,63]),Be=new Uint8Array([40,249,15,0]),Le=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(R,{...t,type:2,name:"Struct0010",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:Fe},slots:{0:{structure:r,memory:{array:Me},slots:{0:{structure:m,memory:{array:_e}}}},1:{structure:r,memory:{array:Te},slots:{0:{structure:m,memory:{array:$e}}}},2:{structure:r,memory:{array:Be},slots:{0:{structure:m,memory:{array:Le}}}}}}},slot:35});Object.assign(d,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:34});const Ge=new Uint8Array,He=new Uint8Array([24,253,15,0]),Je=new Uint8Array([0,0,0,0,0,0,0,0]),Ne=new Uint8Array([64,253,15,0]),Qe=new Uint8Array([0,0,0,0,0,0,36,64]),We=new Uint8Array([104,253,15,0]),Xe=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(H,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:Ge},slots:{0:{structure:r,memory:{array:He},slots:{0:{structure:m,memory:{array:Je}}}},1:{structure:r,memory:{array:Ne},slots:{0:{structure:m,memory:{array:Qe}}}},2:{structure:r,memory:{array:We},slots:{0:{structure:m,memory:{array:Xe}}}}}}},slot:37});Object.assign(E,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:36});const Ye=new Uint8Array,Ze=new Uint8Array([24,253,15,0]),et=new Uint8Array([0,0,0,0,0,0,0,0]),tt=new Uint8Array([64,253,15,0]),st=new Uint8Array([0,0,0,0,0,0,52,64]),rt=new Uint8Array([104,253,15,0]),at=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(J,{...t,type:2,name:"Struct0012",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:Ye},slots:{0:{structure:r,memory:{array:Ze},slots:{0:{structure:m,memory:{array:et}}}},1:{structure:r,memory:{array:tt},slots:{0:{structure:m,memory:{array:st}}}},2:{structure:r,memory:{array:rt},slots:{0:{structure:m,memory:{array:at}}}}}}},slot:39});Object.assign(K,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:38});const nt=new Uint8Array,it=new Uint8Array([170,170,170,170]),ut=new Uint8Array,ot=new Uint8Array([170,170,170,170]),lt=new Uint8Array,mt=new Uint8Array([170,170,170,170]),yt=new Uint8Array,ct=new Uint8Array([170,170,170,170]),bt=new Uint8Array;Object.assign(N,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"threshold",structure:d},{...e,type:8,isRequired:!1,slot:1,name:"factor",structure:E},{...e,type:8,isRequired:!1,slot:2,name:"gamma",structure:K},{...e,type:8,isRequired:!1,slot:3,name:"invert",structure:d}],methods:[],template:{memory:{array:nt},slots:{0:{structure:d,memory:{array:it},slots:{0:{structure:R,memory:{array:ut}}}},1:{structure:E,memory:{array:ot},slots:{0:{structure:H,memory:{array:lt}}}},2:{structure:K,memory:{array:mt},slots:{0:{structure:J,memory:{array:yt}}}},3:{structure:d,memory:{array:ct},slots:{0:{structure:R,memory:{array:bt}}}}}}},slot:12});Object.assign(D,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:11});const ft=new Uint8Array,pt=new Uint8Array([32,249,15,0]),ht=new Uint8Array([4,0,0,0]);Object.assign(A,{...t,type:2,name:"Struct0013",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:f}],methods:[],template:{memory:{array:ft},slots:{0:{structure:f,memory:{array:pt},slots:{0:{structure:b,memory:{array:ht}}}}}}},slot:41});Object.assign(z,{...t,type:11,name:"Struct0009",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:40});const St=new Uint8Array,dt=new Uint8Array([170,170,170,170]),gt=new Uint8Array;Object.assign(Q,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:z}],methods:[],template:{memory:{array:St},slots:{0:{structure:z,memory:{array:dt},slots:{0:{structure:A,memory:{array:gt}}}}}}},slot:14});Object.assign(F,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:13});const zt=new Uint8Array,Ot=new Uint8Array([170,170,170,170]),wt=new Uint8Array;Object.assign(W,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:z}],methods:[],template:{memory:{array:zt},slots:{0:{structure:z,memory:{array:Ot},slots:{0:{structure:A,memory:{array:wt}}}}}}},slot:16});Object.assign(M,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:15});const Rt=new Uint8Array,qt=new Uint8Array,At=new Uint8Array([184,35,16,0]),Ut=new Uint8Array([108,35,16,0]),jt=new Uint8Array([99,111,109,46,113,117,97,115,105,109,111,110,100,111,0]),Pt=new Uint8Array([180,35,16,0]),Vt=new Uint8Array([80,35,16,0]),kt=new Uint8Array([77,97,114,105,111,32,75,108,105,110,103,101,109,97,110,110,0]),It=new Uint8Array([176,35,16,0]),Ct=new Uint8Array([1,0,0,0]),vt=new Uint8Array([170,170,170,170]),xt=new Uint8Array,Et=new Uint8Array([170,170,170,170]),Kt=new Uint8Array,Dt=new Uint8Array([170,170,170,170]),Ft=new Uint8Array;Object.assign(ne,{...t,type:2,name:"frei-chen.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Rt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:v},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:x},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:f},{...e,type:6,isRequired:!1,slot:3,name:"parameters",structure:D},{...e,type:6,isRequired:!1,slot:4,name:"inputImages",structure:F},{...e,type:6,isRequired:!1,slot:5,name:"outputImages",structure:M}],methods:[],template:{memory:{array:qt},slots:{0:{structure:v,memory:{array:At},slots:{0:{structure:B,memory:{array:Ut},slots:{0:{structure:$,memory:{array:jt}}}}}},1:{structure:x,memory:{array:Pt},slots:{0:{structure:G,memory:{array:Vt},slots:{0:{structure:L,memory:{array:kt}}}}}},2:{structure:f,memory:{array:It},slots:{0:{structure:b,memory:{array:Ct}}}},3:{structure:D,memory:{array:vt},slots:{0:{structure:N,memory:{array:xt}}}},4:{structure:F,memory:{array:Et},slots:{0:{structure:Q,memory:{array:Kt}}}},5:{structure:M,memory:{array:Dt},slots:{0:{structure:W,memory:{array:Ft}}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:21});Object.assign(X,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:20});Object.assign(Y,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:X}],methods:[],template:null},slot:19});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:22});const Mt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Z,{...t,type:9,name:"frei-chen.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:b},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:b}],methods:[],template:{memory:{array:Mt}}},slot:23});Object.assign(q,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:24});Object.assign(ee,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:42});const _t=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Tt=new Uint8Array,$t=new Uint8Array([20,35,16,0]),Bt=new Uint8Array([4,0,0,0]);Object.assign(_,{...t,type:2,name:"frei-chen.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Y},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Z},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:q}],methods:[],template:{memory:{array:_t}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:ee},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:f}],methods:[],template:{memory:{array:Tt},slots:{0:{structure:f,memory:{array:$t},slots:{0:{structure:b,memory:{array:Bt}}}}}}},slot:18});const Lt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Gt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),he=new Uint8Array([0,0,0,0,0,0,0,0]),Ht=new Uint8Array;Object.assign(U,{...t,type:2,name:"frei-chen.KernelInput(u8,frei-chen.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:_}],methods:[],template:{memory:{array:Lt},slots:{0:{structure:_,memory:{array:Gt},slots:{0:{structure:Y,memory:{array:he},address:1047568,slots:{0:{structure:X,memory:{array:Ht},address:0}}}}}}}},slot:17});Object.assign(te,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:20});Object.assign(se,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:te}],methods:[],template:null},slot:27});const Jt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Nt=new Uint8Array,Qt=new Uint8Array([20,35,16,0]),Wt=new Uint8Array([4,0,0,0]);Object.assign(T,{...t,type:2,name:"frei-chen.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:se},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Z},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:q}],methods:[],template:{memory:{array:Jt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:ee},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:f}],methods:[],template:{memory:{array:Nt},slots:{0:{structure:f,memory:{array:Qt},slots:{0:{structure:b,memory:{array:Wt}}}}}}},slot:26});const Xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Yt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Zt=new Uint8Array;Object.assign(j,{...t,type:2,name:"frei-chen.KernelOutput(u8,frei-chen.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:T}],methods:[],template:{memory:{array:Xt},slots:{0:{structure:T,memory:{array:Yt},slots:{0:{structure:se,memory:{array:he},address:1047568,slots:{0:{structure:te,memory:{array:Zt},address:0}}}}}}}},slot:25});const es=new Uint8Array([0,0,0,0,0,0,128,63,0,0,128,63,0,0,0,0]);Object.assign(P,{...t,type:2,name:"frei-chen.KernelParameters(frei-chen.kernel)",length:1,byteSize:16,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"threshold",structure:y},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"factor",structure:y},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"gamma",structure:y},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"invert",structure:y}],methods:[],template:{memory:{array:es}}},slot:28});Object.assign(ie,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(frei-chen.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:43});Object.assign(ue,{...t,type:7,name:"ErrorSet0000!frei-chen.KernelOutput(u8,frei-chen.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ie}],methods:[],template:null},slot:32});Object.assign(oe,{...t,type:3,name:"createOutput",length:1,byteSize:76,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:U},{...e,type:6,bitOffset:256,bitSize:128,byteSize:16,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ue}],methods:[],template:null},slot:30});Object.assign(le,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(frei-chen.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:44});Object.assign(me,{...t,type:7,name:"ErrorSet0001!frei-chen.KernelOutput(u8,frei-chen.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:le}],methods:[],template:null},slot:33});Object.assign(ye,{...t,type:3,name:"createPartialOutput",length:1,byteSize:84,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:U},{...e,type:6,bitOffset:320,bitSize:128,byteSize:16,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:me}],methods:[],template:null},slot:31});const ts=new Uint8Array,ss={argStruct:oe,thunk:8,name:"createOutput"},rs={argStruct:ye,thunk:2,name:"createPartialOutput"};Object.assign(ce,{...t,type:2,name:"frei-chen",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ts}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ne},{...e,type:7,isRequired:!1,name:"Input",structure:U},{...e,type:7,isRequired:!1,name:"Output",structure:j},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[ss,rs],template:null},slot:0});const as=[g,$,B,v,L,G,x,b,f,y,m,r,R,d,H,E,J,K,N,D,A,z,Q,F,W,M,ne,O,X,Y,l,Z,q,ee,_,U,te,se,T,j,P,ie,ue,oe,le,me,ye,ce],ns=Ke(as),is=ce.constructor,us=(async()=>{const i=new URL("frei-chen-15d6c462.wasm",import.meta.url).href;return fetch(i)})();De(us,{...ns,writeBack:!0});const{createOutput:ps,createPartialOutput:os,kernel:ae,Input:ls,Output:hs,Parameters:Ss}=is;function ms(i,o,a,s,n={},h={}){if(Array.isArray(n)){const p=n;n={};for(const[c,S]of Object.keys(ae.inputImages).entries())n[S]=p[c]}const V=new ls(void 0),k=Object.keys(ae.inputImages),u=[];let w;for(const p of k){let c=n[p];if(c||(k.length===1&&["data","width","height"].every(S=>!!n[S])?c=n:u.push(p)),V[p]=c,w){if(c.colorSpace!==w)throw new Error(`Input images must all use the same color space: ${w}`)}else w=c.colorSpace}if(u.length>0)throw new Error(`Missing input image${u.length>1?"s":""}: ${u.join(", ")}`);const re=os(i,o,a,s,V,h),be=p=>{const c=Object.keys(p),S={};for(const fe of c){const{data:{typedArray:I},width:pe,height:de}=p[fe];let C;if(typeof ImageData=="function"){const ge=new Uint8ClampedArray(I.buffer,I.byteOffset,I.byteLength);C=new ImageData(ge,pe,s,{colorSpace:w})}else C={data:I,width:pe,height:de};if(c.length===1)return C;S[fe]=C}return S};return re[Symbol.toStringTag]==="Promise"?re.then(be):be(re)}function ys(){const i={};for(let[o,a]of Object.entries(ae)){if(o==="parameters"){const s={};for(const[n,h]of Object.entries(a)){const V=s[n]={};for(let[k,u]of Object.entries(h))typeof u=="object"?"string"in u?u=u.string:u=Se(u):typeof u=="function"&&(u=cs(u.name)),V[k]=u}a=s}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());i[o]=a}return i}function Se(i){const o=[];for(let[a,s]of Object.entries(i))typeof s=="object"&&(s=Se(s)),o[a]=s;return o}function cs(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[o,a,...s]=i.data;bs(o,s).then(([n,h])=>{postMessage([o,a,n],{transfer:h})}).catch(n=>{postMessage(["error",a,n])})};async function bs(i,o){switch(i){case"getKernelInfo":return[ys(...o)];case"createPartialImageData":const s=await ms(...o),n=[];if("data"in s&&"width"in s&&"height"in s)n.push(s.data.buffer);else for(const h of Object.entries(s))n.push(s.data.buffer);return[s,n];default:throw new Error(`Unknown function: ${i}`)}}
