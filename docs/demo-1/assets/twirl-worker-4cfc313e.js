import{u as ke,a as ve,b as xe,c as Ee,d as Ke,e as De,f as Fe,g as Me,h as _e,i as Te,j as $e,k as Be,l as Le,m as Ge,o as He,n as Je,p as Ne,q as Qe}from"./index-d64bc850.js";ke();ve();xe();Ee();Ke();De();Fe();Me();_e();Te();$e();Be();Le();Ge();He();Je();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},S={},H={},J={},I={},N={},Q={},k={},m={},i={},W={},X={},v={},p={},u={},s={},Y={},x={},Z={},ee={},E={},te={},K={},se={},D={},re={},F={},ae={},M={},ne={},_={},ie={},T={},A={},h={},ue={},$={},oe={},B={},de={},z={},le={},me={},c={},ye={},O={},ce={},L={},U={},be={},pe={},G={},R={},q={},ge={},he={},ze={},we={},Oe={},Ae={},Ue={};Object.assign(S,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:5});Object.assign(H,{...t,type:1,name:"[20:0]u8",length:20,byteSize:21,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:4});Object.assign(J,{...t,type:11,name:"*const [20:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:3});Object.assign(I,{...t,type:11,name:"*const *const [20:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:2});Object.assign(N,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:8});Object.assign(Q,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:7});Object.assign(k,{...t,type:11,name:"*const *const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:6});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:10});Object.assign(i,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:9});Object.assign(W,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:13});Object.assign(X,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:12});Object.assign(v,{...t,type:11,name:"*const *const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:11});Object.assign(p,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:32});Object.assign(u,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:u}],methods:[],template:null},slot:52});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:51});const We=new Uint8Array,Xe=new Uint8Array([0,252,15,0]),Ye=new Uint8Array([154,153,153,153,153,153,185,63]),Ze=new Uint8Array([88,252,15,0]),et=new Uint8Array([0,0,0,0,0,0,160,64]),tt=new Uint8Array([32,251,15,0]),st=new Uint8Array([0,0,0,0,0,0,36,64]);Object.assign(Y,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:p},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:We},slots:{0:{structure:s,memory:{array:Xe},slots:{0:{structure:u,memory:{array:Ye}}}},1:{structure:s,memory:{array:Ze},slots:{0:{structure:u,memory:{array:et}}}},2:{structure:s,memory:{array:tt},slots:{0:{structure:u,memory:{array:st}}}}}}},slot:39});Object.assign(x,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:38});Object.assign(Z,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:33});const rt=new Uint8Array,at=new Uint8Array([176,251,15,0]),nt=new Uint8Array([0,0,0,0,0,0,0,0]),it=new Uint8Array([40,252,15,0]),ut=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(ee,{...t,type:2,name:"Struct0019",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:rt},slots:{0:{structure:s,memory:{array:at},slots:{0:{structure:u,memory:{array:nt}}}},1:{structure:s,memory:{array:it},slots:{0:{structure:u,memory:{array:ut}}}}}}},slot:54});Object.assign(E,{...t,type:11,name:"Struct0016",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:53});const ot=new Uint8Array,lt=new Uint8Array([176,251,15,0]),mt=new Uint8Array([0,0,0,0,0,0,160,64]),yt=new Uint8Array([40,252,15,0]),ct=new Uint8Array([0,0,0,0,0,0,160,64]);Object.assign(te,{...t,type:2,name:"Struct0020",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:ot},slots:{0:{structure:s,memory:{array:lt},slots:{0:{structure:u,memory:{array:mt}}}},1:{structure:s,memory:{array:yt},slots:{0:{structure:u,memory:{array:ct}}}}}}},slot:56});Object.assign(K,{...t,type:11,name:"Struct0017",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:55});const bt=new Uint8Array,pt=new Uint8Array([176,251,15,0]),ft=new Uint8Array([0,0,0,0,0,0,112,64]),St=new Uint8Array([40,252,15,0]),dt=new Uint8Array([0,0,0,0,0,0,112,64]);Object.assign(se,{...t,type:2,name:"Struct0021",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:bt},slots:{0:{structure:s,memory:{array:pt},slots:{0:{structure:u,memory:{array:ft}}}},1:{structure:s,memory:{array:St},slots:{0:{structure:u,memory:{array:dt}}}}}}},slot:58});Object.assign(D,{...t,type:11,name:"Struct0018",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:57});const gt=new Uint8Array,ht=new Uint8Array([170,170,170,170]),zt=new Uint8Array,wt=new Uint8Array([170,170,170,170]),Ot=new Uint8Array,At=new Uint8Array([170,170,170,170]),Ut=new Uint8Array;Object.assign(re,{...t,type:2,name:"Struct0012",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:Z},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:E},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:K},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:D}],methods:[],template:{memory:{array:gt},slots:{0:{structure:E,memory:{array:ht},slots:{0:{structure:ee,memory:{array:zt}}}},1:{structure:K,memory:{array:wt},slots:{0:{structure:te,memory:{array:Ot}}}},2:{structure:D,memory:{array:At},slots:{0:{structure:se,memory:{array:Ut}}}}}}},slot:41});Object.assign(F,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:40});const Rt=new Uint8Array,qt=new Uint8Array([0,252,15,0]),jt=new Uint8Array([0,0,0,0,0,0,0,0]),Pt=new Uint8Array([88,252,15,0]),Vt=new Uint8Array([0,0,0,0,0,128,118,64]),Ct=new Uint8Array([32,251,15,0]),It=new Uint8Array([0,0,0,0,0,128,86,64]);Object.assign(ae,{...t,type:2,name:"Struct0013",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:p},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Rt},slots:{0:{structure:s,memory:{array:qt},slots:{0:{structure:u,memory:{array:jt}}}},1:{structure:s,memory:{array:Pt},slots:{0:{structure:u,memory:{array:Vt}}}},2:{structure:s,memory:{array:Ct},slots:{0:{structure:u,memory:{array:It}}}}}}},slot:43});Object.assign(M,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:42});const kt=new Uint8Array,vt=new Uint8Array([144,250,15,0]),xt=new Uint8Array([0,0,0,0]),Et=new Uint8Array([248,250,15,0]),Kt=new Uint8Array([1,0,0,0]),Dt=new Uint8Array([104,251,15,0]),Ft=new Uint8Array([0,0,0,0]);Object.assign(ne,{...t,type:2,name:"Struct0014",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:m},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:i},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:i},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:i}],methods:[],template:{memory:{array:kt},slots:{0:{structure:i,memory:{array:vt},slots:{0:{structure:m,memory:{array:xt}}}},1:{structure:i,memory:{array:Et},slots:{0:{structure:m,memory:{array:Kt}}}},2:{structure:i,memory:{array:Dt},slots:{0:{structure:m,memory:{array:Ft}}}}}}},slot:45});Object.assign(_,{...t,type:11,name:"Struct0009",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:44});const Mt=new Uint8Array,_t=new Uint8Array([170,170,170,170]),Tt=new Uint8Array,$t=new Uint8Array([170,170,170,170]),Bt=new Uint8Array,Lt=new Uint8Array([170,170,170,170]),Gt=new Uint8Array,Ht=new Uint8Array([170,170,170,170]),Jt=new Uint8Array;Object.assign(ie,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"radius",structure:x},{...e,type:8,isRequired:!1,slot:1,name:"center",structure:F},{...e,type:8,isRequired:!1,slot:2,name:"twirlAngle",structure:M},{...e,type:8,isRequired:!1,slot:3,name:"gaussOrSinc",structure:_}],methods:[],template:{memory:{array:Mt},slots:{0:{structure:x,memory:{array:_t},slots:{0:{structure:Y,memory:{array:Tt}}}},1:{structure:F,memory:{array:$t},slots:{0:{structure:re,memory:{array:Bt}}}},2:{structure:M,memory:{array:Lt},slots:{0:{structure:ae,memory:{array:Gt}}}},3:{structure:_,memory:{array:Ht},slots:{0:{structure:ne,memory:{array:Jt}}}}}}},slot:15});Object.assign(T,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:14});const Nt=new Uint8Array,Qt=new Uint8Array([64,252,15,0]),Wt=new Uint8Array([4,0,0,0]);Object.assign(A,{...t,type:2,name:"Struct0015",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:i}],methods:[],template:{memory:{array:Nt},slots:{0:{structure:i,memory:{array:Qt},slots:{0:{structure:m,memory:{array:Wt}}}}}}},slot:47});Object.assign(h,{...t,type:11,name:"Struct0010",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:46});const Xt=new Uint8Array,Yt=new Uint8Array([170,170,170,170]),Zt=new Uint8Array;Object.assign(ue,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"oImage",structure:h}],methods:[],template:{memory:{array:Xt},slots:{0:{structure:h,memory:{array:Yt},slots:{0:{structure:A,memory:{array:Zt}}}}}}},slot:17});Object.assign($,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:16});const es=new Uint8Array,ts=new Uint8Array([170,170,170,170]),ss=new Uint8Array;Object.assign(oe,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"outputColor",structure:h}],methods:[],template:{memory:{array:es},slots:{0:{structure:h,memory:{array:ts},slots:{0:{structure:A,memory:{array:ss}}}}}}},slot:19});Object.assign(B,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:18});const rs=new Uint8Array,as=new Uint8Array,ns=new Uint8Array([80,36,16,0]),is=new Uint8Array([0,36,16,0]),us=new Uint8Array([80,105,120,101,108,32,66,101,110,100,101,114,32,83,97,109,112,108,101,115,0]),os=new Uint8Array([76,36,16,0]),ls=new Uint8Array([231,35,16,0]),ms=new Uint8Array([65,100,111,98,101,32,83,121,115,116,101,109,115,0]),ys=new Uint8Array([72,36,16,0]),cs=new Uint8Array([2,0,0,0]),bs=new Uint8Array([68,36,16,0]),ps=new Uint8Array([192,35,16,0]),fs=new Uint8Array([116,119,105,115,116,32,97,110,32,105,109,97,103,101,32,97,114,111,117,110,100,0]),Ss=new Uint8Array([170,170,170,170]),ds=new Uint8Array,gs=new Uint8Array([170,170,170,170]),hs=new Uint8Array,zs=new Uint8Array([170,170,170,170]),ws=new Uint8Array;Object.assign(de,{...t,type:2,name:"twirl.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:rs}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:I},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:k},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:i},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:v},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:T},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:$},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:B}],methods:[],template:{memory:{array:as},slots:{0:{structure:I,memory:{array:ns},slots:{0:{structure:J,memory:{array:is},slots:{0:{structure:H,memory:{array:us}}}}}},1:{structure:k,memory:{array:os},slots:{0:{structure:Q,memory:{array:ls},slots:{0:{structure:N,memory:{array:ms}}}}}},2:{structure:i,memory:{array:ys},slots:{0:{structure:m,memory:{array:cs}}}},3:{structure:v,memory:{array:bs},slots:{0:{structure:X,memory:{array:ps},slots:{0:{structure:W,memory:{array:fs}}}}}},4:{structure:T,memory:{array:Ss},slots:{0:{structure:ie,memory:{array:ds}}}},5:{structure:$,memory:{array:gs},slots:{0:{structure:ue,memory:{array:hs}}}},6:{structure:B,memory:{array:zs},slots:{0:{structure:oe,memory:{array:ws}}}}}}},slot:1});Object.assign(z,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:24});Object.assign(le,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:23});Object.assign(me,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:le}],methods:[],template:null},slot:22});Object.assign(c,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:25});const Os=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ye,{...t,type:9,name:"twirl.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:Os}}},slot:26});Object.assign(O,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:27});Object.assign(ce,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:48});const As=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Us=new Uint8Array,Rs=new Uint8Array([136,35,16,0]),qs=new Uint8Array([4,0,0,0]);Object.assign(L,{...t,type:2,name:"twirl.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:me},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ye},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:O}],methods:[],template:{memory:{array:As}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:z},{...e,type:7,isRequired:!1,name:"FPixel",structure:ce},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:i}],methods:[],template:{memory:{array:Us},slots:{0:{structure:i,memory:{array:Rs},slots:{0:{structure:m,memory:{array:qs}}}}}}},slot:21});const js=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ps=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Pe=new Uint8Array([0,0,0,0,0,0,0,0]),Vs=new Uint8Array;Object.assign(U,{...t,type:2,name:"twirl.KernelInput(u8,twirl.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"oImage",structure:L}],methods:[],template:{memory:{array:js},slots:{0:{structure:L,memory:{array:Ps},slots:{0:{structure:me,memory:{array:Pe},address:1047200,slots:{0:{structure:le,memory:{array:Vs},address:0}}}}}}}},slot:20});Object.assign(be,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:23});Object.assign(pe,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:be}],methods:[],template:null},slot:30});const Cs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Is=new Uint8Array,ks=new Uint8Array([136,35,16,0]),vs=new Uint8Array([4,0,0,0]);Object.assign(G,{...t,type:2,name:"twirl.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:pe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ye},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:O}],methods:[],template:{memory:{array:Cs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:z},{...e,type:7,isRequired:!1,name:"FPixel",structure:ce},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:i}],methods:[],template:{memory:{array:Is},slots:{0:{structure:i,memory:{array:ks},slots:{0:{structure:m,memory:{array:vs}}}}}}},slot:29});const xs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Es=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ks=new Uint8Array;Object.assign(R,{...t,type:2,name:"twirl.KernelOutput(u8,twirl.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"outputColor",structure:G}],methods:[],template:{memory:{array:xs},slots:{0:{structure:G,memory:{array:Es},slots:{0:{structure:pe,memory:{array:Pe},address:1047200,slots:{0:{structure:be,memory:{array:Ks},address:0}}}}}}}},slot:28});const Ds=new Uint8Array([0,0,128,67,0,0,128,67,0,0,32,65,0,0,180,66,0,0,0,0,0,0,0,0]);Object.assign(q,{...t,type:2,name:"twirl.KernelParameters(twirl.kernel)",length:1,byteSize:24,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:0,name:"radius",structure:p},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:1,name:"center",structure:Z},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"twirlAngle",structure:p},{...e,type:2,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:3,name:"gaussOrSinc",structure:m}],methods:[],template:{memory:{array:Ds}}},slot:31});Object.assign(ge,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(twirl.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:49});Object.assign(he,{...t,type:7,name:"ErrorSet0000!twirl.KernelOutput(u8,twirl.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:R},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ge}],methods:[],template:null},slot:36});Object.assign(ze,{...t,type:3,name:"createOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:c},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:c},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:2,name:"2",structure:U},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:3,name:"3",structure:q},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:4,name:"retval",structure:he}],methods:[],template:null},slot:34});Object.assign(we,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(twirl.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:50});Object.assign(Oe,{...t,type:7,name:"ErrorSet0001!twirl.KernelOutput(u8,twirl.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:R},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:we}],methods:[],template:null},slot:37});Object.assign(Ae,{...t,type:3,name:"createPartialOutput",length:1,byteSize:96,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:c},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:c},{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:2,name:"2",structure:c},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:3,name:"3",structure:c},{...e,type:6,bitOffset:320,bitSize:192,byteSize:24,slot:4,name:"4",structure:U},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:5,name:"5",structure:q},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Oe}],methods:[],template:null},slot:35});const Fs=new Uint8Array,Ms={argStruct:ze,thunk:5,name:"createOutput"},_s={argStruct:Ae,thunk:1,name:"createPartialOutput"};Object.assign(Ue,{...t,type:2,name:"twirl",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Fs}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:de},{...e,type:7,isRequired:!1,name:"Input",structure:U},{...e,type:7,isRequired:!1,name:"Output",structure:R},{...e,type:7,isRequired:!1,name:"Parameters",structure:q}],methods:[Ms,_s],template:null},slot:0});const Ts=[S,H,J,I,N,Q,k,m,i,W,X,v,p,u,s,Y,x,Z,ee,E,te,K,se,D,re,F,ae,M,ne,_,ie,T,A,h,ue,$,oe,B,de,z,le,me,c,ye,O,ce,L,U,be,pe,G,R,q,ge,he,ze,we,Oe,Ae,Ue],$s=Ne(Ts),Bs=Ue.constructor,Ls=(async()=>{const o=new URL("twirl-9447a0eb.wasm",import.meta.url).href;return fetch(o)})();Qe(Ls,{...$s,writeBack:!0});const{createOutput:Ys,createPartialOutput:Gs,kernel:Se,Input:Hs,Output:Zs,Parameters:er}=Bs;function Js(o,y,a,r,n={},d={}){if(Array.isArray(n)){const f=n;n={};for(const[b,g]of Object.keys(Se.inputImages).entries())n[g]=f[b]}const j=new Hs(void 0),P=Object.keys(Se.inputImages),l=[];let w;for(const f of P){let b=n[f];if(b||(P.length===1&&["data","width","height"].every(g=>!!n[g])?b=n:l.push(f)),j[f]=b,w){if(b.colorSpace!==w)throw new Error(`Input images must all use the same color space: ${w}`)}else w=b.colorSpace}if(l.length>0)throw new Error(`Missing input image${l.length>1?"s":""}: ${l.join(", ")}`);const fe=Gs(o,y,a,r,j,d),Re=f=>{const b=Object.keys(f),g={};for(const qe of b){const{data:{typedArray:V},width:je,height:Ce}=f[qe];let C;if(typeof ImageData=="function"){const Ie=new Uint8ClampedArray(V.buffer,V.byteOffset,V.byteLength);C=new ImageData(Ie,je,r,{colorSpace:w})}else C={data:V,width:je,height:Ce};if(b.length===1)return C;g[qe]=C}return g};return fe[Symbol.toStringTag]==="Promise"?fe.then(Re):Re(fe)}function Ns(){const o={};for(let[y,a]of Object.entries(Se)){if(y==="parameters"){const r={};for(const[n,d]of Object.entries(a)){const j=r[n]={};for(let[P,l]of Object.entries(d))typeof l=="object"?"string"in l?l=l.string:l=Ve(l):typeof l=="function"&&(l=Qs(l.name)),j[P]=l}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());o[y]=a}return o}function Ve(o){const y=[];for(let[a,r]of Object.entries(o))typeof r=="object"&&(r=Ve(r)),y[a]=r;return y}function Qs(o){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[o]}onmessage=o=>{const[y,a,...r]=o.data;Ws(y,r).then(([n,d])=>{postMessage([y,a,n],{transfer:d})}).catch(n=>{postMessage(["error",a,n])})};async function Ws(o,y){switch(o){case"getKernelInfo":return[Ns(...y)];case"createPartialImageData":const r=await Js(...y),n=[];if("data"in r&&"width"in r&&"height"in r)n.push(r.data.buffer);else for(const d of Object.entries(r))n.push(r.data.buffer);return[r,n];default:throw new Error(`Unknown function: ${o}`)}}
