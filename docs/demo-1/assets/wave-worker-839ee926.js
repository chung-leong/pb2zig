import{u as Pe,a as ve,b as Ve,d as ke,c as Ie,e as Ce,f as xe,g as Ee,h as Ke,i as De,j as Fe,k as Me,l as _e,m as Te,o as $e,n as Be,p as Le,q as Ge}from"./index-d64bc850.js";Pe();ve();Ve();ke();Ie();Ce();xe();Ee();Ke();De();Fe();Me();_e();Te();$e();Be();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},S={},G={},H={},C={},J={},N={},x={},c={},b={},Q={},W={},E={},p={},X={},l={},s={},q={},g={},Y={},K={},Z={},D={},ee={},F={},te={},M={},se={},_={},R={},z={},re={},T={},ae={},$={},be={},w={},ne={},ie={},m={},ue={},A={},oe={},B={},U={},le={},me={},L={},j={},P={},pe={},fe={},Se={},de={},he={},ge={},ze={};Object.assign(S,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:5});Object.assign(G,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:4});Object.assign(H,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:3});Object.assign(C,{...t,type:11,name:"*const *const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:2});Object.assign(J,{...t,type:1,name:"[9:0]u8",length:9,byteSize:10,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:8});Object.assign(N,{...t,type:11,name:"*const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:7});Object.assign(x,{...t,type:11,name:"*const *const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:6});Object.assign(c,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:10});Object.assign(b,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:9});Object.assign(Q,{...t,type:1,name:"[4:0]u8",length:4,byteSize:5,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:13});Object.assign(W,{...t,type:11,name:"*const [4:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:12});Object.assign(E,{...t,type:11,name:"*const *const [4:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:11});Object.assign(p,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:33});Object.assign(X,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:32});Object.assign(l,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:l}],methods:[],template:null},slot:54});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:l}],methods:[],template:null},slot:53});const He=new Uint8Array,Je=new Uint8Array([80,248,15,0]),Ne=new Uint8Array([0,0,0,0,0,0,0,0]),Qe=new Uint8Array([120,248,15,0]),We=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(q,{...t,type:2,name:"Struct0016",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:He},slots:{0:{structure:s,memory:{array:Je},slots:{0:{structure:l,memory:{array:Ne}}}},1:{structure:s,memory:{array:Qe},slots:{0:{structure:l,memory:{array:We}}}}}}},slot:50});Object.assign(g,{...t,type:11,name:"Struct0014",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:49});const Xe=new Uint8Array,Ye=new Uint8Array([96,253,15,0]),Ze=new Uint8Array([0,0,0,0,0,0,176,64]),et=new Uint8Array([120,253,15,0]),tt=new Uint8Array([0,0,0,0,0,0,176,64]);Object.assign(Y,{...t,type:2,name:"Struct0017",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Xe},slots:{0:{structure:s,memory:{array:Ye},slots:{0:{structure:l,memory:{array:Ze}}}},1:{structure:s,memory:{array:et},slots:{0:{structure:l,memory:{array:tt}}}}}}},slot:52});Object.assign(K,{...t,type:11,name:"Struct0015",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:51});const st=new Uint8Array,rt=new Uint8Array([170,170,170,170]),at=new Uint8Array,nt=new Uint8Array([170,170,170,170]),it=new Uint8Array,ut=new Uint8Array([170,170,170,170]),ot=new Uint8Array;Object.assign(Z,{...t,type:2,name:"Struct0010",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:X},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:g},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:K},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:g}],methods:[],template:{memory:{array:st},slots:{0:{structure:g,memory:{array:rt},slots:{0:{structure:q,memory:{array:at}}}},1:{structure:K,memory:{array:nt},slots:{0:{structure:Y,memory:{array:it}}}},2:{structure:g,memory:{array:ut},slots:{0:{structure:q,memory:{array:ot}}}}}}},slot:39});Object.assign(D,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:38});const lt=new Uint8Array,mt=new Uint8Array([112,253,15,0]),yt=new Uint8Array([0,0,0,0,0,0,0,0]),ct=new Uint8Array([136,253,15,0]),bt=new Uint8Array([0,0,0,0,0,0,89,64]),pt=new Uint8Array([144,252,15,0]),ft=new Uint8Array([0,0,0,0,0,0,36,64]);Object.assign(ee,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:p},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:lt},slots:{0:{structure:s,memory:{array:mt},slots:{0:{structure:l,memory:{array:yt}}}},1:{structure:s,memory:{array:ct},slots:{0:{structure:l,memory:{array:bt}}}},2:{structure:s,memory:{array:pt},slots:{0:{structure:l,memory:{array:ft}}}}}}},slot:41});Object.assign(F,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:40});const St=new Uint8Array,dt=new Uint8Array([112,253,15,0]),ht=new Uint8Array([0,0,0,0,0,0,0,0]),gt=new Uint8Array([136,253,15,0]),zt=new Uint8Array([0,0,0,0,0,0,89,64]),wt=new Uint8Array([144,252,15,0]),Ot=new Uint8Array([0,0,0,0,0,0,20,64]);Object.assign(te,{...t,type:2,name:"Struct0012",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:p},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:St},slots:{0:{structure:s,memory:{array:dt},slots:{0:{structure:l,memory:{array:ht}}}},1:{structure:s,memory:{array:gt},slots:{0:{structure:l,memory:{array:zt}}}},2:{structure:s,memory:{array:wt},slots:{0:{structure:l,memory:{array:Ot}}}}}}},slot:43});Object.assign(M,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:42});const qt=new Uint8Array,At=new Uint8Array([170,170,170,170]),Rt=new Uint8Array,Ut=new Uint8Array([170,170,170,170]),jt=new Uint8Array,Pt=new Uint8Array([170,170,170,170]),vt=new Uint8Array;Object.assign(se,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"center",structure:D},{...e,type:8,isRequired:!1,slot:1,name:"amplitude",structure:F},{...e,type:8,isRequired:!1,slot:2,name:"frequency",structure:M}],methods:[],template:{memory:{array:qt},slots:{0:{structure:D,memory:{array:At},slots:{0:{structure:Z,memory:{array:Rt}}}},1:{structure:F,memory:{array:Ut},slots:{0:{structure:ee,memory:{array:jt}}}},2:{structure:M,memory:{array:Pt},slots:{0:{structure:te,memory:{array:vt}}}}}}},slot:15});Object.assign(_,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:14});const Vt=new Uint8Array,kt=new Uint8Array([112,248,15,0]),It=new Uint8Array([4,0,0,0]);Object.assign(R,{...t,type:2,name:"Struct0013",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:Vt},slots:{0:{structure:b,memory:{array:kt},slots:{0:{structure:c,memory:{array:It}}}}}}},slot:45});Object.assign(z,{...t,type:11,name:"Struct0009",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:44});const Ct=new Uint8Array,xt=new Uint8Array([170,170,170,170]),Et=new Uint8Array;Object.assign(re,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:z}],methods:[],template:{memory:{array:Ct},slots:{0:{structure:z,memory:{array:xt},slots:{0:{structure:R,memory:{array:Et}}}}}}},slot:17});Object.assign(T,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:16});const Kt=new Uint8Array,Dt=new Uint8Array([170,170,170,170]),Ft=new Uint8Array;Object.assign(ae,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:z}],methods:[],template:{memory:{array:Kt},slots:{0:{structure:z,memory:{array:Dt},slots:{0:{structure:R,memory:{array:Ft}}}}}}},slot:19});Object.assign($,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:18});const Mt=new Uint8Array,_t=new Uint8Array,Tt=new Uint8Array([32,36,16,0]),$t=new Uint8Array([207,35,16,0]),Bt=new Uint8Array([110,101,116,46,110,105,99,111,112,116,101,114,101,46,102,105,108,116,101,114,115,0]),Lt=new Uint8Array([28,36,16,0]),Gt=new Uint8Array([186,35,16,0]),Ht=new Uint8Array([110,105,99,111,112,116,101,114,101,0]),Jt=new Uint8Array([24,36,16,0]),Nt=new Uint8Array([1,0,0,0]),Qt=new Uint8Array([20,36,16,0]),Wt=new Uint8Array([164,35,16,0]),Xt=new Uint8Array([119,97,118,101,0]),Yt=new Uint8Array([170,170,170,170]),Zt=new Uint8Array,es=new Uint8Array([170,170,170,170]),ts=new Uint8Array,ss=new Uint8Array([170,170,170,170]),rs=new Uint8Array;Object.assign(be,{...t,type:2,name:"wave.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Mt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:C},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:x},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:b},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:E},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:_},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:T},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:$}],methods:[],template:{memory:{array:_t},slots:{0:{structure:C,memory:{array:Tt},slots:{0:{structure:H,memory:{array:$t},slots:{0:{structure:G,memory:{array:Bt}}}}}},1:{structure:x,memory:{array:Lt},slots:{0:{structure:N,memory:{array:Gt},slots:{0:{structure:J,memory:{array:Ht}}}}}},2:{structure:b,memory:{array:Jt},slots:{0:{structure:c,memory:{array:Nt}}}},3:{structure:E,memory:{array:Qt},slots:{0:{structure:W,memory:{array:Wt},slots:{0:{structure:Q,memory:{array:Xt}}}}}},4:{structure:_,memory:{array:Yt},slots:{0:{structure:se,memory:{array:Zt}}}},5:{structure:T,memory:{array:es},slots:{0:{structure:re,memory:{array:ts}}}},6:{structure:$,memory:{array:ss},slots:{0:{structure:ae,memory:{array:rs}}}}}}},slot:1});Object.assign(w,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:24});Object.assign(ne,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(ie,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ne}],methods:[],template:null},slot:22});Object.assign(m,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:25});const as=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ue,{...t,type:9,name:"wave.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:c},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:c}],methods:[],template:{memory:{array:as}}},slot:26});Object.assign(A,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:27});Object.assign(oe,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:46});const ns=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),is=new Uint8Array,us=new Uint8Array([108,35,16,0]),os=new Uint8Array([4,0,0,0]);Object.assign(B,{...t,type:2,name:"wave.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ie},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ue},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:A}],methods:[],template:{memory:{array:ns}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:oe},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:is},slots:{0:{structure:b,memory:{array:us},slots:{0:{structure:c,memory:{array:os}}}}}}},slot:21});const ls=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ms=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ae=new Uint8Array([0,0,0,0,0,0,0,0]),ys=new Uint8Array;Object.assign(U,{...t,type:2,name:"wave.KernelInput(u8,wave.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:B}],methods:[],template:{memory:{array:ls},slots:{0:{structure:B,memory:{array:ms},slots:{0:{structure:ie,memory:{array:Ae},address:1047568,slots:{0:{structure:ne,memory:{array:ys},address:0}}}}}}}},slot:20});Object.assign(le,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(me,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:le}],methods:[],template:null},slot:30});const cs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),bs=new Uint8Array,ps=new Uint8Array([108,35,16,0]),fs=new Uint8Array([4,0,0,0]);Object.assign(L,{...t,type:2,name:"wave.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:me},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ue},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:A}],methods:[],template:{memory:{array:cs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:oe},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:bs},slots:{0:{structure:b,memory:{array:ps},slots:{0:{structure:c,memory:{array:fs}}}}}}},slot:29});const Ss=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ds=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),hs=new Uint8Array;Object.assign(j,{...t,type:2,name:"wave.KernelOutput(u8,wave.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:L}],methods:[],template:{memory:{array:Ss},slots:{0:{structure:L,memory:{array:ds},slots:{0:{structure:me,memory:{array:Ae},address:1047568,slots:{0:{structure:le,memory:{array:hs},address:0}}}}}}}},slot:28});const gs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,32,65,0,0,160,64]);Object.assign(P,{...t,type:2,name:"wave.KernelParameters(wave.kernel)",length:1,byteSize:16,align:3,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"center",structure:X},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"amplitude",structure:p},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"frequency",structure:p}],methods:[],template:{memory:{array:gs}}},slot:31});Object.assign(pe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(wave.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:47});Object.assign(fe,{...t,type:7,name:"ErrorSet0000!wave.KernelOutput(u8,wave.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:pe}],methods:[],template:null},slot:36});Object.assign(Se,{...t,type:3,name:"createOutput",length:1,byteSize:80,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:6,bitOffset:192,bitSize:192,byteSize:24,slot:2,name:"2",structure:U},{...e,type:6,bitOffset:0,bitSize:128,byteSize:16,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:fe}],methods:[],template:null},slot:34});Object.assign(de,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(wave.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(he,{...t,type:7,name:"ErrorSet0001!wave.KernelOutput(u8,wave.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:de}],methods:[],template:null},slot:37});Object.assign(ge,{...t,type:3,name:"createPartialOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:2,name:"2",structure:m},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:3,name:"3",structure:m},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:4,name:"4",structure:U},{...e,type:6,bitOffset:0,bitSize:128,byteSize:16,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:he}],methods:[],template:null},slot:35});const zs=new Uint8Array,ws={argStruct:Se,thunk:7,name:"createOutput"},Os={argStruct:ge,thunk:2,name:"createPartialOutput"};Object.assign(ze,{...t,type:2,name:"wave",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:zs}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:be},{...e,type:7,isRequired:!1,name:"Input",structure:U},{...e,type:7,isRequired:!1,name:"Output",structure:j},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[ws,Os],template:null},slot:0});const qs=[S,G,H,C,J,N,x,c,b,Q,W,E,p,X,l,s,q,g,Y,K,Z,D,ee,F,te,M,se,_,R,z,re,T,ae,$,be,w,ne,ie,m,ue,A,oe,B,U,le,me,L,j,P,pe,fe,Se,de,he,ge,ze],As=Le(qs),Rs=ze.constructor,Us=(async()=>{const i=new URL("wave-d9258734.wasm",import.meta.url).href;return fetch(i)})();Ge(Us,{...As,writeBack:!0});const{createOutput:xs,createPartialOutput:js,kernel:ce,Input:Ps,Output:Es,Parameters:Ks}=Rs;function vs(i,o,a,r,n={},d={}){if(Array.isArray(n)){const f=n;n={};for(const[y,h]of Object.keys(ce.inputImages).entries())n[h]=f[y]}const v=new Ps(void 0),V=Object.keys(ce.inputImages),u=[];let O;for(const f of V){let y=n[f];if(y||(V.length===1&&["data","width","height"].every(h=>!!n[h])?y=n:u.push(f)),v[f]=y,O){if(y.colorSpace!==O)throw new Error(`Input images must all use the same color space: ${O}`)}else O=y.colorSpace}if(u.length>0)throw new Error(`Missing input image${u.length>1?"s":""}: ${u.join(", ")}`);const ye=js(i,o,a,r,v,d),we=f=>{const y=Object.keys(f),h={};for(const Oe of y){const{data:{typedArray:k},width:qe,height:Ue}=f[Oe];let I;if(typeof ImageData=="function"){const je=new Uint8ClampedArray(k.buffer,k.byteOffset,k.byteLength);I=new ImageData(je,qe,r,{colorSpace:O})}else I={data:k,width:qe,height:Ue};if(y.length===1)return I;h[Oe]=I}return h};return ye[Symbol.toStringTag]==="Promise"?ye.then(we):we(ye)}function Vs(){const i={};for(let[o,a]of Object.entries(ce)){if(o==="parameters"){const r={};for(const[n,d]of Object.entries(a)){const v=r[n]={};for(let[V,u]of Object.entries(d))typeof u=="object"?"string"in u?u=u.string:u=Re(u):typeof u=="function"&&(u=ks(u.name)),v[V]=u}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());i[o]=a}return i}function Re(i){const o=[];for(let[a,r]of Object.entries(i))typeof r=="object"&&(r=Re(r)),o[a]=r;return o}function ks(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[o,a,...r]=i.data;Is(o,r).then(([n,d])=>{postMessage([o,a,n],{transfer:d})}).catch(n=>{postMessage(["error",a,n])})};async function Is(i,o){switch(i){case"getKernelInfo":return[Vs(...o)];case"createPartialImageData":const r=await vs(...o),n=[];if("data"in r&&"width"in r&&"height"in r)n.push(r.data.buffer);else for(const d of Object.entries(r))n.push(r.data.buffer);return[r,n];default:throw new Error(`Unknown function: ${i}`)}}
