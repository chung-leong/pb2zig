import{u as De,a as Te,b as Me,d as $e,c as Be,e as Le,f as Ge,g as He,h as Je,i as Ne,j as Qe,k as We,l as Xe,m as Ye,n as Ze,o as et,p as tt,q as st,r as rt}from"./index-778418ea.js";De();Te();Me();$e();Be();Le();Ge();He();Je();Ne();Qe();We();Xe();Ye();Ze();et();tt();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},b={},N={},Q={},k={},W={},X={},C={},c={},h={},Y={},Z={},v={},p={},u={},r={},ee={},te={},E={},se={},K={},re={},ae={},F={},ie={},D={},ne={},me={},T={},oe={},M={},le={},$={},B={},A={},z={},ue={},L={},ce={},G={},ze={},O={},ye={},pe={},l={},be={},q={},w={},fe={},H={},V={},de={},he={},J={},U={},j={},Oe={},Re={},qe={},we={},Ae={},Ve={},Ue={};Object.assign(b,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:5});Object.assign(N,{...t,type:1,name:"[19:0]u8",length:19,byteSize:20,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:4});Object.assign(Q,{...t,type:11,name:"*const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:3});Object.assign(k,{...t,type:11,name:"**const [19:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:2});Object.assign(W,{...t,type:1,name:"[17:0]u8",length:17,byteSize:18,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:8});Object.assign(X,{...t,type:11,name:"*const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:7});Object.assign(C,{...t,type:11,name:"**const [17:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:6});Object.assign(c,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:10});Object.assign(h,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:9});Object.assign(Y,{...t,type:1,name:"[12:0]u8",length:12,byteSize:13,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:13});Object.assign(Z,{...t,type:11,name:"*const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:12});Object.assign(v,{...t,type:11,name:"**const [12:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:11});Object.assign(p,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:33});Object.assign(u,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:u}],methods:[],template:null},slot:50});Object.assign(r,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:49});Object.assign(ee,{...t,type:1,name:"[8:0]u8",length:8,byteSize:9,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:53});Object.assign(te,{...t,type:11,name:"*const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:52});Object.assign(E,{...t,type:11,name:"*const *const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:51});const at=new Uint8Array([]),it=new Uint8Array([168,2,16,0]),Ie=new Uint8Array([0,0,0,0,0,0,240,63]),nt=new Uint8Array([144,2,16,0]),ke=new Uint8Array([0,0,0,0,0,192,114,64]),mt=new Uint8Array([184,2,16,0]),ot=new Uint8Array([0,0,0,0,0,0,89,64]),lt=new Uint8Array([176,2,16,0]),ut=new Uint8Array([207,2,16,0]),ct=new Uint8Array([100,105,115,116,97,110,99,101,0]);Object.assign(se,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 300, comptime defaultValue: comptime_float = 100, comptime description: *const [8:0]u8 = "distance"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:p},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:E}],methods:[],template:{memory:{array:at},slots:{0:{structure:r,memory:{array:it},slots:{0:{structure:u,memory:{array:Ie},address:1049256}}},1:{structure:r,memory:{array:nt},slots:{0:{structure:u,memory:{array:ke},address:1049232}}},2:{structure:r,memory:{array:mt},slots:{0:{structure:u,memory:{array:ot},address:1049272}}},3:{structure:E,memory:{array:lt},slots:{0:{structure:te,memory:{array:ut},address:1049264,slots:{0:{structure:ee,memory:{array:ct},address:1049295}}}}}}}},slot:39});Object.assign(K,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 300, comptime defaultValue: comptime_float = 100, comptime description: *const [8:0]u8 = "distance"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:38});Object.assign(re,{...t,type:1,name:"[4:0]u8",length:4,byteSize:5,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:56});Object.assign(ae,{...t,type:11,name:"*const [4:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:55});Object.assign(F,{...t,type:11,name:"*const *const [4:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:54});const yt=new Uint8Array([]),pt=new Uint8Array([152,2,16,0]),Ce=new Uint8Array([0,0,0,0,0,0,0,0]),bt=new Uint8Array([136,2,16,0]),ve=new Uint8Array([0,0,0,0,0,0,0,64]),ft=new Uint8Array([168,2,16,0]),dt=new Uint8Array([160,2,16,0]),ht=new Uint8Array([202,2,16,0]),St=new Uint8Array([115,105,122,101,0]);Object.assign(ie,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 1, comptime description: *const [4:0]u8 = "size"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:p},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:F}],methods:[],template:{memory:{array:yt},slots:{0:{structure:r,memory:{array:pt},slots:{0:{structure:u,memory:{array:Ce},address:1049240}}},1:{structure:r,memory:{array:bt},slots:{0:{structure:u,memory:{array:ve},address:1049224}}},2:{structure:r,memory:{array:ft},slots:{0:{structure:u,memory:{array:Ie},address:1049256}}},3:{structure:F,memory:{array:dt},slots:{0:{structure:ae,memory:{array:ht},address:1049248,slots:{0:{structure:re,memory:{array:St},address:1049290}}}}}}}},slot:41});Object.assign(D,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 1, comptime description: *const [4:0]u8 = "size"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:40});Object.assign(ne,{...t,type:1,name:"[9:0]u8",length:9,byteSize:10,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:59});Object.assign(me,{...t,type:11,name:"*const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:58});Object.assign(T,{...t,type:11,name:"*const *const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:57});const gt=new Uint8Array([]),zt=new Uint8Array([152,2,16,0]),Ot=new Uint8Array([144,2,16,0]),Rt=new Uint8Array([136,2,16,0]),qt=new Uint8Array([132,2,16,0]),wt=new Uint8Array([192,2,16,0]),At=new Uint8Array([101,100,103,101,65,108,112,104,97,0]);Object.assign(oe,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 300, comptime defaultValue: comptime_float = 2, comptime description: *const [9:0]u8 = "edgeAlpha"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:p},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:T}],methods:[],template:{memory:{array:gt},slots:{0:{structure:r,memory:{array:zt},slots:{0:{structure:u,memory:{array:Ce},address:1049240}}},1:{structure:r,memory:{array:Ot},slots:{0:{structure:u,memory:{array:ke},address:1049232}}},2:{structure:r,memory:{array:Rt},slots:{0:{structure:u,memory:{array:ve},address:1049224}}},3:{structure:T,memory:{array:qt},slots:{0:{structure:me,memory:{array:wt},address:1049220,slots:{0:{structure:ne,memory:{array:At},address:1049280}}}}}}}},slot:43});Object.assign(M,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 300, comptime defaultValue: comptime_float = 2, comptime description: *const [9:0]u8 = "edgeAlpha"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:42});const Vt=new Uint8Array([]),Ut=new Uint8Array([170,170,170,170]),d=new Uint8Array([]),jt=new Uint8Array([170,170,170,170]),Pt=new Uint8Array([170,170,170,170]);Object.assign(le,{...t,type:2,name:'struct{comptime dist: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 300, comptime defaultValue: comptime_float = 100, comptime description: *const [8:0]u8 = "distance"} = .{.type = f32, .minValue = 1, .maxValue = 300, .defaultValue = 100, .description = "distance"}, comptime size: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 1, comptime description: *const [4:0]u8 = "size"} = .{.type = f32, .minValue = 0, .maxValue = 2, .defaultValue = 1, .description = "size"}, comptime edgeAlpha: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 300, comptime defaultValue: comptime_float = 2, comptime description: *const [9:0]u8 = "edgeAlpha"} = .{.type = f32, .minValue = 0, .maxValue = 300, .defaultValue = 2, .description = "edgeAlpha"}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dist",structure:K},{...e,type:8,isRequired:!1,slot:1,name:"size",structure:D},{...e,type:8,isRequired:!1,slot:2,name:"edgeAlpha",structure:M}],methods:[],template:{memory:{array:Vt},slots:{0:{structure:K,memory:{array:Ut},slots:{0:{structure:se,memory:{array:d},address:-1431655766}}},1:{structure:D,memory:{array:jt},slots:{0:{structure:ie,memory:{array:d},address:-1431655766}}},2:{structure:M,memory:{array:Pt},slots:{0:{structure:oe,memory:{array:d},address:-1431655766}}}}}},slot:15});Object.assign($,{...t,type:11,name:'*struct{comptime dist: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 300, comptime defaultValue: comptime_float = 100, comptime description: *const [8:0]u8 = "distance"} = .{.type = f32, .minValue = 1, .maxValue = 300, .defaultValue = 100, .description = "distance"}, comptime size: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 1, comptime description: *const [4:0]u8 = "size"} = .{.type = f32, .minValue = 0, .maxValue = 2, .defaultValue = 1, .description = "size"}, comptime edgeAlpha: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 300, comptime defaultValue: comptime_float = 2, comptime description: *const [9:0]u8 = "edgeAlpha"} = .{.type = f32, .minValue = 0, .maxValue = 300, .defaultValue = 2, .description = "edgeAlpha"}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:14});Object.assign(B,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:60});const _t=new Uint8Array([]),xt=new Uint8Array([128,2,16,0]),It=new Uint8Array([4,0,0,0]);Object.assign(A,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:B}],methods:[],template:{memory:{array:_t},slots:{0:{structure:B,memory:{array:xt},slots:{0:{structure:c,memory:{array:It},address:1049216}}}}}},slot:45});Object.assign(z,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:44});const kt=new Uint8Array([]),Ct=new Uint8Array([170,170,170,170]);Object.assign(ue,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:z}],methods:[],template:{memory:{array:kt},slots:{0:{structure:z,memory:{array:Ct},slots:{0:{structure:A,memory:{array:d},address:-1431655766}}}}}},slot:17});Object.assign(L,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:16});const vt=new Uint8Array([]),Et=new Uint8Array([170,170,170,170]);Object.assign(ce,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:z}],methods:[],template:{memory:{array:vt},slots:{0:{structure:z,memory:{array:Et},slots:{0:{structure:A,memory:{array:d},address:-1431655766}}}}}},slot:19});Object.assign(G,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:18});const Kt=new Uint8Array([]),Ft=new Uint8Array([]),Dt=new Uint8Array([44,251,15,0]),Tt=new Uint8Array([161,23,16,0]),Mt=new Uint8Array([98,101,46,110,101,117,114,111,112,114,111,100,117,99,116,105,111,110,115,0]),$t=new Uint8Array([108,251,15,0]),Bt=new Uint8Array([143,23,16,0]),Lt=new Uint8Array([78,101,117,114,111,32,80,114,111,100,117,99,116,105,111,110,115,0]),Gt=new Uint8Array([172,251,15,0]),Ht=new Uint8Array([1,0,0,0]),Jt=new Uint8Array([4,252,15,0]),Nt=new Uint8Array([130,23,16,0]),Qt=new Uint8Array([99,105,114,99,108,101,80,105,120,101,108,115,0]),Wt=new Uint8Array([170,170,170,170]),Xt=new Uint8Array([170,170,170,170]),Yt=new Uint8Array([170,170,170,170]);Object.assign(ze,{...t,type:2,name:"circle-pixels.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Kt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:k},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:C},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:h},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:v},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:$},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:L},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:G}],methods:[],template:{memory:{array:Ft},slots:{0:{structure:k,memory:{array:Dt},slots:{0:{structure:Q,memory:{array:Tt},slots:{0:{structure:N,memory:{array:Mt},address:1054625}}}}},1:{structure:C,memory:{array:$t},slots:{0:{structure:X,memory:{array:Bt},slots:{0:{structure:W,memory:{array:Lt},address:1054607}}}}},2:{structure:h,memory:{array:Gt},slots:{0:{structure:c,memory:{array:Ht}}}},3:{structure:v,memory:{array:Jt},slots:{0:{structure:Z,memory:{array:Nt},slots:{0:{structure:Y,memory:{array:Qt},address:1054594}}}}},4:{structure:$,memory:{array:Wt},slots:{0:{structure:le,memory:{array:d},address:-1431655766}}},5:{structure:L,memory:{array:Xt},slots:{0:{structure:ue,memory:{array:d},address:-1431655766}}},6:{structure:G,memory:{array:Yt},slots:{0:{structure:ce,memory:{array:d},address:-1431655766}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:24});Object.assign(ye,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(pe,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ye}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const Zt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(be,{...t,type:9,name:"circle-pixels.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:c},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:c}],methods:[],template:{memory:{array:Zt}}},slot:26});Object.assign(q,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:q}],methods:[],template:null},slot:27});Object.assign(w,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:28});Object.assign(fe,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:46});const es=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ts=new Uint8Array([]),ss=new Uint8Array([8,250,15,0]),rs=new Uint8Array([4,0,0,0]);Object.assign(H,{...t,type:2,name:"circle-pixels.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:pe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:be},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:q},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:w}],methods:[],template:{memory:{array:es}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:fe},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:ts},slots:{0:{structure:h,memory:{array:ss},slots:{0:{structure:c,memory:{array:rs}}}}}}},slot:21});const as=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),is=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ns=new Uint8Array([0,0,0,0,0,0,0,0]),je=new Uint8Array([]);Object.assign(V,{...t,type:2,name:"circle-pixels.KernelInput(u8,circle-pixels.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:H}],methods:[],template:{memory:{array:as},slots:{0:{structure:H,memory:{array:is},slots:{0:{structure:pe,memory:{array:ns},slots:{0:{structure:ye,memory:{array:je}}}}}}}}},slot:20});Object.assign(de,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(he,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:de}],methods:[],template:null},slot:31});const ms=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),os=new Uint8Array([]),ls=new Uint8Array([8,250,15,0]),us=new Uint8Array([4,0,0,0]);Object.assign(J,{...t,type:2,name:"circle-pixels.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:he},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:be},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:q},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:w}],methods:[],template:{memory:{array:ms}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:fe},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:os},slots:{0:{structure:h,memory:{array:ls},slots:{0:{structure:c,memory:{array:us}}}}}}},slot:30});const cs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ys=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ps=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(U,{...t,type:2,name:"circle-pixels.KernelOutput(u8,circle-pixels.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:J}],methods:[],template:{memory:{array:cs},slots:{0:{structure:J,memory:{array:ys},slots:{0:{structure:he,memory:{array:ps},slots:{0:{structure:de,memory:{array:je}}}}}}}}},slot:29});const bs=new Uint8Array([0,0,200,66,0,0,128,63,0,0,0,64]);Object.assign(j,{...t,type:2,name:"circle-pixels.KernelParameters(circle-pixels.kernel)",length:1,byteSize:12,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"dist",structure:p},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"size",structure:p},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"edgeAlpha",structure:p}],methods:[],template:{memory:{array:bs}}},slot:32});Object.assign(Oe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(circle-pixels.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:47});Object.assign(Re,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(circle-pixels.createOutput)).Fn.return_type.?).ErrorUnion.error_set!circle-pixels.KernelOutput(u8,circle-pixels.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Oe}],methods:[],template:null},slot:36});Object.assign(qe,{...t,type:3,name:"createOutput",length:1,byteSize:72,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:V},{...e,type:6,bitOffset:256,bitSize:96,byteSize:12,slot:3,name:"3",structure:j},{...e,type:6,bitOffset:352,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Re}],methods:[],template:null},slot:34});Object.assign(we,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(circle-pixels.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(Ae,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(circle-pixels.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!circle-pixels.KernelOutput(u8,circle-pixels.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:we}],methods:[],template:null},slot:37});Object.assign(Ve,{...t,type:3,name:"createPartialOutput",length:1,byteSize:80,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:V},{...e,type:6,bitOffset:320,bitSize:96,byteSize:12,slot:5,name:"5",structure:j},{...e,type:6,bitOffset:416,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Ae}],methods:[],template:null},slot:35});const fs={argStruct:qe,thunk:1,name:"createOutput"},ds={argStruct:Ve,thunk:5,name:"createPartialOutput"};Object.assign(Ue,{...t,type:2,name:"circle-pixels",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:je}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ze},{...e,type:7,isRequired:!1,name:"Input",structure:V},{...e,type:7,isRequired:!1,name:"Output",structure:U},{...e,type:7,isRequired:!1,name:"Parameters",structure:j}],methods:[fs,ds],template:null},slot:0});const hs=[b,N,Q,k,W,X,C,c,h,Y,Z,v,p,u,r,ee,te,E,se,K,re,ae,F,ie,D,ne,me,T,oe,M,le,$,B,A,z,ue,L,ce,G,ze,O,ye,pe,l,be,q,w,fe,H,V,de,he,J,U,j,Oe,Re,qe,we,Ae,Ve,Ue],Ss=st(hs),gs=Ue.constructor,zs=(async()=>{const n=new URL("circle-pixels-2c91e903.wasm",import.meta.url).href;return fetch(n)})();rt(zs,{...Ss,writeBack:!0});const{createOutput:js,createPartialOutput:Os,kernel:ge,Input:Rs,Output:Ps,Parameters:_s}=gs;function qs(n,o,a,s,i={},S={}){if(Array.isArray(i)){const f=i;i={};for(const[y,g]of Object.keys(ge.inputImages).entries())i[g]=f[y]}const P=new Rs(void 0),_=Object.keys(ge.inputImages),m=[];let R;for(const f of _){let y=i[f];if(y||(_.length===1&&["data","width","height"].every(g=>!!i[g])?y=i:m.push(f)),P[f]=y,R){if(y.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=y.colorSpace}if(m.length>0)throw new Error(`Missing input image${m.length>1?"s":""}: ${m.join(", ")}`);const Se=Os(n,o,a,s,P,S),Pe=f=>{const y=Object.keys(f),g={};for(const _e of y){const{data:{typedArray:x},width:xe,height:Ke}=f[_e];let I;if(typeof ImageData=="function"){const Fe=new Uint8ClampedArray(x.buffer,x.byteOffset,x.byteLength);I=new ImageData(Fe,xe,s,{colorSpace:R})}else I={data:x,width:xe,height:Ke};if(y.length===1)return I;g[_e]=I}return g};return Se[Symbol.toStringTag]==="Promise"?Se.then(Pe):Pe(Se)}function ws(){const n={};for(let[o,a]of Object.entries(ge)){if(o==="parameters"){const s={};for(const[i,S]of Object.entries(a)){const P=s[i]={};for(let[_,m]of Object.entries(S))typeof m=="object"?"string"in m?m=m.string:m=Ee(m):typeof m=="function"&&(m=As(m.name)),P[_]=m}a=s}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());n[o]=a}return n}function Ee(n){const o=[];for(let[a,s]of Object.entries(n))typeof s=="object"&&(s=Ee(s)),o[a]=s;return o}function As(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,a,...s]=n.data;Vs(o,s).then(([i,S])=>{postMessage([o,a,i],{transfer:S})}).catch(i=>{postMessage(["error",a,i])})};async function Vs(n,o){switch(n){case"getKernelInfo":return[ws(...o)];case"createPartialImageData":const s=await qs(...o),i=[];if("data"in s&&"width"in s&&"height"in s)i.push(s.data.buffer);else for(const S of Object.entries(s))i.push(s.data.buffer);return[s,i];default:throw new Error(`Unknown function: ${n}`)}}
