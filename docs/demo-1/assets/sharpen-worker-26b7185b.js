import{u as ge,a as ze,b as Oe,c as we,d as Re,e as qe,f as Ae,g as Ue,h as je,i as Pe,j as Ve,k as ke,l as Ie,m as Ce,o as ve,n as xe,p as Ee,q as Ke}from"./index-422d9c98.js";ge();ze();Oe();we();Re();qe();Ae();Ue();je();Pe();Ve();ke();Ie();Ce();ve();xe();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},z={},q={},A={},g={},c={},b={},B={},L={},E={},f={},y={},o={},G={},K={},H={},D={},J={},F={},j={},O={},N={},M={},Q={},_={},ae={},w={},W={},X={},l={},Y={},U={},Z={},T={},P={},ee={},te={},$={},V={},k={},ne={},ie={},ue={},oe={},le={},me={},ye={};Object.assign(z,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:5});Object.assign(q,{...t,type:1,name:"[11:0]u8",length:11,byteSize:12,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:4});Object.assign(A,{...t,type:11,name:"*const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:3});Object.assign(g,{...t,type:11,name:"*const *const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:2});Object.assign(c,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:7});Object.assign(b,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:6});Object.assign(B,{...t,type:1,name:"[37:0]u8",length:37,byteSize:38,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:10});Object.assign(L,{...t,type:11,name:"*const [37:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:9});Object.assign(E,{...t,type:11,name:"*const *const [37:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:8});Object.assign(f,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:29});Object.assign(y,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:y}],methods:[],template:null},slot:44});Object.assign(o,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:43});const De=new Uint8Array([]),Fe=new Uint8Array([24,253,15,0]),Me=new Uint8Array([0,0,0,0,0,0,0,0]),_e=new Uint8Array([64,253,15,0]),Te=new Uint8Array([0,0,0,0,0,0,52,64]),$e=new Uint8Array([104,253,15,0]),Be=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(G,{...t,type:2,name:"Struct0009",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:o},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:o}],methods:[],template:{memory:{array:De},slots:{0:{structure:o,memory:{array:Fe},slots:{0:{structure:y,memory:{array:Me}}}},1:{structure:o,memory:{array:_e},slots:{0:{structure:y,memory:{array:Te}}}},2:{structure:o,memory:{array:$e},slots:{0:{structure:y,memory:{array:Be}}}}}}},slot:35});Object.assign(K,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:34});const Le=new Uint8Array([]),Ge=new Uint8Array([24,253,15,0]),He=new Uint8Array([0,0,0,0,0,0,0,0]),Je=new Uint8Array([64,253,15,0]),Ne=new Uint8Array([0,0,0,0,0,0,240,63]),Qe=new Uint8Array([104,253,15,0]),We=new Uint8Array([154,153,153,153,153,153,185,63]);Object.assign(H,{...t,type:2,name:"Struct0010",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:o},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:o}],methods:[],template:{memory:{array:Le},slots:{0:{structure:o,memory:{array:Ge},slots:{0:{structure:y,memory:{array:He}}}},1:{structure:o,memory:{array:Je},slots:{0:{structure:y,memory:{array:Ne}}}},2:{structure:o,memory:{array:Qe},slots:{0:{structure:y,memory:{array:We}}}}}}},slot:37});Object.assign(D,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:36});const Xe=new Uint8Array([]),Ye=new Uint8Array([170,170,170,170]),d=new Uint8Array([]),Ze=new Uint8Array([170,170,170,170]);Object.assign(J,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"amount",structure:K},{...e,type:8,isRequired:!1,slot:1,name:"radius",structure:D}],methods:[],template:{memory:{array:Xe},slots:{0:{structure:K,memory:{array:Ye},slots:{0:{structure:G,memory:{array:d},address:-1431655766}}},1:{structure:D,memory:{array:Ze},slots:{0:{structure:H,memory:{array:d},address:-1431655766}}}}}},slot:12});Object.assign(F,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:11});const et=new Uint8Array([]),tt=new Uint8Array([64,249,15,0]),st=new Uint8Array([4,0,0,0]);Object.assign(j,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:et},slots:{0:{structure:b,memory:{array:tt},slots:{0:{structure:c,memory:{array:st}}}}}}},slot:39});Object.assign(O,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:j}],methods:[],template:null},slot:38});const rt=new Uint8Array([]),at=new Uint8Array([170,170,170,170]);Object.assign(N,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:O}],methods:[],template:{memory:{array:rt},slots:{0:{structure:O,memory:{array:at},slots:{0:{structure:j,memory:{array:d},address:-1431655766}}}}}},slot:14});Object.assign(M,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:13});const nt=new Uint8Array([]),it=new Uint8Array([170,170,170,170]);Object.assign(Q,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:O}],methods:[],template:{memory:{array:nt},slots:{0:{structure:O,memory:{array:it},slots:{0:{structure:j,memory:{array:d},address:-1431655766}}}}}},slot:16});Object.assign(_,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:15});const ut=new Uint8Array([]),ot=new Uint8Array([]),lt=new Uint8Array([116,249,15,0]),mt=new Uint8Array([201,7,16,0]),yt=new Uint8Array([99,111,109,46,114,112,104,101,108,97,110,0]),ct=new Uint8Array([204,249,15,0]),bt=new Uint8Array([189,7,16,0]),pt=new Uint8Array([82,121,97,110,32,80,104,101,108,97,110,0]),ft=new Uint8Array([36,250,15,0]),dt=new Uint8Array([1,0,0,0]),ht=new Uint8Array([124,250,15,0]),St=new Uint8Array([151,7,16,0]),gt=new Uint8Array([65,112,112,108,105,101,115,32,97,32,115,104,97,114,112,101,110,32,101,102,102,101,99,116,32,116,111,32,97,110,32,105,109,97,103,101,46,0]),zt=new Uint8Array([170,170,170,170]),Ot=new Uint8Array([170,170,170,170]),wt=new Uint8Array([170,170,170,170]);Object.assign(ae,{...t,type:2,name:"sharpen.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ut}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:g},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:g},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:b},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:E},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:F},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:M},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:_}],methods:[],template:{memory:{array:ot},slots:{0:{structure:g,memory:{array:lt},slots:{0:{structure:A,memory:{array:mt},slots:{0:{structure:q,memory:{array:yt},address:1050569}}}}},1:{structure:g,memory:{array:ct},slots:{0:{structure:A,memory:{array:bt},slots:{0:{structure:q,memory:{array:pt},address:1050557}}}}},2:{structure:b,memory:{array:ft},slots:{0:{structure:c,memory:{array:dt}}}},3:{structure:E,memory:{array:ht},slots:{0:{structure:L,memory:{array:St},slots:{0:{structure:B,memory:{array:gt},address:1050519}}}}},4:{structure:F,memory:{array:zt},slots:{0:{structure:J,memory:{array:d},address:-1431655766}}},5:{structure:M,memory:{array:Ot},slots:{0:{structure:N,memory:{array:d},address:-1431655766}}},6:{structure:_,memory:{array:wt},slots:{0:{structure:Q,memory:{array:d},address:-1431655766}}}}}},slot:1});Object.assign(w,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:21});Object.assign(W,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:20});Object.assign(X,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:W}],methods:[],template:null},slot:19});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:22});const Rt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Y,{...t,type:9,name:"sharpen.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:c},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:c}],methods:[],template:{memory:{array:Rt}}},slot:23});Object.assign(U,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:U}],methods:[],template:null},slot:24});Object.assign(Z,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:40});const qt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),At=new Uint8Array([]),Ut=new Uint8Array([72,253,15,0]),jt=new Uint8Array([4,0,0,0]);Object.assign(T,{...t,type:2,name:"sharpen.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:X},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Y},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:U}],methods:[],template:{memory:{array:qt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:Z},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:At},slots:{0:{structure:b,memory:{array:Ut},slots:{0:{structure:c,memory:{array:jt}}}}}}},slot:18});const Pt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Vt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),kt=new Uint8Array([0,0,0,0,0,0,0,0]),ce=new Uint8Array([]);Object.assign(P,{...t,type:2,name:"sharpen.KernelInput(u8,sharpen.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:T}],methods:[],template:{memory:{array:Pt},slots:{0:{structure:T,memory:{array:Vt},slots:{0:{structure:X,memory:{array:kt},slots:{0:{structure:W,memory:{array:ce}}}}}}}}},slot:17});Object.assign(ee,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:20});Object.assign(te,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ee}],methods:[],template:null},slot:27});const It=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ct=new Uint8Array([]),vt=new Uint8Array([72,253,15,0]),xt=new Uint8Array([4,0,0,0]);Object.assign($,{...t,type:2,name:"sharpen.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:te},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Y},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:U}],methods:[],template:{memory:{array:It}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:Z},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:Ct},slots:{0:{structure:b,memory:{array:vt},slots:{0:{structure:c,memory:{array:xt}}}}}}},slot:26});const Et=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Kt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Dt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(V,{...t,type:2,name:"sharpen.KernelOutput(u8,sharpen.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:$}],methods:[],template:{memory:{array:Et},slots:{0:{structure:$,memory:{array:Kt},slots:{0:{structure:te,memory:{array:Dt},slots:{0:{structure:ee,memory:{array:ce}}}}}}}}},slot:25});const Ft=new Uint8Array([0,0,128,63,205,204,204,61]);Object.assign(k,{...t,type:2,name:"sharpen.KernelParameters(sharpen.kernel)",length:1,byteSize:8,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"amount",structure:f},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"radius",structure:f}],methods:[],template:{memory:{array:Ft}}},slot:28});Object.assign(ne,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(sharpen.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:41});Object.assign(ie,{...t,type:7,name:"ErrorSet0000!sharpen.KernelOutput(u8,sharpen.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:V},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ne}],methods:[],template:null},slot:32});Object.assign(ue,{...t,type:3,name:"createOutput",length:1,byteSize:68,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:P},{...e,type:6,bitOffset:256,bitSize:64,byteSize:8,slot:3,name:"3",structure:k},{...e,type:6,bitOffset:320,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ie}],methods:[],template:null},slot:30});Object.assign(oe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(sharpen.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:42});Object.assign(le,{...t,type:7,name:"ErrorSet0001!sharpen.KernelOutput(u8,sharpen.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:V},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:oe}],methods:[],template:null},slot:33});Object.assign(me,{...t,type:3,name:"createPartialOutput",length:1,byteSize:76,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:P},{...e,type:6,bitOffset:320,bitSize:64,byteSize:8,slot:5,name:"5",structure:k},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:6,name:"retval",structure:le}],methods:[],template:null},slot:31});const Mt={argStruct:ue,thunk:8,name:"createOutput"},_t={argStruct:me,thunk:2,name:"createPartialOutput"};Object.assign(ye,{...t,type:2,name:"sharpen",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ce}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ae},{...e,type:7,isRequired:!1,name:"Input",structure:P},{...e,type:7,isRequired:!1,name:"Output",structure:V},{...e,type:7,isRequired:!1,name:"Parameters",structure:k}],methods:[Mt,_t],template:null},slot:0});const Tt=[z,q,A,g,c,b,B,L,E,f,y,o,G,K,H,D,J,F,j,O,N,M,Q,_,ae,w,W,X,l,Y,U,Z,T,P,ee,te,$,V,k,ne,ie,ue,oe,le,me,ye],$t=Ee(Tt),Bt=ye.constructor,Lt=(async()=>{const n=new URL("sharpen-7322b0aa.wasm",import.meta.url).href;return fetch(n)})();Ke(Lt,{...$t,writeBack:!0});const{createOutput:Yt,createPartialOutput:Gt,kernel:re,Input:Ht,Output:Zt,Parameters:es}=Bt;function Jt(n,u,r,s,a={},h={}){if(Array.isArray(a)){const p=a;a={};for(const[m,S]of Object.keys(re.inputImages).entries())a[S]=p[m]}const I=new Ht(void 0),C=Object.keys(re.inputImages),i=[];let R;for(const p of C){let m=a[p];if(m||(C.length===1&&["data","width","height"].every(S=>!!a[S])?m=a:i.push(p)),I[p]=m,R){if(m.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=m.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const se=Gt(n,u,r,s,I,h),be=p=>{const m=Object.keys(p),S={};for(const pe of m){const{data:{typedArray:v},width:fe,height:he}=p[pe];let x;if(typeof ImageData=="function"){const Se=new Uint8ClampedArray(v.buffer,v.byteOffset,v.byteLength);x=new ImageData(Se,fe,s,{colorSpace:R})}else x={data:v,width:fe,height:he};if(m.length===1)return x;S[pe]=x}return S};return se[Symbol.toStringTag]==="Promise"?se.then(be):be(se)}function Nt(){const n={};for(let[u,r]of Object.entries(re)){if(u==="parameters"){const s={};for(const[a,h]of Object.entries(r)){const I=s[a]={};for(let[C,i]of Object.entries(h))typeof i=="object"?"string"in i?i=i.string:i=de(i):typeof i=="function"&&(i=Qt(i.name)),I[C]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[u]=r}return n}function de(n){const u=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=de(s)),u[r]=s;return u}function Qt(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[u,r,...s]=n.data;Wt(u,s).then(([a,h])=>{postMessage([u,r,a],{transfer:h})}).catch(a=>{postMessage(["error",r,a])})};async function Wt(n,u){switch(n){case"getKernelInfo":return[Nt(...u)];case"createPartialImageData":const s=await Jt(...u),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const h of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
