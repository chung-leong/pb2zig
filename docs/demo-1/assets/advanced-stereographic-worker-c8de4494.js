import{u as dt,a as bt,b as ht,d as gt,c as St,e as zt,f as Vt,g as Ot,h as wt,i as Rt,j as qt,k as _t,l as At,m as Ut,n as jt,o as xt,p as Pt,q as vt,r as Ct}from"./index-9f315e7a.js";dt();bt();ht();gt();St();zt();Vt();Ot();wt();Rt();qt();_t();At();Ut();jt();xt();Pt();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},y={},fe={},de={},M={},q={},g={},$={},f={},h={},be={},he={},B={},n={},V={},r={},s={},ge={},L={},Se={},G={},ze={},H={},Ve={},Oe={},J={},we={},N={},Re={},Q={},qe={},W={},_e={},X={},O={},Ae={},Y={},Ue={},je={},Z={},xe={},ee={},Pe={},te={},P={},v={},w={},ve={},se={},Ce={},Ie={},re={},ke={},ae={},ie={},Ee={},me={},Ke={},oe={},ne={},C={},R={},Fe={},ce={},De={},ue={},Ne={},_={},Te={},Me={},p={},$e={},U={},j={},Be={},le={},I={},Le={},Ge={},pe={},k={},E={},Qe={},We={},Xe={},Ye={},Ze={},et={},tt={};Object.assign(y,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:5});Object.assign(fe,{...t,type:1,name:"[33:0]u8",length:33,byteSize:34,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:4});Object.assign(de,{...t,type:11,name:"*const [33:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:3});Object.assign(M,{...t,type:11,name:"**const [33:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:de}],methods:[],template:null},slot:2});Object.assign(q,{...t,type:1,name:"[16:0]u8",length:16,byteSize:17,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:8});Object.assign(g,{...t,type:11,name:"*const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:7});Object.assign($,{...t,type:11,name:"**const [16:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:g}],methods:[],template:null},slot:6});Object.assign(f,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:10});Object.assign(h,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:f}],methods:[],template:null},slot:9});Object.assign(be,{...t,type:1,name:"[48:0]u8",length:48,byteSize:49,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:13});Object.assign(he,{...t,type:11,name:"*const [48:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:12});Object.assign(B,{...t,type:11,name:"**const [48:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:he}],methods:[],template:null},slot:11});Object.assign(n,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:n}],methods:[],template:null},slot:34});Object.assign(V,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:n}],methods:[],template:null},slot:33});Object.assign(r,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:r}],methods:[],template:null},slot:75});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:r}],methods:[],template:null},slot:74});const It=new Uint8Array([]),kt=new Uint8Array([88,30,16,0]),ye=new Uint8Array([0,0,0,0,0,0,0,0]),Et=new Uint8Array([88,30,16,0]);Object.assign(ge,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:It},slots:{0:{structure:s,memory:{array:kt},slots:{0:{structure:r,memory:{array:ye},address:1056344}}},1:{structure:s,memory:{array:Et},slots:{0:{structure:r,memory:{array:ye},address:1056344}}}}}},slot:59});Object.assign(L,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ge}],methods:[],template:null},slot:58});const Kt=new Uint8Array([]),Ft=new Uint8Array([80,30,16,0]),ot=new Uint8Array([0,0,0,0,0,64,159,64]),Dt=new Uint8Array([80,30,16,0]);Object.assign(Se,{...t,type:2,name:"struct{comptime comptime_float = 2000, comptime comptime_float = 2000}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Kt},slots:{0:{structure:s,memory:{array:Ft},slots:{0:{structure:r,memory:{array:ot},address:1056336}}},1:{structure:s,memory:{array:Dt},slots:{0:{structure:r,memory:{array:ot},address:1056336}}}}}},slot:61});Object.assign(G,{...t,type:11,name:"*const struct{comptime comptime_float = 2000, comptime comptime_float = 2000}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Se}],methods:[],template:null},slot:60});const Tt=new Uint8Array([]),Mt=new Uint8Array([72,30,16,0]),nt=new Uint8Array([0,0,0,0,0,128,102,64]),$t=new Uint8Array([72,30,16,0]);Object.assign(ze,{...t,type:2,name:"struct{comptime comptime_float = 180, comptime comptime_float = 180}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Tt},slots:{0:{structure:s,memory:{array:Mt},slots:{0:{structure:r,memory:{array:nt},address:1056328}}},1:{structure:s,memory:{array:$t},slots:{0:{structure:r,memory:{array:nt},address:1056328}}}}}},slot:63});Object.assign(H,{...t,type:11,name:"*const struct{comptime comptime_float = 180, comptime comptime_float = 180}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ze}],methods:[],template:null},slot:62});Object.assign(Ve,{...t,type:1,name:"[22:0]u8",length:22,byteSize:23,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:66});Object.assign(Oe,{...t,type:11,name:"*const [22:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ve}],methods:[],template:null},slot:65});Object.assign(J,{...t,type:11,name:"*const *const [22:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Oe}],methods:[],template:null},slot:64});const Bt=new Uint8Array([]),Lt=new Uint8Array([170,170,170,170]),i=new Uint8Array([]),Gt=new Uint8Array([170,170,170,170]),Ht=new Uint8Array([170,170,170,170]),Jt=new Uint8Array([188,30,16,0]),Nt=new Uint8Array([12,31,16,0]),Qt=new Uint8Array([115,101,116,32,105,110,112,117,116,32,105,109,97,103,101,32,99,101,110,116,101,114,0]);Object.assign(we,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 2000, comptime comptime_float = 2000} = .{2000, 2000}, comptime defaultValue: struct{comptime comptime_float = 180, comptime comptime_float = 180} = .{180, 180}, comptime description: *const [22:0]u8 = "set input image center"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:V},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:L},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:G},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:H},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:J}],methods:[],template:{memory:{array:Bt},slots:{0:{structure:L,memory:{array:Lt},slots:{0:{structure:ge,memory:{array:i},address:-1431655766}}},1:{structure:G,memory:{array:Gt},slots:{0:{structure:Se,memory:{array:i},address:-1431655766}}},2:{structure:H,memory:{array:Ht},slots:{0:{structure:ze,memory:{array:i},address:-1431655766}}},3:{structure:J,memory:{array:Jt},slots:{0:{structure:Oe,memory:{array:Nt},address:1056444,slots:{0:{structure:Ve,memory:{array:Qt},address:1056524}}}}}}}},slot:40});Object.assign(N,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 2000, comptime comptime_float = 2000} = .{2000, 2000}, comptime defaultValue: struct{comptime comptime_float = 180, comptime comptime_float = 180} = .{180, 180}, comptime description: *const [22:0]u8 = "set input image center"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:we}],methods:[],template:null},slot:39});const Wt=new Uint8Array([]),Xt=new Uint8Array([64,30,16,0]),x=new Uint8Array([0,0,0,0,0,0,240,63]),Yt=new Uint8Array([64,30,16,0]);Object.assign(Re,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Wt},slots:{0:{structure:s,memory:{array:Xt},slots:{0:{structure:r,memory:{array:x},address:1056320}}},1:{structure:s,memory:{array:Yt},slots:{0:{structure:r,memory:{array:x},address:1056320}}}}}},slot:68});Object.assign(Q,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Re}],methods:[],template:null},slot:67});const Zt=new Uint8Array([]),es=new Uint8Array([56,30,16,0]),ct=new Uint8Array([0,0,0,0,0,160,102,64]),ts=new Uint8Array([56,30,16,0]);Object.assign(qe,{...t,type:2,name:"struct{comptime comptime_float = 181, comptime comptime_float = 181}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Zt},slots:{0:{structure:s,memory:{array:es},slots:{0:{structure:r,memory:{array:ct},address:1056312}}},1:{structure:s,memory:{array:ts},slots:{0:{structure:r,memory:{array:ct},address:1056312}}}}}},slot:70});Object.assign(W,{...t,type:11,name:"*const struct{comptime comptime_float = 181, comptime comptime_float = 181}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:qe}],methods:[],template:null},slot:69});const ss=new Uint8Array([]),rs=new Uint8Array([48,30,16,0]),ut=new Uint8Array([0,0,0,0,0,0,60,64]),as=new Uint8Array([48,30,16,0]);Object.assign(_e,{...t,type:2,name:"struct{comptime comptime_float = 28, comptime comptime_float = 28}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:ss},slots:{0:{structure:s,memory:{array:rs},slots:{0:{structure:r,memory:{array:ut},address:1056304}}},1:{structure:s,memory:{array:as},slots:{0:{structure:r,memory:{array:ut},address:1056304}}}}}},slot:72});Object.assign(X,{...t,type:11,name:"*const struct{comptime comptime_float = 28, comptime comptime_float = 28}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_e}],methods:[],template:null},slot:71});Object.assign(O,{...t,type:11,name:"*const *const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:g}],methods:[],template:null},slot:73});const is=new Uint8Array([]),ms=new Uint8Array([170,170,170,170]),os=new Uint8Array([170,170,170,170]),ns=new Uint8Array([170,170,170,170]),cs=new Uint8Array([184,30,16,0]),us=new Uint8Array([251,30,16,0]),ls=new Uint8Array([120,121,46,114,101,112,108,105,99,97,116,101,32,109,97,112,0]);Object.assign(Ae,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime maxValue: struct{comptime comptime_float = 181, comptime comptime_float = 181} = .{181, 181}, comptime defaultValue: struct{comptime comptime_float = 28, comptime comptime_float = 28} = .{28, 28}, comptime description: *const [16:0]u8 = "xy.replicate map"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:V},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:Q},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:W},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:X},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:O}],methods:[],template:{memory:{array:is},slots:{0:{structure:Q,memory:{array:ms},slots:{0:{structure:Re,memory:{array:i},address:-1431655766}}},1:{structure:W,memory:{array:os},slots:{0:{structure:qe,memory:{array:i},address:-1431655766}}},2:{structure:X,memory:{array:ns},slots:{0:{structure:_e,memory:{array:i},address:-1431655766}}},3:{structure:O,memory:{array:cs},slots:{0:{structure:g,memory:{array:us},address:1056440,slots:{0:{structure:q,memory:{array:ls},address:1056507}}}}}}}},slot:42});Object.assign(Y,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime maxValue: struct{comptime comptime_float = 181, comptime comptime_float = 181} = .{181, 181}, comptime defaultValue: struct{comptime comptime_float = 28, comptime comptime_float = 28} = .{28, 28}, comptime description: *const [16:0]u8 = "xy.replicate map"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ae}],methods:[],template:null},slot:41});Object.assign(Ue,{...t,type:1,name:"[10:0]u8",length:10,byteSize:11,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:78});Object.assign(je,{...t,type:11,name:"*const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ue}],methods:[],template:null},slot:77});Object.assign(Z,{...t,type:11,name:"*const *const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:je}],methods:[],template:null},slot:76});const ps=new Uint8Array([]),ys=new Uint8Array([88,30,16,0]),fs=new Uint8Array([176,30,16,0]),ds=new Uint8Array([0,0,0,0,0,0,89,64]),bs=new Uint8Array([168,30,16,0]),hs=new Uint8Array([0,0,0,0,0,0,82,64]),gs=new Uint8Array([160,30,16,0]),Ss=new Uint8Array([240,30,16,0]),zs=new Uint8Array([115,101,116,32,114,97,100,105,117,115,0]);Object.assign(xe,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 72, comptime description: *const [10:0]u8 = "set radius"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:n},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Z}],methods:[],template:{memory:{array:ps},slots:{0:{structure:s,memory:{array:ys},slots:{0:{structure:r,memory:{array:ye},address:1056344}}},1:{structure:s,memory:{array:fs},slots:{0:{structure:r,memory:{array:ds},address:1056432}}},2:{structure:s,memory:{array:bs},slots:{0:{structure:r,memory:{array:hs},address:1056424}}},3:{structure:Z,memory:{array:gs},slots:{0:{structure:je,memory:{array:Ss},address:1056416,slots:{0:{structure:Ue,memory:{array:zs},address:1056496}}}}}}}},slot:44});Object.assign(ee,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 72, comptime description: *const [10:0]u8 = "set radius"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:xe}],methods:[],template:null},slot:43});const Vs=new Uint8Array([]),Os=new Uint8Array([120,30,16,0]),st=new Uint8Array([154,153,153,153,153,153,185,63]),ws=new Uint8Array([152,30,16,0]),Rs=new Uint8Array([0,0,0,0,0,0,16,64]),qs=new Uint8Array([104,30,16,0]),lt=new Uint8Array([102,102,102,102,102,102,2,64]),_s=new Uint8Array([144,30,16,0]),As=new Uint8Array([223,30,16,0]),Us=new Uint8Array([115,101,116,32,97,115,112,101,99,116,32,114,97,116,105,111,0]);Object.assign(Pe,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 4, comptime defaultValue: comptime_float = 2.3, comptime description: *const [16:0]u8 = "set aspect ratio"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:n},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:O}],methods:[],template:{memory:{array:Vs},slots:{0:{structure:s,memory:{array:Os},slots:{0:{structure:r,memory:{array:st},address:1056376}}},1:{structure:s,memory:{array:ws},slots:{0:{structure:r,memory:{array:Rs},address:1056408}}},2:{structure:s,memory:{array:qs},slots:{0:{structure:r,memory:{array:lt},address:1056360}}},3:{structure:O,memory:{array:_s},slots:{0:{structure:g,memory:{array:As},address:1056400,slots:{0:{structure:q,memory:{array:Us},address:1056479}}}}}}}},slot:46});Object.assign(te,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 4, comptime defaultValue: comptime_float = 2.3, comptime description: *const [16:0]u8 = "set aspect ratio"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Pe}],methods:[],template:null},slot:45});Object.assign(P,{...t,type:1,name:"[8:0]u8",length:8,byteSize:9,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:81});Object.assign(v,{...t,type:11,name:"*const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:P}],methods:[],template:null},slot:80});Object.assign(w,{...t,type:11,name:"*const *const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:v}],methods:[],template:null},slot:79});const js=new Uint8Array([]),xs=new Uint8Array([120,30,16,0]),Ps=new Uint8Array([136,30,16,0]),vs=new Uint8Array([0,0,0,0,0,0,20,64]),Cs=new Uint8Array([64,30,16,0]),Is=new Uint8Array([132,30,16,0]),ks=new Uint8Array([214,30,16,0]),Es=new Uint8Array([115,101,116,32,122,111,111,109,0]);Object.assign(ve,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 1, comptime description: *const [8:0]u8 = "set zoom"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:n},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:w}],methods:[],template:{memory:{array:js},slots:{0:{structure:s,memory:{array:xs},slots:{0:{structure:r,memory:{array:st},address:1056376}}},1:{structure:s,memory:{array:Ps},slots:{0:{structure:r,memory:{array:vs},address:1056392}}},2:{structure:s,memory:{array:Cs},slots:{0:{structure:r,memory:{array:x},address:1056320}}},3:{structure:w,memory:{array:Is},slots:{0:{structure:v,memory:{array:ks},address:1056388,slots:{0:{structure:P,memory:{array:Es},address:1056470}}}}}}}},slot:48});Object.assign(se,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 1, comptime description: *const [8:0]u8 = "set zoom"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ve}],methods:[],template:null},slot:47});Object.assign(Ce,{...t,type:1,name:"[12:0]u8",length:12,byteSize:13,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:84});Object.assign(Ie,{...t,type:11,name:"*const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ce}],methods:[],template:null},slot:83});Object.assign(re,{...t,type:11,name:"*const *const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ie}],methods:[],template:null},slot:82});const Ks=new Uint8Array([]),Fs=new Uint8Array([88,30,16,0]),Ds=new Uint8Array([64,30,16,0]),Ts=new Uint8Array([64,30,16,0]),Ms=new Uint8Array([128,30,16,0]),$s=new Uint8Array([201,30,16,0]),Bs=new Uint8Array([115,101,116,32,114,111,116,97,116,105,111,110,0]);Object.assign(ke,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [12:0]u8 = "set rotation"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:n},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:re}],methods:[],template:{memory:{array:Ks},slots:{0:{structure:s,memory:{array:Fs},slots:{0:{structure:r,memory:{array:ye},address:1056344}}},1:{structure:s,memory:{array:Ds},slots:{0:{structure:r,memory:{array:x},address:1056320}}},2:{structure:s,memory:{array:Ts},slots:{0:{structure:r,memory:{array:x},address:1056320}}},3:{structure:re,memory:{array:Ms},slots:{0:{structure:Ie,memory:{array:$s},address:1056384,slots:{0:{structure:Ce,memory:{array:Bs},address:1056457}}}}}}}},slot:50});Object.assign(ae,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [12:0]u8 = "set rotation"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ke}],methods:[],template:null},slot:49});Object.assign(ie,{...t,type:11,name:"*const f32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:n}],methods:[],template:null},slot:85});const Ls=new Uint8Array([]),Gs=new Uint8Array([120,30,16,0]),Hs=new Uint8Array([112,30,16,0]),Js=new Uint8Array([216,15,73,64]),Ns=new Uint8Array([104,30,16,0]),Qs=new Uint8Array([100,30,16,0]),Ws=new Uint8Array([192,30,16,0]),Xs=new Uint8Array([115,101,116,32,119,97,114,112,0]);Object.assign(Ee,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: f32 = 3.141592025756836, comptime defaultValue: comptime_float = 2.3, comptime description: *const [8:0]u8 = "set warp"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:n},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:ie},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:w}],methods:[],template:{memory:{array:Ls},slots:{0:{structure:s,memory:{array:Gs},slots:{0:{structure:r,memory:{array:st},address:1056376}}},1:{structure:ie,memory:{array:Hs},slots:{0:{structure:n,memory:{array:Js},address:1056368}}},2:{structure:s,memory:{array:Ns},slots:{0:{structure:r,memory:{array:lt},address:1056360}}},3:{structure:w,memory:{array:Qs},slots:{0:{structure:v,memory:{array:Ws},address:1056356,slots:{0:{structure:P,memory:{array:Xs},address:1056448}}}}}}}},slot:52});Object.assign(me,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: f32 = 3.141592025756836, comptime defaultValue: comptime_float = 2.3, comptime description: *const [8:0]u8 = "set warp"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ee}],methods:[],template:null},slot:51});const Ys=new Uint8Array([]),Zs=new Uint8Array([170,170,170,170]),er=new Uint8Array([170,170,170,170]),tr=new Uint8Array([170,170,170,170]),sr=new Uint8Array([170,170,170,170]),rr=new Uint8Array([170,170,170,170]),ar=new Uint8Array([170,170,170,170]),ir=new Uint8Array([170,170,170,170]);Object.assign(Ke,{...t,type:2,name:'struct{comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 2000, comptime comptime_float = 2000} = .{2000, 2000}, comptime defaultValue: struct{comptime comptime_float = 180, comptime comptime_float = 180} = .{180, 180}, comptime description: *const [22:0]u8 = "set input image center"} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{2000, 2000}, .defaultValue = .{180, 180}, .description = "set input image center"}, comptime xy_replication: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime maxValue: struct{comptime comptime_float = 181, comptime comptime_float = 181} = .{181, 181}, comptime defaultValue: struct{comptime comptime_float = 28, comptime comptime_float = 28} = .{28, 28}, comptime description: *const [16:0]u8 = "xy.replicate map"} = .{.type = @Vector(2, f32), .minValue = .{1, 1}, .maxValue = .{181, 181}, .defaultValue = .{28, 28}, .description = "xy.replicate map"}, comptime radius: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 72, comptime description: *const [10:0]u8 = "set radius"} = .{.type = f32, .minValue = 0, .maxValue = 100, .defaultValue = 72, .description = "set radius"}, comptime scale: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 4, comptime defaultValue: comptime_float = 2.3, comptime description: *const [16:0]u8 = "set aspect ratio"} = .{.type = f32, .minValue = 0.1, .maxValue = 4, .defaultValue = 2.3, .description = "set aspect ratio"}, comptime zoom: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 1, comptime description: *const [8:0]u8 = "set zoom"} = .{.type = f32, .minValue = 0.1, .maxValue = 5, .defaultValue = 1, .description = "set zoom"}, comptime turn: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [12:0]u8 = "set rotation"} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 1, .description = "set rotation"}, comptime warp: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: f32 = 3.141592025756836, comptime defaultValue: comptime_float = 2.3, comptime description: *const [8:0]u8 = "set warp"} = .{.type = f32, .minValue = 0.1, .maxValue = 3.141592025756836, .defaultValue = 2.3, .description = "set warp"}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"center",structure:N},{...e,type:8,isRequired:!1,slot:1,name:"xy_replication",structure:Y},{...e,type:8,isRequired:!1,slot:2,name:"radius",structure:ee},{...e,type:8,isRequired:!1,slot:3,name:"scale",structure:te},{...e,type:8,isRequired:!1,slot:4,name:"zoom",structure:se},{...e,type:8,isRequired:!1,slot:5,name:"turn",structure:ae},{...e,type:8,isRequired:!1,slot:6,name:"warp",structure:me}],methods:[],template:{memory:{array:Ys},slots:{0:{structure:N,memory:{array:Zs},slots:{0:{structure:we,memory:{array:i},address:-1431655766}}},1:{structure:Y,memory:{array:er},slots:{0:{structure:Ae,memory:{array:i},address:-1431655766}}},2:{structure:ee,memory:{array:tr},slots:{0:{structure:xe,memory:{array:i},address:-1431655766}}},3:{structure:te,memory:{array:sr},slots:{0:{structure:Pe,memory:{array:i},address:-1431655766}}},4:{structure:se,memory:{array:rr},slots:{0:{structure:ve,memory:{array:i},address:-1431655766}}},5:{structure:ae,memory:{array:ar},slots:{0:{structure:ke,memory:{array:i},address:-1431655766}}},6:{structure:me,memory:{array:ir},slots:{0:{structure:Ee,memory:{array:i},address:-1431655766}}}}}},slot:15});Object.assign(oe,{...t,type:11,name:'*struct{comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 2000, comptime comptime_float = 2000} = .{2000, 2000}, comptime defaultValue: struct{comptime comptime_float = 180, comptime comptime_float = 180} = .{180, 180}, comptime description: *const [22:0]u8 = "set input image center"} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{2000, 2000}, .defaultValue = .{180, 180}, .description = "set input image center"}, comptime xy_replication: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime maxValue: struct{comptime comptime_float = 181, comptime comptime_float = 181} = .{181, 181}, comptime defaultValue: struct{comptime comptime_float = 28, comptime comptime_float = 28} = .{28, 28}, comptime description: *const [16:0]u8 = "xy.replicate map"} = .{.type = @Vector(2, f32), .minValue = .{1, 1}, .maxValue = .{181, 181}, .defaultValue = .{28, 28}, .description = "xy.replicate map"}, comptime radius: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 72, comptime description: *const [10:0]u8 = "set radius"} = .{.type = f32, .minValue = 0, .maxValue = 100, .defaultValue = 72, .description = "set radius"}, comptime scale: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 4, comptime defaultValue: comptime_float = 2.3, comptime description: *const [16:0]u8 = "set aspect ratio"} = .{.type = f32, .minValue = 0.1, .maxValue = 4, .defaultValue = 2.3, .description = "set aspect ratio"}, comptime zoom: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 1, comptime description: *const [8:0]u8 = "set zoom"} = .{.type = f32, .minValue = 0.1, .maxValue = 5, .defaultValue = 1, .description = "set zoom"}, comptime turn: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 1, comptime description: *const [12:0]u8 = "set rotation"} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 1, .description = "set rotation"}, comptime warp: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: f32 = 3.141592025756836, comptime defaultValue: comptime_float = 2.3, comptime description: *const [8:0]u8 = "set warp"} = .{.type = f32, .minValue = 0.1, .maxValue = 3.141592025756836, .defaultValue = 2.3, .description = "set warp"}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ke}],methods:[],template:null},slot:14});Object.assign(ne,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:f}],methods:[],template:null},slot:86});const mr=new Uint8Array([]),or=new Uint8Array([96,30,16,0]),nr=new Uint8Array([4,0,0,0]);Object.assign(C,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:ne}],methods:[],template:{memory:{array:mr},slots:{0:{structure:ne,memory:{array:or},slots:{0:{structure:f,memory:{array:nr},address:1056352}}}}}},slot:54});Object.assign(R,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:C}],methods:[],template:null},slot:53});const cr=new Uint8Array([]),ur=new Uint8Array([170,170,170,170]);Object.assign(Fe,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:R}],methods:[],template:{memory:{array:cr},slots:{0:{structure:R,memory:{array:ur},slots:{0:{structure:C,memory:{array:i},address:-1431655766}}}}}},slot:17});Object.assign(ce,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Fe}],methods:[],template:null},slot:16});const lr=new Uint8Array([]),pr=new Uint8Array([170,170,170,170]);Object.assign(De,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:R}],methods:[],template:{memory:{array:lr},slots:{0:{structure:R,memory:{array:pr},slots:{0:{structure:C,memory:{array:i},address:-1431655766}}}}}},slot:19});Object.assign(ue,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:De}],methods:[],template:null},slot:18});const yr=new Uint8Array([]),fr=new Uint8Array([]),dr=new Uint8Array([68,253,15,0]),br=new Uint8Array([228,81,16,0]),hr=new Uint8Array([97,100,118,97,110,99,101,100,32,115,116,101,114,101,111,103,114,97,112,104,105,99,32,112,114,111,106,101,99,116,105,111,110,0]),gr=new Uint8Array([100,253,15,0]),Sr=new Uint8Array([211,81,16,0]),zr=new Uint8Array([102,114,97,110,107,32,114,101,105,116,98,101,114,103,101,114,0]),Vr=new Uint8Array([132,253,15,0]),Or=new Uint8Array([1,0,0,0]),wr=new Uint8Array([188,253,15,0]),Rr=new Uint8Array([162,81,16,0]),qr=new Uint8Array([101,110,104,97,110,99,101,100,32,98,121,32,119,97,114,112,40,115,41,44,32,116,117,114,110,40,115,41,44,32,115,99,97,108,101,40,115,41,32,38,32,122,111,111,109,40,115,41,0]),_r=new Uint8Array([170,170,170,170]),Ar=new Uint8Array([170,170,170,170]),Ur=new Uint8Array([170,170,170,170]);Object.assign(Ne,{...t,type:2,name:"advanced-stereographic.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:yr}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:M},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:$},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:h},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:B},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:oe},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:ce},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:ue}],methods:[],template:{memory:{array:fr},slots:{0:{structure:M,memory:{array:dr},slots:{0:{structure:de,memory:{array:br},slots:{0:{structure:fe,memory:{array:hr},address:1069540}}}}},1:{structure:$,memory:{array:gr},slots:{0:{structure:g,memory:{array:Sr},slots:{0:{structure:q,memory:{array:zr},address:1069523}}}}},2:{structure:h,memory:{array:Vr},slots:{0:{structure:f,memory:{array:Or}}}},3:{structure:B,memory:{array:wr},slots:{0:{structure:he,memory:{array:Rr},slots:{0:{structure:be,memory:{array:qr},address:1069474}}}}},4:{structure:oe,memory:{array:_r},slots:{0:{structure:Ke,memory:{array:i},address:-1431655766}}},5:{structure:ce,memory:{array:Ar},slots:{0:{structure:Fe,memory:{array:i},address:-1431655766}}},6:{structure:ue,memory:{array:Ur},slots:{0:{structure:De,memory:{array:i},address:-1431655766}}}}}},slot:1});Object.assign(_,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:y}],methods:[],template:null},slot:24});Object.assign(Te,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:_}],methods:[],template:null},slot:23});Object.assign(Me,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Te}],methods:[],template:null},slot:22});Object.assign(p,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:25});const jr=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign($e,{...t,type:9,name:"advanced-stereographic.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:f},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:f}],methods:[],template:{memory:{array:jr}}},slot:26});Object.assign(U,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:U}],methods:[],template:null},slot:27});Object.assign(j,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:j}],methods:[],template:null},slot:28});Object.assign(Be,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:n}],methods:[],template:null},slot:55});const xr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Pr=new Uint8Array([]),vr=new Uint8Array([248,251,15,0]),Cr=new Uint8Array([4,0,0,0]);Object.assign(le,{...t,type:2,name:"advanced-stereographic.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Me},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:p},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:p},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:$e},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:U},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:j}],methods:[],template:{memory:{array:xr}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:_},{...e,type:7,isRequired:!1,name:"FPixel",structure:Be},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:Pr},slots:{0:{structure:h,memory:{array:vr},slots:{0:{structure:f,memory:{array:Cr}}}}}}},slot:21});const Ir=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),kr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Er=new Uint8Array([0,0,0,0,0,0,0,0]),rt=new Uint8Array([]);Object.assign(I,{...t,type:2,name:"advanced-stereographic.KernelInput(u8,advanced-stereographic.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:le}],methods:[],template:{memory:{array:Ir},slots:{0:{structure:le,memory:{array:kr},slots:{0:{structure:Me,memory:{array:Er},slots:{0:{structure:Te,memory:{array:rt}}}}}}}}},slot:20});Object.assign(Le,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:_}],methods:[],template:null},slot:23});Object.assign(Ge,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Le}],methods:[],template:null},slot:31});const Kr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Fr=new Uint8Array([]),Dr=new Uint8Array([248,251,15,0]),Tr=new Uint8Array([4,0,0,0]);Object.assign(pe,{...t,type:2,name:"advanced-stereographic.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Ge},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:p},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:p},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:$e},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:U},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:j}],methods:[],template:{memory:{array:Kr}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:_},{...e,type:7,isRequired:!1,name:"FPixel",structure:Be},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:Fr},slots:{0:{structure:h,memory:{array:Dr},slots:{0:{structure:f,memory:{array:Tr}}}}}}},slot:30});const Mr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),$r=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Br=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(k,{...t,type:2,name:"advanced-stereographic.KernelOutput(u8,advanced-stereographic.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:pe}],methods:[],template:{memory:{array:Mr},slots:{0:{structure:pe,memory:{array:$r},slots:{0:{structure:Ge,memory:{array:Br},slots:{0:{structure:Le,memory:{array:rt}}}}}}}}},slot:29});const Lr=new Uint8Array([0,0,52,67,0,0,52,67,0,0,224,65,0,0,224,65,0,0,144,66,51,51,19,64,0,0,128,63,0,0,128,63,51,51,19,64,0,0,0,0]);Object.assign(E,{...t,type:2,name:"advanced-stereographic.KernelParameters(advanced-stereographic.kernel)",length:1,byteSize:40,align:3,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"center",structure:V},{...e,type:6,isRequired:!1,bitOffset:64,bitSize:64,byteSize:8,slot:1,name:"xy_replication",structure:V},{...e,type:4,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:2,name:"radius",structure:n},{...e,type:4,isRequired:!1,bitOffset:160,bitSize:32,byteSize:4,slot:3,name:"scale",structure:n},{...e,type:4,isRequired:!1,bitOffset:192,bitSize:32,byteSize:4,slot:4,name:"zoom",structure:n},{...e,type:4,isRequired:!1,bitOffset:224,bitSize:32,byteSize:4,slot:5,name:"turn",structure:n},{...e,type:4,isRequired:!1,bitOffset:256,bitSize:32,byteSize:4,slot:6,name:"warp",structure:n}],methods:[],template:{memory:{array:Lr}}},slot:32});Object.assign(Qe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(advanced-stereographic.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:56});Object.assign(We,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(advanced-stereographic.createOutput)).Fn.return_type.?).ErrorUnion.error_set!advanced-stereographic.KernelOutput(u8,advanced-stereographic.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Qe}],methods:[],template:null},slot:37});Object.assign(Xe,{...t,type:3,name:"createOutput",length:1,byteSize:104,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:320,bitSize:32,byteSize:4,slot:0,name:"0",structure:p},{...e,type:3,bitOffset:352,bitSize:32,byteSize:4,slot:1,name:"1",structure:p},{...e,type:6,bitOffset:384,bitSize:192,byteSize:24,slot:2,name:"2",structure:I},{...e,type:6,bitOffset:0,bitSize:320,byteSize:40,slot:3,name:"3",structure:E},{...e,type:6,bitOffset:576,bitSize:224,byteSize:28,slot:4,name:"retval",structure:We}],methods:[],template:null},slot:35});Object.assign(Ye,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(advanced-stereographic.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:57});Object.assign(Ze,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(advanced-stereographic.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!advanced-stereographic.KernelOutput(u8,advanced-stereographic.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Ye}],methods:[],template:null},slot:38});Object.assign(et,{...t,type:3,name:"createPartialOutput",length:1,byteSize:112,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:320,bitSize:32,byteSize:4,slot:0,name:"0",structure:p},{...e,type:3,bitOffset:352,bitSize:32,byteSize:4,slot:1,name:"1",structure:p},{...e,type:3,bitOffset:384,bitSize:32,byteSize:4,slot:2,name:"2",structure:p},{...e,type:3,bitOffset:416,bitSize:32,byteSize:4,slot:3,name:"3",structure:p},{...e,type:6,bitOffset:448,bitSize:192,byteSize:24,slot:4,name:"4",structure:I},{...e,type:6,bitOffset:0,bitSize:320,byteSize:40,slot:5,name:"5",structure:E},{...e,type:6,bitOffset:640,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Ze}],methods:[],template:null},slot:36});const Gr={argStruct:Xe,thunk:6,name:"createOutput"},Hr={argStruct:et,thunk:4,name:"createPartialOutput"};Object.assign(tt,{...t,type:2,name:"advanced-stereographic",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:rt}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:Ne},{...e,type:7,isRequired:!1,name:"Input",structure:I},{...e,type:7,isRequired:!1,name:"Output",structure:k},{...e,type:7,isRequired:!1,name:"Parameters",structure:E}],methods:[Gr,Hr],template:null},slot:0});const Jr=[y,fe,de,M,q,g,$,f,h,be,he,B,n,V,r,s,ge,L,Se,G,ze,H,Ve,Oe,J,we,N,Re,Q,qe,W,_e,X,O,Ae,Y,Ue,je,Z,xe,ee,Pe,te,P,v,w,ve,se,Ce,Ie,re,ke,ae,ie,Ee,me,Ke,oe,ne,C,R,Fe,ce,De,ue,Ne,_,Te,Me,p,$e,U,j,Be,le,I,Le,Ge,pe,k,E,Qe,We,Xe,Ye,Ze,et,tt],Nr=vt(Jr),Qr=tt.constructor,Wr=(async()=>{const c=new URL("advanced-stereographic-2ec828be.wasm",import.meta.url).href;return fetch(c)})();Ct(Wr,{...Nr,writeBack:!0});const{createOutput:aa,createPartialOutput:Xr,kernel:Je,Input:Yr,Output:ia,Parameters:ma}=Qr;function Zr(c,l,m,a,o={},S={}){if(Array.isArray(o)){const b=o;o={};for(const[d,z]of Object.keys(Je.inputImages).entries())o[z]=b[d]}const K=new Yr(void 0),F=Object.keys(Je.inputImages),u=[];let A;for(const b of F){let d=o[b];if(d||(F.length===1&&["data","width","height"].every(z=>!!o[z])?d=o:u.push(b)),K[b]=d,A){if(d.colorSpace!==A)throw new Error(`Input images must all use the same color space: ${A}`)}else A=d.colorSpace}if(u.length>0)throw new Error(`Missing input image${u.length>1?"s":""}: ${u.join(", ")}`);const He=Xr(c,l,m,a,K,S),at=b=>{const d=Object.keys(b),z={};for(const it of d){const{data:{typedArray:D},width:mt,height:yt}=b[it];let T;if(typeof ImageData=="function"){const ft=new Uint8ClampedArray(D.buffer,D.byteOffset,D.byteLength);T=new ImageData(ft,mt,a,{colorSpace:A})}else T={data:D,width:mt,height:yt};if(d.length===1)return T;z[it]=T}return z};return He[Symbol.toStringTag]==="Promise"?He.then(at):at(He)}function ea(){const c={};for(let[l,m]of Object.entries(Je)){if(l==="parameters"){const a={};for(const[o,S]of Object.entries(m)){const K=a[o]={};for(let[F,u]of Object.entries(S))typeof u=="object"?"string"in u?u=u.string:u=pt(u):typeof u=="function"&&(u=ta(u.name)),K[F]=u}m=a}else typeof m=="object"&&("string"in m?m=m.string:m=m.valueOf());c[l]=m}return c}function pt(c){const l=[];for(let[m,a]of Object.entries(c))typeof a=="object"&&(a=pt(a)),l[m]=a;return l}function ta(c){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[c]}onmessage=c=>{const[l,m,...a]=c.data;sa(l,a).then(([o,S])=>{postMessage([l,m,o],{transfer:S})}).catch(o=>{postMessage(["error",m,o])})};async function sa(c,l){switch(c){case"getKernelInfo":return[ea(...l)];case"createPartialImageData":const a=await Zr(...l),o=[];if("data"in a&&"width"in a&&"height"in a)o.push(a.data.buffer);else for(const S of Object.entries(a))o.push(a.data.buffer);return[a,o];default:throw new Error(`Unknown function: ${c}`)}}
