import{u as mt,a as nt,b as ot,d as ut,c as ct,e as lt,f as yt,g as pt,h as ft,i as dt,j as bt,k as ht,l as gt,m as zt,n as Vt,o as St,p as Ot,q as wt,r as Rt}from"./index-9f315e7a.js";mt();nt();ot();ut();ct();lt();yt();pt();ft();dt();bt();ht();gt();zt();Vt();St();Ot();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},d={},ue={},ce={},L={},le={},ye={},G={},b={},z={},pe={},fe={},H={},p={},a={},r={},de={},be={},J={},he={},N={},m={},s={},ge={},Q={},A={},U={},V={},ze={},W={},C={},I={},w={},Ve={},X={},Se={},Y={},Oe={},Z={},we={},ee={},k={},v={},R={},Re={},te={},qe={},se={},Ae={},re={},ae={},E={},q={},Ue={},ie={},je={},me={},Ke={},j={},xe={},_e={},f={},Pe={},_={},P={},Ce={},ne={},K={},Ie={},ke={},oe={},F={},D={},Fe={},De={},Te={},Me={},$e={},Be={},Le={};Object.assign(d,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:5});Object.assign(ue,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:4});Object.assign(ce,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:3});Object.assign(L,{...t,type:11,name:"**const [21:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:2});Object.assign(le,{...t,type:1,name:"[16:0]u8",length:16,byteSize:17,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:8});Object.assign(ye,{...t,type:11,name:"*const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:7});Object.assign(G,{...t,type:11,name:"**const [16:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:6});Object.assign(b,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:10});Object.assign(z,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:b}],methods:[],template:null},slot:9});Object.assign(pe,{...t,type:1,name:"[42:0]u8",length:42,byteSize:43,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:13});Object.assign(fe,{...t,type:11,name:"*const [42:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pe}],methods:[],template:null},slot:12});Object.assign(H,{...t,type:11,name:"**const [42:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:11});Object.assign(p,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:34});Object.assign(a,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:33});Object.assign(r,{...t,type:11,name:"*const @Vector(2, f32)",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:a}],methods:[],template:null},slot:60});Object.assign(de,{...t,type:1,name:"[19:0]u8",length:19,byteSize:20,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:63});Object.assign(be,{...t,type:11,name:"*const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:de}],methods:[],template:null},slot:62});Object.assign(J,{...t,type:11,name:"*const *const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:61});const qt=new Uint8Array([]),At=new Uint8Array([168,30,16,0]),Xe=new Uint8Array([0,0,0,0,0,0,0,0]),Ut=new Uint8Array([8,31,16,0]),jt=new Uint8Array([0,0,128,69,0,0,128,69]),xt=new Uint8Array([0,31,16,0]),_t=new Uint8Array([0,0,250,67,0,0,250,67]),Pt=new Uint8Array([248,30,16,0]),Ct=new Uint8Array([136,31,16,0]),It=new Uint8Array([105,109,97,103,101,32,119,105,100,116,104,47,45,104,101,105,103,104,116,0]);Object.assign(he,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ 0, 0 }, comptime maxValue: @Vector(2, f32) = .{ 4096, 4096 }, comptime defaultValue: @Vector(2, f32) = .{ 500, 500 }, comptime description: *const [19:0]u8 = "image width/-height"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:J}],methods:[],template:{memory:{array:qt},slots:{0:{structure:r,memory:{array:At},slots:{0:{structure:a,memory:{array:Xe},address:1056424}}},1:{structure:r,memory:{array:Ut},slots:{0:{structure:a,memory:{array:jt},address:1056520}}},2:{structure:r,memory:{array:xt},slots:{0:{structure:a,memory:{array:_t},address:1056512}}},3:{structure:J,memory:{array:Pt},slots:{0:{structure:be,memory:{array:Ct},address:1056504,slots:{0:{structure:de,memory:{array:It},address:1056648}}}}}}}},slot:40});Object.assign(N,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ 0, 0 }, comptime maxValue: @Vector(2, f32) = .{ 4096, 4096 }, comptime defaultValue: @Vector(2, f32) = .{ 500, 500 }, comptime description: *const [19:0]u8 = "image width/-height"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:he}],methods:[],template:null},slot:39});Object.assign(m,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:m}],methods:[],template:null},slot:70});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:69});const kt=new Uint8Array([]),vt=new Uint8Array([88,30,16,0]),Et=new Uint8Array([0,0,0,0,0,0,73,64]),Kt=new Uint8Array([80,30,16,0]),Ft=new Uint8Array([0,0,0,0,0,192,98,64]);Object.assign(ge,{...t,type:2,name:"struct{comptime comptime_float = 50, comptime comptime_float = 150}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:kt},slots:{0:{structure:s,memory:{array:vt},slots:{0:{structure:m,memory:{array:Et},address:1056344}}},1:{structure:s,memory:{array:Kt},slots:{0:{structure:m,memory:{array:Ft},address:1056336}}}}}},slot:65});Object.assign(Q,{...t,type:11,name:"*const struct{comptime comptime_float = 50, comptime comptime_float = 150}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ge}],methods:[],template:null},slot:64});Object.assign(A,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:68});Object.assign(U,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:67});Object.assign(V,{...t,type:11,name:"*const *const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:U}],methods:[],template:null},slot:66});const Dt=new Uint8Array([]),Tt=new Uint8Array([240,30,16,0]),Mt=new Uint8Array([0,0,122,196,0,0,122,196]),$t=new Uint8Array([232,30,16,0]),Bt=new Uint8Array([0,0,122,68,0,0,122,68]),Lt=new Uint8Array([170,170,170,170]),y=new Uint8Array([]),Gt=new Uint8Array([224,30,16,0]),Ht=new Uint8Array([122,31,16,0]),Jt=new Uint8Array([115,101,116,117,112,32,114,97,100,105,97,110,115,0]);Object.assign(ze,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -1000, -1000 }, comptime maxValue: @Vector(2, f32) = .{ 1000, 1000 }, comptime defaultValue: struct{comptime comptime_float = 50, comptime comptime_float = 150} = .{50, 150}, comptime description: *const [13:0]u8 = "setup radians"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:Q},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:V}],methods:[],template:{memory:{array:Dt},slots:{0:{structure:r,memory:{array:Tt},slots:{0:{structure:a,memory:{array:Mt},address:1056496}}},1:{structure:r,memory:{array:$t},slots:{0:{structure:a,memory:{array:Bt},address:1056488}}},2:{structure:Q,memory:{array:Lt},slots:{0:{structure:ge,memory:{array:y},address:-1431655766}}},3:{structure:V,memory:{array:Gt},slots:{0:{structure:U,memory:{array:Ht},address:1056480,slots:{0:{structure:A,memory:{array:Jt},address:1056634}}}}}}}},slot:42});Object.assign(W,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -1000, -1000 }, comptime maxValue: @Vector(2, f32) = .{ 1000, 1000 }, comptime defaultValue: struct{comptime comptime_float = 50, comptime comptime_float = 150} = .{50, 150}, comptime description: *const [13:0]u8 = "setup radians"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ze}],methods:[],template:null},slot:41});Object.assign(C,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:73});Object.assign(I,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:C}],methods:[],template:null},slot:72});Object.assign(w,{...t,type:11,name:"*const *const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:I}],methods:[],template:null},slot:71});const Nt=new Uint8Array([]),Qt=new Uint8Array([208,30,16,0]),Qe=new Uint8Array([0,0,0,0,0,0,0,0]),Wt=new Uint8Array([216,30,16,0]),Xt=new Uint8Array([0,0,0,0,0,128,118,64]),Yt=new Uint8Array([208,30,16,0]),Zt=new Uint8Array([200,30,16,0]),es=new Uint8Array([107,31,16,0]),ts=new Uint8Array([115,101,116,117,112,32,114,111,116,97,116,105,111,110,0]);Object.assign(Ve,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 360, comptime defaultValue: comptime_float = 0, comptime description: *const [14:0]u8 = "setup rotation"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:p},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:w}],methods:[],template:{memory:{array:Nt},slots:{0:{structure:s,memory:{array:Qt},slots:{0:{structure:m,memory:{array:Qe},address:1056464}}},1:{structure:s,memory:{array:Wt},slots:{0:{structure:m,memory:{array:Xt},address:1056472}}},2:{structure:s,memory:{array:Yt},slots:{0:{structure:m,memory:{array:Qe},address:1056464}}},3:{structure:w,memory:{array:Zt},slots:{0:{structure:I,memory:{array:es},address:1056456,slots:{0:{structure:C,memory:{array:ts},address:1056619}}}}}}}},slot:44});Object.assign(X,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 360, comptime defaultValue: comptime_float = 0, comptime description: *const [14:0]u8 = "setup rotation"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ve}],methods:[],template:null},slot:43});const ss=new Uint8Array([]),rs=new Uint8Array([184,30,16,0]),We=new Uint8Array([0,0,0,0,0,0,240,63]),as=new Uint8Array([192,30,16,0]),is=new Uint8Array([0,0,0,0,0,0,89,64]),ms=new Uint8Array([184,30,16,0]),ns=new Uint8Array([176,30,16,0]),os=new Uint8Array([93,31,16,0]),us=new Uint8Array([115,101,116,117,112,32,122,111,111,109,105,110,103,0]);Object.assign(Se,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 1, comptime description: *const [13:0]u8 = "setup zooming"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:p},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:V}],methods:[],template:{memory:{array:ss},slots:{0:{structure:s,memory:{array:rs},slots:{0:{structure:m,memory:{array:We},address:1056440}}},1:{structure:s,memory:{array:as},slots:{0:{structure:m,memory:{array:is},address:1056448}}},2:{structure:s,memory:{array:ms},slots:{0:{structure:m,memory:{array:We},address:1056440}}},3:{structure:V,memory:{array:ns},slots:{0:{structure:U,memory:{array:os},address:1056432,slots:{0:{structure:A,memory:{array:us},address:1056605}}}}}}}},slot:46});Object.assign(Y,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 1, comptime description: *const [13:0]u8 = "setup zooming"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Se}],methods:[],template:null},slot:45});const cs=new Uint8Array([]),ls=new Uint8Array([152,30,16,0]),Ye=new Uint8Array([0,64,3,197,0,64,3,197]),ys=new Uint8Array([144,30,16,0]),Ze=new Uint8Array([0,64,3,69,0,64,3,69]),ps=new Uint8Array([168,30,16,0]),fs=new Uint8Array([160,30,16,0]),ds=new Uint8Array([78,31,16,0]),bs=new Uint8Array([115,101,116,115,32,120,121,46,99,101,110,116,101,114,0]);Object.assign(Oe,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -2100, -2100 }, comptime maxValue: @Vector(2, f32) = .{ 2100, 2100 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }, comptime description: *const [14:0]u8 = "sets xy.center"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:w}],methods:[],template:{memory:{array:cs},slots:{0:{structure:r,memory:{array:ls},slots:{0:{structure:a,memory:{array:Ye},address:1056408}}},1:{structure:r,memory:{array:ys},slots:{0:{structure:a,memory:{array:Ze},address:1056400}}},2:{structure:r,memory:{array:ps},slots:{0:{structure:a,memory:{array:Xe},address:1056424}}},3:{structure:w,memory:{array:fs},slots:{0:{structure:I,memory:{array:ds},address:1056416,slots:{0:{structure:C,memory:{array:bs},address:1056590}}}}}}}},slot:48});Object.assign(Z,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -2100, -2100 }, comptime maxValue: @Vector(2, f32) = .{ 2100, 2100 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }, comptime description: *const [14:0]u8 = "sets xy.center"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Oe}],methods:[],template:null},slot:47});const hs=new Uint8Array([]),gs=new Uint8Array([152,30,16,0]),zs=new Uint8Array([144,30,16,0]),Vs=new Uint8Array([136,30,16,0]),Ss=new Uint8Array([0,0,32,67,0,0,32,67]),Os=new Uint8Array([132,30,16,0]),ws=new Uint8Array([64,31,16,0]),Rs=new Uint8Array([115,101,116,115,32,120,121,46,114,97,110,103,101,0]);Object.assign(we,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -2100, -2100 }, comptime maxValue: @Vector(2, f32) = .{ 2100, 2100 }, comptime defaultValue: @Vector(2, f32) = .{ 160, 160 }, comptime description: *const [13:0]u8 = "sets xy.range"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:V}],methods:[],template:{memory:{array:hs},slots:{0:{structure:r,memory:{array:gs},slots:{0:{structure:a,memory:{array:Ye},address:1056408}}},1:{structure:r,memory:{array:zs},slots:{0:{structure:a,memory:{array:Ze},address:1056400}}},2:{structure:r,memory:{array:Vs},slots:{0:{structure:a,memory:{array:Ss},address:1056392}}},3:{structure:V,memory:{array:Os},slots:{0:{structure:U,memory:{array:ws},address:1056388,slots:{0:{structure:A,memory:{array:Rs},address:1056576}}}}}}}},slot:50});Object.assign(ee,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -2100, -2100 }, comptime maxValue: @Vector(2, f32) = .{ 2100, 2100 }, comptime defaultValue: @Vector(2, f32) = .{ 160, 160 }, comptime description: *const [13:0]u8 = "sets xy.range"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:we}],methods:[],template:null},slot:49});Object.assign(k,{...t,type:1,name:"[23:0]u8",length:23,byteSize:24,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:76});Object.assign(v,{...t,type:11,name:"*const [23:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:k}],methods:[],template:null},slot:75});Object.assign(R,{...t,type:11,name:"*const *const [23:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:v}],methods:[],template:null},slot:74});const qs=new Uint8Array([]),As=new Uint8Array([120,30,16,0]),et=new Uint8Array([0,0,0,0,0,104,144,192]),Us=new Uint8Array([112,30,16,0]),tt=new Uint8Array([0,0,0,0,0,104,144,64]),js=new Uint8Array([104,30,16,0]),st=new Uint8Array([0,0,0,0,0,0,100,64]),xs=new Uint8Array([128,30,16,0]),_s=new Uint8Array([40,31,16,0]),Ps=new Uint8Array([115,101,116,115,32,105,110,105,116,105,97,108,32,120,46,112,111,115,105,116,105,111,110,0]);Object.assign(Re,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = -1050, comptime maxValue: comptime_float = 1050, comptime defaultValue: comptime_float = 160, comptime description: *const [23:0]u8 = "sets initial x.position"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:p},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:R}],methods:[],template:{memory:{array:qs},slots:{0:{structure:s,memory:{array:As},slots:{0:{structure:m,memory:{array:et},address:1056376}}},1:{structure:s,memory:{array:Us},slots:{0:{structure:m,memory:{array:tt},address:1056368}}},2:{structure:s,memory:{array:js},slots:{0:{structure:m,memory:{array:st},address:1056360}}},3:{structure:R,memory:{array:xs},slots:{0:{structure:v,memory:{array:_s},address:1056384,slots:{0:{structure:k,memory:{array:Ps},address:1056552}}}}}}}},slot:52});Object.assign(te,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = -1050, comptime maxValue: comptime_float = 1050, comptime defaultValue: comptime_float = 160, comptime description: *const [23:0]u8 = "sets initial x.position"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Re}],methods:[],template:null},slot:51});const Cs=new Uint8Array([]),Is=new Uint8Array([120,30,16,0]),ks=new Uint8Array([112,30,16,0]),vs=new Uint8Array([104,30,16,0]),Es=new Uint8Array([100,30,16,0]),Ks=new Uint8Array([16,31,16,0]),Fs=new Uint8Array([115,101,116,115,32,105,110,105,116,105,97,108,32,121,46,112,111,115,105,116,105,111,110,0]);Object.assign(qe,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = -1050, comptime maxValue: comptime_float = 1050, comptime defaultValue: comptime_float = 160, comptime description: *const [23:0]u8 = "sets initial y.position"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:p},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:R}],methods:[],template:{memory:{array:Cs},slots:{0:{structure:s,memory:{array:Is},slots:{0:{structure:m,memory:{array:et},address:1056376}}},1:{structure:s,memory:{array:ks},slots:{0:{structure:m,memory:{array:tt},address:1056368}}},2:{structure:s,memory:{array:vs},slots:{0:{structure:m,memory:{array:st},address:1056360}}},3:{structure:R,memory:{array:Es},slots:{0:{structure:v,memory:{array:Ks},address:1056356,slots:{0:{structure:k,memory:{array:Fs},address:1056528}}}}}}}},slot:54});Object.assign(se,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = -1050, comptime maxValue: comptime_float = 1050, comptime defaultValue: comptime_float = 160, comptime description: *const [23:0]u8 = "sets initial y.position"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:qe}],methods:[],template:null},slot:53});const Ds=new Uint8Array([]),Ts=new Uint8Array([170,170,170,170]),Ms=new Uint8Array([170,170,170,170]),$s=new Uint8Array([170,170,170,170]),Bs=new Uint8Array([170,170,170,170]),Ls=new Uint8Array([170,170,170,170]),Gs=new Uint8Array([170,170,170,170]),Hs=new Uint8Array([170,170,170,170]),Js=new Uint8Array([170,170,170,170]);Object.assign(Ae,{...t,type:2,name:'struct{comptime size: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ 0, 0 }, comptime maxValue: @Vector(2, f32) = .{ 4096, 4096 }, comptime defaultValue: @Vector(2, f32) = .{ 500, 500 }, comptime description: *const [19:0]u8 = "image width/-height"} = .{.type = @Vector(2, f32), .minValue = .{ 0, 0 }, .maxValue = .{ 4096, 4096 }, .defaultValue = .{ 500, 500 }, .description = "image width/-height"}, comptime radians: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -1000, -1000 }, comptime maxValue: @Vector(2, f32) = .{ 1000, 1000 }, comptime defaultValue: struct{comptime comptime_float = 50, comptime comptime_float = 150} = .{50, 150}, comptime description: *const [13:0]u8 = "setup radians"} = .{.type = @Vector(2, f32), .minValue = .{ -1000, -1000 }, .maxValue = .{ 1000, 1000 }, .defaultValue = .{50, 150}, .description = "setup radians"}, comptime rotate: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 360, comptime defaultValue: comptime_float = 0, comptime description: *const [14:0]u8 = "setup rotation"} = .{.type = f32, .minValue = 0, .maxValue = 360, .defaultValue = 0, .description = "setup rotation"}, comptime zoom: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 1, comptime description: *const [13:0]u8 = "setup zooming"} = .{.type = f32, .minValue = 1, .maxValue = 100, .defaultValue = 1, .description = "setup zooming"}, comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -2100, -2100 }, comptime maxValue: @Vector(2, f32) = .{ 2100, 2100 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }, comptime description: *const [14:0]u8 = "sets xy.center"} = .{.type = @Vector(2, f32), .minValue = .{ -2100, -2100 }, .maxValue = .{ 2100, 2100 }, .defaultValue = .{ 0, 0 }, .description = "sets xy.center"}, comptime range: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -2100, -2100 }, comptime maxValue: @Vector(2, f32) = .{ 2100, 2100 }, comptime defaultValue: @Vector(2, f32) = .{ 160, 160 }, comptime description: *const [13:0]u8 = "sets xy.range"} = .{.type = @Vector(2, f32), .minValue = .{ -2100, -2100 }, .maxValue = .{ 2100, 2100 }, .defaultValue = .{ 160, 160 }, .description = "sets xy.range"}, comptime xPos: struct{comptime type: type = f32, comptime minValue: comptime_float = -1050, comptime maxValue: comptime_float = 1050, comptime defaultValue: comptime_float = 160, comptime description: *const [23:0]u8 = "sets initial x.position"} = .{.type = f32, .minValue = -1050, .maxValue = 1050, .defaultValue = 160, .description = "sets initial x.position"}, comptime yPos: struct{comptime type: type = f32, comptime minValue: comptime_float = -1050, comptime maxValue: comptime_float = 1050, comptime defaultValue: comptime_float = 160, comptime description: *const [23:0]u8 = "sets initial y.position"} = .{.type = f32, .minValue = -1050, .maxValue = 1050, .defaultValue = 160, .description = "sets initial y.position"}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"size",structure:N},{...e,type:8,isRequired:!1,slot:1,name:"radians",structure:W},{...e,type:8,isRequired:!1,slot:2,name:"rotate",structure:X},{...e,type:8,isRequired:!1,slot:3,name:"zoom",structure:Y},{...e,type:8,isRequired:!1,slot:4,name:"center",structure:Z},{...e,type:8,isRequired:!1,slot:5,name:"range",structure:ee},{...e,type:8,isRequired:!1,slot:6,name:"xPos",structure:te},{...e,type:8,isRequired:!1,slot:7,name:"yPos",structure:se}],methods:[],template:{memory:{array:Ds},slots:{0:{structure:N,memory:{array:Ts},slots:{0:{structure:he,memory:{array:y},address:-1431655766}}},1:{structure:W,memory:{array:Ms},slots:{0:{structure:ze,memory:{array:y},address:-1431655766}}},2:{structure:X,memory:{array:$s},slots:{0:{structure:Ve,memory:{array:y},address:-1431655766}}},3:{structure:Y,memory:{array:Bs},slots:{0:{structure:Se,memory:{array:y},address:-1431655766}}},4:{structure:Z,memory:{array:Ls},slots:{0:{structure:Oe,memory:{array:y},address:-1431655766}}},5:{structure:ee,memory:{array:Gs},slots:{0:{structure:we,memory:{array:y},address:-1431655766}}},6:{structure:te,memory:{array:Hs},slots:{0:{structure:Re,memory:{array:y},address:-1431655766}}},7:{structure:se,memory:{array:Js},slots:{0:{structure:qe,memory:{array:y},address:-1431655766}}}}}},slot:15});Object.assign(re,{...t,type:11,name:'*struct{comptime size: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ 0, 0 }, comptime maxValue: @Vector(2, f32) = .{ 4096, 4096 }, comptime defaultValue: @Vector(2, f32) = .{ 500, 500 }, comptime description: *const [19:0]u8 = "image width/-height"} = .{.type = @Vector(2, f32), .minValue = .{ 0, 0 }, .maxValue = .{ 4096, 4096 }, .defaultValue = .{ 500, 500 }, .description = "image width/-height"}, comptime radians: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -1000, -1000 }, comptime maxValue: @Vector(2, f32) = .{ 1000, 1000 }, comptime defaultValue: struct{comptime comptime_float = 50, comptime comptime_float = 150} = .{50, 150}, comptime description: *const [13:0]u8 = "setup radians"} = .{.type = @Vector(2, f32), .minValue = .{ -1000, -1000 }, .maxValue = .{ 1000, 1000 }, .defaultValue = .{50, 150}, .description = "setup radians"}, comptime rotate: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 360, comptime defaultValue: comptime_float = 0, comptime description: *const [14:0]u8 = "setup rotation"} = .{.type = f32, .minValue = 0, .maxValue = 360, .defaultValue = 0, .description = "setup rotation"}, comptime zoom: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 1, comptime description: *const [13:0]u8 = "setup zooming"} = .{.type = f32, .minValue = 1, .maxValue = 100, .defaultValue = 1, .description = "setup zooming"}, comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -2100, -2100 }, comptime maxValue: @Vector(2, f32) = .{ 2100, 2100 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }, comptime description: *const [14:0]u8 = "sets xy.center"} = .{.type = @Vector(2, f32), .minValue = .{ -2100, -2100 }, .maxValue = .{ 2100, 2100 }, .defaultValue = .{ 0, 0 }, .description = "sets xy.center"}, comptime range: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -2100, -2100 }, comptime maxValue: @Vector(2, f32) = .{ 2100, 2100 }, comptime defaultValue: @Vector(2, f32) = .{ 160, 160 }, comptime description: *const [13:0]u8 = "sets xy.range"} = .{.type = @Vector(2, f32), .minValue = .{ -2100, -2100 }, .maxValue = .{ 2100, 2100 }, .defaultValue = .{ 160, 160 }, .description = "sets xy.range"}, comptime xPos: struct{comptime type: type = f32, comptime minValue: comptime_float = -1050, comptime maxValue: comptime_float = 1050, comptime defaultValue: comptime_float = 160, comptime description: *const [23:0]u8 = "sets initial x.position"} = .{.type = f32, .minValue = -1050, .maxValue = 1050, .defaultValue = 160, .description = "sets initial x.position"}, comptime yPos: struct{comptime type: type = f32, comptime minValue: comptime_float = -1050, comptime maxValue: comptime_float = 1050, comptime defaultValue: comptime_float = 160, comptime description: *const [23:0]u8 = "sets initial y.position"} = .{.type = f32, .minValue = -1050, .maxValue = 1050, .defaultValue = 160, .description = "sets initial y.position"}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ae}],methods:[],template:null},slot:14});Object.assign(ae,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:b}],methods:[],template:null},slot:77});const Ns=new Uint8Array([]),Qs=new Uint8Array([96,30,16,0]),Ws=new Uint8Array([4,0,0,0]);Object.assign(E,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:ae}],methods:[],template:{memory:{array:Ns},slots:{0:{structure:ae,memory:{array:Qs},slots:{0:{structure:b,memory:{array:Ws},address:1056352}}}}}},slot:56});Object.assign(q,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:E}],methods:[],template:null},slot:55});const Xs=new Uint8Array([]),Ys=new Uint8Array([170,170,170,170]);Object.assign(Ue,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:q}],methods:[],template:{memory:{array:Xs},slots:{0:{structure:q,memory:{array:Ys},slots:{0:{structure:E,memory:{array:y},address:-1431655766}}}}}},slot:17});Object.assign(ie,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ue}],methods:[],template:null},slot:16});const Zs=new Uint8Array([]),er=new Uint8Array([170,170,170,170]);Object.assign(je,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:q}],methods:[],template:{memory:{array:Zs},slots:{0:{structure:q,memory:{array:er},slots:{0:{structure:E,memory:{array:y},address:-1431655766}}}}}},slot:19});Object.assign(me,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:je}],methods:[],template:null},slot:18});const tr=new Uint8Array([]),sr=new Uint8Array([]),rr=new Uint8Array([44,251,15,0]),ar=new Uint8Array([186,82,16,0]),ir=new Uint8Array([101,115,99,104,101,114,47,45,100,114,111,115,116,101,32,101,102,102,101,99,116,0]),mr=new Uint8Array([108,251,15,0]),nr=new Uint8Array([169,82,16,0]),or=new Uint8Array([70,114,97,110,107,32,82,101,105,116,98,101,114,103,101,114,0]),ur=new Uint8Array([172,251,15,0]),cr=new Uint8Array([1,0,0,0]),lr=new Uint8Array([4,252,15,0]),yr=new Uint8Array([126,82,16,0]),pr=new Uint8Array([101,115,99,104,101,114,105,122,101,114,32,46,46,46,100,105,115,115,101,99,116,101,100,32,102,111,114,32,117,115,101,32,119,105,116,104,32,102,108,97,115,104,0]),fr=new Uint8Array([170,170,170,170]),dr=new Uint8Array([170,170,170,170]),br=new Uint8Array([170,170,170,170]);Object.assign(Ke,{...t,type:2,name:"escherizer.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:tr}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:L},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:G},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:z},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:H},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:re},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:ie},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:me}],methods:[],template:{memory:{array:sr},slots:{0:{structure:L,memory:{array:rr},slots:{0:{structure:ce,memory:{array:ar},slots:{0:{structure:ue,memory:{array:ir},address:1069754}}}}},1:{structure:G,memory:{array:mr},slots:{0:{structure:ye,memory:{array:nr},slots:{0:{structure:le,memory:{array:or},address:1069737}}}}},2:{structure:z,memory:{array:ur},slots:{0:{structure:b,memory:{array:cr}}}},3:{structure:H,memory:{array:lr},slots:{0:{structure:fe,memory:{array:yr},slots:{0:{structure:pe,memory:{array:pr},address:1069694}}}}},4:{structure:re,memory:{array:fr},slots:{0:{structure:Ae,memory:{array:y},address:-1431655766}}},5:{structure:ie,memory:{array:dr},slots:{0:{structure:Ue,memory:{array:y},address:-1431655766}}},6:{structure:me,memory:{array:br},slots:{0:{structure:je,memory:{array:y},address:-1431655766}}}}}},slot:1});Object.assign(j,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:24});Object.assign(xe,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:j}],methods:[],template:null},slot:23});Object.assign(_e,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:xe}],methods:[],template:null},slot:22});Object.assign(f,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:25});const hr=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Pe,{...t,type:9,name:"escherizer.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:b},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:b}],methods:[],template:{memory:{array:hr}}},slot:26});Object.assign(_,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:_}],methods:[],template:null},slot:27});Object.assign(P,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:P}],methods:[],template:null},slot:28});Object.assign(Ce,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:57});const gr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),zr=new Uint8Array([]),Vr=new Uint8Array([8,250,15,0]),Sr=new Uint8Array([4,0,0,0]);Object.assign(ne,{...t,type:2,name:"escherizer.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:_e},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:f},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:f},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Pe},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:_},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:P}],methods:[],template:{memory:{array:gr}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:j},{...e,type:7,isRequired:!1,name:"FPixel",structure:Ce},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:z}],methods:[],template:{memory:{array:zr},slots:{0:{structure:z,memory:{array:Vr},slots:{0:{structure:b,memory:{array:Sr}}}}}}},slot:21});const Or=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),wr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Rr=new Uint8Array([0,0,0,0,0,0,0,0]),Ge=new Uint8Array([]);Object.assign(K,{...t,type:2,name:"escherizer.KernelInput(u8,escherizer.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:ne}],methods:[],template:{memory:{array:Or},slots:{0:{structure:ne,memory:{array:wr},slots:{0:{structure:_e,memory:{array:Rr},slots:{0:{structure:xe,memory:{array:Ge}}}}}}}}},slot:20});Object.assign(Ie,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:j}],methods:[],template:null},slot:23});Object.assign(ke,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Ie}],methods:[],template:null},slot:31});const qr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ar=new Uint8Array([]),Ur=new Uint8Array([8,250,15,0]),jr=new Uint8Array([4,0,0,0]);Object.assign(oe,{...t,type:2,name:"escherizer.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ke},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:f},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:f},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Pe},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:_},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:P}],methods:[],template:{memory:{array:qr}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:j},{...e,type:7,isRequired:!1,name:"FPixel",structure:Ce},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:z}],methods:[],template:{memory:{array:Ar},slots:{0:{structure:z,memory:{array:Ur},slots:{0:{structure:b,memory:{array:jr}}}}}}},slot:30});const xr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),_r=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Pr=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(F,{...t,type:2,name:"escherizer.KernelOutput(u8,escherizer.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:oe}],methods:[],template:{memory:{array:xr},slots:{0:{structure:oe,memory:{array:_r},slots:{0:{structure:ke,memory:{array:Pr},slots:{0:{structure:Ie,memory:{array:Ge}}}}}}}}},slot:29});const Cr=new Uint8Array([0,0,250,67,0,0,250,67,0,0,72,66,0,0,22,67,0,0,0,0,0,0,0,0,0,0,32,67,0,0,32,67,0,0,0,0,0,0,128,63,0,0,32,67,0,0,32,67]);Object.assign(D,{...t,type:2,name:"escherizer.KernelParameters(escherizer.kernel)",length:1,byteSize:48,align:3,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"size",structure:a},{...e,type:6,isRequired:!1,bitOffset:64,bitSize:64,byteSize:8,slot:1,name:"radians",structure:a},{...e,type:4,isRequired:!1,bitOffset:256,bitSize:32,byteSize:4,slot:2,name:"rotate",structure:p},{...e,type:4,isRequired:!1,bitOffset:288,bitSize:32,byteSize:4,slot:3,name:"zoom",structure:p},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:64,byteSize:8,slot:4,name:"center",structure:a},{...e,type:6,isRequired:!1,bitOffset:192,bitSize:64,byteSize:8,slot:5,name:"range",structure:a},{...e,type:4,isRequired:!1,bitOffset:320,bitSize:32,byteSize:4,slot:6,name:"xPos",structure:p},{...e,type:4,isRequired:!1,bitOffset:352,bitSize:32,byteSize:4,slot:7,name:"yPos",structure:p}],methods:[],template:{memory:{array:Cr}}},slot:32});Object.assign(Fe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(escherizer.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:58});Object.assign(De,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(escherizer.createOutput)).Fn.return_type.?).ErrorUnion.error_set!escherizer.KernelOutput(u8,escherizer.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:F},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Fe}],methods:[],template:null},slot:37});Object.assign(Te,{...t,type:3,name:"createOutput",length:1,byteSize:112,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:384,bitSize:32,byteSize:4,slot:0,name:"0",structure:f},{...e,type:3,bitOffset:416,bitSize:32,byteSize:4,slot:1,name:"1",structure:f},{...e,type:6,bitOffset:448,bitSize:192,byteSize:24,slot:2,name:"2",structure:K},{...e,type:6,bitOffset:0,bitSize:384,byteSize:48,slot:3,name:"3",structure:D},{...e,type:6,bitOffset:640,bitSize:224,byteSize:28,slot:4,name:"retval",structure:De}],methods:[],template:null},slot:35});Object.assign(Me,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(escherizer.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:59});Object.assign($e,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(escherizer.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!escherizer.KernelOutput(u8,escherizer.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:F},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Me}],methods:[],template:null},slot:38});Object.assign(Be,{...t,type:3,name:"createPartialOutput",length:1,byteSize:120,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:384,bitSize:32,byteSize:4,slot:0,name:"0",structure:f},{...e,type:3,bitOffset:416,bitSize:32,byteSize:4,slot:1,name:"1",structure:f},{...e,type:3,bitOffset:448,bitSize:32,byteSize:4,slot:2,name:"2",structure:f},{...e,type:3,bitOffset:480,bitSize:32,byteSize:4,slot:3,name:"3",structure:f},{...e,type:6,bitOffset:512,bitSize:192,byteSize:24,slot:4,name:"4",structure:K},{...e,type:6,bitOffset:0,bitSize:384,byteSize:48,slot:5,name:"5",structure:D},{...e,type:6,bitOffset:704,bitSize:224,byteSize:28,slot:6,name:"retval",structure:$e}],methods:[],template:null},slot:36});const Ir={argStruct:Te,thunk:1,name:"createOutput"},kr={argStruct:Be,thunk:6,name:"createPartialOutput"};Object.assign(Le,{...t,type:2,name:"escherizer",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ge}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:Ke},{...e,type:7,isRequired:!1,name:"Input",structure:K},{...e,type:7,isRequired:!1,name:"Output",structure:F},{...e,type:7,isRequired:!1,name:"Parameters",structure:D}],methods:[Ir,kr],template:null},slot:0});const vr=[d,ue,ce,L,le,ye,G,b,z,pe,fe,H,p,a,r,de,be,J,he,N,m,s,ge,Q,A,U,V,ze,W,C,I,w,Ve,X,Se,Y,Oe,Z,we,ee,k,v,R,Re,te,qe,se,Ae,re,ae,E,q,Ue,ie,je,me,Ke,j,xe,_e,f,Pe,_,P,Ce,ne,K,Ie,ke,oe,F,D,Fe,De,Te,Me,$e,Be,Le],Er=wt(vr),Kr=Le.constructor,Fr=(async()=>{const u=new URL("escherizer-4ec491e7.wasm",import.meta.url).href;return fetch(u)})();Rt(Fr,{...Er,writeBack:!0});const{createOutput:Hr,createPartialOutput:Dr,kernel:Ee,Input:Tr,Output:Jr,Parameters:Nr}=Kr;function Mr(u,l,n,i,o={},S={}){if(Array.isArray(o)){const g=o;o={};for(const[h,O]of Object.keys(Ee.inputImages).entries())o[O]=g[h]}const T=new Tr(void 0),M=Object.keys(Ee.inputImages),c=[];let x;for(const g of M){let h=o[g];if(h||(M.length===1&&["data","width","height"].every(O=>!!o[O])?h=o:c.push(g)),T[g]=h,x){if(h.colorSpace!==x)throw new Error(`Input images must all use the same color space: ${x}`)}else x=h.colorSpace}if(c.length>0)throw new Error(`Missing input image${c.length>1?"s":""}: ${c.join(", ")}`);const ve=Dr(u,l,n,i,T,S),He=g=>{const h=Object.keys(g),O={};for(const Je of h){const{data:{typedArray:$},width:Ne,height:at}=g[Je];let B;if(typeof ImageData=="function"){const it=new Uint8ClampedArray($.buffer,$.byteOffset,$.byteLength);B=new ImageData(it,Ne,i,{colorSpace:x})}else B={data:$,width:Ne,height:at};if(h.length===1)return B;O[Je]=B}return O};return ve[Symbol.toStringTag]==="Promise"?ve.then(He):He(ve)}function $r(){const u={};for(let[l,n]of Object.entries(Ee)){if(l==="parameters"){const i={};for(const[o,S]of Object.entries(n)){const T=i[o]={};for(let[M,c]of Object.entries(S))typeof c=="object"?"string"in c?c=c.string:c=rt(c):typeof c=="function"&&(c=Br(c.name)),T[M]=c}n=i}else typeof n=="object"&&("string"in n?n=n.string:n=n.valueOf());u[l]=n}return u}function rt(u){const l=[];for(let[n,i]of Object.entries(u))typeof i=="object"&&(i=rt(i)),l[n]=i;return l}function Br(u){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[u]}onmessage=u=>{const[l,n,...i]=u.data;Lr(l,i).then(([o,S])=>{postMessage([l,n,o],{transfer:S})}).catch(o=>{postMessage(["error",n,o])})};async function Lr(u,l){switch(u){case"getKernelInfo":return[$r(...l)];case"createPartialImageData":const i=await Mr(...l),o=[];if("data"in i&&"width"in i&&"height"in i)o.push(i.data.buffer);else for(const S of Object.entries(i))o.push(i.data.buffer);return[i,o];default:throw new Error(`Unknown function: ${u}`)}}
