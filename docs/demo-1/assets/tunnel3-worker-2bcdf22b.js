import{u as ke,a as Ie,b as Ce,d as ve,c as xe,e as Ee,f as Ke,g as De,h as Fe,i as Me,j as _e,k as Te,l as $e,m as Be,o as Le,n as Ge,p as He,q as Je}from"./index-d64bc850.js";ke();Ie();Ce();ve();xe();Ee();Ke();De();Fe();Me();_e();Te();$e();Be();Le();Ge();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},d={},N={},Q={},K={},W={},X={},D={},y={},c={},Y={},Z={},F={},q={},S={},b={},o={},j={},z={},O={},f={},ee={},M={},te={},_={},se={},T={},re={},$={},ae={},B={},P={},w={},ne={},L={},ie={},G={},fe={},A={},ue={},oe={},l={},le={},U={},me={},H={},V={},ye={},ce={},J={},k={},I={},Se={},de={},he={},ge={},ze={},Oe={},we={};Object.assign(d,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:5});Object.assign(N,{...t,type:1,name:"[8:0]u8",length:8,byteSize:9,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:4});Object.assign(Q,{...t,type:11,name:"*const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:3});Object.assign(K,{...t,type:11,name:"*const *const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:2});Object.assign(W,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:8});Object.assign(X,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:7});Object.assign(D,{...t,type:11,name:"*const *const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:6});Object.assign(y,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:10});Object.assign(c,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:9});Object.assign(Y,{...t,type:1,name:"[15:0]u8",length:15,byteSize:16,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:13});Object.assign(Z,{...t,type:11,name:"*const [15:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:12});Object.assign(F,{...t,type:11,name:"*const *const [15:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:11});Object.assign(q,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:46});Object.assign(S,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:32});Object.assign(b,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:b}],methods:[],template:null},slot:56});Object.assign(o,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:b}],methods:[],template:null},slot:55});const Ne=new Uint8Array,Qe=new Uint8Array([64,248,15,0]),We=new Uint8Array([0,0,0,0,0,0,0,0]),Xe=new Uint8Array([104,248,15,0]),Ye=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(j,{...t,type:2,name:"Struct0017",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:o}],methods:[],template:{memory:{array:Ne},slots:{0:{structure:o,memory:{array:Qe},slots:{0:{structure:b,memory:{array:We}}}},1:{structure:o,memory:{array:Xe},slots:{0:{structure:b,memory:{array:Ye}}}}}}},slot:50});Object.assign(z,{...t,type:11,name:"Struct0014",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:j}],methods:[],template:null},slot:49});const Ze=new Uint8Array,et=new Uint8Array([64,248,15,0]),tt=new Uint8Array([0,0,0,0,0,0,128,64]),st=new Uint8Array([104,248,15,0]),rt=new Uint8Array([0,0,0,0,0,0,128,64]);Object.assign(O,{...t,type:2,name:"Struct0018",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:o}],methods:[],template:{memory:{array:Ze},slots:{0:{structure:o,memory:{array:et},slots:{0:{structure:b,memory:{array:tt}}}},1:{structure:o,memory:{array:st},slots:{0:{structure:b,memory:{array:rt}}}}}}},slot:52});Object.assign(f,{...t,type:11,name:"Struct0015",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:O}],methods:[],template:null},slot:51});const at=new Uint8Array,nt=new Uint8Array([170,170,170,170]),it=new Uint8Array,ut=new Uint8Array([170,170,170,170]),ot=new Uint8Array,lt=new Uint8Array([170,170,170,170]),mt=new Uint8Array;Object.assign(ee,{...t,type:2,name:"Struct0010",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:z},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:f},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:f}],methods:[],template:{memory:{array:at},slots:{0:{structure:z,memory:{array:nt},slots:{0:{structure:j,memory:{array:it}}}},1:{structure:f,memory:{array:ut},slots:{0:{structure:O,memory:{array:ot}}}},2:{structure:f,memory:{array:lt},slots:{0:{structure:O,memory:{array:mt}}}}}}},slot:38});Object.assign(M,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:37});const yt=new Uint8Array,ct=new Uint8Array([64,253,15,0]),bt=new Uint8Array([0,0,0,0,0,0,112,64]),pt=new Uint8Array([104,253,15,0]),ft=new Uint8Array([0,0,0,0,0,0,112,64]);Object.assign(te,{...t,type:2,name:"Struct0019",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:o}],methods:[],template:{memory:{array:yt},slots:{0:{structure:o,memory:{array:ct},slots:{0:{structure:b,memory:{array:bt}}}},1:{structure:o,memory:{array:pt},slots:{0:{structure:b,memory:{array:ft}}}}}}},slot:54});Object.assign(_,{...t,type:11,name:"Struct0016",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:53});const St=new Uint8Array,dt=new Uint8Array([170,170,170,170]),ht=new Uint8Array,gt=new Uint8Array([170,170,170,170]),zt=new Uint8Array,Ot=new Uint8Array([170,170,170,170]),wt=new Uint8Array;Object.assign(se,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:z},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:f},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:_}],methods:[],template:{memory:{array:St},slots:{0:{structure:z,memory:{array:dt},slots:{0:{structure:j,memory:{array:ht}}}},1:{structure:f,memory:{array:gt},slots:{0:{structure:O,memory:{array:zt}}}},2:{structure:_,memory:{array:Ot},slots:{0:{structure:te,memory:{array:wt}}}}}}},slot:40});Object.assign(T,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:39});const At=new Uint8Array;Object.assign(re,{...t,type:2,name:"Struct0012",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S}],methods:[],template:{memory:{array:At}}},slot:42});Object.assign($,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:41});const Rt=new Uint8Array,qt=new Uint8Array([170,170,170,170]),Ut=new Uint8Array,jt=new Uint8Array([170,170,170,170]),Pt=new Uint8Array,Vt=new Uint8Array([170,170,170,170]),kt=new Uint8Array;Object.assign(ae,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"imgSize",structure:M},{...e,type:8,isRequired:!1,slot:1,name:"center",structure:T},{...e,type:8,isRequired:!1,slot:2,name:"offset",structure:$}],methods:[],template:{memory:{array:Rt},slots:{0:{structure:M,memory:{array:qt},slots:{0:{structure:ee,memory:{array:Ut}}}},1:{structure:T,memory:{array:jt},slots:{0:{structure:se,memory:{array:Pt}}}},2:{structure:$,memory:{array:Vt},slots:{0:{structure:re,memory:{array:kt}}}}}}},slot:15});Object.assign(B,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:14});const It=new Uint8Array,Ct=new Uint8Array([96,248,15,0]),vt=new Uint8Array([4,0,0,0]);Object.assign(P,{...t,type:2,name:"Struct0013",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:It},slots:{0:{structure:c,memory:{array:Ct},slots:{0:{structure:y,memory:{array:vt}}}}}}},slot:44});Object.assign(w,{...t,type:11,name:"Struct0009",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:P}],methods:[],template:null},slot:43});const xt=new Uint8Array,Et=new Uint8Array([170,170,170,170]),Kt=new Uint8Array;Object.assign(ne,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:w}],methods:[],template:{memory:{array:xt},slots:{0:{structure:w,memory:{array:Et},slots:{0:{structure:P,memory:{array:Kt}}}}}}},slot:17});Object.assign(L,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:16});const Dt=new Uint8Array,Ft=new Uint8Array([170,170,170,170]),Mt=new Uint8Array;Object.assign(ie,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:w}],methods:[],template:{memory:{array:Dt},slots:{0:{structure:w,memory:{array:Ft},slots:{0:{structure:P,memory:{array:Mt}}}}}}},slot:19});Object.assign(G,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:18});const _t=new Uint8Array,Tt=new Uint8Array,$t=new Uint8Array([96,36,16,0]),Bt=new Uint8Array([24,36,16,0]),Lt=new Uint8Array([84,117,110,110,101,108,32,51,0]),Gt=new Uint8Array([92,36,16,0]),Ht=new Uint8Array([5,36,16,0]),Jt=new Uint8Array([77,114,46,100,111,111,98,0]),Nt=new Uint8Array([88,36,16,0]),Qt=new Uint8Array([1,0,0,0]),Wt=new Uint8Array([84,36,16,0]),Xt=new Uint8Array([228,35,16,0]),Yt=new Uint8Array([84,117,110,110,101,108,32,101,102,102,101,99,116,32,51,0]),Zt=new Uint8Array([170,170,170,170]),es=new Uint8Array,ts=new Uint8Array([170,170,170,170]),ss=new Uint8Array,rs=new Uint8Array([170,170,170,170]),as=new Uint8Array;Object.assign(fe,{...t,type:2,name:"tunnel3.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:_t}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:K},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:D},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:c},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:F},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:B},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:L},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:G}],methods:[],template:{memory:{array:Tt},slots:{0:{structure:K,memory:{array:$t},slots:{0:{structure:Q,memory:{array:Bt},slots:{0:{structure:N,memory:{array:Lt}}}}}},1:{structure:D,memory:{array:Gt},slots:{0:{structure:X,memory:{array:Ht},slots:{0:{structure:W,memory:{array:Jt}}}}}},2:{structure:c,memory:{array:Nt},slots:{0:{structure:y,memory:{array:Qt}}}},3:{structure:F,memory:{array:Wt},slots:{0:{structure:Z,memory:{array:Xt},slots:{0:{structure:Y,memory:{array:Yt}}}}}},4:{structure:B,memory:{array:Zt},slots:{0:{structure:ae,memory:{array:es}}}},5:{structure:L,memory:{array:ts},slots:{0:{structure:ne,memory:{array:ss}}}},6:{structure:G,memory:{array:rs},slots:{0:{structure:ie,memory:{array:as}}}}}}},slot:1});Object.assign(A,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:24});Object.assign(ue,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:23});Object.assign(oe,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ue}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const ns=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(le,{...t,type:9,name:"tunnel3.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:y},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:y}],methods:[],template:{memory:{array:ns}}},slot:26});Object.assign(U,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:U}],methods:[],template:null},slot:27});Object.assign(me,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:45});const is=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),us=new Uint8Array,os=new Uint8Array([172,35,16,0]),ls=new Uint8Array([4,0,0,0]);Object.assign(H,{...t,type:2,name:"tunnel3.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:oe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:le},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:U}],methods:[],template:{memory:{array:is}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:A},{...e,type:7,isRequired:!1,name:"FPixel",structure:me},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:us},slots:{0:{structure:c,memory:{array:os},slots:{0:{structure:y,memory:{array:ls}}}}}}},slot:21});const ms=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ys=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ue=new Uint8Array([0,0,0,0,0,0,0,0]),cs=new Uint8Array;Object.assign(V,{...t,type:2,name:"tunnel3.KernelInput(u8,tunnel3.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:H}],methods:[],template:{memory:{array:ms},slots:{0:{structure:H,memory:{array:ys},slots:{0:{structure:oe,memory:{array:Ue},address:1047568,slots:{0:{structure:ue,memory:{array:cs},address:0}}}}}}}},slot:20});Object.assign(ye,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:23});Object.assign(ce,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ye}],methods:[],template:null},slot:30});const bs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ps=new Uint8Array,fs=new Uint8Array([172,35,16,0]),Ss=new Uint8Array([4,0,0,0]);Object.assign(J,{...t,type:2,name:"tunnel3.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ce},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:le},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:U}],methods:[],template:{memory:{array:bs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:A},{...e,type:7,isRequired:!1,name:"FPixel",structure:me},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:ps},slots:{0:{structure:c,memory:{array:fs},slots:{0:{structure:y,memory:{array:Ss}}}}}}},slot:29});const ds=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),hs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),gs=new Uint8Array;Object.assign(k,{...t,type:2,name:"tunnel3.KernelOutput(u8,tunnel3.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:J}],methods:[],template:{memory:{array:ds},slots:{0:{structure:J,memory:{array:hs},slots:{0:{structure:ce,memory:{array:Ue},address:1047568,slots:{0:{structure:ye,memory:{array:gs},address:0}}}}}}}},slot:28});const zs=new Uint8Array([0,0,0,68,0,0,0,68,0,0,128,67,0,0,128,67,0,0,0,0,0,0,0,0]);Object.assign(I,{...t,type:2,name:"tunnel3.KernelParameters(tunnel3.kernel)",length:1,byteSize:24,align:3,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"imgSize",structure:S},{...e,type:6,isRequired:!1,bitOffset:64,bitSize:64,byteSize:8,slot:1,name:"center",structure:S},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:64,byteSize:8,slot:2,name:"offset",structure:S}],methods:[],template:{memory:{array:zs}}},slot:31});Object.assign(Se,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(tunnel3.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:47});Object.assign(de,{...t,type:7,name:"ErrorSet0000!tunnel3.KernelOutput(u8,tunnel3.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Se}],methods:[],template:null},slot:35});Object.assign(he,{...t,type:3,name:"createOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:2,name:"2",structure:V},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:3,name:"3",structure:I},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:4,name:"retval",structure:de}],methods:[],template:null},slot:33});Object.assign(ge,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(tunnel3.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(ze,{...t,type:7,name:"ErrorSet0001!tunnel3.KernelOutput(u8,tunnel3.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ge}],methods:[],template:null},slot:36});Object.assign(Oe,{...t,type:3,name:"createPartialOutput",length:1,byteSize:96,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:320,bitSize:192,byteSize:24,slot:4,name:"4",structure:V},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:5,name:"5",structure:I},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ze}],methods:[],template:null},slot:34});const Os=new Uint8Array,ws={argStruct:he,thunk:6,name:"createOutput"},As={argStruct:Oe,thunk:2,name:"createPartialOutput"};Object.assign(we,{...t,type:2,name:"tunnel3",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Os}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:fe},{...e,type:7,isRequired:!1,name:"Input",structure:V},{...e,type:7,isRequired:!1,name:"Output",structure:k},{...e,type:7,isRequired:!1,name:"Parameters",structure:I}],methods:[ws,As],template:null},slot:0});const Rs=[d,N,Q,K,W,X,D,y,c,Y,Z,F,q,S,b,o,j,z,O,f,ee,M,te,_,se,T,re,$,ae,B,P,w,ne,L,ie,G,fe,A,ue,oe,l,le,U,me,H,V,ye,ce,J,k,I,Se,de,he,ge,ze,Oe,we],qs=He(Rs),Us=we.constructor,js=(async()=>{const n=new URL("tunnel3-e79a11ad.wasm",import.meta.url).href;return fetch(n)})();Je(js,{...qs,writeBack:!0});const{createOutput:Es,createPartialOutput:Ps,kernel:pe,Input:Vs,Output:Ks,Parameters:Ds}=Us;function ks(n,u,r,s,a={},h={}){if(Array.isArray(a)){const p=a;a={};for(const[m,g]of Object.keys(pe.inputImages).entries())a[g]=p[m]}const C=new Vs(void 0),v=Object.keys(pe.inputImages),i=[];let R;for(const p of v){let m=a[p];if(m||(v.length===1&&["data","width","height"].every(g=>!!a[g])?m=a:i.push(p)),C[p]=m,R){if(m.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=m.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const be=Ps(n,u,r,s,C,h),Ae=p=>{const m=Object.keys(p),g={};for(const Re of m){const{data:{typedArray:x},width:qe,height:Pe}=p[Re];let E;if(typeof ImageData=="function"){const Ve=new Uint8ClampedArray(x.buffer,x.byteOffset,x.byteLength);E=new ImageData(Ve,qe,s,{colorSpace:R})}else E={data:x,width:qe,height:Pe};if(m.length===1)return E;g[Re]=E}return g};return be[Symbol.toStringTag]==="Promise"?be.then(Ae):Ae(be)}function Is(){const n={};for(let[u,r]of Object.entries(pe)){if(u==="parameters"){const s={};for(const[a,h]of Object.entries(r)){const C=s[a]={};for(let[v,i]of Object.entries(h))typeof i=="object"?"string"in i?i=i.string:i=je(i):typeof i=="function"&&(i=Cs(i.name)),C[v]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[u]=r}return n}function je(n){const u=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=je(s)),u[r]=s;return u}function Cs(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[u,r,...s]=n.data;vs(u,s).then(([a,h])=>{postMessage([u,r,a],{transfer:h})}).catch(a=>{postMessage(["error",r,a])})};async function vs(n,u){switch(n){case"getKernelInfo":return[Is(...u)];case"createPartialImageData":const s=await ks(...u),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const h of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
