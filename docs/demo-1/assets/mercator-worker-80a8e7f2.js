import{u as ge,a as ze,b as Oe,c as we,d as Re,e as qe,f as Ae,g as Ue,h as je,i as Pe,j as ke,k as Ie,l as Ve,m as Ce,o as ve,n as Ee,p as xe,q as Ke}from"./index-d64bc850.js";ge();ze();Oe();we();Re();qe();Ae();Ue();je();Pe();ke();Ie();Ve();Ce();ve();Ee();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},f={},T={},$={},v={},B={},L={},E={},m={},c={},G={},H={},x={},S={},p={},b={},R={},g={},J={},K={},A={},z={},N={},D={},Q={},F={},ae={},O={},W={},X={},u={},Y={},q={},Z={},M={},U={},ee={},te={},_={},j={},P={},ne={},ie={},oe={},ue={},le={},me={},ce={};Object.assign(f,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:5});Object.assign(T,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:4});Object.assign($,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[],template:null},slot:3});Object.assign(v,{...t,type:11,name:"*const *const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:2});Object.assign(B,{...t,type:1,name:"[9:0]u8",length:9,byteSize:10,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:8});Object.assign(L,{...t,type:11,name:"*const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:7});Object.assign(E,{...t,type:11,name:"*const *const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:6});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:10});Object.assign(c,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:9});Object.assign(G,{...t,type:1,name:"[8:0]u8",length:8,byteSize:9,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:13});Object.assign(H,{...t,type:11,name:"*const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:12});Object.assign(x,{...t,type:11,name:"*const *const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:11});Object.assign(S,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:32});Object.assign(p,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:p}],methods:[],template:null},slot:45});Object.assign(b,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:44});const De=new Uint8Array,Fe=new Uint8Array([88,250,15,0]),Me=new Uint8Array([0,0,0,0,0,0,0,0]),_e=new Uint8Array([128,250,15,0]),Te=new Uint8Array([0,0,0,0,0,0,176,64]),$e=new Uint8Array([168,250,15,0]),Be=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(R,{...t,type:2,name:"Struct0008",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:b},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:b}],methods:[],template:{memory:{array:De},slots:{0:{structure:b,memory:{array:Fe},slots:{0:{structure:p,memory:{array:Me}}}},1:{structure:b,memory:{array:_e},slots:{0:{structure:p,memory:{array:Te}}}},2:{structure:b,memory:{array:$e},slots:{0:{structure:p,memory:{array:Be}}}}}}},slot:38});Object.assign(g,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:37});const Le=new Uint8Array,Ge=new Uint8Array([170,170,170,170]),He=new Uint8Array,Je=new Uint8Array([170,170,170,170]),Ne=new Uint8Array;Object.assign(J,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"center",structure:g},{...e,type:8,isRequired:!1,slot:1,name:"width",structure:g}],methods:[],template:{memory:{array:Le},slots:{0:{structure:g,memory:{array:Ge},slots:{0:{structure:R,memory:{array:He}}}},1:{structure:g,memory:{array:Je},slots:{0:{structure:R,memory:{array:Ne}}}}}}},slot:15});Object.assign(K,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:14});const Qe=new Uint8Array,We=new Uint8Array([160,250,15,0]),Xe=new Uint8Array([4,0,0,0]);Object.assign(A,{...t,type:2,name:"Struct0009",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:Qe},slots:{0:{structure:c,memory:{array:We},slots:{0:{structure:m,memory:{array:Xe}}}}}}},slot:40});Object.assign(z,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:39});const Ye=new Uint8Array,Ze=new Uint8Array([170,170,170,170]),et=new Uint8Array;Object.assign(N,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:z}],methods:[],template:{memory:{array:Ye},slots:{0:{structure:z,memory:{array:Ze},slots:{0:{structure:A,memory:{array:et}}}}}}},slot:17});Object.assign(D,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:16});const tt=new Uint8Array,st=new Uint8Array([170,170,170,170]),rt=new Uint8Array;Object.assign(Q,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:z}],methods:[],template:{memory:{array:tt},slots:{0:{structure:z,memory:{array:st},slots:{0:{structure:A,memory:{array:rt}}}}}}},slot:19});Object.assign(F,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:18});const at=new Uint8Array,nt=new Uint8Array,it=new Uint8Array([164,35,16,0]),ot=new Uint8Array([79,35,16,0]),ut=new Uint8Array([110,101,116,46,110,105,99,111,112,116,101,114,101,46,102,105,108,116,101,114,115,0]),lt=new Uint8Array([160,35,16,0]),mt=new Uint8Array([58,35,16,0]),ct=new Uint8Array([110,105,99,111,112,116,101,114,101,0]),yt=new Uint8Array([156,35,16,0]),bt=new Uint8Array([1,0,0,0]),pt=new Uint8Array([152,35,16,0]),ft=new Uint8Array([32,35,16,0]),St=new Uint8Array([109,101,114,99,97,116,111,114,0]),dt=new Uint8Array([170,170,170,170]),ht=new Uint8Array,gt=new Uint8Array([170,170,170,170]),zt=new Uint8Array,Ot=new Uint8Array([170,170,170,170]),wt=new Uint8Array;Object.assign(ae,{...t,type:2,name:"mercator.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:at}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:v},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:E},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:c},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:x},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:K},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:D},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:F}],methods:[],template:{memory:{array:nt},slots:{0:{structure:v,memory:{array:it},slots:{0:{structure:$,memory:{array:ot},slots:{0:{structure:T,memory:{array:ut}}}}}},1:{structure:E,memory:{array:lt},slots:{0:{structure:L,memory:{array:mt},slots:{0:{structure:B,memory:{array:ct}}}}}},2:{structure:c,memory:{array:yt},slots:{0:{structure:m,memory:{array:bt}}}},3:{structure:x,memory:{array:pt},slots:{0:{structure:H,memory:{array:ft},slots:{0:{structure:G,memory:{array:St}}}}}},4:{structure:K,memory:{array:dt},slots:{0:{structure:J,memory:{array:ht}}}},5:{structure:D,memory:{array:gt},slots:{0:{structure:N,memory:{array:zt}}}},6:{structure:F,memory:{array:Ot},slots:{0:{structure:Q,memory:{array:wt}}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:24});Object.assign(W,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(X,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:W}],methods:[],template:null},slot:22});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:25});const Rt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Y,{...t,type:9,name:"mercator.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:Rt}}},slot:26});Object.assign(q,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:27});Object.assign(Z,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:41});const qt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),At=new Uint8Array,Ut=new Uint8Array([232,34,16,0]),jt=new Uint8Array([4,0,0,0]);Object.assign(M,{...t,type:2,name:"mercator.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:X},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Y},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:q}],methods:[],template:{memory:{array:qt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:Z},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:At},slots:{0:{structure:c,memory:{array:Ut},slots:{0:{structure:m,memory:{array:jt}}}}}}},slot:21});const Pt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),kt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),fe=new Uint8Array([0,0,0,0,0,0,0,0]),It=new Uint8Array;Object.assign(U,{...t,type:2,name:"mercator.KernelInput(u8,mercator.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:M}],methods:[],template:{memory:{array:Pt},slots:{0:{structure:M,memory:{array:kt},slots:{0:{structure:X,memory:{array:fe},address:1047568,slots:{0:{structure:W,memory:{array:It},address:0}}}}}}}},slot:20});Object.assign(ee,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(te,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ee}],methods:[],template:null},slot:30});const Vt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ct=new Uint8Array,vt=new Uint8Array([232,34,16,0]),Et=new Uint8Array([4,0,0,0]);Object.assign(_,{...t,type:2,name:"mercator.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:te},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Y},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:q}],methods:[],template:{memory:{array:Vt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:Z},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:Ct},slots:{0:{structure:c,memory:{array:vt},slots:{0:{structure:m,memory:{array:Et}}}}}}},slot:29});const xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Kt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Dt=new Uint8Array;Object.assign(j,{...t,type:2,name:"mercator.KernelOutput(u8,mercator.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:_}],methods:[],template:{memory:{array:xt},slots:{0:{structure:_,memory:{array:Kt},slots:{0:{structure:te,memory:{array:fe},address:1047568,slots:{0:{structure:ee,memory:{array:Dt},address:0}}}}}}}},slot:28});const Ft=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(P,{...t,type:2,name:"mercator.KernelParameters(mercator.kernel)",length:1,byteSize:8,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"center",structure:S},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"width",structure:S}],methods:[],template:{memory:{array:Ft}}},slot:31});Object.assign(ne,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(mercator.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:42});Object.assign(ie,{...t,type:7,name:"ErrorSet0000!mercator.KernelOutput(u8,mercator.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ne}],methods:[],template:null},slot:35});Object.assign(oe,{...t,type:3,name:"createOutput",length:1,byteSize:68,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:U},{...e,type:6,bitOffset:256,bitSize:64,byteSize:8,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:320,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ie}],methods:[],template:null},slot:33});Object.assign(ue,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(mercator.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:43});Object.assign(le,{...t,type:7,name:"ErrorSet0001!mercator.KernelOutput(u8,mercator.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ue}],methods:[],template:null},slot:36});Object.assign(me,{...t,type:3,name:"createPartialOutput",length:1,byteSize:76,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:U},{...e,type:6,bitOffset:320,bitSize:64,byteSize:8,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:6,name:"retval",structure:le}],methods:[],template:null},slot:34});const Mt=new Uint8Array,_t={argStruct:oe,thunk:4,name:"createOutput"},Tt={argStruct:me,thunk:9,name:"createPartialOutput"};Object.assign(ce,{...t,type:2,name:"mercator",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Mt}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ae},{...e,type:7,isRequired:!1,name:"Input",structure:U},{...e,type:7,isRequired:!1,name:"Output",structure:j},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[_t,Tt],template:null},slot:0});const $t=[f,T,$,v,B,L,E,m,c,G,H,x,S,p,b,R,g,J,K,A,z,N,D,Q,F,ae,O,W,X,u,Y,q,Z,M,U,ee,te,_,j,P,ne,ie,oe,ue,le,me,ce],Bt=xe($t),Lt=ce.constructor,Gt=(async()=>{const n=new URL("mercator-75e99a21.wasm",import.meta.url).href;return fetch(n)})();Ke(Gt,{...Bt,writeBack:!0});const{createOutput:Zt,createPartialOutput:Ht,kernel:re,Input:Jt,Output:es,Parameters:ts}=Lt;function Nt(n,o,r,s,a={},d={}){if(Array.isArray(a)){const y=a;a={};for(const[l,h]of Object.keys(re.inputImages).entries())a[h]=y[l]}const k=new Jt(void 0),I=Object.keys(re.inputImages),i=[];let w;for(const y of I){let l=a[y];if(l||(I.length===1&&["data","width","height"].every(h=>!!a[h])?l=a:i.push(y)),k[y]=l,w){if(l.colorSpace!==w)throw new Error(`Input images must all use the same color space: ${w}`)}else w=l.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const se=Ht(n,o,r,s,k,d),ye=y=>{const l=Object.keys(y),h={};for(const be of l){const{data:{typedArray:V},width:pe,height:de}=y[be];let C;if(typeof ImageData=="function"){const he=new Uint8ClampedArray(V.buffer,V.byteOffset,V.byteLength);C=new ImageData(he,pe,s,{colorSpace:w})}else C={data:V,width:pe,height:de};if(l.length===1)return C;h[be]=C}return h};return se[Symbol.toStringTag]==="Promise"?se.then(ye):ye(se)}function Qt(){const n={};for(let[o,r]of Object.entries(re)){if(o==="parameters"){const s={};for(const[a,d]of Object.entries(r)){const k=s[a]={};for(let[I,i]of Object.entries(d))typeof i=="object"?"string"in i?i=i.string:i=Se(i):typeof i=="function"&&(i=Wt(i.name)),k[I]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[o]=r}return n}function Se(n){const o=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=Se(s)),o[r]=s;return o}function Wt(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,r,...s]=n.data;Xt(o,s).then(([a,d])=>{postMessage([o,r,a],{transfer:d})}).catch(a=>{postMessage(["error",r,a])})};async function Xt(n,o){switch(n){case"getKernelInfo":return[Qt(...o)];case"createPartialImageData":const s=await Nt(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const d of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
