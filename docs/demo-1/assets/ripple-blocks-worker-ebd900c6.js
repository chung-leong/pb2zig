import{u as Ke,a as De,b as Fe,d as Me,c as _e,e as Te,f as $e,g as Be,h as Le,i as Ge,j as He,k as Je,l as Ne,m as Qe,o as We,n as Xe,p as Ye,q as Ze}from"./index-d64bc850.js";Ke();De();Fe();Me();_e();Te();$e();Be();Le();Ge();He();Je();Ne();Qe();We();Xe();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},d={},X={},Y={},K={},Z={},ee={},D={},c={},b={},te={},se={},F={},R={},S={},i={},s={},z={},f={},j={},O={},re={},M={},ae={},_={},ne={},T={},ie={},$={},ue={},B={},oe={},L={},le={},G={},me={},H={},P={},w={},ye={},J={},ce={},N={},Oe={},A={},be={},pe={},m={},fe={},q={},Se={},Q={},k={},de={},he={},W={},V={},C={},we={},Ae={},Ue={},Re={},qe={},je={},Pe={};Object.assign(d,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:5});Object.assign(X,{...t,type:1,name:"[10:0]u8",length:10,byteSize:11,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:4});Object.assign(Y,{...t,type:11,name:"*const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:3});Object.assign(K,{...t,type:11,name:"*const *const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:2});Object.assign(Z,{...t,type:1,name:"[0:0]u8",length:0,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:8});Object.assign(ee,{...t,type:11,name:"*const [0:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:7});Object.assign(D,{...t,type:11,name:"*const *const [0:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:6});Object.assign(c,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:10});Object.assign(b,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:9});Object.assign(te,{...t,type:1,name:"[24:0]u8",length:24,byteSize:25,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:13});Object.assign(se,{...t,type:11,name:"*const [24:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:12});Object.assign(F,{...t,type:11,name:"*const *const [24:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:11});Object.assign(R,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:46});Object.assign(S,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:32});Object.assign(i,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:i}],methods:[],template:null},slot:62});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:i}],methods:[],template:null},slot:61});const et=new Uint8Array,tt=new Uint8Array([0,249,15,0]),st=new Uint8Array([0,0,0,0,0,0,0,0]),rt=new Uint8Array([40,249,15,0]),at=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(z,{...t,type:2,name:"Struct0020",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:et},slots:{0:{structure:s,memory:{array:tt},slots:{0:{structure:i,memory:{array:st}}}},1:{structure:s,memory:{array:rt},slots:{0:{structure:i,memory:{array:at}}}}}}},slot:50});Object.assign(f,{...t,type:11,name:"Struct0014",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:z}],methods:[],template:null},slot:49});const nt=new Uint8Array,it=new Uint8Array([0,249,15,0]),ut=new Uint8Array([0,0,0,0,0,0,89,64]),ot=new Uint8Array([40,249,15,0]),lt=new Uint8Array([0,0,0,0,0,0,89,64]);Object.assign(j,{...t,type:2,name:"Struct0021",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:nt},slots:{0:{structure:s,memory:{array:it},slots:{0:{structure:i,memory:{array:ut}}}},1:{structure:s,memory:{array:ot},slots:{0:{structure:i,memory:{array:lt}}}}}}},slot:52});Object.assign(O,{...t,type:11,name:"Struct0015",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:j}],methods:[],template:null},slot:51});const mt=new Uint8Array,yt=new Uint8Array([16,252,15,0]),ct=new Uint8Array([0,0,0,0,0,0,52,64]),bt=new Uint8Array([56,252,15,0]),pt=new Uint8Array([0,0,0,0,0,0,52,64]);Object.assign(re,{...t,type:2,name:"Struct0022",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:mt},slots:{0:{structure:s,memory:{array:yt},slots:{0:{structure:i,memory:{array:ct}}}},1:{structure:s,memory:{array:bt},slots:{0:{structure:i,memory:{array:pt}}}}}}},slot:54});Object.assign(M,{...t,type:11,name:"Struct0016",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:53});const ft=new Uint8Array,St=new Uint8Array([170,170,170,170]),dt=new Uint8Array,ht=new Uint8Array([170,170,170,170]),gt=new Uint8Array,zt=new Uint8Array([170,170,170,170]),Ot=new Uint8Array;Object.assign(ae,{...t,type:2,name:"Struct0010",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:f},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:O},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:M}],methods:[],template:{memory:{array:ft},slots:{0:{structure:f,memory:{array:St},slots:{0:{structure:z,memory:{array:dt}}}},1:{structure:O,memory:{array:ht},slots:{0:{structure:j,memory:{array:gt}}}},2:{structure:M,memory:{array:zt},slots:{0:{structure:re,memory:{array:Ot}}}}}}},slot:38});Object.assign(_,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:37});const wt=new Uint8Array,At=new Uint8Array([16,252,15,0]),Ut=new Uint8Array([0,0,0,0,0,0,240,63]),Rt=new Uint8Array([56,252,15,0]),qt=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(ne,{...t,type:2,name:"Struct0023",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:wt},slots:{0:{structure:s,memory:{array:At},slots:{0:{structure:i,memory:{array:Ut}}}},1:{structure:s,memory:{array:Rt},slots:{0:{structure:i,memory:{array:qt}}}}}}},slot:56});Object.assign(T,{...t,type:11,name:"Struct0017",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:55});const jt=new Uint8Array,Pt=new Uint8Array([16,252,15,0]),kt=new Uint8Array([0,0,0,0,0,0,36,64]),Vt=new Uint8Array([56,252,15,0]),Ct=new Uint8Array([0,0,0,0,0,0,36,64]);Object.assign(ie,{...t,type:2,name:"Struct0024",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:jt},slots:{0:{structure:s,memory:{array:Pt},slots:{0:{structure:i,memory:{array:kt}}}},1:{structure:s,memory:{array:Vt},slots:{0:{structure:i,memory:{array:Ct}}}}}}},slot:58});Object.assign($,{...t,type:11,name:"Struct0018",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:57});const It=new Uint8Array,vt=new Uint8Array([170,170,170,170]),xt=new Uint8Array,Et=new Uint8Array([170,170,170,170]),Kt=new Uint8Array,Dt=new Uint8Array([170,170,170,170]),Ft=new Uint8Array;Object.assign(ue,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:T},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:O},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:$}],methods:[],template:{memory:{array:It},slots:{0:{structure:T,memory:{array:vt},slots:{0:{structure:ne,memory:{array:xt}}}},1:{structure:O,memory:{array:Et},slots:{0:{structure:j,memory:{array:Kt}}}},2:{structure:$,memory:{array:Dt},slots:{0:{structure:ie,memory:{array:Ft}}}}}}},slot:40});Object.assign(B,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:39});const Mt=new Uint8Array,_t=new Uint8Array([16,252,15,0]),Tt=new Uint8Array([111,18,131,192,202,33,25,64]),$t=new Uint8Array([56,252,15,0]),Bt=new Uint8Array([111,18,131,192,202,33,25,64]);Object.assign(oe,{...t,type:2,name:"Struct0025",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Mt},slots:{0:{structure:s,memory:{array:_t},slots:{0:{structure:i,memory:{array:Tt}}}},1:{structure:s,memory:{array:$t},slots:{0:{structure:i,memory:{array:Bt}}}}}}},slot:60});Object.assign(L,{...t,type:11,name:"Struct0019",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:59});const Lt=new Uint8Array,Gt=new Uint8Array([170,170,170,170]),Ht=new Uint8Array,Jt=new Uint8Array([170,170,170,170]),Nt=new Uint8Array,Qt=new Uint8Array([170,170,170,170]),Wt=new Uint8Array;Object.assign(le,{...t,type:2,name:"Struct0012",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:f},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:L},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:f}],methods:[],template:{memory:{array:Lt},slots:{0:{structure:f,memory:{array:Gt},slots:{0:{structure:z,memory:{array:Ht}}}},1:{structure:L,memory:{array:Jt},slots:{0:{structure:oe,memory:{array:Nt}}}},2:{structure:f,memory:{array:Qt},slots:{0:{structure:z,memory:{array:Wt}}}}}}},slot:42});Object.assign(G,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:41});const Xt=new Uint8Array,Yt=new Uint8Array([170,170,170,170]),Zt=new Uint8Array,es=new Uint8Array([170,170,170,170]),ts=new Uint8Array,ss=new Uint8Array([170,170,170,170]),rs=new Uint8Array;Object.assign(me,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"amplitude",structure:_},{...e,type:8,isRequired:!1,slot:1,name:"wavelength",structure:B},{...e,type:8,isRequired:!1,slot:2,name:"phase",structure:G}],methods:[],template:{memory:{array:Xt},slots:{0:{structure:_,memory:{array:Yt},slots:{0:{structure:ae,memory:{array:Zt}}}},1:{structure:B,memory:{array:es},slots:{0:{structure:ue,memory:{array:ts}}}},2:{structure:G,memory:{array:ss},slots:{0:{structure:le,memory:{array:rs}}}}}}},slot:15});Object.assign(H,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:14});const as=new Uint8Array,ns=new Uint8Array([48,252,15,0]),is=new Uint8Array([4,0,0,0]);Object.assign(P,{...t,type:2,name:"Struct0013",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:as},slots:{0:{structure:b,memory:{array:ns},slots:{0:{structure:c,memory:{array:is}}}}}}},slot:44});Object.assign(w,{...t,type:11,name:"Struct0009",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:P}],methods:[],template:null},slot:43});const us=new Uint8Array,os=new Uint8Array([170,170,170,170]),ls=new Uint8Array;Object.assign(ye,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:w}],methods:[],template:{memory:{array:us},slots:{0:{structure:w,memory:{array:os},slots:{0:{structure:P,memory:{array:ls}}}}}}},slot:17});Object.assign(J,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:16});const ms=new Uint8Array,ys=new Uint8Array([170,170,170,170]),cs=new Uint8Array;Object.assign(ce,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:w}],methods:[],template:{memory:{array:ms},slots:{0:{structure:w,memory:{array:ys},slots:{0:{structure:P,memory:{array:cs}}}}}}},slot:19});Object.assign(N,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:18});const bs=new Uint8Array,ps=new Uint8Array,fs=new Uint8Array([220,36,16,0]),Ss=new Uint8Array([142,36,16,0]),ds=new Uint8Array([65,108,108,101,110,32,67,104,111,117,0]),hs=new Uint8Array([216,36,16,0]),gs=new Uint8Array([130,36,16,0]),zs=new Uint8Array([0]),Os=new Uint8Array([212,36,16,0]),ws=new Uint8Array([1,0,0,0]),As=new Uint8Array([208,36,16,0]),Us=new Uint8Array([88,36,16,0]),Rs=new Uint8Array([98,111,120,45,115,104,97,112,101,100,32,114,105,112,112,108,101,32,101,102,102,101,99,116,0]),qs=new Uint8Array([170,170,170,170]),js=new Uint8Array,Ps=new Uint8Array([170,170,170,170]),ks=new Uint8Array,Vs=new Uint8Array([170,170,170,170]),Cs=new Uint8Array;Object.assign(Oe,{...t,type:2,name:"ripple-blocks.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:bs}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:K},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:D},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:b},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:F},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:H},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:J},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:N}],methods:[],template:{memory:{array:ps},slots:{0:{structure:K,memory:{array:fs},slots:{0:{structure:Y,memory:{array:Ss},slots:{0:{structure:X,memory:{array:ds}}}}}},1:{structure:D,memory:{array:hs},slots:{0:{structure:ee,memory:{array:gs},slots:{0:{structure:Z,memory:{array:zs}}}}}},2:{structure:b,memory:{array:Os},slots:{0:{structure:c,memory:{array:ws}}}},3:{structure:F,memory:{array:As},slots:{0:{structure:se,memory:{array:Us},slots:{0:{structure:te,memory:{array:Rs}}}}}},4:{structure:H,memory:{array:qs},slots:{0:{structure:me,memory:{array:js}}}},5:{structure:J,memory:{array:Ps},slots:{0:{structure:ye,memory:{array:ks}}}},6:{structure:N,memory:{array:Vs},slots:{0:{structure:ce,memory:{array:Cs}}}}}}},slot:1});Object.assign(A,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:24});Object.assign(be,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:23});Object.assign(pe,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:be}],methods:[],template:null},slot:22});Object.assign(m,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:25});const Is=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(fe,{...t,type:9,name:"ripple-blocks.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:c},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:c}],methods:[],template:{memory:{array:Is}}},slot:26});Object.assign(q,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:27});Object.assign(Se,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:45});const vs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),xs=new Uint8Array,Es=new Uint8Array([32,36,16,0]),Ks=new Uint8Array([4,0,0,0]);Object.assign(Q,{...t,type:2,name:"ripple-blocks.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:pe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:fe},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:q}],methods:[],template:{memory:{array:vs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:A},{...e,type:7,isRequired:!1,name:"FPixel",structure:Se},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:xs},slots:{0:{structure:b,memory:{array:Es},slots:{0:{structure:c,memory:{array:Ks}}}}}}},slot:21});const Ds=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Fs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ie=new Uint8Array([0,0,0,0,0,0,0,0]),Ms=new Uint8Array;Object.assign(k,{...t,type:2,name:"ripple-blocks.KernelInput(u8,ripple-blocks.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:Q}],methods:[],template:{memory:{array:Ds},slots:{0:{structure:Q,memory:{array:Fs},slots:{0:{structure:pe,memory:{array:Ie},address:1047200,slots:{0:{structure:be,memory:{array:Ms},address:0}}}}}}}},slot:20});Object.assign(de,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:23});Object.assign(he,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:de}],methods:[],template:null},slot:30});const _s=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ts=new Uint8Array,$s=new Uint8Array([32,36,16,0]),Bs=new Uint8Array([4,0,0,0]);Object.assign(W,{...t,type:2,name:"ripple-blocks.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:he},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:fe},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:q}],methods:[],template:{memory:{array:_s}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:A},{...e,type:7,isRequired:!1,name:"FPixel",structure:Se},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:Ts},slots:{0:{structure:b,memory:{array:$s},slots:{0:{structure:c,memory:{array:Bs}}}}}}},slot:29});const Ls=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Gs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Hs=new Uint8Array;Object.assign(V,{...t,type:2,name:"ripple-blocks.KernelOutput(u8,ripple-blocks.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:W}],methods:[],template:{memory:{array:Ls},slots:{0:{structure:W,memory:{array:Gs},slots:{0:{structure:he,memory:{array:Ie},address:1047200,slots:{0:{structure:de,memory:{array:Hs},address:0}}}}}}}},slot:28});const Js=new Uint8Array([0,0,160,65,0,0,160,65,0,0,32,65,0,0,32,65,0,0,0,0,0,0,0,0]);Object.assign(C,{...t,type:2,name:"ripple-blocks.KernelParameters(ripple-blocks.kernel)",length:1,byteSize:24,align:3,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"amplitude",structure:S},{...e,type:6,isRequired:!1,bitOffset:64,bitSize:64,byteSize:8,slot:1,name:"wavelength",structure:S},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:64,byteSize:8,slot:2,name:"phase",structure:S}],methods:[],template:{memory:{array:Js}}},slot:31});Object.assign(we,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(ripple-blocks.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:47});Object.assign(Ae,{...t,type:7,name:"ErrorSet0000!ripple-blocks.KernelOutput(u8,ripple-blocks.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:V},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:we}],methods:[],template:null},slot:35});Object.assign(Ue,{...t,type:3,name:"createOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:2,name:"2",structure:k},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:3,name:"3",structure:C},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Ae}],methods:[],template:null},slot:33});Object.assign(Re,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(ripple-blocks.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(qe,{...t,type:7,name:"ErrorSet0001!ripple-blocks.KernelOutput(u8,ripple-blocks.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:V},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Re}],methods:[],template:null},slot:36});Object.assign(je,{...t,type:3,name:"createPartialOutput",length:1,byteSize:96,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:2,name:"2",structure:m},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:3,name:"3",structure:m},{...e,type:6,bitOffset:320,bitSize:192,byteSize:24,slot:4,name:"4",structure:k},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:5,name:"5",structure:C},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:6,name:"retval",structure:qe}],methods:[],template:null},slot:34});const Ns=new Uint8Array,Qs={argStruct:Ue,thunk:6,name:"createOutput"},Ws={argStruct:je,thunk:1,name:"createPartialOutput"};Object.assign(Pe,{...t,type:2,name:"ripple-blocks",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ns}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:Oe},{...e,type:7,isRequired:!1,name:"Input",structure:k},{...e,type:7,isRequired:!1,name:"Output",structure:V},{...e,type:7,isRequired:!1,name:"Parameters",structure:C}],methods:[Qs,Ws],template:null},slot:0});const Xs=[d,X,Y,K,Z,ee,D,c,b,te,se,F,R,S,i,s,z,f,j,O,re,M,ae,_,ne,T,ie,$,ue,B,oe,L,le,G,me,H,P,w,ye,J,ce,N,Oe,A,be,pe,m,fe,q,Se,Q,k,de,he,W,V,C,we,Ae,Ue,Re,qe,je,Pe],Ys=Ye(Xs),Zs=Pe.constructor,er=(async()=>{const u=new URL("ripple-blocks-582cd696.wasm",import.meta.url).href;return fetch(u)})();Ze(er,{...Ys,writeBack:!0});const{createOutput:or,createPartialOutput:tr,kernel:ze,Input:sr,Output:lr,Parameters:mr}=Zs;function rr(u,l,a,r,n={},h={}){if(Array.isArray(n)){const p=n;n={};for(const[y,g]of Object.keys(ze.inputImages).entries())n[g]=p[y]}const I=new sr(void 0),v=Object.keys(ze.inputImages),o=[];let U;for(const p of v){let y=n[p];if(y||(v.length===1&&["data","width","height"].every(g=>!!n[g])?y=n:o.push(p)),I[p]=y,U){if(y.colorSpace!==U)throw new Error(`Input images must all use the same color space: ${U}`)}else U=y.colorSpace}if(o.length>0)throw new Error(`Missing input image${o.length>1?"s":""}: ${o.join(", ")}`);const ge=tr(u,l,a,r,I,h),ke=p=>{const y=Object.keys(p),g={};for(const Ve of y){const{data:{typedArray:x},width:Ce,height:xe}=p[Ve];let E;if(typeof ImageData=="function"){const Ee=new Uint8ClampedArray(x.buffer,x.byteOffset,x.byteLength);E=new ImageData(Ee,Ce,r,{colorSpace:U})}else E={data:x,width:Ce,height:xe};if(y.length===1)return E;g[Ve]=E}return g};return ge[Symbol.toStringTag]==="Promise"?ge.then(ke):ke(ge)}function ar(){const u={};for(let[l,a]of Object.entries(ze)){if(l==="parameters"){const r={};for(const[n,h]of Object.entries(a)){const I=r[n]={};for(let[v,o]of Object.entries(h))typeof o=="object"?"string"in o?o=o.string:o=ve(o):typeof o=="function"&&(o=nr(o.name)),I[v]=o}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());u[l]=a}return u}function ve(u){const l=[];for(let[a,r]of Object.entries(u))typeof r=="object"&&(r=ve(r)),l[a]=r;return l}function nr(u){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[u]}onmessage=u=>{const[l,a,...r]=u.data;ir(l,r).then(([n,h])=>{postMessage([l,a,n],{transfer:h})}).catch(n=>{postMessage(["error",a,n])})};async function ir(u,l){switch(u){case"getKernelInfo":return[ar(...l)];case"createPartialImageData":const r=await rr(...l),n=[];if("data"in r&&"width"in r&&"height"in r)n.push(r.data.buffer);else for(const h of Object.entries(r))n.push(r.data.buffer);return[r,n];default:throw new Error(`Unknown function: ${u}`)}}
