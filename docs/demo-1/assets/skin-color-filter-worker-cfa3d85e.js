import{u as qe,a as Ue,b as je,c as Pe,d as ke,e as Ve,f as Ce,g as Ie,h as xe,i as Me,j as ve,k as Ee,l as Ke,m as De,o as Fe,n as _e,p as Te,q as $e}from"./index-d64bc850.js";qe();Ue();je();Pe();ke();Ve();Ce();Ie();xe();Me();ve();Ee();Ke();De();Fe();_e();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},S={},B={},L={},C={},G={},H={},I={},b={},p={},J={},N={},x={},y={},i={},s={},Q={},M={},W={},v={},X={},E={},Y={},K={},Z={},D={},A={},g={},ee={},F={},te={},_={},me={},z={},se={},re={},m={},ae={},w={},ne={},T={},R={},ie={},ue={},$={},q={},U={},ye={},ce={},be={},pe={},fe={},Se={},de={};Object.assign(S,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:5});Object.assign(B,{...t,type:1,name:"[19:0]u8",length:19,byteSize:20,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:4});Object.assign(L,{...t,type:11,name:"*const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:3});Object.assign(C,{...t,type:11,name:"*const *const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:2});Object.assign(G,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:8});Object.assign(H,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:7});Object.assign(I,{...t,type:11,name:"*const *const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:6});Object.assign(b,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:10});Object.assign(p,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:b}],methods:[],template:null},slot:9});Object.assign(J,{...t,type:1,name:"[17:0]u8",length:17,byteSize:18,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:13});Object.assign(N,{...t,type:11,name:"*const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:12});Object.assign(x,{...t,type:11,name:"*const *const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:11});Object.assign(y,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:32});Object.assign(i,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:i}],methods:[],template:null},slot:51});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:i}],methods:[],template:null},slot:50});const Be=new Uint8Array,Le=new Uint8Array([24,253,15,0]),Ge=new Uint8Array([0,0,0,0,0,0,0,0]),He=new Uint8Array([64,253,15,0]),Je=new Uint8Array([0,0,0,0,0,0,240,63]),Ne=new Uint8Array([104,253,15,0]),Qe=new Uint8Array([90,90,90,90,90,90,218,63]);Object.assign(Q,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Be},slots:{0:{structure:s,memory:{array:Le},slots:{0:{structure:i,memory:{array:Ge}}}},1:{structure:s,memory:{array:He},slots:{0:{structure:i,memory:{array:Je}}}},2:{structure:s,memory:{array:Ne},slots:{0:{structure:i,memory:{array:Qe}}}}}}},slot:38});Object.assign(M,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:37});const We=new Uint8Array,Xe=new Uint8Array([24,253,15,0]),Ye=new Uint8Array([0,0,0,0,0,0,0,0]),Ze=new Uint8Array([64,253,15,0]),et=new Uint8Array([0,0,0,0,0,0,240,63]),tt=new Uint8Array([104,253,15,0]),st=new Uint8Array([241,240,240,240,240,240,224,63]);Object.assign(W,{...t,type:2,name:"Struct0012",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:We},slots:{0:{structure:s,memory:{array:Xe},slots:{0:{structure:i,memory:{array:Ye}}}},1:{structure:s,memory:{array:Ze},slots:{0:{structure:i,memory:{array:et}}}},2:{structure:s,memory:{array:tt},slots:{0:{structure:i,memory:{array:st}}}}}}},slot:40});Object.assign(v,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:39});const rt=new Uint8Array,at=new Uint8Array([24,253,15,0]),nt=new Uint8Array([0,0,0,0,0,0,0,0]),it=new Uint8Array([64,253,15,0]),ut=new Uint8Array([0,0,0,0,0,0,240,63]),ot=new Uint8Array([104,253,15,0]),lt=new Uint8Array([146,145,145,145,145,145,225,63]);Object.assign(X,{...t,type:2,name:"Struct0013",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:rt},slots:{0:{structure:s,memory:{array:at},slots:{0:{structure:i,memory:{array:nt}}}},1:{structure:s,memory:{array:it},slots:{0:{structure:i,memory:{array:ut}}}},2:{structure:s,memory:{array:ot},slots:{0:{structure:i,memory:{array:lt}}}}}}},slot:42});Object.assign(E,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:41});const mt=new Uint8Array,yt=new Uint8Array([24,253,15,0]),ct=new Uint8Array([0,0,0,0,0,0,0,0]),bt=new Uint8Array([64,253,15,0]),pt=new Uint8Array([0,0,0,0,0,0,240,63]),ft=new Uint8Array([104,253,15,0]),St=new Uint8Array([181,180,180,180,180,180,228,63]);Object.assign(Y,{...t,type:2,name:"Struct0014",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:mt},slots:{0:{structure:s,memory:{array:yt},slots:{0:{structure:i,memory:{array:ct}}}},1:{structure:s,memory:{array:bt},slots:{0:{structure:i,memory:{array:pt}}}},2:{structure:s,memory:{array:ft},slots:{0:{structure:i,memory:{array:St}}}}}}},slot:44});Object.assign(K,{...t,type:11,name:"Struct0009",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:43});const dt=new Uint8Array,ht=new Uint8Array([170,170,170,170]),gt=new Uint8Array,zt=new Uint8Array([170,170,170,170]),Ot=new Uint8Array,wt=new Uint8Array([170,170,170,170]),At=new Uint8Array,Rt=new Uint8Array([170,170,170,170]),qt=new Uint8Array;Object.assign(Z,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"CbMin",structure:M},{...e,type:8,isRequired:!1,slot:1,name:"CbMax",structure:v},{...e,type:8,isRequired:!1,slot:2,name:"CrMin",structure:E},{...e,type:8,isRequired:!1,slot:3,name:"CrMax",structure:K}],methods:[],template:{memory:{array:dt},slots:{0:{structure:M,memory:{array:ht},slots:{0:{structure:Q,memory:{array:gt}}}},1:{structure:v,memory:{array:zt},slots:{0:{structure:W,memory:{array:Ot}}}},2:{structure:E,memory:{array:wt},slots:{0:{structure:X,memory:{array:At}}}},3:{structure:K,memory:{array:Rt},slots:{0:{structure:Y,memory:{array:qt}}}}}}},slot:15});Object.assign(D,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:14});const Ut=new Uint8Array,jt=new Uint8Array([16,249,15,0]),Pt=new Uint8Array([4,0,0,0]);Object.assign(A,{...t,type:2,name:"Struct0015",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:Ut},slots:{0:{structure:p,memory:{array:jt},slots:{0:{structure:b,memory:{array:Pt}}}}}}},slot:46});Object.assign(g,{...t,type:11,name:"Struct0010",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:45});const kt=new Uint8Array,Vt=new Uint8Array([170,170,170,170]),Ct=new Uint8Array;Object.assign(ee,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:g}],methods:[],template:{memory:{array:kt},slots:{0:{structure:g,memory:{array:Vt},slots:{0:{structure:A,memory:{array:Ct}}}}}}},slot:17});Object.assign(F,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:16});const It=new Uint8Array,xt=new Uint8Array([170,170,170,170]),Mt=new Uint8Array;Object.assign(te,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:g}],methods:[],template:{memory:{array:It},slots:{0:{structure:g,memory:{array:xt},slots:{0:{structure:A,memory:{array:Mt}}}}}}},slot:19});Object.assign(_,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:18});const vt=new Uint8Array,Et=new Uint8Array,Kt=new Uint8Array([252,8,16,0]),Dt=new Uint8Array([160,8,16,0]),Ft=new Uint8Array([109,101,46,99,111,115,109,111,100,114,111,46,102,105,108,116,101,114,115,0]),_t=new Uint8Array([248,8,16,0]),Tt=new Uint8Array([135,8,16,0]),$t=new Uint8Array([83,116,101,118,101,32,83,104,105,112,109,97,110,0]),Bt=new Uint8Array([244,8,16,0]),Lt=new Uint8Array([1,0,0,0]),Gt=new Uint8Array([240,8,16,0]),Ht=new Uint8Array([100,8,16,0]),Jt=new Uint8Array([83,107,105,110,32,67,111,108,111,114,32,102,105,108,116,101,114,0]),Nt=new Uint8Array([170,170,170,170]),Qt=new Uint8Array,Wt=new Uint8Array([170,170,170,170]),Xt=new Uint8Array,Yt=new Uint8Array([170,170,170,170]),Zt=new Uint8Array;Object.assign(me,{...t,type:2,name:"skin-color-filter.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:vt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:C},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:I},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:p},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:x},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:D},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:F},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:_}],methods:[],template:{memory:{array:Et},slots:{0:{structure:C,memory:{array:Kt},slots:{0:{structure:L,memory:{array:Dt},slots:{0:{structure:B,memory:{array:Ft}}}}}},1:{structure:I,memory:{array:_t},slots:{0:{structure:H,memory:{array:Tt},slots:{0:{structure:G,memory:{array:$t}}}}}},2:{structure:p,memory:{array:Bt},slots:{0:{structure:b,memory:{array:Lt}}}},3:{structure:x,memory:{array:Gt},slots:{0:{structure:N,memory:{array:Ht},slots:{0:{structure:J,memory:{array:Jt}}}}}},4:{structure:D,memory:{array:Nt},slots:{0:{structure:Z,memory:{array:Qt}}}},5:{structure:F,memory:{array:Wt},slots:{0:{structure:ee,memory:{array:Xt}}}},6:{structure:_,memory:{array:Yt},slots:{0:{structure:te,memory:{array:Zt}}}}}}},slot:1});Object.assign(z,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:24});Object.assign(se,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:23});Object.assign(re,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:se}],methods:[],template:null},slot:22});Object.assign(m,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:25});const es=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ae,{...t,type:9,name:"skin-color-filter.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:b},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:b}],methods:[],template:{memory:{array:es}}},slot:26});Object.assign(w,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:27});Object.assign(ne,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:47});const ts=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ss=new Uint8Array,rs=new Uint8Array([44,8,16,0]),as=new Uint8Array([4,0,0,0]);Object.assign(T,{...t,type:2,name:"skin-color-filter.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:re},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ae},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:w}],methods:[],template:{memory:{array:ts}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:z},{...e,type:7,isRequired:!1,name:"FPixel",structure:ne},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:ss},slots:{0:{structure:p,memory:{array:rs},slots:{0:{structure:b,memory:{array:as}}}}}}},slot:21});const ns=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),is=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Oe=new Uint8Array([0,0,0,0,0,0,0,0]),us=new Uint8Array;Object.assign(R,{...t,type:2,name:"skin-color-filter.KernelInput(u8,skin-color-filter.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:T}],methods:[],template:{memory:{array:ns},slots:{0:{structure:T,memory:{array:is},slots:{0:{structure:re,memory:{array:Oe},address:1047568,slots:{0:{structure:se,memory:{array:us},address:0}}}}}}}},slot:20});Object.assign(ie,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:23});Object.assign(ue,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ie}],methods:[],template:null},slot:30});const os=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ls=new Uint8Array,ms=new Uint8Array([44,8,16,0]),ys=new Uint8Array([4,0,0,0]);Object.assign($,{...t,type:2,name:"skin-color-filter.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ue},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ae},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:w}],methods:[],template:{memory:{array:os}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:z},{...e,type:7,isRequired:!1,name:"FPixel",structure:ne},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:ls},slots:{0:{structure:p,memory:{array:ms},slots:{0:{structure:b,memory:{array:ys}}}}}}},slot:29});const cs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),bs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ps=new Uint8Array;Object.assign(q,{...t,type:2,name:"skin-color-filter.KernelOutput(u8,skin-color-filter.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:$}],methods:[],template:{memory:{array:cs},slots:{0:{structure:$,memory:{array:bs},slots:{0:{structure:ue,memory:{array:Oe},address:1047568,slots:{0:{structure:ie,memory:{array:ps},address:0}}}}}}}},slot:28});const fs=new Uint8Array([211,210,210,62,136,135,7,63,141,140,12,63,166,165,37,63]);Object.assign(U,{...t,type:2,name:"skin-color-filter.KernelParameters(skin-color-filter.kernel)",length:1,byteSize:16,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"CbMin",structure:y},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"CbMax",structure:y},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"CrMin",structure:y},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"CrMax",structure:y}],methods:[],template:{memory:{array:fs}}},slot:31});Object.assign(ye,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(skin-color-filter.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(ce,{...t,type:7,name:"ErrorSet0000!skin-color-filter.KernelOutput(u8,skin-color-filter.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:q},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ye}],methods:[],template:null},slot:35});Object.assign(be,{...t,type:3,name:"createOutput",length:1,byteSize:76,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:R},{...e,type:6,bitOffset:256,bitSize:128,byteSize:16,slot:3,name:"3",structure:U},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ce}],methods:[],template:null},slot:33});Object.assign(pe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(skin-color-filter.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:49});Object.assign(fe,{...t,type:7,name:"ErrorSet0001!skin-color-filter.KernelOutput(u8,skin-color-filter.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:q},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:pe}],methods:[],template:null},slot:36});Object.assign(Se,{...t,type:3,name:"createPartialOutput",length:1,byteSize:84,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:m},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:R},{...e,type:6,bitOffset:320,bitSize:128,byteSize:16,slot:5,name:"5",structure:U},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:fe}],methods:[],template:null},slot:34});const Ss=new Uint8Array,ds={argStruct:be,thunk:8,name:"createOutput"},hs={argStruct:Se,thunk:2,name:"createPartialOutput"};Object.assign(de,{...t,type:2,name:"skin-color-filter",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ss}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:me},{...e,type:7,isRequired:!1,name:"Input",structure:R},{...e,type:7,isRequired:!1,name:"Output",structure:q},{...e,type:7,isRequired:!1,name:"Parameters",structure:U}],methods:[ds,hs],template:null},slot:0});const gs=[S,B,L,C,G,H,I,b,p,J,N,x,y,i,s,Q,M,W,v,X,E,Y,K,Z,D,A,g,ee,F,te,_,me,z,se,re,m,ae,w,ne,T,R,ie,ue,$,q,U,ye,ce,be,pe,fe,Se,de],zs=Te(gs),Os=de.constructor,ws=(async()=>{const u=new URL("skin-color-filter-82e39da2.wasm",import.meta.url).href;return fetch(u)})();$e(ws,{...zs,writeBack:!0});const{createOutput:Vs,createPartialOutput:As,kernel:le,Input:Rs,Output:Cs,Parameters:Is}=Os;function qs(u,l,a,r,n={},d={}){if(Array.isArray(n)){const f=n;n={};for(const[c,h]of Object.keys(le.inputImages).entries())n[h]=f[c]}const j=new Rs(void 0),P=Object.keys(le.inputImages),o=[];let O;for(const f of P){let c=n[f];if(c||(P.length===1&&["data","width","height"].every(h=>!!n[h])?c=n:o.push(f)),j[f]=c,O){if(c.colorSpace!==O)throw new Error(`Input images must all use the same color space: ${O}`)}else O=c.colorSpace}if(o.length>0)throw new Error(`Missing input image${o.length>1?"s":""}: ${o.join(", ")}`);const oe=As(u,l,a,r,j,d),he=f=>{const c=Object.keys(f),h={};for(const ge of c){const{data:{typedArray:k},width:ze,height:Ae}=f[ge];let V;if(typeof ImageData=="function"){const Re=new Uint8ClampedArray(k.buffer,k.byteOffset,k.byteLength);V=new ImageData(Re,ze,r,{colorSpace:O})}else V={data:k,width:ze,height:Ae};if(c.length===1)return V;h[ge]=V}return h};return oe[Symbol.toStringTag]==="Promise"?oe.then(he):he(oe)}function Us(){const u={};for(let[l,a]of Object.entries(le)){if(l==="parameters"){const r={};for(const[n,d]of Object.entries(a)){const j=r[n]={};for(let[P,o]of Object.entries(d))typeof o=="object"?"string"in o?o=o.string:o=we(o):typeof o=="function"&&(o=js(o.name)),j[P]=o}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());u[l]=a}return u}function we(u){const l=[];for(let[a,r]of Object.entries(u))typeof r=="object"&&(r=we(r)),l[a]=r;return l}function js(u){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[u]}onmessage=u=>{const[l,a,...r]=u.data;Ps(l,r).then(([n,d])=>{postMessage([l,a,n],{transfer:d})}).catch(n=>{postMessage(["error",a,n])})};async function Ps(u,l){switch(u){case"getKernelInfo":return[Us(...l)];case"createPartialImageData":const r=await qs(...l),n=[];if("data"in r&&"width"in r&&"height"in r)n.push(r.data.buffer);else for(const d of Object.entries(r))n.push(r.data.buffer);return[r,n];default:throw new Error(`Unknown function: ${u}`)}}
