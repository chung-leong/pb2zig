import{u as ms,a as ys,b as bs,c as ls,d as ps,e as gs,f as Os,g as fs,h as Ss,i as js,j as zs,k as hs,l as ds,m as ws,n as As,o as Us,p as Vs,q as Ps}from"./index-67c7daa1.js";ms();hs();ds();ys();bs();ws();As();Us();Vs();ls();ps();gs();Os();Ps();fs();Ss();js();const e={constructor:null,typedArray:null,type:0,name:void 0,byteSize:0,align:0,isConst:!1,isTuple:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null}},t={type:0,isRequired:!1},s={},f={},T={},F={},_={},$={},l={},S={},L={},B={},r={},u={},A={},G={},O={},H={},J={},N={},U={},Q={},V={},W={},X={},bt={},q={},Y={},I={},c={},g={},k={},lt={},Z={},v={},tt={},E={},et={},x={},D={},d={},pt={},gt={},w={},Ot={},ft={},St={},Bt={},st={},Gt={},rt={},Ht={},Jt={},jt={},Nt={},zt={},Qt={},Wt={},ht={},Xt={},dt={},wt={},At={},Yt={},Ut={},Vt={},Pt={},Zt={},Rt={},te={},kt={},ee={},se={},nt={},at={},re={},it={},ne={},ot={},ae={},ie={},qt={},It={},vt={},Et={},oe={},ct={},ce={},ue={},xt={},me={},Dt={},ye={},be={},le={},pe={},ge={},Oe={},fe={},Se={},je={},ze={},he={},de={},we={},Ae={},Ue={},Ve={},Pe={},Kt={},Re={},ke={},Ct={},qe={},Mt={},Ie={},ve={},Ee={},xe={},De={},Ke={},Ce={},Tt={},Me={},Te={},Fe={},_e={},$e={},Le={},Be={},Ge={},He={},Je={},Ne={},Qe={},We={},Xe={},Ye={},Ze={},ts={},es={},ss={},rs={},ns={},as={},Rs=new Uint8Array,ks=new Uint8Array([0,0,0,0,0,0,0,0]),qs=new Uint8Array,Is=new Uint8Array([0,0,0,0,0,0,0,0]),vs=new Uint8Array,Es=new Uint8Array([0,0,0,0,0,0,176,64]),xs=new Uint8Array,Ds=new Uint8Array([0,0,0,0,0,0,176,64]),Ks=new Uint8Array,Cs=new Uint8Array,Ms=new Uint8Array,Ts=new Uint8Array,Fs=new Uint8Array,_s=new Uint8Array,$s=new Uint8Array([0,0,0,0,0,0,0,0]),Ls=new Uint8Array,Bs=new Uint8Array([0,0,0,0,0,64,159,64]),Gs=new Uint8Array,Hs=new Uint8Array([0,0,0,0,0,224,101,64]),Js=new Uint8Array,Ns=new Uint8Array,Qs=new Uint8Array([0,0,0,0,0,0,0,0]),Ws=new Uint8Array,Xs=new Uint8Array([0,0,0,0,0,0,0,64]),Ys=new Uint8Array,Zs=new Uint8Array([0,0,0,0,0,0,240,63]),tr=new Uint8Array,er=new Uint8Array,sr=new Uint8Array,rr=new Uint8Array,nr=new Uint8Array,ar=new Uint8Array([4]),ir=new Uint8Array,or=new Uint8Array,cr=new Uint8Array([19,5,0,1]),ur=new Uint8Array([110,97,118,104,97,108,105,0]),mr=new Uint8Array([38,5,0,1]),yr=new Uint8Array([74,111,104,110,32,69,110,103,108,101,114,0]),br=new Uint8Array,lr=new Uint8Array([0]),pr=new Uint8Array([67,5,0,1]),gr=new Uint8Array([83,105,109,112,108,101,32,112,111,105,110,116,32,108,105,103,104,116,45,45,112,108,97,121,105,110,103,32,119,105,116,104,32,80,105,120,101,108,66,101,110,100,101,114,0]),Or=new Uint8Array,fr=new Uint8Array,Sr=new Uint8Array,jr=new Uint8Array([0]),zr=new Uint8Array([1]),is=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),hr=new Uint8Array,dr=new Uint8Array,wr=new Uint8Array,Ar=new Uint8Array,Ur=new Uint8Array([4]),Ft=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),os=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Vr=new Uint8Array,Pr=new Uint8Array,Rr=new Uint8Array,kr=new Uint8Array,qr=new Uint8Array([4]),_t=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ir=new Uint8Array([0,0,0,0,0,0,0,0,0,0,47,67,0,0,128,63,0,0,128,63,0,0,0,0]),vr=new Uint8Array([27,0]),Er=new Uint8Array([27,0]),xr=new Uint8Array,Dr=new Uint8Array,Kr=new Uint8Array,Cr=new Uint8Array;Object.assign(Bt,{slots:{0:st,1:rt}});Object.assign(st,{structure:r,memory:{array:Rs},const:!0,slots:{0:Gt}});Object.assign(Gt,{structure:u,memory:{array:ks},const:!0});Object.assign(rt,{structure:r,memory:{array:qs},const:!0,slots:{0:Ht}});Object.assign(Ht,{structure:u,memory:{array:Is},const:!0});Object.assign(Jt,{slots:{0:jt,1:zt}});Object.assign(jt,{structure:r,memory:{array:vs},const:!0,slots:{0:Nt}});Object.assign(Nt,{structure:u,memory:{array:Es},const:!0});Object.assign(zt,{structure:r,memory:{array:xs},const:!0,slots:{0:Qt}});Object.assign(Qt,{structure:u,memory:{array:Ds},const:!0});Object.assign(Wt,{slots:{0:ht,1:dt,2:wt,3:At}});Object.assign(ht,{structure:s,memory:{array:Ks},const:!0,slots:{0:Xt}});Object.assign(Xt,{structure:H});Object.assign(dt,{structure:A,memory:{array:Cs},const:!0,slots:{0:st,1:rt}});Object.assign(wt,{structure:G,memory:{array:Ms},const:!0,slots:{0:jt,1:zt}});Object.assign(At,{structure:A,memory:{array:Ts},const:!0,slots:{0:st,1:rt}});Object.assign(Yt,{slots:{0:Ut,1:Pt,2:Rt,3:kt}});Object.assign(Ut,{structure:s,memory:{array:Fs},const:!0,slots:{0:Vt}});Object.assign(Vt,{structure:O});Object.assign(Pt,{structure:r,memory:{array:_s},const:!0,slots:{0:Zt}});Object.assign(Zt,{structure:u,memory:{array:$s},const:!0});Object.assign(Rt,{structure:r,memory:{array:Ls},const:!0,slots:{0:te}});Object.assign(te,{structure:u,memory:{array:Bs},const:!0});Object.assign(kt,{structure:r,memory:{array:Gs},const:!0,slots:{0:ee}});Object.assign(ee,{structure:u,memory:{array:Hs},const:!0});Object.assign(se,{slots:{0:nt,1:at,2:it,3:ot}});Object.assign(nt,{structure:s,memory:{array:Js},const:!0,slots:{0:Vt}});Object.assign(at,{structure:r,memory:{array:Ns},const:!0,slots:{0:re}});Object.assign(re,{structure:u,memory:{array:Qs},const:!0});Object.assign(it,{structure:r,memory:{array:Ws},const:!0,slots:{0:ne}});Object.assign(ne,{structure:u,memory:{array:Xs},const:!0});Object.assign(ot,{structure:r,memory:{array:Ys},const:!0,slots:{0:ae}});Object.assign(ae,{structure:u,memory:{array:Zs},const:!0});Object.assign(ie,{slots:{0:qt,1:It,2:vt,3:Et}});Object.assign(qt,{structure:J,memory:{array:tr},const:!0,slots:{0:ht,1:dt,2:wt,3:At}});Object.assign(It,{structure:N,memory:{array:er},const:!0,slots:{0:Ut,1:Pt,2:Rt,3:kt}});Object.assign(vt,{structure:U,memory:{array:sr},const:!0,slots:{0:nt,1:at,2:it,3:ot}});Object.assign(Et,{structure:U,memory:{array:rr},const:!0,slots:{0:nt,1:at,2:it,3:ot}});Object.assign(oe,{slots:{0:ct}});Object.assign(ct,{structure:l,memory:{array:nr},const:!0,slots:{0:ce}});Object.assign(ce,{structure:S,memory:{array:ar},const:!0});Object.assign(ue,{slots:{0:xt}});Object.assign(xt,{structure:V,memory:{array:ir},const:!0,slots:{0:ct}});Object.assign(me,{slots:{0:Dt}});Object.assign(Dt,{structure:V,memory:{array:or},const:!0,slots:{0:ct}});Object.assign(ye,{slots:{0:be,1:pe,2:Oe,3:Se,4:ze,5:he,6:de}});Object.assign(be,{structure:F,memory:{array:cr},const:!0,slots:{0:le}});Object.assign(le,{structure:T,memory:{array:ur},reloc:16778515});Object.assign(pe,{structure:$,memory:{array:mr},const:!0,slots:{0:ge}});Object.assign(ge,{structure:_,memory:{array:yr},reloc:16778534});Object.assign(Oe,{structure:l,memory:{array:br},const:!0,slots:{0:fe}});Object.assign(fe,{structure:S,memory:{array:lr},const:!0});Object.assign(Se,{structure:B,memory:{array:pr},const:!0,slots:{0:je}});Object.assign(je,{structure:L,memory:{array:gr},reloc:16778563});Object.assign(ze,{structure:Q,memory:{array:Or},const:!0,slots:{0:qt,1:It,2:vt,3:Et}});Object.assign(he,{structure:W,memory:{array:fr},const:!0,slots:{0:xt}});Object.assign(de,{structure:X,memory:{array:Sr},const:!0,slots:{0:Dt}});Object.assign(we,{slots:{0:Ae,1:Ue}});Object.assign(Ae,{structure:g,memory:{array:jr},const:!0});Object.assign(Ue,{structure:g,memory:{array:zr},const:!0});Object.assign(Ve,{memory:{array:is},slots:{0:Pe}});Object.assign(Pe,{structure:I,memory:{array:is,offset:0,length:8},slots:{0:Kt}});Object.assign(Kt,{structure:Y,memory:{array:hr},reloc:0});Object.assign(Re,{slots:{0:ke,1:qe,2:Ie}});Object.assign(ke,{structure:s,memory:{array:dr},const:!0,slots:{0:Ct}});Object.assign(Ct,{structure:q});Object.assign(qe,{structure:s,memory:{array:wr},const:!0,slots:{0:Mt}});Object.assign(Mt,{structure:lt});Object.assign(Ie,{structure:l,memory:{array:Ar},const:!0,slots:{0:ve}});Object.assign(ve,{structure:S,memory:{array:Ur},const:!0});Object.assign(Ee,{memory:{array:Ft},slots:{0:xe}});Object.assign(xe,{structure:Z,memory:{array:Ft},slots:{0:De}});Object.assign(De,{structure:I,memory:{array:Ft,offset:0,length:8},slots:{0:Kt}});Object.assign(Ke,{memory:{array:os},slots:{0:Ce}});Object.assign(Ce,{structure:E,memory:{array:os,offset:0,length:8},slots:{0:Tt}});Object.assign(Tt,{structure:tt,memory:{array:Vr},reloc:0});Object.assign(Me,{slots:{0:Te,1:Fe,2:_e}});Object.assign(Te,{structure:s,memory:{array:Pr},const:!0,slots:{0:Ct}});Object.assign(Fe,{structure:s,memory:{array:Rr},const:!0,slots:{0:Mt}});Object.assign(_e,{structure:l,memory:{array:kr},const:!0,slots:{0:$e}});Object.assign($e,{structure:S,memory:{array:qr},const:!0});Object.assign(Le,{memory:{array:_t},slots:{0:Be}});Object.assign(Be,{structure:et,memory:{array:_t},slots:{0:Ge}});Object.assign(Ge,{structure:E,memory:{array:_t,offset:0,length:8},slots:{0:Tt}});Object.assign(He,{memory:{array:Ir}});Object.assign(Je,{slots:{0:Ne}});Object.assign(Ne,{structure:d,memory:{array:vr},const:!0});Object.assign(Qe,{slots:{0:We}});Object.assign(We,{structure:w,memory:{array:Er},const:!0});Object.assign(Xe,{slots:{0:Ye,1:ts,2:ss,3:ns}});Object.assign(Ye,{structure:s,memory:{array:xr},const:!0,slots:{0:Ze}});Object.assign(Ze,{structure:bt});Object.assign(ts,{structure:s,memory:{array:Dr},const:!0,slots:{0:es}});Object.assign(es,{structure:v});Object.assign(ss,{structure:s,memory:{array:Kr},const:!0,slots:{0:rs}});Object.assign(rs,{structure:x});Object.assign(ns,{structure:s,memory:{array:Cr},const:!0,slots:{0:as}});Object.assign(as,{structure:D});const Mr={argStruct:gt,thunkId:2,name:"createOutput"},Tr={argStruct:ft,thunkId:3,name:"createPartialOutput"};Object.assign(s,{...e,name:"type",align:1,instance:{members:[{...t,type:6,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:s}],methods:[]}});Object.assign(f,{...e,name:"u8",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign(T,{...e,type:1,name:"[7:0]u8",length:7,byteSize:8,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign(F,{...e,type:13,name:"*const [7:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[]}});Object.assign(_,{...e,type:1,name:"[11:0]u8",length:11,byteSize:12,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign($,{...e,type:13,name:"*const [11:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:_}],methods:[]}});Object.assign(l,{...e,name:"comptime_int",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:l}],methods:[]}});Object.assign(S,{...e,name:"i8",byteSize:1,align:1,instance:{members:[{...t,type:2,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(L,{...e,type:1,name:"[44:0]u8",length:44,byteSize:45,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign(B,{...e,type:13,name:"*const [44:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[]}});Object.assign(r,{...e,name:"comptime_float",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:r}],methods:[]}});Object.assign(u,{...e,name:"f64",byteSize:8,align:8,instance:{members:[{...t,type:4,bitOffset:0,bitSize:64,byteSize:8,structure:u}],methods:[]}});Object.assign(A,{...e,type:2,name:"Struct738220547",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:r},{...t,type:7,slot:1,name:"1",structure:r}],methods:[],template:Bt}});Object.assign(G,{...e,type:2,name:"Struct2662133551",align:1,isTuple:!0,instance:{members:[{...t,type:7,slot:0,name:"0",structure:r},{...t,type:7,slot:1,name:"1",structure:r}],methods:[],template:Jt}});Object.assign(O,{...e,name:"f32",byteSize:4,align:4,instance:{members:[{...t,type:4,bitOffset:0,bitSize:32,byteSize:4,structure:O}],methods:[]}});Object.assign(H,{...e,type:15,name:"@Vector(2, f32)",length:2,byteSize:8,align:8,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:O}],methods:[]}});Object.assign(J,{...e,type:2,name:"Struct2812903031",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:A},{...t,type:7,slot:2,name:"maxValue",structure:G},{...t,type:7,slot:3,name:"defaultValue",structure:A}],methods:[],template:Wt}});Object.assign(N,{...e,type:2,name:"Struct3601255964",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:r},{...t,type:7,slot:2,name:"maxValue",structure:r},{...t,type:7,slot:3,name:"defaultValue",structure:r}],methods:[],template:Yt}});Object.assign(U,{...e,type:2,name:"Struct530191728",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:r},{...t,type:7,slot:2,name:"maxValue",structure:r},{...t,type:7,slot:3,name:"defaultValue",structure:r}],methods:[],template:se}});Object.assign(Q,{...e,type:2,name:"Struct3067271501",align:1,instance:{members:[{...t,type:7,slot:0,name:"center",structure:J},{...t,type:7,slot:1,name:"attenuationDelta",structure:N},{...t,type:7,slot:2,name:"attenuationSpeed",structure:U},{...t,type:7,slot:3,name:"attenuationDecay",structure:U}],methods:[],template:ie}});Object.assign(V,{...e,type:2,name:"Struct3832472641",align:1,instance:{members:[{...t,type:7,slot:0,name:"channels",structure:l}],methods:[],template:oe}});Object.assign(W,{...e,type:2,name:"Struct2242867897",align:1,instance:{members:[{...t,type:7,slot:0,name:"src",structure:V}],methods:[],template:ue}});Object.assign(X,{...e,type:2,name:"Struct172100005",align:1,instance:{members:[{...t,type:7,slot:0,name:"dst",structure:V}],methods:[],template:me}});Object.assign(bt,{...e,type:2,name:"simple-point-light.kernel",align:1,static:{members:[{...t,type:7,slot:0,name:"namespace",structure:F},{...t,type:7,slot:1,name:"vendor",structure:$},{...t,type:7,slot:2,name:"version",structure:l},{...t,type:7,slot:3,name:"description",structure:B},{...t,type:7,slot:4,name:"parameters",structure:Q},{...t,type:7,slot:5,name:"inputImages",structure:W},{...t,type:7,slot:6,name:"outputImages",structure:X}],methods:[],template:ye}});Object.assign(q,{...e,type:15,name:"@Vector(4, u8)",length:4,byteSize:4,align:4,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:f}],methods:[]}});Object.assign(Y,{...e,type:14,name:"[_]const @Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:q}],methods:[]}});Object.assign(I,{...e,type:13,name:"[]const @Vector(4, u8)",byteSize:8,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:Y}],methods:[]}});Object.assign(c,{...e,name:"u32",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[]}});Object.assign(g,{...e,type:11,name:"simple-point-light.ColorSpace",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:1,byteSize:1,structure:g}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"srgb",structure:g},{...t,type:7,slot:1,name:"display-p3",structure:g}],methods:[],template:we}});Object.assign(k,{...e,name:"usize",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:k}],methods:[]}});Object.assign(lt,{...e,type:15,name:"@Vector(4, f32)",length:4,byteSize:16,align:16,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:O}],methods:[]}});Object.assign(Z,{...e,type:2,name:"simple-point-light.Image(u8,4,false)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:I},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:g},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:k}],methods:[],template:Ve},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:l}],methods:[],template:Re}});Object.assign(v,{...e,type:2,name:"simple-point-light.KernelInput(u8,simple-point-light.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:Z}],methods:[],template:Ee}});Object.assign(tt,{...e,type:14,name:"[_]@Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:q}],methods:[]}});Object.assign(E,{...e,type:13,name:"[]@Vector(4, u8)",byteSize:8,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:tt}],methods:[]}});Object.assign(et,{...e,type:2,name:"simple-point-light.Image(u8,4,true)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:E},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:g},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:k}],methods:[],template:Ke},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:l}],methods:[],template:Me}});Object.assign(x,{...e,type:2,name:"simple-point-light.KernelOutput(u8,simple-point-light.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:et}],methods:[],template:Le}});Object.assign(D,{...e,type:2,name:"simple-point-light.KernelParameters(simple-point-light.kernel)",byteSize:24,align:8,instance:{members:[{...t,type:5,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"center",structure:H},{...t,type:4,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"attenuationDelta",structure:O},{...t,type:4,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"attenuationSpeed",structure:O},{...t,type:4,bitOffset:128,bitSize:32,byteSize:4,slot:3,name:"attenuationDecay",structure:O}],methods:[],template:He}});Object.assign(d,{...e,type:10,name:"ErrorSet4257104108",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:d}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:d}],methods:[],template:Je}});Object.assign(pt,{...e,type:9,name:"ErrorSet4257104108!simple-point-light.KernelOutput(u8,simple-point-light.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:x},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:d}],methods:[]}});Object.assign(gt,{...e,type:5,name:"createOutput",byteSize:88,align:8,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:192,bitSize:32,byteSize:4,slot:3,name:"0",structure:c},{...t,type:3,isRequired:!0,bitOffset:224,bitSize:32,byteSize:4,slot:4,name:"1",structure:c},{...t,type:5,isRequired:!0,bitOffset:256,bitSize:192,byteSize:24,slot:0,name:"2",structure:v},{...t,type:5,isRequired:!0,bitOffset:0,bitSize:192,byteSize:24,slot:1,name:"3",structure:D},{...t,type:5,isRequired:!0,bitOffset:448,bitSize:224,byteSize:28,slot:2,name:"retval",structure:pt}],methods:[]}});Object.assign(w,{...e,type:10,name:"ErrorSet3399899828",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:w}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:w}],methods:[],template:Qe}});Object.assign(Ot,{...e,type:9,name:"ErrorSet3399899828!simple-point-light.KernelOutput(u8,simple-point-light.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:x},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:w}],methods:[]}});Object.assign(ft,{...e,type:5,name:"createPartialOutput",byteSize:96,align:8,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:192,bitSize:32,byteSize:4,slot:3,name:"0",structure:c},{...t,type:3,isRequired:!0,bitOffset:224,bitSize:32,byteSize:4,slot:4,name:"1",structure:c},{...t,type:3,isRequired:!0,bitOffset:256,bitSize:32,byteSize:4,slot:5,name:"2",structure:c},{...t,type:3,isRequired:!0,bitOffset:288,bitSize:32,byteSize:4,slot:6,name:"3",structure:c},{...t,type:5,isRequired:!0,bitOffset:320,bitSize:192,byteSize:24,slot:0,name:"4",structure:v},{...t,type:5,isRequired:!0,bitOffset:0,bitSize:192,byteSize:24,slot:1,name:"5",structure:D},{...t,type:5,isRequired:!0,bitOffset:512,bitSize:224,byteSize:28,slot:2,name:"retval",structure:Ot}],methods:[]}});Object.assign(St,{...e,type:2,name:"simple-point-light",align:1,static:{members:[{...t,type:7,slot:0,name:"kernel",structure:s},{...t,type:7,slot:1,name:"Input",structure:s},{...t,type:7,slot:2,name:"Output",structure:s},{...t,type:7,slot:3,name:"Parameters",structure:s}],methods:[Mr,Tr],template:Xe}});const Fr=[s,f,T,F,_,$,l,S,L,B,r,u,A,G,O,H,J,N,U,Q,V,W,X,bt,q,Y,I,c,g,k,lt,Z,v,tt,E,et,x,D,d,pt,gt,w,Ot,ft,St],_r=St,$r={runtimeSafety:!1,littleEndian:!0},ut=zs();ut.getSpecialExports();ut.recreateStructures(Fr,$r);const Lr=(async()=>{const i=new URL("simple-point-light-d15a9dc1.wasm",import.meta.url).href;return fetch(i)})();ut.loadModule(Lr);ut.linkVariables(!0);const{constructor:Br}=_r,{createPartialOutput:Gr,Input:Hr,kernel:yt}=Br;function Jr(i,m,o,a,n={},j={}){const z=[];for(const[b]of yt.inputImages)z.push(b);const P=[];for(const[b]of yt.outputImages)P.push(b);if(Array.isArray(n)){const b=n;n={};for(const[p,h]of z.entries())n[h]=b[p]}const y=new Hr(void 0),K=[];let R;for(const b of z){let p=n[b];if(p||(z.length===1&&["data","width","height"].every(h=>!!n[h])?p=n:K.push(b)),y[b]=p,R){if(p.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=p.colorSpace}if(K.length>0)throw new Error(`Missing input image${K.length>1?"s":""}: ${K.join(", ")}`);const mt=Gr(i,m,o,a,y,j),$t=b=>{const p={};for(const h of P){const{data:{typedArray:C},width:Lt,height:cs}=b[h];let M;if(typeof ImageData=="function"){const us=new Uint8ClampedArray(C.buffer,C.byteOffset,C.byteLength);M=new ImageData(us,Lt,a,{colorSpace:R})}else M={data:C,width:Lt,height:cs};if(P.length===1)return M;p[h]=M}return p};return mt[Symbol.toStringTag]==="Promise"?mt.then($t):$t(mt)}function Nr(){const i={};for(let[m,o]of yt){if(m==="parameters"){const a={};for(const[n,j]of o){const z=a[n]={};for(let[P,y]of j)typeof y=="object"?y=y.string??y.valueOf():typeof y=="function"&&(y=Qr(y.name)),z[P]=y}o=a}else typeof o=="object"&&(o=o.string??o.valueOf());i[m]=o}return i}function Qr(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=async i=>{if(!Array.isArray(i.data))return;const[m,o,...a]=i.data;try{const[n,j]=await Wr(m,a);postMessage([m,o,n],{transfer:j})}catch(n){postMessage(["error",o,n])}};async function Wr(i,m){switch(i){case"getKernelInfo":return[Nr(...m)];case"createPartialImageData":const a=await Jr(...m),n=[];if("data"in a&&"width"in a&&"height"in a)n.push(a.data.buffer);else for(const j of Object.entries(a))n.push(a.data.buffer);return[a,n];default:throw new Error(`Unknown function: ${i}`)}}postMessage("ready");
