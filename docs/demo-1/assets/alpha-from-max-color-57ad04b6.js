async function v(){return h("getKernelInfo")}async function y(e,r,t={},o={}){return k(e,r,0,r,t,o)}async function k(e,r,t,o,n={},c={}){const a=[],m=[e,r,t,o,n,c];if("data"in n&&"width"in n&&"height"in n)a.push(n.data.buffer);else for(const p of Object.values(n))a.push(p.data.buffer);return h("createPartialImageData",m,a)}function C(e){if("keepAlive"in e&&(d=e.keepAlive,d||i.splice(0)),"maxCount"in e){s=e.maxCount;const r=i.length+l.length-s;r>0&&i.splice(0,r)}}function P(){w.splice(0)}const x=new URL("alpha-from-max-color-worker-0d4b3308.js",import.meta.url).href;let d=!0,s=navigator.hardwareConcurrency;const l=[],i=[],w=[],f=[];let b=1;async function j(){let e=i.shift();if(!e){if(s<1)throw new Error(`Unable to start worker because maxCount is ${s}`);if(l.length<s)e=new Worker(x,{type:"module"}),await new Promise((r,t)=>{e.onmessage=r,e.onerror=t}),e.onmessage=I,e.onerror=r=>console.error(r);else return new Promise(r=>w.push(r))}return l.push(e),e}async function h(e,r=[],t=[]){const o=await j(),n={id:b++,promise:null,resolve:null,reject:null,worker:o};return n.promise=new Promise((c,a)=>{n.resolve=c,n.reject=a}),f.push(n),o.onmessageerror=()=>reject(new Error("Message error")),o.postMessage([e,n.id,...r],{transfer:t}),n.promise}function I(e){const[r,t,o]=e.data,n=f.findIndex(u=>u.id===t),c=f[n];f.splice(n,1);const{worker:a,resolve:m,reject:p}=c;r!=="error"?m(o):p(o);const g=w.shift();if(g)g(a);else{const u=l.indexOf(a);u!==-1&&l.splice(u,1),d&&i.length<s&&i.push(a)}}export{y as createImageData,k as createPartialImageData,v as getKernelInfo,C as manageWorkers,P as purgeQueue};
