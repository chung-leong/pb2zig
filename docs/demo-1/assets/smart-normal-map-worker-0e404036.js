import{u as es,a as ss,b as rs,c as as,d as ns,e as is,f as os,g as cs,h as us,i as ms,j as ys,k as bs,l as ls,m as ps,n as gs,o as fs,p as Os,q as Ss}from"./index-67c7daa1.js";es();bs();ls();ss();rs();ps();gs();fs();as();Os();ns();is();os();Ss();cs();us();ms();const e={constructor:null,typedArray:null,type:0,name:void 0,byteSize:0,align:0,isConst:!1,isTuple:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null}},t={type:0,isRequired:!1},s={},S={},D={},F={},T={},$={},a={},p={},L={},B={},R={},G={},i={},O={},f={},H={},A={},J={},U={},N={},Q={},ct={},q={},W={},I={},u={},g={},k={},ut={},X={},v={},Y={},E={},Z={},x={},_={},h={},mt={},yt={},w={},bt={},lt={},pt={},Mt={},gt={},Dt={},ft={},Ft={},Ot={},Tt={},St={},$t={},Lt={},zt={},jt={},dt={},Bt={},ht={},Gt={},wt={},Ht={},Jt={},tt={},et={},Nt={},st={},Qt={},rt={},Wt={},Xt={},At={},Ut={},Pt={},Vt={},Yt={},at={},Zt={},te={},Rt={},ee={},kt={},se={},re={},ae={},ne={},ie={},oe={},ce={},ue={},me={},ye={},be={},le={},pe={},ge={},fe={},Oe={},Se={},qt={},ze={},je={},It={},de={},vt={},he={},we={},Ae={},Ue={},Pe={},Ve={},Re={},Et={},ke={},qe={},Ie={},ve={},Ee={},xe={},_e={},Ke={},Ce={},Me={},De={},Fe={},Te={},$e={},Le={},Be={},Ge={},He={},Je={},Ne={},Qe={},We={},zs=new Uint8Array,js=new Uint8Array,ds=new Uint8Array([0]),hs=new Uint8Array,ws=new Uint8Array([1]),As=new Uint8Array,Us=new Uint8Array([0]),Ps=new Uint8Array,Vs=new Uint8Array,Rs=new Uint8Array([0,0,0,0,0,0,0,0]),ks=new Uint8Array,qs=new Uint8Array([0,0,0,0,0,0,20,64]),Is=new Uint8Array,vs=new Uint8Array([0,0,0,0,0,0,240,63]),Es=new Uint8Array,xs=new Uint8Array,_s=new Uint8Array([0,0,0,0,0,0,240,191]),Ks=new Uint8Array,Cs=new Uint8Array([0,0,0,0,0,0,240,63]),Ms=new Uint8Array,Ds=new Uint8Array([0,0,0,0,0,0,240,63]),Fs=new Uint8Array,Ts=new Uint8Array,$s=new Uint8Array,Ls=new Uint8Array,Bs=new Uint8Array,Gs=new Uint8Array([4]),Hs=new Uint8Array,Js=new Uint8Array,Ns=new Uint8Array([8,5,0,1]),Qs=new Uint8Array([99,111,109,46,115,109,97,114,116,112,97,103,101,46,102,105,108,116,101,114,115,0]),Ws=new Uint8Array([41,5,0,1]),Xs=new Uint8Array([115,109,97,114,116,45,112,97,103,101,46,110,101,116,32,45,32,74,97,110,45,67,46,32,70,114,105,115,99,104,109,117,116,104,0]),Ys=new Uint8Array,Zs=new Uint8Array([1]),tr=new Uint8Array([93,5,0,1]),er=new Uint8Array([71,101,110,101,114,97,116,101,115,32,97,32,110,111,114,109,97,108,109,97,112,32,117,115,105,110,103,32,99,111,110,100,101,110,115,101,100,32,111,114,32,115,111,98,101,108,45,101,100,103,101,46,0]),sr=new Uint8Array,rr=new Uint8Array,ar=new Uint8Array,nr=new Uint8Array([0]),ir=new Uint8Array([1]),Xe=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),or=new Uint8Array,cr=new Uint8Array,ur=new Uint8Array,mr=new Uint8Array,yr=new Uint8Array([4]),xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ye=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),br=new Uint8Array,lr=new Uint8Array,pr=new Uint8Array,gr=new Uint8Array,fr=new Uint8Array([4]),_t=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Or=new Uint8Array([0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63]),Sr=new Uint8Array([27,0]),zr=new Uint8Array([27,0]),jr=new Uint8Array,dr=new Uint8Array,hr=new Uint8Array,wr=new Uint8Array;Object.assign(Mt,{slots:{0:gt,1:ft,2:Ot,3:St}});Object.assign(gt,{structure:s,memory:{array:zs},const:!0,slots:{0:Dt}});Object.assign(Dt,{structure:R});Object.assign(ft,{structure:a,memory:{array:js},const:!0,slots:{0:Ft}});Object.assign(Ft,{structure:p,memory:{array:ds},const:!0});Object.assign(Ot,{structure:a,memory:{array:hs},const:!0,slots:{0:Tt}});Object.assign(Tt,{structure:p,memory:{array:ws},const:!0});Object.assign(St,{structure:a,memory:{array:As},const:!0,slots:{0:$t}});Object.assign($t,{structure:p,memory:{array:Us},const:!0});Object.assign(Lt,{slots:{0:zt,1:dt,2:ht,3:wt}});Object.assign(zt,{structure:s,memory:{array:Ps},const:!0,slots:{0:jt}});Object.assign(jt,{structure:O});Object.assign(dt,{structure:i,memory:{array:Vs},const:!0,slots:{0:Bt}});Object.assign(Bt,{structure:f,memory:{array:Rs},const:!0});Object.assign(ht,{structure:i,memory:{array:ks},const:!0,slots:{0:Gt}});Object.assign(Gt,{structure:f,memory:{array:qs},const:!0});Object.assign(wt,{structure:i,memory:{array:Is},const:!0,slots:{0:Ht}});Object.assign(Ht,{structure:f,memory:{array:vs},const:!0});Object.assign(Jt,{slots:{0:tt,1:et,2:st,3:rt}});Object.assign(tt,{structure:s,memory:{array:Es},const:!0,slots:{0:jt}});Object.assign(et,{structure:i,memory:{array:xs},const:!0,slots:{0:Nt}});Object.assign(Nt,{structure:f,memory:{array:_s},const:!0});Object.assign(st,{structure:i,memory:{array:Ks},const:!0,slots:{0:Qt}});Object.assign(Qt,{structure:f,memory:{array:Cs},const:!0});Object.assign(rt,{structure:i,memory:{array:Ms},const:!0,slots:{0:Wt}});Object.assign(Wt,{structure:f,memory:{array:Ds},const:!0});Object.assign(Xt,{slots:{0:At,1:Ut,2:Pt,3:Vt}});Object.assign(At,{structure:G,memory:{array:Fs},const:!0,slots:{0:gt,1:ft,2:Ot,3:St}});Object.assign(Ut,{structure:H,memory:{array:Ts},const:!0,slots:{0:zt,1:dt,2:ht,3:wt}});Object.assign(Pt,{structure:A,memory:{array:$s},const:!0,slots:{0:tt,1:et,2:st,3:rt}});Object.assign(Vt,{structure:A,memory:{array:Ls},const:!0,slots:{0:tt,1:et,2:st,3:rt}});Object.assign(Yt,{slots:{0:at}});Object.assign(at,{structure:a,memory:{array:Bs},const:!0,slots:{0:Zt}});Object.assign(Zt,{structure:p,memory:{array:Gs},const:!0});Object.assign(te,{slots:{0:Rt}});Object.assign(Rt,{structure:U,memory:{array:Hs},const:!0,slots:{0:at}});Object.assign(ee,{slots:{0:kt}});Object.assign(kt,{structure:U,memory:{array:Js},const:!0,slots:{0:at}});Object.assign(se,{slots:{0:re,1:ne,2:oe,3:ue,4:ye,5:be,6:le}});Object.assign(re,{structure:F,memory:{array:Ns},const:!0,slots:{0:ae}});Object.assign(ae,{structure:D,memory:{array:Qs},reloc:16778504});Object.assign(ne,{structure:$,memory:{array:Ws},const:!0,slots:{0:ie}});Object.assign(ie,{structure:T,memory:{array:Xs},reloc:16778537});Object.assign(oe,{structure:a,memory:{array:Ys},const:!0,slots:{0:ce}});Object.assign(ce,{structure:p,memory:{array:Zs},const:!0});Object.assign(ue,{structure:B,memory:{array:tr},const:!0,slots:{0:me}});Object.assign(me,{structure:L,memory:{array:er},reloc:16778589});Object.assign(ye,{structure:J,memory:{array:sr},const:!0,slots:{0:At,1:Ut,2:Pt,3:Vt}});Object.assign(be,{structure:N,memory:{array:rr},const:!0,slots:{0:Rt}});Object.assign(le,{structure:Q,memory:{array:ar},const:!0,slots:{0:kt}});Object.assign(pe,{slots:{0:ge,1:fe}});Object.assign(ge,{structure:g,memory:{array:nr},const:!0});Object.assign(fe,{structure:g,memory:{array:ir},const:!0});Object.assign(Oe,{memory:{array:Xe},slots:{0:Se}});Object.assign(Se,{structure:I,memory:{array:Xe,offset:0,length:8},slots:{0:qt}});Object.assign(qt,{structure:W,memory:{array:or},reloc:0});Object.assign(ze,{slots:{0:je,1:de,2:he}});Object.assign(je,{structure:s,memory:{array:cr},const:!0,slots:{0:It}});Object.assign(It,{structure:q});Object.assign(de,{structure:s,memory:{array:ur},const:!0,slots:{0:vt}});Object.assign(vt,{structure:ut});Object.assign(he,{structure:a,memory:{array:mr},const:!0,slots:{0:we}});Object.assign(we,{structure:p,memory:{array:yr},const:!0});Object.assign(Ae,{memory:{array:xt},slots:{0:Ue}});Object.assign(Ue,{structure:X,memory:{array:xt},slots:{0:Pe}});Object.assign(Pe,{structure:I,memory:{array:xt,offset:0,length:8},slots:{0:qt}});Object.assign(Ve,{memory:{array:Ye},slots:{0:Re}});Object.assign(Re,{structure:E,memory:{array:Ye,offset:0,length:8},slots:{0:Et}});Object.assign(Et,{structure:Y,memory:{array:br},reloc:0});Object.assign(ke,{slots:{0:qe,1:Ie,2:ve}});Object.assign(qe,{structure:s,memory:{array:lr},const:!0,slots:{0:It}});Object.assign(Ie,{structure:s,memory:{array:pr},const:!0,slots:{0:vt}});Object.assign(ve,{structure:a,memory:{array:gr},const:!0,slots:{0:Ee}});Object.assign(Ee,{structure:p,memory:{array:fr},const:!0});Object.assign(xe,{memory:{array:_t},slots:{0:_e}});Object.assign(_e,{structure:Z,memory:{array:_t},slots:{0:Ke}});Object.assign(Ke,{structure:E,memory:{array:_t,offset:0,length:8},slots:{0:Et}});Object.assign(Ce,{memory:{array:Or}});Object.assign(Me,{slots:{0:De}});Object.assign(De,{structure:h,memory:{array:Sr},const:!0});Object.assign(Fe,{slots:{0:Te}});Object.assign(Te,{structure:w,memory:{array:zr},const:!0});Object.assign($e,{slots:{0:Le,1:Ge,2:Je,3:Qe}});Object.assign(Le,{structure:s,memory:{array:jr},const:!0,slots:{0:Be}});Object.assign(Be,{structure:ct});Object.assign(Ge,{structure:s,memory:{array:dr},const:!0,slots:{0:He}});Object.assign(He,{structure:v});Object.assign(Je,{structure:s,memory:{array:hr},const:!0,slots:{0:Ne}});Object.assign(Ne,{structure:x});Object.assign(Qe,{structure:s,memory:{array:wr},const:!0,slots:{0:We}});Object.assign(We,{structure:_});const Ar={argStruct:yt,thunkId:2,name:"createOutput"},Ur={argStruct:lt,thunkId:3,name:"createPartialOutput"};Object.assign(s,{...e,name:"type",align:1,instance:{members:[{...t,type:6,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:s}],methods:[]}});Object.assign(S,{...e,name:"u8",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(D,{...e,type:1,name:"[21:0]u8",length:21,byteSize:22,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(F,{...e,type:13,name:"*const [21:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:D}],methods:[]}});Object.assign(T,{...e,type:1,name:"[34:0]u8",length:34,byteSize:35,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign($,{...e,type:13,name:"*const [34:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[]}});Object.assign(a,{...e,name:"comptime_int",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:a}],methods:[]}});Object.assign(p,{...e,name:"i8",byteSize:1,align:1,instance:{members:[{...t,type:2,bitOffset:0,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(L,{...e,type:1,name:"[52:0]u8",length:52,byteSize:53,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(B,{...e,type:13,name:"*const [52:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[]}});Object.assign(R,{...e,name:"i32",byteSize:4,align:4,instance:{members:[{...t,type:2,bitOffset:0,bitSize:32,byteSize:4,structure:R}],methods:[]}});Object.assign(G,{...e,type:2,name:"Struct152411989",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:a},{...t,type:7,slot:2,name:"maxValue",structure:a},{...t,type:7,slot:3,name:"defaultValue",structure:a}],methods:[],template:Mt}});Object.assign(i,{...e,name:"comptime_float",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:i}],methods:[]}});Object.assign(O,{...e,name:"f32",byteSize:4,align:4,instance:{members:[{...t,type:4,bitOffset:0,bitSize:32,byteSize:4,structure:O}],methods:[]}});Object.assign(f,{...e,name:"f64",byteSize:8,align:8,instance:{members:[{...t,type:4,bitOffset:0,bitSize:64,byteSize:8,structure:f}],methods:[]}});Object.assign(H,{...e,type:2,name:"Struct4017537585",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:i},{...t,type:7,slot:2,name:"maxValue",structure:i},{...t,type:7,slot:3,name:"defaultValue",structure:i}],methods:[],template:Lt}});Object.assign(A,{...e,type:2,name:"Struct3549883580",align:1,instance:{members:[{...t,type:7,slot:0,name:"type",structure:s},{...t,type:7,slot:1,name:"minValue",structure:i},{...t,type:7,slot:2,name:"maxValue",structure:i},{...t,type:7,slot:3,name:"defaultValue",structure:i}],methods:[],template:Jt}});Object.assign(J,{...e,type:2,name:"Struct2454565375",align:1,instance:{members:[{...t,type:7,slot:0,name:"soft_sobel",structure:G},{...t,type:7,slot:1,name:"amount",structure:H},{...t,type:7,slot:2,name:"invert_red",structure:A},{...t,type:7,slot:3,name:"invert_green",structure:A}],methods:[],template:Xt}});Object.assign(U,{...e,type:2,name:"Struct3832472641",align:1,instance:{members:[{...t,type:7,slot:0,name:"channels",structure:a}],methods:[],template:Yt}});Object.assign(N,{...e,type:2,name:"Struct2242867897",align:1,instance:{members:[{...t,type:7,slot:0,name:"src",structure:U}],methods:[],template:te}});Object.assign(Q,{...e,type:2,name:"Struct172100005",align:1,instance:{members:[{...t,type:7,slot:0,name:"dst",structure:U}],methods:[],template:ee}});Object.assign(ct,{...e,type:2,name:"smart-normal-map.kernel",align:1,static:{members:[{...t,type:7,slot:0,name:"namespace",structure:F},{...t,type:7,slot:1,name:"vendor",structure:$},{...t,type:7,slot:2,name:"version",structure:a},{...t,type:7,slot:3,name:"description",structure:B},{...t,type:7,slot:4,name:"parameters",structure:J},{...t,type:7,slot:5,name:"inputImages",structure:N},{...t,type:7,slot:6,name:"outputImages",structure:Q}],methods:[],template:se}});Object.assign(q,{...e,type:15,name:"@Vector(4, u8)",length:4,byteSize:4,align:4,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:S}],methods:[]}});Object.assign(W,{...e,type:14,name:"[_]const @Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:q}],methods:[]}});Object.assign(I,{...e,type:13,name:"[]const @Vector(4, u8)",byteSize:8,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:W}],methods:[]}});Object.assign(u,{...e,name:"u32",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[]}});Object.assign(g,{...e,type:11,name:"smart-normal-map.ColorSpace",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:1,byteSize:1,structure:g}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"srgb",structure:g},{...t,type:7,slot:1,name:"display-p3",structure:g}],methods:[],template:pe}});Object.assign(k,{...e,name:"usize",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:k}],methods:[]}});Object.assign(ut,{...e,type:15,name:"@Vector(4, f32)",length:4,byteSize:16,align:16,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:O}],methods:[]}});Object.assign(X,{...e,type:2,name:"smart-normal-map.Image(u8,4,false)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:I},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:g},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:k}],methods:[],template:Oe},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:a}],methods:[],template:ze}});Object.assign(v,{...e,type:2,name:"smart-normal-map.KernelInput(u8,smart-normal-map.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:X}],methods:[],template:Ae}});Object.assign(Y,{...e,type:14,name:"[_]@Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:q}],methods:[]}});Object.assign(E,{...e,type:13,name:"[]@Vector(4, u8)",byteSize:8,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:Y}],methods:[]}});Object.assign(Z,{...e,type:2,name:"smart-normal-map.Image(u8,4,true)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:E},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:g},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:k}],methods:[],template:Ve},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:a}],methods:[],template:ke}});Object.assign(x,{...e,type:2,name:"smart-normal-map.KernelOutput(u8,smart-normal-map.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:Z}],methods:[],template:xe}});Object.assign(_,{...e,type:2,name:"smart-normal-map.KernelParameters(smart-normal-map.kernel)",byteSize:16,align:4,instance:{members:[{...t,type:2,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"soft_sobel",structure:R},{...t,type:4,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"amount",structure:O},{...t,type:4,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"invert_red",structure:O},{...t,type:4,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"invert_green",structure:O}],methods:[],template:Ce}});Object.assign(h,{...e,type:10,name:"ErrorSet3426908800",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:h}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:h}],methods:[],template:Me}});Object.assign(mt,{...e,type:9,name:"ErrorSet3426908800!smart-normal-map.KernelOutput(u8,smart-normal-map.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:x},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:h}],methods:[]}});Object.assign(yt,{...e,type:5,name:"createOutput",byteSize:76,align:4,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:0,bitSize:32,byteSize:4,slot:3,name:"0",structure:u},{...t,type:3,isRequired:!0,bitOffset:32,bitSize:32,byteSize:4,slot:4,name:"1",structure:u},{...t,type:5,isRequired:!0,bitOffset:64,bitSize:192,byteSize:24,slot:0,name:"2",structure:v},{...t,type:5,isRequired:!0,bitOffset:256,bitSize:128,byteSize:16,slot:1,name:"3",structure:_},{...t,type:5,isRequired:!0,bitOffset:384,bitSize:224,byteSize:28,slot:2,name:"retval",structure:mt}],methods:[]}});Object.assign(w,{...e,type:10,name:"ErrorSet448078773",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:w}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:w}],methods:[],template:Fe}});Object.assign(bt,{...e,type:9,name:"ErrorSet448078773!smart-normal-map.KernelOutput(u8,smart-normal-map.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:x},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:w}],methods:[]}});Object.assign(lt,{...e,type:5,name:"createPartialOutput",byteSize:84,align:4,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:0,bitSize:32,byteSize:4,slot:3,name:"0",structure:u},{...t,type:3,isRequired:!0,bitOffset:32,bitSize:32,byteSize:4,slot:4,name:"1",structure:u},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:5,name:"2",structure:u},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:6,name:"3",structure:u},{...t,type:5,isRequired:!0,bitOffset:128,bitSize:192,byteSize:24,slot:0,name:"4",structure:v},{...t,type:5,isRequired:!0,bitOffset:320,bitSize:128,byteSize:16,slot:1,name:"5",structure:_},{...t,type:5,isRequired:!0,bitOffset:448,bitSize:224,byteSize:28,slot:2,name:"retval",structure:bt}],methods:[]}});Object.assign(pt,{...e,type:2,name:"smart-normal-map",align:1,static:{members:[{...t,type:7,slot:0,name:"kernel",structure:s},{...t,type:7,slot:1,name:"Input",structure:s},{...t,type:7,slot:2,name:"Output",structure:s},{...t,type:7,slot:3,name:"Parameters",structure:s}],methods:[Ar,Ur],template:$e}});const Pr=[s,S,D,F,T,$,a,p,L,B,R,G,i,O,f,H,A,J,U,N,Q,ct,q,W,I,u,g,k,ut,X,v,Y,E,Z,x,_,h,mt,yt,w,bt,lt,pt],Vr=pt,Rr={runtimeSafety:!1,littleEndian:!0},nt=ys();nt.getSpecialExports();nt.recreateStructures(Pr,Rr);const kr=(async()=>{const o=new URL("smart-normal-map-7d990003.wasm",import.meta.url).href;return fetch(o)})();nt.loadModule(kr);nt.linkVariables(!0);const{constructor:qr}=Vr,{createPartialOutput:Ir,Input:vr,kernel:ot}=qr;function Er(o,m,c,n,r={},z={}){const j=[];for(const[b]of ot.inputImages)j.push(b);const P=[];for(const[b]of ot.outputImages)P.push(b);if(Array.isArray(r)){const b=r;r={};for(const[l,d]of j.entries())r[d]=b[l]}const y=new vr(void 0),K=[];let V;for(const b of j){let l=r[b];if(l||(j.length===1&&["data","width","height"].every(d=>!!r[d])?l=r:K.push(b)),y[b]=l,V){if(l.colorSpace!==V)throw new Error(`Input images must all use the same color space: ${V}`)}else V=l.colorSpace}if(K.length>0)throw new Error(`Missing input image${K.length>1?"s":""}: ${K.join(", ")}`);const it=Ir(o,m,c,n,y,z),Kt=b=>{const l={};for(const d of P){const{data:{typedArray:C},width:Ct,height:Ze}=b[d];let M;if(typeof ImageData=="function"){const ts=new Uint8ClampedArray(C.buffer,C.byteOffset,C.byteLength);M=new ImageData(ts,Ct,n,{colorSpace:V})}else M={data:C,width:Ct,height:Ze};if(P.length===1)return M;l[d]=M}return l};return it[Symbol.toStringTag]==="Promise"?it.then(Kt):Kt(it)}function xr(){const o={};for(let[m,c]of ot){if(m==="parameters"){const n={};for(const[r,z]of c){const j=n[r]={};for(let[P,y]of z)typeof y=="object"?y=y.string??y.valueOf():typeof y=="function"&&(y=_r(y.name)),j[P]=y}c=n}else typeof c=="object"&&(c=c.string??c.valueOf());o[m]=c}return o}function _r(o){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[o]}onmessage=async o=>{if(!Array.isArray(o.data))return;const[m,c,...n]=o.data;try{const[r,z]=await Kr(m,n);postMessage([m,c,r],{transfer:z})}catch(r){postMessage(["error",c,r])}};async function Kr(o,m){switch(o){case"getKernelInfo":return[xr(...m)];case"createPartialImageData":const n=await Er(...m),r=[];if("data"in n&&"width"in n&&"height"in n)r.push(n.data.buffer);else for(const z of Object.entries(n))r.push(n.data.buffer);return[n,r];default:throw new Error(`Unknown function: ${o}`)}}postMessage("ready");
