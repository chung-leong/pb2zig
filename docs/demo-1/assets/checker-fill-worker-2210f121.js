import{u as Ae,a as Ue,b as je,c as ke,d as Pe,e as Ie,f as Ve,g as Ce,h as ve,i as Ee,j as Ke,k as xe,l as De,m as Me,o as Fe,n as Te,p as _e,q as Be}from"./index-422d9c98.js";Ae();Ue();je();ke();Pe();Ie();Ve();Ce();ve();Ee();Ke();xe();De();Me();Fe();Te();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},d={},$={},L={},P={},G={},H={},I={},b={},f={},J={},N={},V={},z={},o={},s={},Q={},C={},h={},W={},v={},X={},E={},Y={},K={},Z={},x={},ee={},D={},te={},M={},se={},F={},re={},T={},le={},w={},ae={},ne={},ie={},m={},me={},_={},B={},R={},q={},ce={},ye={},be={},pe={},fe={},de={},he={};Object.assign(d,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:5});Object.assign($,{...t,type:1,name:"[17:0]u8",length:17,byteSize:18,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:4});Object.assign(L,{...t,type:11,name:"*const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:3});Object.assign(P,{...t,type:11,name:"*const *const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:2});Object.assign(G,{...t,type:1,name:"[18:0]u8",length:18,byteSize:19,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:8});Object.assign(H,{...t,type:11,name:"*const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:7});Object.assign(I,{...t,type:11,name:"*const *const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:6});Object.assign(b,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:10});Object.assign(f,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:b}],methods:[],template:null},slot:9});Object.assign(J,{...t,type:1,name:"[27:0]u8",length:27,byteSize:28,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:13});Object.assign(N,{...t,type:11,name:"*const [27:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:12});Object.assign(V,{...t,type:11,name:"*const *const [27:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:11});Object.assign(z,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:30});Object.assign(o,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:o}],methods:[],template:null},slot:47});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:o}],methods:[],template:null},slot:46});const $e=new Uint8Array([]),Le=new Uint8Array([32,253,15,0]),Ge=new Uint8Array([0,0,0,0,0,0,240,63]),He=new Uint8Array([72,253,15,0]),Je=new Uint8Array([0,0,0,0,0,192,82,64]),Ne=new Uint8Array([32,252,15,0]),Qe=new Uint8Array([0,0,0,0,0,0,36,64]);Object.assign(Q,{...t,type:2,name:"Struct0010",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:z},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:$e},slots:{0:{structure:s,memory:{array:Le},slots:{0:{structure:o,memory:{array:Ge}}}},1:{structure:s,memory:{array:He},slots:{0:{structure:o,memory:{array:Je}}}},2:{structure:s,memory:{array:Ne},slots:{0:{structure:o,memory:{array:Qe}}}}}}},slot:37});Object.assign(C,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:36});Object.assign(h,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:31});const We=new Uint8Array([]),Xe=new Uint8Array([176,252,15,0]),Ye=new Uint8Array([0,0,0,0,0,0,0,0]),Ze=new Uint8Array([216,252,15,0]),et=new Uint8Array([0,0,0,0,0,0,240,63]),tt=new Uint8Array([0,253,15,0]),st=new Uint8Array([0,0,0,0,0,0,240,63]),rt=new Uint8Array([40,253,15,0]),at=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(W,{...t,type:2,name:"Struct0016",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:s}],methods:[],template:{memory:{array:We},slots:{0:{structure:s,memory:{array:Xe},slots:{0:{structure:o,memory:{array:Ye}}}},1:{structure:s,memory:{array:Ze},slots:{0:{structure:o,memory:{array:et}}}},2:{structure:s,memory:{array:tt},slots:{0:{structure:o,memory:{array:st}}}},3:{structure:s,memory:{array:rt},slots:{0:{structure:o,memory:{array:at}}}}}}},slot:49});Object.assign(v,{...t,type:11,name:"Struct0014",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:48});const nt=new Uint8Array([]),it=new Uint8Array([170,170,170,170]),y=new Uint8Array([]);Object.assign(X,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:v}],methods:[],template:{memory:{array:nt},slots:{0:{structure:v,memory:{array:it},slots:{0:{structure:W,memory:{array:y},address:-1431655766}}}}}},slot:39});Object.assign(E,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:38});const ut=new Uint8Array([]),ot=new Uint8Array([176,252,15,0]),lt=new Uint8Array([0,0,0,0,0,0,0,0]),mt=new Uint8Array([216,252,15,0]),ct=new Uint8Array([0,0,0,0,0,0,0,0]),yt=new Uint8Array([0,253,15,0]),bt=new Uint8Array([0,0,0,0,0,0,0,0]),pt=new Uint8Array([40,253,15,0]),ft=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(Y,{...t,type:2,name:"Struct0017",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:s}],methods:[],template:{memory:{array:ut},slots:{0:{structure:s,memory:{array:ot},slots:{0:{structure:o,memory:{array:lt}}}},1:{structure:s,memory:{array:mt},slots:{0:{structure:o,memory:{array:ct}}}},2:{structure:s,memory:{array:yt},slots:{0:{structure:o,memory:{array:bt}}}},3:{structure:s,memory:{array:pt},slots:{0:{structure:o,memory:{array:ft}}}}}}},slot:51});Object.assign(K,{...t,type:11,name:"Struct0015",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:50});const dt=new Uint8Array([]),ht=new Uint8Array([170,170,170,170]);Object.assign(Z,{...t,type:2,name:"Struct0012",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:K}],methods:[],template:{memory:{array:dt},slots:{0:{structure:K,memory:{array:ht},slots:{0:{structure:Y,memory:{array:y},address:-1431655766}}}}}},slot:41});Object.assign(x,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:40});const St=new Uint8Array([]),gt=new Uint8Array([170,170,170,170]),zt=new Uint8Array([170,170,170,170]),Ot=new Uint8Array([170,170,170,170]);Object.assign(ee,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"checkerSize",structure:C},{...e,type:8,isRequired:!1,slot:1,name:"colorA",structure:E},{...e,type:8,isRequired:!1,slot:2,name:"colorB",structure:x}],methods:[],template:{memory:{array:St},slots:{0:{structure:C,memory:{array:gt},slots:{0:{structure:Q,memory:{array:y},address:-1431655766}}},1:{structure:E,memory:{array:zt},slots:{0:{structure:X,memory:{array:y},address:-1431655766}}},2:{structure:x,memory:{array:Ot},slots:{0:{structure:Z,memory:{array:y},address:-1431655766}}}}}},slot:15});Object.assign(D,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:14});const wt=new Uint8Array([]);Object.assign(te,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:wt}}},slot:17});Object.assign(M,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:16});const Rt=new Uint8Array([]),qt=new Uint8Array([16,253,15,0]),At=new Uint8Array([4,0,0,0]);Object.assign(se,{...t,type:2,name:"Struct0013",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:f}],methods:[],template:{memory:{array:Rt},slots:{0:{structure:f,memory:{array:qt},slots:{0:{structure:b,memory:{array:At}}}}}}},slot:43});Object.assign(F,{...t,type:11,name:"Struct0009",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:42});const Ut=new Uint8Array([]),jt=new Uint8Array([170,170,170,170]);Object.assign(re,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:F}],methods:[],template:{memory:{array:Ut},slots:{0:{structure:F,memory:{array:jt},slots:{0:{structure:se,memory:{array:y},address:-1431655766}}}}}},slot:19});Object.assign(T,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:18});const kt=new Uint8Array([]),Pt=new Uint8Array([]),It=new Uint8Array([132,248,15,0]),Vt=new Uint8Array([242,35,16,0]),Ct=new Uint8Array([99,111,109,46,97,100,111,98,101,46,101,120,97,109,112,108,101,0]),vt=new Uint8Array([196,248,15,0]),Et=new Uint8Array([223,35,16,0]),Kt=new Uint8Array([65,100,111,98,101,32,83,121,115,116,101,109,115,32,73,110,99,46,0]),xt=new Uint8Array([4,249,15,0]),Dt=new Uint8Array([1,0,0,0]),Mt=new Uint8Array([92,249,15,0]),Ft=new Uint8Array([195,35,16,0]),Tt=new Uint8Array([65,32,99,104,101,99,107,101,114,101,100,32,102,105,101,108,100,32,103,101,110,101,114,97,116,111,114,0]),_t=new Uint8Array([170,170,170,170]),Bt=new Uint8Array([170,170,170,170]),$t=new Uint8Array([170,170,170,170]);Object.assign(le,{...t,type:2,name:"checker-fill.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:kt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:P},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:I},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:f},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:V},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:D},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:M},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:T}],methods:[],template:{memory:{array:Pt},slots:{0:{structure:P,memory:{array:It},slots:{0:{structure:L,memory:{array:Vt},slots:{0:{structure:$,memory:{array:Ct},address:1057778}}}}},1:{structure:I,memory:{array:vt},slots:{0:{structure:H,memory:{array:Et},slots:{0:{structure:G,memory:{array:Kt},address:1057759}}}}},2:{structure:f,memory:{array:xt},slots:{0:{structure:b,memory:{array:Dt}}}},3:{structure:V,memory:{array:Mt},slots:{0:{structure:N,memory:{array:Ft},slots:{0:{structure:J,memory:{array:Tt},address:1057731}}}}},4:{structure:D,memory:{array:_t},slots:{0:{structure:ee,memory:{array:y},address:-1431655766}}},5:{structure:M,memory:{array:Bt},slots:{0:{structure:te,memory:{array:y},address:-1431655766}}},6:{structure:T,memory:{array:$t},slots:{0:{structure:re,memory:{array:y},address:-1431655766}}}}}},slot:1});const Lt=new Uint8Array([]);Object.assign(w,{...t,type:2,name:"checker-fill.KernelInput(u8,checker-fill.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Lt}}},slot:20});Object.assign(ae,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:25});Object.assign(ne,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:ae}],methods:[],template:null},slot:24});Object.assign(ie,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ne}],methods:[],template:null},slot:23});Object.assign(m,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:26});const Gt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(me,{...t,type:9,name:"checker-fill.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:b},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:b}],methods:[],template:{memory:{array:Gt}}},slot:27});Object.assign(_,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:_}],methods:[],template:null},slot:28});const Ht=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Jt=new Uint8Array([]),Nt=new Uint8Array([88,253,15,0]),Qt=new Uint8Array([4,0,0,0]);Object.assign(B,{...t,type:2,name:"checker-fill.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ie},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:me},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:_}],methods:[],template:{memory:{array:Ht}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:ae},{...e,type:7,isRequired:!1,name:"FPixel",structure:h},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:f}],methods:[],template:{memory:{array:Jt},slots:{0:{structure:f,memory:{array:Nt},slots:{0:{structure:b,memory:{array:Qt}}}}}}},slot:22});const Wt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Yt=new Uint8Array([0,0,0,0,0,0,0,0]),Oe=new Uint8Array([]);Object.assign(R,{...t,type:2,name:"checker-fill.KernelOutput(u8,checker-fill.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:B}],methods:[],template:{memory:{array:Wt},slots:{0:{structure:B,memory:{array:Xt},slots:{0:{structure:ie,memory:{array:Yt},slots:{0:{structure:ne,memory:{array:Oe}}}}}}}}},slot:21});const Zt=new Uint8Array([0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,32,65,0,0,0,0,0,0,0,0,0,0,0,0]);Object.assign(q,{...t,type:2,name:"checker-fill.KernelParameters(checker-fill.kernel)",length:1,byteSize:48,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"checkerSize",structure:z},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:128,byteSize:16,slot:1,name:"colorA",structure:h},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:128,byteSize:16,slot:2,name:"colorB",structure:h}],methods:[],template:{memory:{array:Zt}}},slot:29});Object.assign(ce,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(checker-fill.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:44});Object.assign(ye,{...t,type:7,name:"ErrorSet0000!checker-fill.KernelOutput(u8,checker-fill.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:R},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ce}],methods:[],template:null},slot:34});Object.assign(be,{...t,type:3,name:"createOutput",length:1,byteSize:96,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:384,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:416,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:6,bitOffset:768,bitSize:0,byteSize:0,slot:2,name:"2",structure:w},{...e,type:6,bitOffset:0,bitSize:384,byteSize:48,slot:3,name:"3",structure:q},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ye}],methods:[],template:null},slot:32});Object.assign(pe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(checker-fill.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:45});Object.assign(fe,{...t,type:7,name:"ErrorSet0001!checker-fill.KernelOutput(u8,checker-fill.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:R},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:pe}],methods:[],template:null},slot:35});Object.assign(de,{...t,type:3,name:"createPartialOutput",length:1,byteSize:96,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:384,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:416,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:3,bitOffset:448,bitSize:32,byteSize:4,slot:2,name:"2",structure:m},{...e,type:3,bitOffset:480,bitSize:32,byteSize:4,slot:3,name:"3",structure:m},{...e,type:6,bitOffset:768,bitSize:0,byteSize:0,slot:4,name:"4",structure:w},{...e,type:6,bitOffset:0,bitSize:384,byteSize:48,slot:5,name:"5",structure:q},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:6,name:"retval",structure:fe}],methods:[],template:null},slot:33});const es={argStruct:be,thunk:7,name:"createOutput"},ts={argStruct:de,thunk:2,name:"createPartialOutput"};Object.assign(he,{...t,type:2,name:"checker-fill",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Oe}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:le},{...e,type:7,isRequired:!1,name:"Input",structure:w},{...e,type:7,isRequired:!1,name:"Output",structure:R},{...e,type:7,isRequired:!1,name:"Parameters",structure:q}],methods:[es,ts],template:null},slot:0});const ss=[d,$,L,P,G,H,I,b,f,J,N,V,z,o,s,Q,C,h,W,v,X,E,Y,K,Z,x,ee,D,te,M,se,F,re,T,le,w,ae,ne,ie,m,me,_,B,R,q,ce,ye,be,pe,fe,de,he],rs=_e(ss),as=he.constructor,ns=(async()=>{const i=new URL("checker-fill-6c4b715b.wasm",import.meta.url).href;return fetch(i)})();Be(ns,{...rs,writeBack:!0});const{createOutput:bs,createPartialOutput:is,kernel:oe,Input:us,Output:ps,Parameters:fs}=as;function os(i,l,a,r,n={},S={}){if(Array.isArray(n)){const p=n;n={};for(const[c,g]of Object.keys(oe.inputImages).entries())n[g]=p[c]}const A=new us(void 0),U=Object.keys(oe.inputImages),u=[];let O;for(const p of U){let c=n[p];if(c||(U.length===1&&["data","width","height"].every(g=>!!n[g])?c=n:u.push(p)),A[p]=c,O){if(c.colorSpace!==O)throw new Error(`Input images must all use the same color space: ${O}`)}else O=c.colorSpace}if(u.length>0)throw new Error(`Missing input image${u.length>1?"s":""}: ${u.join(", ")}`);const ue=is(i,l,a,r,A,S),Se=p=>{const c=Object.keys(p),g={};for(const ge of c){const{data:{typedArray:j},width:ze,height:Re}=p[ge];let k;if(typeof ImageData=="function"){const qe=new Uint8ClampedArray(j.buffer,j.byteOffset,j.byteLength);k=new ImageData(qe,ze,r,{colorSpace:O})}else k={data:j,width:ze,height:Re};if(c.length===1)return k;g[ge]=k}return g};return ue[Symbol.toStringTag]==="Promise"?ue.then(Se):Se(ue)}function ls(){const i={};for(let[l,a]of Object.entries(oe)){if(l==="parameters"){const r={};for(const[n,S]of Object.entries(a)){const A=r[n]={};for(let[U,u]of Object.entries(S))typeof u=="object"?"string"in u?u=u.string:u=we(u):typeof u=="function"&&(u=ms(u.name)),A[U]=u}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());i[l]=a}return i}function we(i){const l=[];for(let[a,r]of Object.entries(i))typeof r=="object"&&(r=we(r)),l[a]=r;return l}function ms(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[l,a,...r]=i.data;cs(l,r).then(([n,S])=>{postMessage([l,a,n],{transfer:S})}).catch(n=>{postMessage(["error",a,n])})};async function cs(i,l){switch(i){case"getKernelInfo":return[ls(...l)];case"createPartialImageData":const r=await os(...l),n=[];if("data"in r&&"width"in r&&"height"in r)n.push(r.data.buffer);else for(const S of Object.entries(r))n.push(r.data.buffer);return[r,n];default:throw new Error(`Unknown function: ${i}`)}}
