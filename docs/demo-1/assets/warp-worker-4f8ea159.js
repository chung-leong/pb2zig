import{u as We,a as Xe,b as Ye,d as Ze,c as et,e as tt,f as st,g as rt,h as at,i as it,j as mt,k as nt,l as ot,m as ut,n as lt,o as ct,p as yt,q as pt,r as ft}from"./index-778418ea.js";We();Xe();Ye();Ze();et();tt();st();rt();at();it();mt();nt();ot();ut();lt();ct();yt();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},p={},Z={},ee={},I={},te={},se={},C={},f={},h={},re={},ae={},v={},y={},a={},s={},ie={},me={},E={},ne={},K={},oe={},ue={},F={},le={},D={},ce={},T={},ye={},pe={},M={},fe={},$={},be={},de={},B={},he={},L={},ge={},Se={},G={},ze={},H={},we={},J={},N={},V={},z={},Oe={},Q={},Re={},W={},Ce={},w={},qe={},Ve={},l={},Ae={},R={},q={},Ue={},X={},A={},_e={},je={},Y={},U={},_={},ve={},Ee={},Ke={},Fe={},De={},Te={},Me={};Object.assign(p,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:5});Object.assign(Z,{...t,type:1,name:"[11:0]u8",length:11,byteSize:12,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:4});Object.assign(ee,{...t,type:11,name:"*const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:3});Object.assign(I,{...t,type:11,name:"**const [11:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:2});Object.assign(te,{...t,type:1,name:"[16:0]u8",length:16,byteSize:17,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:8});Object.assign(se,{...t,type:11,name:"*const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:7});Object.assign(C,{...t,type:11,name:"**const [16:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:6});Object.assign(f,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:10});Object.assign(h,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:f}],methods:[],template:null},slot:9});Object.assign(re,{...t,type:1,name:"[31:0]u8",length:31,byteSize:32,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:13});Object.assign(ae,{...t,type:11,name:"*const [31:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:12});Object.assign(v,{...t,type:11,name:"**const [31:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:11});Object.assign(y,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:33});Object.assign(a,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:a}],methods:[],template:null},slot:53});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:a}],methods:[],template:null},slot:52});Object.assign(ie,{...t,type:1,name:"[18:0]u8",length:18,byteSize:19,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:56});Object.assign(me,{...t,type:11,name:"*const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:55});Object.assign(E,{...t,type:11,name:"*const *const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:54});const bt=new Uint8Array([]),dt=new Uint8Array([144,30,16,0]),ht=new Uint8Array([0,0,0,0,0,0,240,63]),gt=new Uint8Array([56,30,16,0]),xe=new Uint8Array([0,0,0,0,0,64,159,64]),St=new Uint8Array([136,30,16,0]),zt=new Uint8Array([0,0,0,0,0,160,118,64]),wt=new Uint8Array([132,30,16,0]),Ot=new Uint8Array([222,30,16,0]),Rt=new Uint8Array([105,110,112,117,116,32,105,109,97,103,101,32,104,101,105,103,104,116,0]);Object.assign(ne,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 2000, comptime defaultValue: comptime_float = 362, comptime description: *const [18:0]u8 = "input image height"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:E}],methods:[],template:{memory:{array:bt},slots:{0:{structure:s,memory:{array:dt},slots:{0:{structure:a,memory:{array:ht},address:1056400}}},1:{structure:s,memory:{array:gt},slots:{0:{structure:a,memory:{array:xe},address:1056312}}},2:{structure:s,memory:{array:St},slots:{0:{structure:a,memory:{array:zt},address:1056392}}},3:{structure:E,memory:{array:wt},slots:{0:{structure:me,memory:{array:Ot},address:1056388,slots:{0:{structure:ie,memory:{array:Rt},address:1056478}}}}}}}},slot:40});Object.assign(K,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 2000, comptime defaultValue: comptime_float = 362, comptime description: *const [18:0]u8 = "input image height"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:39});Object.assign(oe,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:34});const qt=new Uint8Array([]),Vt=new Uint8Array([64,30,16,0]),ke=new Uint8Array([0,0,0,0,0,0,0,0]),At=new Uint8Array([64,30,16,0]);Object.assign(ue,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:qt},slots:{0:{structure:s,memory:{array:Vt},slots:{0:{structure:a,memory:{array:ke},address:1056320}}},1:{structure:s,memory:{array:At},slots:{0:{structure:a,memory:{array:ke},address:1056320}}}}}},slot:58});Object.assign(F,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:57});const Ut=new Uint8Array([]),_t=new Uint8Array([56,30,16,0]),jt=new Uint8Array([56,30,16,0]);Object.assign(le,{...t,type:2,name:"struct{comptime comptime_float = 2000, comptime comptime_float = 2000}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Ut},slots:{0:{structure:s,memory:{array:_t},slots:{0:{structure:a,memory:{array:xe},address:1056312}}},1:{structure:s,memory:{array:jt},slots:{0:{structure:a,memory:{array:xe},address:1056312}}}}}},slot:60});Object.assign(D,{...t,type:11,name:"*const struct{comptime comptime_float = 2000, comptime comptime_float = 2000}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:59});const Pt=new Uint8Array([]),xt=new Uint8Array([48,30,16,0]),He=new Uint8Array([0,0,0,0,0,160,102,64]),kt=new Uint8Array([48,30,16,0]);Object.assign(ce,{...t,type:2,name:"struct{comptime comptime_float = 181, comptime comptime_float = 181}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Pt},slots:{0:{structure:s,memory:{array:xt},slots:{0:{structure:a,memory:{array:He},address:1056304}}},1:{structure:s,memory:{array:kt},slots:{0:{structure:a,memory:{array:He},address:1056304}}}}}},slot:62});Object.assign(T,{...t,type:11,name:"*const struct{comptime comptime_float = 181, comptime comptime_float = 181}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:61});Object.assign(ye,{...t,type:1,name:"[36:0]u8",length:36,byteSize:37,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:65});Object.assign(pe,{...t,type:11,name:"*const [36:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:64});Object.assign(M,{...t,type:11,name:"*const *const [36:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pe}],methods:[],template:null},slot:63});const It=new Uint8Array([]),Ct=new Uint8Array([170,170,170,170]),c=new Uint8Array([]),vt=new Uint8Array([170,170,170,170]),Et=new Uint8Array([170,170,170,170]),Kt=new Uint8Array([128,30,16,0]),Ft=new Uint8Array([185,30,16,0]),Dt=new Uint8Array([104,97,108,102,32,119,105,100,116,104,32,105,109,97,103,101,32,105,110,112,117,116,32,119,105,100,116,104,47,45,104,101,105,103,104,116,0]);Object.assign(fe,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 2000, comptime comptime_float = 2000} = .{2000, 2000}, comptime defaultValue: struct{comptime comptime_float = 181, comptime comptime_float = 181} = .{181, 181}, comptime description: *const [36:0]u8 = "half width image input width/-height"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:oe},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:F},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:D},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:T},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:M}],methods:[],template:{memory:{array:It},slots:{0:{structure:F,memory:{array:Ct},slots:{0:{structure:ue,memory:{array:c},address:-1431655766}}},1:{structure:D,memory:{array:vt},slots:{0:{structure:le,memory:{array:c},address:-1431655766}}},2:{structure:T,memory:{array:Et},slots:{0:{structure:ce,memory:{array:c},address:-1431655766}}},3:{structure:M,memory:{array:Kt},slots:{0:{structure:pe,memory:{array:Ft},address:1056384,slots:{0:{structure:ye,memory:{array:Dt},address:1056441}}}}}}}},slot:42});Object.assign($,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 2000, comptime comptime_float = 2000} = .{2000, 2000}, comptime defaultValue: struct{comptime comptime_float = 181, comptime comptime_float = 181} = .{181, 181}, comptime description: *const [36:0]u8 = "half width image input width/-height"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:41});Object.assign(be,{...t,type:1,name:"[17:0]u8",length:17,byteSize:18,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:68});Object.assign(de,{...t,type:11,name:"*const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:67});Object.assign(B,{...t,type:11,name:"*const *const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:de}],methods:[],template:null},slot:66});const Tt=new Uint8Array([]),Mt=new Uint8Array([120,30,16,0]),$t=new Uint8Array([45,67,28,235,226,54,26,63]),Bt=new Uint8Array([112,30,16,0]),Lt=new Uint8Array([0,0,0,0,0,0,0,64]),Gt=new Uint8Array([104,30,16,0]),Ht=new Uint8Array([226,88,23,183,209,0,224,63]),Jt=new Uint8Array([96,30,16,0]),Nt=new Uint8Array([167,30,16,0]),Qt=new Uint8Array([109,111,118,101,109,101,110,116,32,109,111,109,101,110,116,117,109,0]);Object.assign(he,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0.0001, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 0.5001, comptime description: *const [17:0]u8 = "movement momentum"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:B}],methods:[],template:{memory:{array:Tt},slots:{0:{structure:s,memory:{array:Mt},slots:{0:{structure:a,memory:{array:$t},address:1056376}}},1:{structure:s,memory:{array:Bt},slots:{0:{structure:a,memory:{array:Lt},address:1056368}}},2:{structure:s,memory:{array:Gt},slots:{0:{structure:a,memory:{array:Ht},address:1056360}}},3:{structure:B,memory:{array:Jt},slots:{0:{structure:de,memory:{array:Nt},address:1056352,slots:{0:{structure:be,memory:{array:Qt},address:1056423}}}}}}}},slot:44});Object.assign(L,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.0001, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 0.5001, comptime description: *const [17:0]u8 = "movement momentum"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:he}],methods:[],template:null},slot:43});Object.assign(ge,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:71});Object.assign(Se,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ge}],methods:[],template:null},slot:70});Object.assign(G,{...t,type:11,name:"*const *const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Se}],methods:[],template:null},slot:69});const Wt=new Uint8Array([]),Xt=new Uint8Array([64,30,16,0]),Yt=new Uint8Array([88,30,16,0]),Zt=new Uint8Array([0,0,0,0,0,64,143,64]),es=new Uint8Array([80,30,16,0]),ts=new Uint8Array([0,0,0,0,0,192,114,64]),ss=new Uint8Array([76,30,16,0]),rs=new Uint8Array([152,30,16,0]),as=new Uint8Array([119,114,97,112,32,101,120,112,97,110,115,105,111,110,0]);Object.assign(ze,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 300, comptime description: *const [14:0]u8 = "wrap expansion"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:G}],methods:[],template:{memory:{array:Wt},slots:{0:{structure:s,memory:{array:Xt},slots:{0:{structure:a,memory:{array:ke},address:1056320}}},1:{structure:s,memory:{array:Yt},slots:{0:{structure:a,memory:{array:Zt},address:1056344}}},2:{structure:s,memory:{array:es},slots:{0:{structure:a,memory:{array:ts},address:1056336}}},3:{structure:G,memory:{array:ss},slots:{0:{structure:Se,memory:{array:rs},address:1056332,slots:{0:{structure:ge,memory:{array:as},address:1056408}}}}}}}},slot:46});Object.assign(H,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 300, comptime description: *const [14:0]u8 = "wrap expansion"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ze}],methods:[],template:null},slot:45});const is=new Uint8Array([]),ms=new Uint8Array([170,170,170,170]),ns=new Uint8Array([170,170,170,170]),os=new Uint8Array([170,170,170,170]),us=new Uint8Array([170,170,170,170]);Object.assign(we,{...t,type:2,name:'struct{comptime image_h: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 2000, comptime defaultValue: comptime_float = 362, comptime description: *const [18:0]u8 = "input image height"} = .{.type = f32, .minValue = 1, .maxValue = 2000, .defaultValue = 362, .description = "input image height"}, comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 2000, comptime comptime_float = 2000} = .{2000, 2000}, comptime defaultValue: struct{comptime comptime_float = 181, comptime comptime_float = 181} = .{181, 181}, comptime description: *const [36:0]u8 = "half width image input width/-height"} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{2000, 2000}, .defaultValue = .{181, 181}, .description = "half width image input width/-height"}, comptime tick: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.0001, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 0.5001, comptime description: *const [17:0]u8 = "movement momentum"} = .{.type = f32, .minValue = 0.0001, .maxValue = 2, .defaultValue = 0.5001, .description = "movement momentum"}, comptime spread: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 300, comptime description: *const [14:0]u8 = "wrap expansion"} = .{.type = f32, .minValue = 0, .maxValue = 1000, .defaultValue = 300, .description = "wrap expansion"}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"image_h",structure:K},{...e,type:8,isRequired:!1,slot:1,name:"center",structure:$},{...e,type:8,isRequired:!1,slot:2,name:"tick",structure:L},{...e,type:8,isRequired:!1,slot:3,name:"spread",structure:H}],methods:[],template:{memory:{array:is},slots:{0:{structure:K,memory:{array:ms},slots:{0:{structure:ne,memory:{array:c},address:-1431655766}}},1:{structure:$,memory:{array:ns},slots:{0:{structure:fe,memory:{array:c},address:-1431655766}}},2:{structure:L,memory:{array:os},slots:{0:{structure:he,memory:{array:c},address:-1431655766}}},3:{structure:H,memory:{array:us},slots:{0:{structure:ze,memory:{array:c},address:-1431655766}}}}}},slot:15});Object.assign(J,{...t,type:11,name:'*struct{comptime image_h: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 2000, comptime defaultValue: comptime_float = 362, comptime description: *const [18:0]u8 = "input image height"} = .{.type = f32, .minValue = 1, .maxValue = 2000, .defaultValue = 362, .description = "input image height"}, comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 2000, comptime comptime_float = 2000} = .{2000, 2000}, comptime defaultValue: struct{comptime comptime_float = 181, comptime comptime_float = 181} = .{181, 181}, comptime description: *const [36:0]u8 = "half width image input width/-height"} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{2000, 2000}, .defaultValue = .{181, 181}, .description = "half width image input width/-height"}, comptime tick: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.0001, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 0.5001, comptime description: *const [17:0]u8 = "movement momentum"} = .{.type = f32, .minValue = 0.0001, .maxValue = 2, .defaultValue = 0.5001, .description = "movement momentum"}, comptime spread: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 300, comptime description: *const [14:0]u8 = "wrap expansion"} = .{.type = f32, .minValue = 0, .maxValue = 1000, .defaultValue = 300, .description = "wrap expansion"}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:we}],methods:[],template:null},slot:14});Object.assign(N,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:f}],methods:[],template:null},slot:72});const ls=new Uint8Array([]),cs=new Uint8Array([72,30,16,0]),ys=new Uint8Array([4,0,0,0]);Object.assign(V,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:N}],methods:[],template:{memory:{array:ls},slots:{0:{structure:N,memory:{array:cs},slots:{0:{structure:f,memory:{array:ys},address:1056328}}}}}},slot:48});Object.assign(z,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:V}],methods:[],template:null},slot:47});const ps=new Uint8Array([]),fs=new Uint8Array([170,170,170,170]);Object.assign(Oe,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:z}],methods:[],template:{memory:{array:ps},slots:{0:{structure:z,memory:{array:fs},slots:{0:{structure:V,memory:{array:c},address:-1431655766}}}}}},slot:17});Object.assign(Q,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Oe}],methods:[],template:null},slot:16});const bs=new Uint8Array([]),ds=new Uint8Array([170,170,170,170]);Object.assign(Re,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:z}],methods:[],template:{memory:{array:bs},slots:{0:{structure:z,memory:{array:ds},slots:{0:{structure:V,memory:{array:c},address:-1431655766}}}}}},slot:19});Object.assign(W,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Re}],methods:[],template:null},slot:18});const hs=new Uint8Array([]),gs=new Uint8Array([]),Ss=new Uint8Array([44,251,15,0]),zs=new Uint8Array([187,62,16,0]),ws=new Uint8Array([119,97,114,112,32,102,105,108,116,101,114,0]),Os=new Uint8Array([108,251,15,0]),Rs=new Uint8Array([170,62,16,0]),qs=new Uint8Array([102,114,97,110,107,32,114,101,105,116,98,101,114,103,101,114,0]),Vs=new Uint8Array([172,251,15,0]),As=new Uint8Array([1,0,0,0]),Us=new Uint8Array([4,252,15,0]),_s=new Uint8Array([138,62,16,0]),js=new Uint8Array([119,97,114,112,115,32,105,109,97,103,101,32,118,105,99,101,32,118,101,114,115,97,32,97,110,100,32,98,97,99,107,0]),Ps=new Uint8Array([170,170,170,170]),xs=new Uint8Array([170,170,170,170]),ks=new Uint8Array([170,170,170,170]);Object.assign(Ce,{...t,type:2,name:"warp.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:hs}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:I},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:C},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:h},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:v},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:J},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:Q},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:W}],methods:[],template:{memory:{array:gs},slots:{0:{structure:I,memory:{array:Ss},slots:{0:{structure:ee,memory:{array:zs},slots:{0:{structure:Z,memory:{array:ws},address:1064635}}}}},1:{structure:C,memory:{array:Os},slots:{0:{structure:se,memory:{array:Rs},slots:{0:{structure:te,memory:{array:qs},address:1064618}}}}},2:{structure:h,memory:{array:Vs},slots:{0:{structure:f,memory:{array:As}}}},3:{structure:v,memory:{array:Us},slots:{0:{structure:ae,memory:{array:_s},slots:{0:{structure:re,memory:{array:js},address:1064586}}}}},4:{structure:J,memory:{array:Ps},slots:{0:{structure:we,memory:{array:c},address:-1431655766}}},5:{structure:Q,memory:{array:xs},slots:{0:{structure:Oe,memory:{array:c},address:-1431655766}}},6:{structure:W,memory:{array:ks},slots:{0:{structure:Re,memory:{array:c},address:-1431655766}}}}}},slot:1});Object.assign(w,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:24});Object.assign(qe,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(Ve,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:qe}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const Is=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Ae,{...t,type:9,name:"warp.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:f},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:f}],methods:[],template:{memory:{array:Is}}},slot:26});Object.assign(R,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:R}],methods:[],template:null},slot:27});Object.assign(q,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:28});Object.assign(Ue,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:49});const Cs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),vs=new Uint8Array([]),Es=new Uint8Array([8,250,15,0]),Ks=new Uint8Array([4,0,0,0]);Object.assign(X,{...t,type:2,name:"warp.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Ve},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Ae},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:R},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:q}],methods:[],template:{memory:{array:Cs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:Ue},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:vs},slots:{0:{structure:h,memory:{array:Es},slots:{0:{structure:f,memory:{array:Ks}}}}}}},slot:21});const Fs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ds=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ts=new Uint8Array([0,0,0,0,0,0,0,0]),$e=new Uint8Array([]);Object.assign(A,{...t,type:2,name:"warp.KernelInput(u8,warp.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:X}],methods:[],template:{memory:{array:Fs},slots:{0:{structure:X,memory:{array:Ds},slots:{0:{structure:Ve,memory:{array:Ts},slots:{0:{structure:qe,memory:{array:$e}}}}}}}}},slot:20});Object.assign(_e,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(je,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:_e}],methods:[],template:null},slot:31});const Ms=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),$s=new Uint8Array([]),Bs=new Uint8Array([8,250,15,0]),Ls=new Uint8Array([4,0,0,0]);Object.assign(Y,{...t,type:2,name:"warp.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:je},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Ae},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:R},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:q}],methods:[],template:{memory:{array:Ms}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:Ue},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:$s},slots:{0:{structure:h,memory:{array:Bs},slots:{0:{structure:f,memory:{array:Ls}}}}}}},slot:30});const Gs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Hs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Js=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(U,{...t,type:2,name:"warp.KernelOutput(u8,warp.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:Y}],methods:[],template:{memory:{array:Gs},slots:{0:{structure:Y,memory:{array:Hs},slots:{0:{structure:je,memory:{array:Js},slots:{0:{structure:_e,memory:{array:$e}}}}}}}}},slot:29});const Ns=new Uint8Array([0,0,53,67,0,0,53,67,0,0,181,67,142,6,0,63,0,0,150,67,0,0,0,0]);Object.assign(_,{...t,type:2,name:"warp.KernelParameters(warp.kernel)",length:1,byteSize:24,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:0,name:"image_h",structure:y},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:1,name:"center",structure:oe},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"tick",structure:y},{...e,type:4,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:3,name:"spread",structure:y}],methods:[],template:{memory:{array:Ns}}},slot:32});Object.assign(ve,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(warp.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:50});Object.assign(Ee,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(warp.createOutput)).Fn.return_type.?).ErrorUnion.error_set!warp.KernelOutput(u8,warp.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ve}],methods:[],template:null},slot:37});Object.assign(Ke,{...t,type:3,name:"createOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:2,name:"2",structure:A},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:3,name:"3",structure:_},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Ee}],methods:[],template:null},slot:35});Object.assign(Fe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(warp.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:51});Object.assign(De,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(warp.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!warp.KernelOutput(u8,warp.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Fe}],methods:[],template:null},slot:38});Object.assign(Te,{...t,type:3,name:"createPartialOutput",length:1,byteSize:96,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:320,bitSize:192,byteSize:24,slot:4,name:"4",structure:A},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:5,name:"5",structure:_},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:6,name:"retval",structure:De}],methods:[],template:null},slot:36});const Qs={argStruct:Ke,thunk:1,name:"createOutput"},Ws={argStruct:Te,thunk:6,name:"createPartialOutput"};Object.assign(Me,{...t,type:2,name:"warp",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:$e}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:Ce},{...e,type:7,isRequired:!1,name:"Input",structure:A},{...e,type:7,isRequired:!1,name:"Output",structure:U},{...e,type:7,isRequired:!1,name:"Parameters",structure:_}],methods:[Qs,Ws],template:null},slot:0});const Xs=[p,Z,ee,I,te,se,C,f,h,re,ae,v,y,a,s,ie,me,E,ne,K,oe,ue,F,le,D,ce,T,ye,pe,M,fe,$,be,de,B,he,L,ge,Se,G,ze,H,we,J,N,V,z,Oe,Q,Re,W,Ce,w,qe,Ve,l,Ae,R,q,Ue,X,A,_e,je,Y,U,_,ve,Ee,Ke,Fe,De,Te,Me],Ys=pt(Xs),Zs=Me.constructor,er=(async()=>{const n=new URL("warp-82598709.wasm",import.meta.url).href;return fetch(n)})();ft(er,{...Ys,writeBack:!0});const{createOutput:or,createPartialOutput:tr,kernel:Ie,Input:sr,Output:ur,Parameters:lr}=Zs;function rr(n,u,i,r,m={},g={}){if(Array.isArray(m)){const d=m;m={};for(const[b,S]of Object.keys(Ie.inputImages).entries())m[S]=d[b]}const j=new sr(void 0),P=Object.keys(Ie.inputImages),o=[];let O;for(const d of P){let b=m[d];if(b||(P.length===1&&["data","width","height"].every(S=>!!m[S])?b=m:o.push(d)),j[d]=b,O){if(b.colorSpace!==O)throw new Error(`Input images must all use the same color space: ${O}`)}else O=b.colorSpace}if(o.length>0)throw new Error(`Missing input image${o.length>1?"s":""}: ${o.join(", ")}`);const Pe=tr(n,u,i,r,j,g),Be=d=>{const b=Object.keys(d),S={};for(const Le of b){const{data:{typedArray:x},width:Ge,height:Ne}=d[Le];let k;if(typeof ImageData=="function"){const Qe=new Uint8ClampedArray(x.buffer,x.byteOffset,x.byteLength);k=new ImageData(Qe,Ge,r,{colorSpace:O})}else k={data:x,width:Ge,height:Ne};if(b.length===1)return k;S[Le]=k}return S};return Pe[Symbol.toStringTag]==="Promise"?Pe.then(Be):Be(Pe)}function ar(){const n={};for(let[u,i]of Object.entries(Ie)){if(u==="parameters"){const r={};for(const[m,g]of Object.entries(i)){const j=r[m]={};for(let[P,o]of Object.entries(g))typeof o=="object"?"string"in o?o=o.string:o=Je(o):typeof o=="function"&&(o=ir(o.name)),j[P]=o}i=r}else typeof i=="object"&&("string"in i?i=i.string:i=i.valueOf());n[u]=i}return n}function Je(n){const u=[];for(let[i,r]of Object.entries(n))typeof r=="object"&&(r=Je(r)),u[i]=r;return u}function ir(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[u,i,...r]=n.data;mr(u,r).then(([m,g])=>{postMessage([u,i,m],{transfer:g})}).catch(m=>{postMessage(["error",i,m])})};async function mr(n,u){switch(n){case"getKernelInfo":return[ar(...u)];case"createPartialImageData":const r=await rr(...u),m=[];if("data"in r&&"width"in r&&"height"in r)m.push(r.data.buffer);else for(const g of Object.entries(r))m.push(r.data.buffer);return[r,m];default:throw new Error(`Unknown function: ${n}`)}}
