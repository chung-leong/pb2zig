import{u as ke,a as Ie,b as xe,c as ve,d as Ee,e as _e,f as Ke,g as De,h as Fe,i as Me,j as Te,k as $e,l as Be,m as He,o as Le,n as Ge,p as Je,q as Ne}from"./index-d64bc850.js";ke();Ie();xe();ve();Ee();_e();Ke();De();Fe();Me();Te();$e();Be();He();Le();Ge();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},f={},Q={},W={},K={},U={},q={},g={},m={},i={},X={},Y={},D={},p={},c={},r={},j={},P={},z={},Z={},F={},ee={},M={},te={},T={},se={},re={},$={},ae={},B={},ne={},H={},V={},O={},ie={},L={},ue={},G={},de={},w={},oe={},me={},y={},le={},R={},ye={},J={},C={},ce={},be={},N={},k={},I={},Se={},he={},ge={},ze={},Oe={},we={},Ae={};Object.assign(f,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:5});Object.assign(Q,{...t,type:1,name:"[8:0]u8",length:8,byteSize:9,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:4});Object.assign(W,{...t,type:11,name:"*const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:3});Object.assign(K,{...t,type:11,name:"*const *const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:2});Object.assign(U,{...t,type:1,name:"[16:0]u8",length:16,byteSize:17,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:8});Object.assign(q,{...t,type:11,name:"*const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:U}],methods:[],template:null},slot:7});Object.assign(g,{...t,type:11,name:"*const *const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:6});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:10});Object.assign(i,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:9});Object.assign(X,{...t,type:1,name:"[36:0]u8",length:36,byteSize:37,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:13});Object.assign(Y,{...t,type:11,name:"*const [36:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:12});Object.assign(D,{...t,type:11,name:"*const *const [36:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:11});Object.assign(p,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:32});Object.assign(c,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:c}],methods:[],template:null},slot:51});Object.assign(r,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:50});Object.assign(j,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:54});Object.assign(P,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:j}],methods:[],template:null},slot:53});Object.assign(z,{...t,type:11,name:"*const *const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:P}],methods:[],template:null},slot:52});const Qe=new Uint8Array,We=new Uint8Array([112,251,15,0]),Xe=new Uint8Array([0,0,0,0,0,192,102,64]),Ye=new Uint8Array([16,252,15,0]),Ze=new Uint8Array([0,0,0,0,0,32,111,64]),et=new Uint8Array([8,250,15,0]),tt=new Uint8Array([20,174,71,225,122,148,105,64]),st=new Uint8Array([40,250,15,0]),rt=new Uint8Array([64,33,16,0]),at=new Uint8Array([99,101,110,116,101,114,32,112,111,105,110,116,32,120,0]);Object.assign(Z,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:p},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:z}],methods:[],template:{memory:{array:Qe},slots:{0:{structure:r,memory:{array:We},slots:{0:{structure:c,memory:{array:Xe}}}},1:{structure:r,memory:{array:Ye},slots:{0:{structure:c,memory:{array:Ze}}}},2:{structure:r,memory:{array:et},slots:{0:{structure:c,memory:{array:tt}}}},3:{structure:z,memory:{array:st},slots:{0:{structure:P,memory:{array:rt},slots:{0:{structure:j,memory:{array:at}}}}}}}}},slot:38});Object.assign(F,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:37});const nt=new Uint8Array,it=new Uint8Array([112,251,15,0]),ut=new Uint8Array([0,0,0,0,0,192,99,64]),ot=new Uint8Array([16,252,15,0]),mt=new Uint8Array([0,0,0,0,0,32,111,64]),lt=new Uint8Array([8,250,15,0]),yt=new Uint8Array([133,235,81,184,30,197,102,64]),ct=new Uint8Array([40,250,15,0]),bt=new Uint8Array([49,33,16,0]),pt=new Uint8Array([99,101,110,116,101,114,32,112,111,105,110,116,32,121,0]);Object.assign(ee,{...t,type:2,name:"Struct0012",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:p},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:z}],methods:[],template:{memory:{array:nt},slots:{0:{structure:r,memory:{array:it},slots:{0:{structure:c,memory:{array:ut}}}},1:{structure:r,memory:{array:ot},slots:{0:{structure:c,memory:{array:mt}}}},2:{structure:r,memory:{array:lt},slots:{0:{structure:c,memory:{array:yt}}}},3:{structure:z,memory:{array:ct},slots:{0:{structure:P,memory:{array:bt},slots:{0:{structure:j,memory:{array:pt}}}}}}}}},slot:40});Object.assign(M,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:39});const ft=new Uint8Array,dt=new Uint8Array([88,251,15,0]),St=new Uint8Array([0,0,0,0,0,0,240,63]),ht=new Uint8Array([208,251,15,0]),gt=new Uint8Array([0,0,0,0,0,160,159,64]),zt=new Uint8Array([200,249,15,0]),Ot=new Uint8Array([0,0,0,0,0,48,116,64]),wt=new Uint8Array([224,249,15,0]),At=new Uint8Array([32,33,16,0]),Rt=new Uint8Array([115,101,116,32,105,109,97,103,101,32,104,101,105,103,104,116,0]);Object.assign(te,{...t,type:2,name:"Struct0013",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:p},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:g}],methods:[],template:{memory:{array:ft},slots:{0:{structure:r,memory:{array:dt},slots:{0:{structure:c,memory:{array:St}}}},1:{structure:r,memory:{array:ht},slots:{0:{structure:c,memory:{array:gt}}}},2:{structure:r,memory:{array:zt},slots:{0:{structure:c,memory:{array:Ot}}}},3:{structure:g,memory:{array:wt},slots:{0:{structure:q,memory:{array:At},slots:{0:{structure:U,memory:{array:Rt}}}}}}}}},slot:42});Object.assign(T,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:41});Object.assign(se,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:57});Object.assign(re,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:56});Object.assign($,{...t,type:11,name:"*const *const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:55});const Ut=new Uint8Array,qt=new Uint8Array([248,250,15,0]),jt=new Uint8Array([1,0,0,0]),Pt=new Uint8Array([28,251,15,0]),Vt=new Uint8Array([3,0,0,0]),Ct=new Uint8Array([64,251,15,0]),kt=new Uint8Array([2,0,0,0]),It=new Uint8Array([100,251,15,0]),xt=new Uint8Array([10,33,16,0]),vt=new Uint8Array([99,97,108,99,117,108,97,116,101,32,115,116,114,101,116,99,104,40,101,115,41,0]);Object.assign(ae,{...t,type:2,name:"Struct0014",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:m},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:i},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:i},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:i},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:$}],methods:[],template:{memory:{array:Ut},slots:{0:{structure:i,memory:{array:qt},slots:{0:{structure:m,memory:{array:jt}}}},1:{structure:i,memory:{array:Pt},slots:{0:{structure:m,memory:{array:Vt}}}},2:{structure:i,memory:{array:Ct},slots:{0:{structure:m,memory:{array:kt}}}},3:{structure:$,memory:{array:It},slots:{0:{structure:re,memory:{array:xt},slots:{0:{structure:se,memory:{array:vt}}}}}}}}},slot:44});Object.assign(B,{...t,type:11,name:"Struct0009",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:43});const Et=new Uint8Array,_t=new Uint8Array([170,170,170,170]),Kt=new Uint8Array,Dt=new Uint8Array([170,170,170,170]),Ft=new Uint8Array,Mt=new Uint8Array([170,170,170,170]),Tt=new Uint8Array,$t=new Uint8Array([170,170,170,170]),Bt=new Uint8Array;Object.assign(ne,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"center_x",structure:F},{...e,type:8,isRequired:!1,slot:1,name:"center_y",structure:M},{...e,type:8,isRequired:!1,slot:2,name:"imageHeight",structure:T},{...e,type:8,isRequired:!1,slot:3,name:"stretch",structure:B}],methods:[],template:{memory:{array:Et},slots:{0:{structure:F,memory:{array:_t},slots:{0:{structure:Z,memory:{array:Kt}}}},1:{structure:M,memory:{array:Dt},slots:{0:{structure:ee,memory:{array:Ft}}}},2:{structure:T,memory:{array:Mt},slots:{0:{structure:te,memory:{array:Tt}}}},3:{structure:B,memory:{array:$t},slots:{0:{structure:ae,memory:{array:Bt}}}}}}},slot:15});Object.assign(H,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:14});const Ht=new Uint8Array,Lt=new Uint8Array([32,252,15,0]),Gt=new Uint8Array([4,0,0,0]);Object.assign(V,{...t,type:2,name:"Struct0015",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:i}],methods:[],template:{memory:{array:Ht},slots:{0:{structure:i,memory:{array:Lt},slots:{0:{structure:m,memory:{array:Gt}}}}}}},slot:46});Object.assign(O,{...t,type:11,name:"Struct0010",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:V}],methods:[],template:null},slot:45});const Jt=new Uint8Array,Nt=new Uint8Array([170,170,170,170]),Qt=new Uint8Array;Object.assign(ie,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:O}],methods:[],template:{memory:{array:Jt},slots:{0:{structure:O,memory:{array:Nt},slots:{0:{structure:V,memory:{array:Qt}}}}}}},slot:17});Object.assign(L,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:16});const Wt=new Uint8Array,Xt=new Uint8Array([170,170,170,170]),Yt=new Uint8Array;Object.assign(ue,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"pxl",structure:O}],methods:[],template:{memory:{array:Wt},slots:{0:{structure:O,memory:{array:Xt},slots:{0:{structure:V,memory:{array:Yt}}}}}}},slot:19});Object.assign(G,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:18});const Zt=new Uint8Array,es=new Uint8Array,ts=new Uint8Array([244,36,16,0]),ss=new Uint8Array([173,36,16,0]),rs=new Uint8Array([100,101,102,111,114,109,101,114,0]),as=new Uint8Array([240,36,16,0]),ns=new Uint8Array([145,36,16,0]),is=new Uint8Array([70,114,97,110,107,32,82,101,105,116,98,101,114,103,101,114,0]),us=new Uint8Array([236,36,16,0]),os=new Uint8Array([1,0,0,0]),ms=new Uint8Array([232,36,16,0]),ls=new Uint8Array([91,36,16,0]),ys=new Uint8Array([100,101,102,111,114,109,115,32,119,104,97,116,101,118,101,114,32,103,101,116,239,191,189,115,32,105,110,32,116,104,101,32,119,97,121,46,0]),cs=new Uint8Array([170,170,170,170]),bs=new Uint8Array,ps=new Uint8Array([170,170,170,170]),fs=new Uint8Array,ds=new Uint8Array([170,170,170,170]),Ss=new Uint8Array;Object.assign(de,{...t,type:2,name:"deformer.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Zt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:K},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:g},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:i},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:D},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:H},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:L},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:G}],methods:[],template:{memory:{array:es},slots:{0:{structure:K,memory:{array:ts},slots:{0:{structure:W,memory:{array:ss},slots:{0:{structure:Q,memory:{array:rs}}}}}},1:{structure:g,memory:{array:as},slots:{0:{structure:q,memory:{array:ns},slots:{0:{structure:U,memory:{array:is}}}}}},2:{structure:i,memory:{array:us},slots:{0:{structure:m,memory:{array:os}}}},3:{structure:D,memory:{array:ms},slots:{0:{structure:Y,memory:{array:ls},slots:{0:{structure:X,memory:{array:ys}}}}}},4:{structure:H,memory:{array:cs},slots:{0:{structure:ne,memory:{array:bs}}}},5:{structure:L,memory:{array:ps},slots:{0:{structure:ie,memory:{array:fs}}}},6:{structure:G,memory:{array:ds},slots:{0:{structure:ue,memory:{array:Ss}}}}}}},slot:1});Object.assign(w,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:24});Object.assign(oe,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(me,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:oe}],methods:[],template:null},slot:22});Object.assign(y,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:25});const hs=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(le,{...t,type:9,name:"deformer.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:hs}}},slot:26});Object.assign(R,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:27});Object.assign(ye,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:47});const gs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),zs=new Uint8Array,Os=new Uint8Array([48,36,16,0]),ws=new Uint8Array([4,0,0,0]);Object.assign(J,{...t,type:2,name:"deformer.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:me},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:y},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:y},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:le},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:R}],methods:[],template:{memory:{array:gs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:ye},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:i}],methods:[],template:{memory:{array:zs},slots:{0:{structure:i,memory:{array:Os},slots:{0:{structure:m,memory:{array:ws}}}}}}},slot:21});const As=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Rs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),je=new Uint8Array([0,0,0,0,0,0,0,0]),Us=new Uint8Array;Object.assign(C,{...t,type:2,name:"deformer.KernelInput(u8,deformer.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:J}],methods:[],template:{memory:{array:As},slots:{0:{structure:J,memory:{array:Rs},slots:{0:{structure:me,memory:{array:je},address:1047168,slots:{0:{structure:oe,memory:{array:Us},address:0}}}}}}}},slot:20});Object.assign(ce,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(be,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ce}],methods:[],template:null},slot:30});const qs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),js=new Uint8Array,Ps=new Uint8Array([48,36,16,0]),Vs=new Uint8Array([4,0,0,0]);Object.assign(N,{...t,type:2,name:"deformer.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:be},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:y},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:y},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:le},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:R}],methods:[],template:{memory:{array:qs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:ye},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:i}],methods:[],template:{memory:{array:js},slots:{0:{structure:i,memory:{array:Ps},slots:{0:{structure:m,memory:{array:Vs}}}}}}},slot:29});const Cs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ks=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Is=new Uint8Array;Object.assign(k,{...t,type:2,name:"deformer.KernelOutput(u8,deformer.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"pxl",structure:N}],methods:[],template:{memory:{array:Cs},slots:{0:{structure:N,memory:{array:ks},slots:{0:{structure:be,memory:{array:je},address:1047168,slots:{0:{structure:ce,memory:{array:Is},address:0}}}}}}}},slot:28});const xs=new Uint8Array([215,163,76,67,246,40,54,67,0,128,161,67,2,0,0,0]);Object.assign(I,{...t,type:2,name:"deformer.KernelParameters(deformer.kernel)",length:1,byteSize:16,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"center_x",structure:p},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"center_y",structure:p},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"imageHeight",structure:p},{...e,type:2,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"stretch",structure:m}],methods:[],template:{memory:{array:xs}}},slot:31});Object.assign(Se,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(deformer.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(he,{...t,type:7,name:"ErrorSet0000!deformer.KernelOutput(u8,deformer.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Se}],methods:[],template:null},slot:35});Object.assign(ge,{...t,type:3,name:"createOutput",length:1,byteSize:76,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:y},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:y},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:C},{...e,type:6,bitOffset:256,bitSize:128,byteSize:16,slot:3,name:"3",structure:I},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:he}],methods:[],template:null},slot:33});Object.assign(ze,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(deformer.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:49});Object.assign(Oe,{...t,type:7,name:"ErrorSet0001!deformer.KernelOutput(u8,deformer.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ze}],methods:[],template:null},slot:36});Object.assign(we,{...t,type:3,name:"createPartialOutput",length:1,byteSize:84,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:y},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:y},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:y},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:y},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:C},{...e,type:6,bitOffset:320,bitSize:128,byteSize:16,slot:5,name:"5",structure:I},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Oe}],methods:[],template:null},slot:34});const vs=new Uint8Array,Es={argStruct:ge,thunk:4,name:"createOutput"},_s={argStruct:we,thunk:6,name:"createPartialOutput"};Object.assign(Ae,{...t,type:2,name:"deformer",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:vs}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:de},{...e,type:7,isRequired:!1,name:"Input",structure:C},{...e,type:7,isRequired:!1,name:"Output",structure:k},{...e,type:7,isRequired:!1,name:"Parameters",structure:I}],methods:[Es,_s],template:null},slot:0});const Ks=[f,Q,W,K,U,q,g,m,i,X,Y,D,p,c,r,j,P,z,Z,F,ee,M,te,T,se,re,$,ae,B,ne,H,V,O,ie,L,ue,G,de,w,oe,me,y,le,R,ye,J,C,ce,be,N,k,I,Se,he,ge,ze,Oe,we,Ae],Ds=Je(Ks),Fs=Ae.constructor,Ms=(async()=>{const u=new URL("deformer-5dc0cdcc.wasm",import.meta.url).href;return fetch(u)})();Ne(Ms,{...Ds,writeBack:!0});const{createOutput:Ns,createPartialOutput:Ts,kernel:fe,Input:$s,Output:Qs,Parameters:Ws}=Fs;function Bs(u,l,a,s,n={},S={}){if(Array.isArray(n)){const d=n;n={};for(const[b,h]of Object.keys(fe.inputImages).entries())n[h]=d[b]}const x=new $s(void 0),v=Object.keys(fe.inputImages),o=[];let A;for(const d of v){let b=n[d];if(b||(v.length===1&&["data","width","height"].every(h=>!!n[h])?b=n:o.push(d)),x[d]=b,A){if(b.colorSpace!==A)throw new Error(`Input images must all use the same color space: ${A}`)}else A=b.colorSpace}if(o.length>0)throw new Error(`Missing input image${o.length>1?"s":""}: ${o.join(", ")}`);const pe=Ts(u,l,a,s,x,S),Re=d=>{const b=Object.keys(d),h={};for(const Ue of b){const{data:{typedArray:E},width:qe,height:Ve}=d[Ue];let _;if(typeof ImageData=="function"){const Ce=new Uint8ClampedArray(E.buffer,E.byteOffset,E.byteLength);_=new ImageData(Ce,qe,s,{colorSpace:A})}else _={data:E,width:qe,height:Ve};if(b.length===1)return _;h[Ue]=_}return h};return pe[Symbol.toStringTag]==="Promise"?pe.then(Re):Re(pe)}function Hs(){const u={};for(let[l,a]of Object.entries(fe)){if(l==="parameters"){const s={};for(const[n,S]of Object.entries(a)){const x=s[n]={};for(let[v,o]of Object.entries(S))typeof o=="object"?"string"in o?o=o.string:o=Pe(o):typeof o=="function"&&(o=Ls(o.name)),x[v]=o}a=s}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());u[l]=a}return u}function Pe(u){const l=[];for(let[a,s]of Object.entries(u))typeof s=="object"&&(s=Pe(s)),l[a]=s;return l}function Ls(u){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[u]}onmessage=u=>{const[l,a,...s]=u.data;Gs(l,s).then(([n,S])=>{postMessage([l,a,n],{transfer:S})}).catch(n=>{postMessage(["error",a,n])})};async function Gs(u,l){switch(u){case"getKernelInfo":return[Hs(...l)];case"createPartialImageData":const s=await Bs(...l),n=[];if("data"in s&&"width"in s&&"height"in s)n.push(s.data.buffer);else for(const S of Object.entries(s))n.push(s.data.buffer);return[s,n];default:throw new Error(`Unknown function: ${u}`)}}
