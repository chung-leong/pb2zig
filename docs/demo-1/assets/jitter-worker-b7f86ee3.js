import{u as Ie,a as ke,b as xe,d as Ce,c as ve,e as Ee,f as Ke,g as Fe,h as De,i as Te,j as Me,k as $e,l as Be,m as Le,n as Ge,o as He,p as Je,q as Ne,r as Qe}from"./index-9f315e7a.js";Ie();ke();xe();Ce();ve();Ee();Ke();Fe();De();Te();Me();$e();Be();Le();Ge();He();Je();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},d={},J={},N={},v={},Q={},W={},E={},c={},f={},X={},Y={},K={},h={},Z={},l={},i={},q={},z={},ee={},F={},te={},D={},se={},T={},re={},M={},$={},U={},O={},ae={},B={},ie={},L={},be={},j={},ne={},me={},u={},oe={},w={},A={},ue={},G={},V={},le={},ce={},H={},_={},P={},fe={},de={},he={},Se={},ge={},ze={},Oe={};Object.assign(d,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:5});Object.assign(J,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:4});Object.assign(N,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:3});Object.assign(v,{...t,type:11,name:"**const [21:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:2});Object.assign(Q,{...t,type:1,name:"[9:0]u8",length:9,byteSize:10,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:8});Object.assign(W,{...t,type:11,name:"*const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:7});Object.assign(E,{...t,type:11,name:"**const [9:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:6});Object.assign(c,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:10});Object.assign(f,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:9});Object.assign(X,{...t,type:1,name:"[6:0]u8",length:6,byteSize:7,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:13});Object.assign(Y,{...t,type:11,name:"*const [6:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:12});Object.assign(K,{...t,type:11,name:"**const [6:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:11});Object.assign(h,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:34});Object.assign(Z,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:33});Object.assign(l,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:l}],methods:[],template:null},slot:53});Object.assign(i,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:l}],methods:[],template:null},slot:52});const We=new Uint8Array([]),Xe=new Uint8Array([88,30,16,0]),Ae=new Uint8Array([0,0,0,0,0,0,0,0]),Ye=new Uint8Array([88,30,16,0]);Object.assign(q,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:i},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:i}],methods:[],template:{memory:{array:We},slots:{0:{structure:i,memory:{array:Xe},slots:{0:{structure:l,memory:{array:Ae},address:1056344}}},1:{structure:i,memory:{array:Ye},slots:{0:{structure:l,memory:{array:Ae},address:1056344}}}}}},slot:49});Object.assign(z,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:48});const Ze=new Uint8Array([]),et=new Uint8Array([80,30,16,0]),Ue=new Uint8Array([0,0,0,0,0,0,176,64]),tt=new Uint8Array([80,30,16,0]);Object.assign(ee,{...t,type:2,name:"struct{comptime comptime_float = 4096, comptime comptime_float = 4096}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:i},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:i}],methods:[],template:{memory:{array:Ze},slots:{0:{structure:i,memory:{array:et},slots:{0:{structure:l,memory:{array:Ue},address:1056336}}},1:{structure:i,memory:{array:tt},slots:{0:{structure:l,memory:{array:Ue},address:1056336}}}}}},slot:51});Object.assign(F,{...t,type:11,name:"*const struct{comptime comptime_float = 4096, comptime comptime_float = 4096}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:50});const st=new Uint8Array([]),rt=new Uint8Array([170,170,170,170]),p=new Uint8Array([]),at=new Uint8Array([170,170,170,170]),it=new Uint8Array([170,170,170,170]);Object.assign(te,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 4096, comptime comptime_float = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:Z},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:z},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:F},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:z}],methods:[],template:{memory:{array:st},slots:{0:{structure:z,memory:{array:rt},slots:{0:{structure:q,memory:{array:p},address:-1431655766}}},1:{structure:F,memory:{array:at},slots:{0:{structure:ee,memory:{array:p},address:-1431655766}}},2:{structure:z,memory:{array:it},slots:{0:{structure:q,memory:{array:p},address:-1431655766}}}}}},slot:40});Object.assign(D,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 4096, comptime comptime_float = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:39});const nt=new Uint8Array([]),mt=new Uint8Array([120,30,16,0]),ot=new Uint8Array([123,20,174,71,225,122,132,63]),ut=new Uint8Array([112,30,16,0]),lt=new Uint8Array([0,0,0,0,0,0,0,64]),ct=new Uint8Array([104,30,16,0]),yt=new Uint8Array([154,153,153,153,153,153,185,63]);Object.assign(se,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 0.1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:i},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:i},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:i}],methods:[],template:{memory:{array:nt},slots:{0:{structure:i,memory:{array:mt},slots:{0:{structure:l,memory:{array:ot},address:1056376}}},1:{structure:i,memory:{array:ut},slots:{0:{structure:l,memory:{array:lt},address:1056368}}},2:{structure:i,memory:{array:ct},slots:{0:{structure:l,memory:{array:yt},address:1056360}}}}}},slot:42});Object.assign(T,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 0.1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:41});const pt=new Uint8Array([]),bt=new Uint8Array([170,170,170,170]),ft=new Uint8Array([170,170,170,170]);Object.assign(re,{...t,type:2,name:"struct{comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 4096, comptime comptime_float = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{4096, 4096}, .defaultValue = .{0, 0}}, comptime amplitude: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 0.1} = .{.type = f32, .minValue = 0.01, .maxValue = 2, .defaultValue = 0.1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"center",structure:D},{...e,type:8,isRequired:!1,slot:1,name:"amplitude",structure:T}],methods:[],template:{memory:{array:pt},slots:{0:{structure:D,memory:{array:bt},slots:{0:{structure:te,memory:{array:p},address:-1431655766}}},1:{structure:T,memory:{array:ft},slots:{0:{structure:se,memory:{array:p},address:-1431655766}}}}}},slot:15});Object.assign(M,{...t,type:11,name:"*struct{comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 4096, comptime comptime_float = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{4096, 4096}, .defaultValue = .{0, 0}}, comptime amplitude: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 0.1} = .{.type = f32, .minValue = 0.01, .maxValue = 2, .defaultValue = 0.1}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:14});Object.assign($,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:54});const dt=new Uint8Array([]),ht=new Uint8Array([96,30,16,0]),St=new Uint8Array([4,0,0,0]);Object.assign(U,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:$}],methods:[],template:{memory:{array:dt},slots:{0:{structure:$,memory:{array:ht},slots:{0:{structure:c,memory:{array:St},address:1056352}}}}}},slot:44});Object.assign(O,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:U}],methods:[],template:null},slot:43});const gt=new Uint8Array([]),zt=new Uint8Array([170,170,170,170]);Object.assign(ae,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:O}],methods:[],template:{memory:{array:gt},slots:{0:{structure:O,memory:{array:zt},slots:{0:{structure:U,memory:{array:p},address:-1431655766}}}}}},slot:17});Object.assign(B,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:16});const Ot=new Uint8Array([]),jt=new Uint8Array([170,170,170,170]);Object.assign(ie,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:O}],methods:[],template:{memory:{array:Ot},slots:{0:{structure:O,memory:{array:jt},slots:{0:{structure:U,memory:{array:p},address:-1431655766}}}}}},slot:19});Object.assign(L,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:18});const Rt=new Uint8Array([]),qt=new Uint8Array([]),wt=new Uint8Array([68,249,15,0]),At=new Uint8Array([144,48,16,0]),Ut=new Uint8Array([110,101,116,46,110,105,99,111,112,116,101,114,101,46,102,105,108,116,101,114,115,0]),Vt=new Uint8Array([132,249,15,0]),_t=new Uint8Array([134,48,16,0]),Pt=new Uint8Array([110,105,99,111,112,116,101,114,101,0]),It=new Uint8Array([196,249,15,0]),kt=new Uint8Array([1,0,0,0]),xt=new Uint8Array([28,250,15,0]),Ct=new Uint8Array([88,48,16,0]),vt=new Uint8Array([106,105,116,116,101,114,0]),Et=new Uint8Array([170,170,170,170]),Kt=new Uint8Array([170,170,170,170]),Ft=new Uint8Array([170,170,170,170]);Object.assign(be,{...t,type:2,name:"jitter.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Rt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:v},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:E},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:f},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:K},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:M},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:B},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:L}],methods:[],template:{memory:{array:qt},slots:{0:{structure:v,memory:{array:wt},slots:{0:{structure:N,memory:{array:At},slots:{0:{structure:J,memory:{array:Ut},address:1061008}}}}},1:{structure:E,memory:{array:Vt},slots:{0:{structure:W,memory:{array:_t},slots:{0:{structure:Q,memory:{array:Pt},address:1060998}}}}},2:{structure:f,memory:{array:It},slots:{0:{structure:c,memory:{array:kt}}}},3:{structure:K,memory:{array:xt},slots:{0:{structure:Y,memory:{array:Ct},slots:{0:{structure:X,memory:{array:vt},address:1060952}}}}},4:{structure:M,memory:{array:Et},slots:{0:{structure:re,memory:{array:p},address:-1431655766}}},5:{structure:B,memory:{array:Kt},slots:{0:{structure:ae,memory:{array:p},address:-1431655766}}},6:{structure:L,memory:{array:Ft},slots:{0:{structure:ie,memory:{array:p},address:-1431655766}}}}}},slot:1});Object.assign(j,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:24});Object.assign(ne,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:j}],methods:[],template:null},slot:23});Object.assign(me,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ne}],methods:[],template:null},slot:22});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:25});const Dt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(oe,{...t,type:9,name:"jitter.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:c},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:c}],methods:[],template:{memory:{array:Dt}}},slot:26});Object.assign(w,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:w}],methods:[],template:null},slot:27});Object.assign(A,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:28});Object.assign(ue,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:45});const Tt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Mt=new Uint8Array([]),$t=new Uint8Array([104,253,15,0]),Bt=new Uint8Array([4,0,0,0]);Object.assign(G,{...t,type:2,name:"jitter.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:me},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:oe},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:w},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:A}],methods:[],template:{memory:{array:Tt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:j},{...e,type:7,isRequired:!1,name:"FPixel",structure:ue},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:f}],methods:[],template:{memory:{array:Mt},slots:{0:{structure:f,memory:{array:$t},slots:{0:{structure:c,memory:{array:Bt}}}}}}},slot:21});const Lt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Gt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ht=new Uint8Array([0,0,0,0,0,0,0,0]),je=new Uint8Array([]);Object.assign(V,{...t,type:2,name:"jitter.KernelInput(u8,jitter.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:G}],methods:[],template:{memory:{array:Lt},slots:{0:{structure:G,memory:{array:Gt},slots:{0:{structure:me,memory:{array:Ht},slots:{0:{structure:ne,memory:{array:je}}}}}}}}},slot:20});Object.assign(le,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:j}],methods:[],template:null},slot:23});Object.assign(ce,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:le}],methods:[],template:null},slot:31});const Jt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Nt=new Uint8Array([]),Qt=new Uint8Array([104,253,15,0]),Wt=new Uint8Array([4,0,0,0]);Object.assign(H,{...t,type:2,name:"jitter.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ce},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:oe},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:w},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:A}],methods:[],template:{memory:{array:Jt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:j},{...e,type:7,isRequired:!1,name:"FPixel",structure:ue},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:f}],methods:[],template:{memory:{array:Nt},slots:{0:{structure:f,memory:{array:Qt},slots:{0:{structure:c,memory:{array:Wt}}}}}}},slot:30});const Xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Yt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Zt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(_,{...t,type:2,name:"jitter.KernelOutput(u8,jitter.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:H}],methods:[],template:{memory:{array:Xt},slots:{0:{structure:H,memory:{array:Yt},slots:{0:{structure:ce,memory:{array:Zt},slots:{0:{structure:le,memory:{array:je}}}}}}}}},slot:29});const es=new Uint8Array([0,0,0,0,0,0,0,0,205,204,204,61,0,0,0,0]);Object.assign(P,{...t,type:2,name:"jitter.KernelParameters(jitter.kernel)",length:1,byteSize:16,align:3,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"center",structure:Z},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"amplitude",structure:h}],methods:[],template:{memory:{array:es}}},slot:32});Object.assign(fe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(jitter.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:46});Object.assign(de,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(jitter.createOutput)).Fn.return_type.?).ErrorUnion.error_set!jitter.KernelOutput(u8,jitter.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:_},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:fe}],methods:[],template:null},slot:37});Object.assign(he,{...t,type:3,name:"createOutput",length:1,byteSize:80,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:192,bitSize:192,byteSize:24,slot:2,name:"2",structure:V},{...e,type:6,bitOffset:0,bitSize:128,byteSize:16,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:de}],methods:[],template:null},slot:35});Object.assign(Se,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(jitter.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:47});Object.assign(ge,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(jitter.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!jitter.KernelOutput(u8,jitter.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:_},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Se}],methods:[],template:null},slot:38});Object.assign(ze,{...t,type:3,name:"createPartialOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:4,name:"4",structure:V},{...e,type:6,bitOffset:0,bitSize:128,byteSize:16,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ge}],methods:[],template:null},slot:36});const ts={argStruct:he,thunk:8,name:"createOutput"},ss={argStruct:ze,thunk:2,name:"createPartialOutput"};Object.assign(Oe,{...t,type:2,name:"jitter",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:je}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:be},{...e,type:7,isRequired:!1,name:"Input",structure:V},{...e,type:7,isRequired:!1,name:"Output",structure:_},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[ts,ss],template:null},slot:0});const rs=[d,J,N,v,Q,W,E,c,f,X,Y,K,h,Z,l,i,q,z,ee,F,te,D,se,T,re,M,$,U,O,ae,B,ie,L,be,j,ne,me,u,oe,w,A,ue,G,V,le,ce,H,_,P,fe,de,he,Se,ge,ze,Oe],as=Ne(rs),is=Oe.constructor,ns=(async()=>{const n=new URL("jitter-fb5497b8.wasm",import.meta.url).href;return fetch(n)})();Qe(ns,{...as,writeBack:!0});const{createOutput:bs,createPartialOutput:ms,kernel:pe,Input:os,Output:fs,Parameters:ds}=is;function us(n,o,r,s,a={},S={}){if(Array.isArray(a)){const b=a;a={};for(const[y,g]of Object.keys(pe.inputImages).entries())a[g]=b[y]}const I=new os(void 0),k=Object.keys(pe.inputImages),m=[];let R;for(const b of k){let y=a[b];if(y||(k.length===1&&["data","width","height"].every(g=>!!a[g])?y=a:m.push(b)),I[b]=y,R){if(y.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=y.colorSpace}if(m.length>0)throw new Error(`Missing input image${m.length>1?"s":""}: ${m.join(", ")}`);const ye=ms(n,o,r,s,I,S),Re=b=>{const y=Object.keys(b),g={};for(const qe of y){const{data:{typedArray:x},width:we,height:_e}=b[qe];let C;if(typeof ImageData=="function"){const Pe=new Uint8ClampedArray(x.buffer,x.byteOffset,x.byteLength);C=new ImageData(Pe,we,s,{colorSpace:R})}else C={data:x,width:we,height:_e};if(y.length===1)return C;g[qe]=C}return g};return ye[Symbol.toStringTag]==="Promise"?ye.then(Re):Re(ye)}function ls(){const n={};for(let[o,r]of Object.entries(pe)){if(o==="parameters"){const s={};for(const[a,S]of Object.entries(r)){const I=s[a]={};for(let[k,m]of Object.entries(S))typeof m=="object"?"string"in m?m=m.string:m=Ve(m):typeof m=="function"&&(m=cs(m.name)),I[k]=m}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[o]=r}return n}function Ve(n){const o=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=Ve(s)),o[r]=s;return o}function cs(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,r,...s]=n.data;ys(o,s).then(([a,S])=>{postMessage([o,r,a],{transfer:S})}).catch(a=>{postMessage(["error",r,a])})};async function ys(n,o){switch(n){case"getKernelInfo":return[ls(...o)];case"createPartialImageData":const s=await us(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const S of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
