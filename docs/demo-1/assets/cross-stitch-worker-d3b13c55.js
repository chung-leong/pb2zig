import{u as ze,a as Oe,b as we,c as Re,d as qe,e as Ae,f as Ue,g as je,h as Pe,i as ke,j as Ie,k as Ve,l as Ce,o as ve,m as xe,n as Ee,p as Ke,q as De}from"./index-d64bc850.js";ze();Oe();we();Re();qe();Ae();Ue();je();Pe();ke();Ie();Ve();Ce();ve();xe();Ee();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},b={},M={},_={},P={},T={},$={},k={},u={},n={},B={},L={},I={},G={},H={},V={},J={},C={},N={},v={},z={},h={},Q={},x={},W={},E={},ne={},S={},X={},Y={},m={},Z={},g={},K={},ee={},D={},O={},te={},se={},F={},w={},R={},ie={},oe={},ue={},le={},me={},ce={},ye={};Object.assign(b,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:5});Object.assign(M,{...t,type:1,name:"[17:0]u8",length:17,byteSize:18,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:4});Object.assign(_,{...t,type:11,name:"*const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:M}],methods:[],template:null},slot:3});Object.assign(P,{...t,type:11,name:"*const *const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_}],methods:[],template:null},slot:2});Object.assign(T,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:8});Object.assign($,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[],template:null},slot:7});Object.assign(k,{...t,type:11,name:"*const *const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:6});Object.assign(u,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:10});Object.assign(n,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:9});Object.assign(B,{...t,type:1,name:"[19:0]u8",length:19,byteSize:20,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:13});Object.assign(L,{...t,type:11,name:"*const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:12});Object.assign(I,{...t,type:11,name:"*const *const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:11});Object.assign(G,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:46});Object.assign(H,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:45});Object.assign(V,{...t,type:11,name:"*const *const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:44});const Fe=new Uint8Array,Me=new Uint8Array([152,252,15,0]),_e=new Uint8Array([1,0,0,0]),Te=new Uint8Array([184,252,15,0]),$e=new Uint8Array([10,0,0,0]),Be=new Uint8Array([216,252,15,0]),Le=new Uint8Array([5,0,0,0]),Ge=new Uint8Array([248,252,15,0]),He=new Uint8Array([109,32,16,0]),Je=new Uint8Array([115,105,122,101,32,111,102,32,116,104,101,32,115,116,105,116,99,104,105,110,103,0]);Object.assign(J,{...t,type:2,name:"Struct0008",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:n},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:n},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:n},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:V}],methods:[],template:{memory:{array:Fe},slots:{0:{structure:n,memory:{array:Me},slots:{0:{structure:u,memory:{array:_e}}}},1:{structure:n,memory:{array:Te},slots:{0:{structure:u,memory:{array:$e}}}},2:{structure:n,memory:{array:Be},slots:{0:{structure:u,memory:{array:Le}}}},3:{structure:V,memory:{array:Ge},slots:{0:{structure:H,memory:{array:He},slots:{0:{structure:G,memory:{array:Je}}}}}}}}},slot:37});Object.assign(C,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:36});const Ne=new Uint8Array,Qe=new Uint8Array([170,170,170,170]),We=new Uint8Array;Object.assign(N,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"size",structure:C}],methods:[],template:{memory:{array:Ne},slots:{0:{structure:C,memory:{array:Qe},slots:{0:{structure:J,memory:{array:We}}}}}}},slot:15});Object.assign(v,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:14});const Xe=new Uint8Array,Ye=new Uint8Array([208,248,15,0]),Ze=new Uint8Array([4,0,0,0]);Object.assign(z,{...t,type:2,name:"Struct0009",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:n}],methods:[],template:{memory:{array:Xe},slots:{0:{structure:n,memory:{array:Ye},slots:{0:{structure:u,memory:{array:Ze}}}}}}},slot:39});Object.assign(h,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:z}],methods:[],template:null},slot:38});const et=new Uint8Array,tt=new Uint8Array([170,170,170,170]),st=new Uint8Array;Object.assign(Q,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:h}],methods:[],template:{memory:{array:et},slots:{0:{structure:h,memory:{array:tt},slots:{0:{structure:z,memory:{array:st}}}}}}},slot:17});Object.assign(x,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:16});const rt=new Uint8Array,at=new Uint8Array([170,170,170,170]),nt=new Uint8Array;Object.assign(W,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"outputPx",structure:h}],methods:[],template:{memory:{array:rt},slots:{0:{structure:h,memory:{array:at},slots:{0:{structure:z,memory:{array:nt}}}}}}},slot:19});Object.assign(E,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:18});const it=new Uint8Array,ot=new Uint8Array,ut=new Uint8Array([52,36,16,0]),lt=new Uint8Array([222,35,16,0]),mt=new Uint8Array([110,101,116,46,103,104,111,115,116,114,97,100,105,111,46,112,98,0]),ct=new Uint8Array([48,36,16,0]),yt=new Uint8Array([196,35,16,0]),bt=new Uint8Array([103,104,111,115,116,82,97,100,105,111,46,110,101,116,0]),pt=new Uint8Array([44,36,16,0]),ft=new Uint8Array([1,0,0,0]),ht=new Uint8Array([40,36,16,0]),St=new Uint8Array([159,35,16,0]),dt=new Uint8Array([67,114,111,115,115,45,115,116,105,116,99,104,32,101,102,102,101,99,116,0]),gt=new Uint8Array([170,170,170,170]),zt=new Uint8Array,Ot=new Uint8Array([170,170,170,170]),wt=new Uint8Array,Rt=new Uint8Array([170,170,170,170]),qt=new Uint8Array;Object.assign(ne,{...t,type:2,name:"cross-stitch.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:it}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:P},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:k},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:n},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:I},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:v},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:x},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:E}],methods:[],template:{memory:{array:ot},slots:{0:{structure:P,memory:{array:ut},slots:{0:{structure:_,memory:{array:lt},slots:{0:{structure:M,memory:{array:mt}}}}}},1:{structure:k,memory:{array:ct},slots:{0:{structure:$,memory:{array:yt},slots:{0:{structure:T,memory:{array:bt}}}}}},2:{structure:n,memory:{array:pt},slots:{0:{structure:u,memory:{array:ft}}}},3:{structure:I,memory:{array:ht},slots:{0:{structure:L,memory:{array:St},slots:{0:{structure:B,memory:{array:dt}}}}}},4:{structure:v,memory:{array:gt},slots:{0:{structure:N,memory:{array:zt}}}},5:{structure:x,memory:{array:Ot},slots:{0:{structure:Q,memory:{array:wt}}}},6:{structure:E,memory:{array:Rt},slots:{0:{structure:W,memory:{array:qt}}}}}}},slot:1});Object.assign(S,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:24});Object.assign(X,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:23});Object.assign(Y,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:X}],methods:[],template:null},slot:22});Object.assign(m,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:25});const At=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Z,{...t,type:9,name:"cross-stitch.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:u},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:u}],methods:[],template:{memory:{array:At}}},slot:26});Object.assign(g,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:g}],methods:[],template:null},slot:27});Object.assign(K,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:K}],methods:[],template:null},slot:43});Object.assign(ee,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:K}],methods:[],template:null},slot:40});const Ut=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),jt=new Uint8Array,Pt=new Uint8Array([116,35,16,0]),kt=new Uint8Array([4,0,0,0]);Object.assign(D,{...t,type:2,name:"cross-stitch.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Y},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Z},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:g}],methods:[],template:{memory:{array:Ut}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:S},{...e,type:7,isRequired:!1,name:"FPixel",structure:ee},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:n}],methods:[],template:{memory:{array:jt},slots:{0:{structure:n,memory:{array:Pt},slots:{0:{structure:u,memory:{array:kt}}}}}}},slot:21});const It=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Vt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),he=new Uint8Array([0,0,0,0,0,0,0,0]),Ct=new Uint8Array;Object.assign(O,{...t,type:2,name:"cross-stitch.KernelInput(u8,cross-stitch.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:D}],methods:[],template:{memory:{array:It},slots:{0:{structure:D,memory:{array:Vt},slots:{0:{structure:Y,memory:{array:he},address:1047568,slots:{0:{structure:X,memory:{array:Ct},address:0}}}}}}}},slot:20});Object.assign(te,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:23});Object.assign(se,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:te}],methods:[],template:null},slot:30});const vt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),xt=new Uint8Array,Et=new Uint8Array([116,35,16,0]),Kt=new Uint8Array([4,0,0,0]);Object.assign(F,{...t,type:2,name:"cross-stitch.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:se},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Z},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:g}],methods:[],template:{memory:{array:vt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:S},{...e,type:7,isRequired:!1,name:"FPixel",structure:ee},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:n}],methods:[],template:{memory:{array:xt},slots:{0:{structure:n,memory:{array:Et},slots:{0:{structure:u,memory:{array:Kt}}}}}}},slot:29});const Dt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ft=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Mt=new Uint8Array;Object.assign(w,{...t,type:2,name:"cross-stitch.KernelOutput(u8,cross-stitch.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"outputPx",structure:F}],methods:[],template:{memory:{array:Dt},slots:{0:{structure:F,memory:{array:Ft},slots:{0:{structure:se,memory:{array:he},address:1047568,slots:{0:{structure:te,memory:{array:Mt},address:0}}}}}}}},slot:28});const _t=new Uint8Array([5,0,0,0]);Object.assign(R,{...t,type:2,name:"cross-stitch.KernelParameters(cross-stitch.kernel)",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"size",structure:u}],methods:[],template:{memory:{array:_t}}},slot:31});Object.assign(ie,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(cross-stitch.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:41});Object.assign(oe,{...t,type:7,name:"ErrorSet0000!cross-stitch.KernelOutput(u8,cross-stitch.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:w},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ie}],methods:[],template:null},slot:34});Object.assign(ue,{...t,type:3,name:"createOutput",length:1,byteSize:64,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:O},{...e,type:6,bitOffset:256,bitSize:32,byteSize:4,slot:3,name:"3",structure:R},{...e,type:6,bitOffset:288,bitSize:224,byteSize:28,slot:4,name:"retval",structure:oe}],methods:[],template:null},slot:32});Object.assign(le,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(cross-stitch.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:42});Object.assign(me,{...t,type:7,name:"ErrorSet0001!cross-stitch.KernelOutput(u8,cross-stitch.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:w},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:le}],methods:[],template:null},slot:35});Object.assign(ce,{...t,type:3,name:"createPartialOutput",length:1,byteSize:72,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:m},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:O},{...e,type:6,bitOffset:320,bitSize:32,byteSize:4,slot:5,name:"5",structure:R},{...e,type:6,bitOffset:352,bitSize:224,byteSize:28,slot:6,name:"retval",structure:me}],methods:[],template:null},slot:33});const Tt=new Uint8Array,$t={argStruct:ue,thunk:7,name:"createOutput"},Bt={argStruct:ce,thunk:2,name:"createPartialOutput"};Object.assign(ye,{...t,type:2,name:"cross-stitch",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Tt}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ne},{...e,type:7,isRequired:!1,name:"Input",structure:O},{...e,type:7,isRequired:!1,name:"Output",structure:w},{...e,type:7,isRequired:!1,name:"Parameters",structure:R}],methods:[$t,Bt],template:null},slot:0});const Lt=[b,M,_,P,T,$,k,u,n,B,L,I,G,H,V,J,C,N,v,z,h,Q,x,W,E,ne,S,X,Y,m,Z,g,K,ee,D,O,te,se,F,w,R,ie,oe,ue,le,me,ce,ye],Gt=Ke(Lt),Ht=ye.constructor,Jt=(async()=>{const i=new URL("cross-stitch-53819e99.wasm",import.meta.url).href;return fetch(i)})();De(Jt,{...Gt,writeBack:!0});const{createOutput:ts,createPartialOutput:Nt,kernel:ae,Input:Qt,Output:ss,Parameters:rs}=Ht;function Wt(i,l,r,s,a={},p={}){if(Array.isArray(a)){const y=a;a={};for(const[c,f]of Object.keys(ae.inputImages).entries())a[f]=y[c]}const q=new Qt(void 0),A=Object.keys(ae.inputImages),o=[];let d;for(const y of A){let c=a[y];if(c||(A.length===1&&["data","width","height"].every(f=>!!a[f])?c=a:o.push(y)),q[y]=c,d){if(c.colorSpace!==d)throw new Error(`Input images must all use the same color space: ${d}`)}else d=c.colorSpace}if(o.length>0)throw new Error(`Missing input image${o.length>1?"s":""}: ${o.join(", ")}`);const re=Nt(i,l,r,s,q,p),be=y=>{const c=Object.keys(y),f={};for(const pe of c){const{data:{typedArray:U},width:fe,height:de}=y[pe];let j;if(typeof ImageData=="function"){const ge=new Uint8ClampedArray(U.buffer,U.byteOffset,U.byteLength);j=new ImageData(ge,fe,s,{colorSpace:d})}else j={data:U,width:fe,height:de};if(c.length===1)return j;f[pe]=j}return f};return re[Symbol.toStringTag]==="Promise"?re.then(be):be(re)}function Xt(){const i={};for(let[l,r]of Object.entries(ae)){if(l==="parameters"){const s={};for(const[a,p]of Object.entries(r)){const q=s[a]={};for(let[A,o]of Object.entries(p))typeof o=="object"?"string"in o?o=o.string:o=Se(o):typeof o=="function"&&(o=Yt(o.name)),q[A]=o}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());i[l]=r}return i}function Se(i){const l=[];for(let[r,s]of Object.entries(i))typeof s=="object"&&(s=Se(s)),l[r]=s;return l}function Yt(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[l,r,...s]=i.data;Zt(l,s).then(([a,p])=>{postMessage([l,r,a],{transfer:p})}).catch(a=>{postMessage(["error",r,a])})};async function Zt(i,l){switch(i){case"getKernelInfo":return[Xt(...l)];case"createPartialImageData":const s=await Wt(...l),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const p of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${i}`)}}
