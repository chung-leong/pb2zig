import{u as We,a as Xe,b as Ye,c as Ze,d as ts,e as es,f as ss,g as rs,h as as,i as ns,j as is,k as os,l as us,m as cs,n as ms,p as ys,o as bs,q as ls,r as ps,s as gs}from"./index-25a52593.js";We();is();os();Xe();Ye();us();cs();ms();ys();Ze();ts();es();ss();bs();gs();rs();ls();as();ns();const e={constructor:null,typedArray:null,type:0,name:void 0,byteSize:0,align:0,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null}},t={type:0,isRequired:!1},s={},p={},_={},D={},F={},M={},b={},O={},T={},$={},o={},L={},B={},S={},g={},G={},H={},J={},N={},Q={},d={},W={},X={},it={},V={},Y={},I={},m={},f={},U={},ot={},Z={},R={},tt={},k={},et={},q={},v={},P={},ut={},ct={},K={},mt={},yt={},bt={},_t={},lt={},pt={},gt={},Dt={},ft={},Ft={},Ot={},Mt={},St={},Tt={},$t={},zt={},jt={},Lt={},ht={},Bt={},dt={},Gt={},wt={},Ht={},Jt={},At={},Ut={},Nt={},st={},Qt={},Wt={},Pt={},Xt={},Vt={},Yt={},Zt={},te={},ee={},se={},re={},ae={},ne={},ie={},oe={},ue={},ce={},me={},ye={},be={},le={},pe={},It={},ge={},fe={},Rt={},Oe={},kt={},Se={},ze={},je={},he={},de={},we={},Ae={},qt={},Ue={},Pe={},Ve={},Ie={},Re={},ke={},qe={},ve={},Ee={},xe={},vt={},Ce={},Ke={},_e={},De={},Fe={},Me={},Te={},$e={},Le={},Be={},fs=new Uint8Array,Os=new Uint8Array,Ss=new Uint8Array([252,169,241,210,77,98,80,63]),zs=new Uint8Array,js=new Uint8Array([0,0,0,0,0,0,36,64]),hs=new Uint8Array,ds=new Uint8Array([0,0,0,0,0,0,0,64]),ws=new Uint8Array([220,6,0,1]),As=new Uint8Array([65,102,102,97,99,116,115,32,116,104,101,32,71,97,117,115,115,105,97,110,32,102,117,110,99,116,105,111,110,32,119,104,105,99,104,32,98,97,115,101,100,32,111,110,32,100,105,115,116,97,110,99,101,46,0]),Us=new Uint8Array,Ps=new Uint8Array,Vs=new Uint8Array([252,169,241,210,77,98,80,63]),Is=new Uint8Array,Rs=new Uint8Array([0,0,0,0,0,0,36,64]),ks=new Uint8Array,qs=new Uint8Array([51,51,51,51,51,51,219,63]),vs=new Uint8Array([36,7,0,1]),Es=new Uint8Array([65,102,102,101,99,116,115,32,116,104,101,32,71,97,117,115,115,105,97,110,32,102,117,110,99,116,105,111,110,32,119,104,105,99,104,32,98,97,115,101,100,32,111,110,32,99,111,108,111,114,32,99,104,97,110,110,101,108,115,40,105,110,99,108,117,100,105,110,103,32,97,108,112,104,97,41,0]),xs=new Uint8Array,Cs=new Uint8Array,Ks=new Uint8Array,_s=new Uint8Array([4]),Ds=new Uint8Array,Fs=new Uint8Array,Ms=new Uint8Array([4,5,0,1]),Ts=new Uint8Array([110,101,116,46,111,110,116,104,101,119,105,110,103,115,46,102,105,108,116,101,114,115,0]),$s=new Uint8Array([38,5,0,1]),Ls=new Uint8Array([65,110,100,121,32,76,105,0]),Bs=new Uint8Array,Gs=new Uint8Array([1]),Hs=new Uint8Array([63,5,0,1]),Js=new Uint8Array([66,105,108,97,116,101,114,97,108,32,66,108,117,114,46,0]),Ns=new Uint8Array,Qs=new Uint8Array,Ws=new Uint8Array,Xs=new Uint8Array([0]),Ys=new Uint8Array([1]),Ge=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Zs=new Uint8Array,tr=new Uint8Array,er=new Uint8Array,sr=new Uint8Array,rr=new Uint8Array([4]),Et=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),He=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ar=new Uint8Array,nr=new Uint8Array,ir=new Uint8Array,or=new Uint8Array,ur=new Uint8Array([4]),xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),cr=new Uint8Array([0,0,0,64,154,153,217,62]),mr=new Uint8Array([27,0]),yr=new Uint8Array,br=new Uint8Array,lr=new Uint8Array,pr=new Uint8Array;Object.assign(_t,{slots:{0:lt,1:gt,2:ft,3:Ot,4:St}});Object.assign(lt,{structure:s,memory:{array:fs},slots:{0:pt}});Object.assign(pt,{structure:S});Object.assign(gt,{structure:o,memory:{array:Os},slots:{0:Dt}});Object.assign(Dt,{structure:g,memory:{array:Ss}});Object.assign(ft,{structure:o,memory:{array:zs},slots:{0:Ft}});Object.assign(Ft,{structure:g,memory:{array:js}});Object.assign(Ot,{structure:o,memory:{array:hs},slots:{0:Mt}});Object.assign(Mt,{structure:g,memory:{array:ds}});Object.assign(St,{structure:B,memory:{array:ws},slots:{0:Tt}});Object.assign(Tt,{structure:L,memory:{array:As},reloc:16778972,const:!0});Object.assign($t,{slots:{0:zt,1:jt,2:ht,3:dt,4:wt}});Object.assign(zt,{structure:s,memory:{array:Us},slots:{0:pt}});Object.assign(jt,{structure:o,memory:{array:Ps},slots:{0:Lt}});Object.assign(Lt,{structure:g,memory:{array:Vs}});Object.assign(ht,{structure:o,memory:{array:Is},slots:{0:Bt}});Object.assign(Bt,{structure:g,memory:{array:Rs}});Object.assign(dt,{structure:o,memory:{array:ks},slots:{0:Gt}});Object.assign(Gt,{structure:g,memory:{array:qs}});Object.assign(wt,{structure:J,memory:{array:vs},slots:{0:Ht}});Object.assign(Ht,{structure:H,memory:{array:Es},reloc:16779044,const:!0});Object.assign(Jt,{slots:{0:At,1:Ut}});Object.assign(At,{structure:G,memory:{array:xs},slots:{0:lt,1:gt,2:ft,3:Ot,4:St}});Object.assign(Ut,{structure:N,memory:{array:Cs},slots:{0:zt,1:jt,2:ht,3:dt,4:wt}});Object.assign(Nt,{slots:{0:st}});Object.assign(st,{structure:b,memory:{array:Ks},slots:{0:Qt}});Object.assign(Qt,{structure:O,memory:{array:_s}});Object.assign(Wt,{slots:{0:Pt}});Object.assign(Pt,{structure:d,memory:{array:Ds},slots:{0:st}});Object.assign(Xt,{slots:{0:Vt}});Object.assign(Vt,{structure:d,memory:{array:Fs},slots:{0:st}});Object.assign(Yt,{slots:{0:Zt,1:ee,2:re,3:ne,4:oe,5:ue,6:ce}});Object.assign(Zt,{structure:D,memory:{array:Ms},slots:{0:te}});Object.assign(te,{structure:_,memory:{array:Ts},reloc:16778500,const:!0});Object.assign(ee,{structure:M,memory:{array:$s},slots:{0:se}});Object.assign(se,{structure:F,memory:{array:Ls},reloc:16778534,const:!0});Object.assign(re,{structure:b,memory:{array:Bs},slots:{0:ae}});Object.assign(ae,{structure:O,memory:{array:Gs}});Object.assign(ne,{structure:$,memory:{array:Hs},slots:{0:ie}});Object.assign(ie,{structure:T,memory:{array:Js},reloc:16778559,const:!0});Object.assign(oe,{structure:Q,memory:{array:Ns},slots:{0:At,1:Ut}});Object.assign(ue,{structure:W,memory:{array:Qs},slots:{0:Pt}});Object.assign(ce,{structure:X,memory:{array:Ws},slots:{0:Vt}});Object.assign(me,{slots:{0:ye,1:be}});Object.assign(ye,{structure:f,memory:{array:Xs}});Object.assign(be,{structure:f,memory:{array:Ys}});Object.assign(le,{memory:{array:Ge},slots:{0:pe}});Object.assign(pe,{structure:I,memory:{array:Ge,offset:0,length:8},slots:{0:It}});Object.assign(It,{structure:Y,memory:{array:Zs},reloc:0,const:!0});Object.assign(ge,{slots:{0:fe,1:Oe,2:Se}});Object.assign(fe,{structure:s,memory:{array:tr},slots:{0:Rt}});Object.assign(Rt,{structure:V});Object.assign(Oe,{structure:s,memory:{array:er},slots:{0:kt}});Object.assign(kt,{structure:ot});Object.assign(Se,{structure:b,memory:{array:sr},slots:{0:ze}});Object.assign(ze,{structure:O,memory:{array:rr}});Object.assign(je,{memory:{array:Et},slots:{0:he}});Object.assign(he,{structure:Z,memory:{array:Et},slots:{0:de}});Object.assign(de,{structure:I,memory:{array:Et,offset:0,length:8},slots:{0:It}});Object.assign(we,{memory:{array:He},slots:{0:Ae}});Object.assign(Ae,{structure:k,memory:{array:He,offset:0,length:8},slots:{0:qt}});Object.assign(qt,{structure:tt,memory:{array:ar},reloc:0});Object.assign(Ue,{slots:{0:Pe,1:Ve,2:Ie}});Object.assign(Pe,{structure:s,memory:{array:nr},slots:{0:Rt}});Object.assign(Ve,{structure:s,memory:{array:ir},slots:{0:kt}});Object.assign(Ie,{structure:b,memory:{array:or},slots:{0:Re}});Object.assign(Re,{structure:O,memory:{array:ur}});Object.assign(ke,{memory:{array:xt},slots:{0:qe}});Object.assign(qe,{structure:et,memory:{array:xt},slots:{0:ve}});Object.assign(ve,{structure:k,memory:{array:xt,offset:0,length:8},slots:{0:qt}});Object.assign(Ee,{memory:{array:cr}});Object.assign(xe,{slots:{0:vt}});Object.assign(vt,{structure:P,memory:{array:mr}});Object.assign(Ce,{slots:{0:vt}});Object.assign(Ke,{slots:{0:_e,1:Fe,2:Te,3:Le}});Object.assign(_e,{structure:s,memory:{array:yr},slots:{0:De}});Object.assign(De,{structure:it});Object.assign(Fe,{structure:s,memory:{array:br},slots:{0:Me}});Object.assign(Me,{structure:R});Object.assign(Te,{structure:s,memory:{array:lr},slots:{0:$e}});Object.assign($e,{structure:q});Object.assign(Le,{structure:s,memory:{array:pr},slots:{0:Be}});Object.assign(Be,{structure:v});const gr={argStruct:ct,thunkId:2,name:"createOutput"},fr={argStruct:yt,thunkId:3,name:"createPartialOutput"};Object.assign(s,{...e,name:"type",align:1,instance:{members:[{...t,type:8,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:s}],methods:[]}});Object.assign(p,{...e,name:"u8",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(_,{...e,type:1,name:"[22:0]u8",length:22,byteSize:23,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(D,{...e,type:13,name:"*const [22:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:7,bitSize:32,byteSize:4,slot:0,structure:_}],methods:[]}});Object.assign(F,{...e,type:1,name:"[7:0]u8",length:7,byteSize:8,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(M,{...e,type:13,name:"*const [7:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:7,bitSize:32,byteSize:4,slot:0,structure:F}],methods:[]}});Object.assign(b,{...e,name:"comptime_int",align:1,instance:{members:[{...t,type:9,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:b}],methods:[]}});Object.assign(O,{...e,name:"i8",byteSize:1,align:1,instance:{members:[{...t,type:2,bitOffset:0,bitSize:8,byteSize:1,structure:O}],methods:[]}});Object.assign(T,{...e,type:1,name:"[15:0]u8",length:15,byteSize:16,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign($,{...e,type:13,name:"*const [15:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:7,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[]}});Object.assign(o,{...e,name:"comptime_float",align:1,instance:{members:[{...t,type:9,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:o}],methods:[]}});Object.assign(L,{...e,type:1,name:"[54:0]u8",length:54,byteSize:55,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(B,{...e,type:13,name:"*const [54:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:7,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[]}});Object.assign(S,{...e,name:"f32",byteSize:4,align:4,instance:{members:[{...t,type:4,bitOffset:0,bitSize:32,byteSize:4,structure:S}],methods:[]}});Object.assign(g,{...e,name:"f64",byteSize:8,align:8,instance:{members:[{...t,type:4,bitOffset:0,bitSize:64,byteSize:8,structure:g}],methods:[]}});Object.assign(G,{...e,type:2,name:"Struct611671119",align:1,instance:{members:[{...t,type:9,slot:0,name:"type",structure:s},{...t,type:9,slot:1,name:"minValue",structure:o},{...t,type:9,slot:2,name:"maxValue",structure:o},{...t,type:9,slot:3,name:"defaultValue",structure:o},{...t,type:9,slot:4,name:"description",structure:B}],methods:[],template:_t}});Object.assign(H,{...e,type:1,name:"[76:0]u8",length:76,byteSize:77,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(J,{...e,type:13,name:"*const [76:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:7,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[]}});Object.assign(N,{...e,type:2,name:"Struct976552448",align:1,instance:{members:[{...t,type:9,slot:0,name:"type",structure:s},{...t,type:9,slot:1,name:"minValue",structure:o},{...t,type:9,slot:2,name:"maxValue",structure:o},{...t,type:9,slot:3,name:"defaultValue",structure:o},{...t,type:9,slot:4,name:"description",structure:J}],methods:[],template:$t}});Object.assign(Q,{...e,type:2,name:"Struct334250097",align:1,instance:{members:[{...t,type:9,slot:0,name:"d",structure:G},{...t,type:9,slot:1,name:"r",structure:N}],methods:[],template:Jt}});Object.assign(d,{...e,type:2,name:"Struct3832472641",align:1,instance:{members:[{...t,type:9,slot:0,name:"channels",structure:b}],methods:[],template:Nt}});Object.assign(W,{...e,type:2,name:"Struct2242867897",align:1,instance:{members:[{...t,type:9,slot:0,name:"src",structure:d}],methods:[],template:Wt}});Object.assign(X,{...e,type:2,name:"Struct172100005",align:1,instance:{members:[{...t,type:9,slot:0,name:"dst",structure:d}],methods:[],template:Xt}});Object.assign(it,{...e,type:2,name:"bilateral-blur.kernel",align:1,static:{members:[{...t,type:9,slot:0,name:"namespace",structure:D},{...t,type:9,slot:1,name:"vendor",structure:M},{...t,type:9,slot:2,name:"version",structure:b},{...t,type:9,slot:3,name:"description",structure:$},{...t,type:9,slot:4,name:"parameters",structure:Q},{...t,type:9,slot:5,name:"inputImages",structure:W},{...t,type:9,slot:6,name:"outputImages",structure:X}],methods:[],template:Yt}});Object.assign(V,{...e,type:15,name:"@Vector(4, u8)",length:4,byteSize:4,align:4,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(Y,{...e,type:14,name:"[_]const @Vector(4, u8)",length:0,byteSize:4,align:4,instance:{members:[{...t,type:7,bitSize:32,byteSize:4,structure:V}],methods:[]}});Object.assign(I,{...e,type:13,name:"[]const @Vector(4, u8)",byteSize:8,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:7,bitSize:64,byteSize:8,slot:0,structure:Y}],methods:[]}});Object.assign(m,{...e,name:"u32",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[]}});Object.assign(f,{...e,type:11,name:"bilateral-blur.ColorSpace",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:8,byteSize:1}],methods:[]},static:{members:[{...t,type:9,slot:0,name:"srgb",structure:f},{...t,type:9,slot:1,name:"display-p3",structure:f}],methods:[],template:me}});Object.assign(U,{...e,name:"usize",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:U}],methods:[]}});Object.assign(ot,{...e,type:15,name:"@Vector(4, f32)",length:4,byteSize:16,align:16,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:S}],methods:[]}});Object.assign(Z,{...e,type:2,name:"bilateral-blur.Image(u8,4,false)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:7,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:I},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...t,type:5,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:f},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:U}],methods:[],template:le},static:{members:[{...t,type:9,slot:0,name:"Pixel",structure:s},{...t,type:9,slot:1,name:"FPixel",structure:s},{...t,type:9,slot:2,name:"channels",structure:b}],methods:[],template:ge}});Object.assign(R,{...e,type:2,name:"bilateral-blur.KernelInput(u8,bilateral-blur.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:Z}],methods:[],template:je}});Object.assign(tt,{...e,type:14,name:"[_]@Vector(4, u8)",length:0,byteSize:4,align:4,instance:{members:[{...t,type:7,bitSize:32,byteSize:4,structure:V}],methods:[]}});Object.assign(k,{...e,type:13,name:"[]@Vector(4, u8)",byteSize:8,align:4,hasPointer:!0,instance:{members:[{...t,type:7,bitSize:64,byteSize:8,slot:0,structure:tt}],methods:[]}});Object.assign(et,{...e,type:2,name:"bilateral-blur.Image(u8,4,true)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:7,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:k},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...t,type:5,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:f},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:U}],methods:[],template:we},static:{members:[{...t,type:9,slot:0,name:"Pixel",structure:s},{...t,type:9,slot:1,name:"FPixel",structure:s},{...t,type:9,slot:2,name:"channels",structure:b}],methods:[],template:Ue}});Object.assign(q,{...e,type:2,name:"bilateral-blur.KernelOutput(u8,bilateral-blur.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:et}],methods:[],template:ke}});Object.assign(v,{...e,type:2,name:"bilateral-blur.KernelParameters(bilateral-blur.kernel)",byteSize:8,align:4,instance:{members:[{...t,type:4,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"d",structure:S},{...t,type:4,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"r",structure:S}],methods:[],template:Ee}});Object.assign(P,{...e,type:10,name:"@typeInfo(@typeInfo(@TypeOf(bilateral-blur.createOutput)).Fn.return_type.?).ErrorUnion.error_set",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2}],methods:[]},static:{members:[{...t,type:9,slot:0,name:"OutOfMemory",structure:P}],methods:[],template:xe}});Object.assign(ut,{...e,type:9,name:"ErrorSet1517171916!bilateral-blur.KernelOutput(u8,bilateral-blur.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:q},{...t,type:6,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:P}],methods:[]}});Object.assign(ct,{...e,type:5,name:"createOutput",byteSize:68,align:4,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:0,bitSize:32,byteSize:4,slot:3,name:"0",structure:m},{...t,type:3,isRequired:!0,bitOffset:32,bitSize:32,byteSize:4,slot:4,name:"1",structure:m},{...t,type:7,isRequired:!0,bitOffset:64,bitSize:192,byteSize:24,slot:0,name:"2",structure:R},{...t,type:7,isRequired:!0,bitOffset:256,bitSize:64,byteSize:8,slot:1,name:"3",structure:v},{...t,type:7,isRequired:!0,bitOffset:320,bitSize:224,byteSize:28,slot:2,name:"retval",structure:ut}],methods:[]}});Object.assign(K,{...e,type:10,name:"@typeInfo(@typeInfo(@TypeOf(bilateral-blur.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2}],methods:[]},static:{members:[{...t,type:9,slot:0,name:"OutOfMemory",structure:K}],methods:[],template:Ce}});Object.assign(mt,{...e,type:9,name:"ErrorSet282802563!bilateral-blur.KernelOutput(u8,bilateral-blur.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:7,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:q},{...t,type:6,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:K}],methods:[]}});Object.assign(yt,{...e,type:5,name:"createPartialOutput",byteSize:76,align:4,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:0,bitSize:32,byteSize:4,slot:3,name:"0",structure:m},{...t,type:3,isRequired:!0,bitOffset:32,bitSize:32,byteSize:4,slot:4,name:"1",structure:m},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:5,name:"2",structure:m},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:6,name:"3",structure:m},{...t,type:7,isRequired:!0,bitOffset:128,bitSize:192,byteSize:24,slot:0,name:"4",structure:R},{...t,type:7,isRequired:!0,bitOffset:320,bitSize:64,byteSize:8,slot:1,name:"5",structure:v},{...t,type:7,isRequired:!0,bitOffset:384,bitSize:224,byteSize:28,slot:2,name:"retval",structure:mt}],methods:[]}});Object.assign(bt,{...e,type:2,name:"bilateral-blur",align:1,static:{members:[{...t,type:9,slot:0,name:"kernel",structure:s},{...t,type:9,slot:1,name:"Input",structure:s},{...t,type:9,slot:2,name:"Output",structure:s},{...t,type:9,slot:3,name:"Parameters",structure:s}],methods:[gr,fr],template:Ke}});const Or=[s,p,_,D,F,M,b,O,T,$,o,L,B,S,g,G,H,J,N,Q,d,W,X,it,V,Y,I,m,f,U,ot,Z,R,tt,k,et,q,v,P,ut,ct,K,mt,yt,bt],Sr=bt,zr={runtimeSafety:!1,littleEndian:!0},rt=ps();rt.getControlObject();rt.recreateStructures(Or,zr);const jr=(async()=>{const i=new URL("bilateral-blur-0e9505b0.wasm",import.meta.url).href;return fetch(i)})();rt.loadModule(jr);rt.linkVariables(!0);const{constructor:hr}=Sr,{createPartialOutput:dr,Input:wr,kernel:nt}=hr;function Ar(i,u,a,r,n={},z={}){const j=[];for(const[y]of nt.inputImages)j.push(y);const w=[];for(const[y]of nt.outputImages)w.push(y);if(Array.isArray(n)){const y=n;n={};for(const[l,h]of j.entries())n[h]=y[l]}const c=new wr(void 0),E=[];let A;for(const y of j){let l=n[y];if(l||(j.length===1&&["data","width","height"].every(h=>!!n[h])?l=n:E.push(y)),c[y]=l,A){if(l.colorSpace!==A)throw new Error(`Input images must all use the same color space: ${A}`)}else A=l.colorSpace}if(E.length>0)throw new Error(`Missing input image${E.length>1?"s":""}: ${E.join(", ")}`);const at=dr(i,u,a,r,c,z),Ct=y=>{const l={};for(const h of w){const{data:{typedArray:x},width:Kt,height:Ne}=y[h];let C;if(typeof ImageData=="function"){const Qe=new Uint8ClampedArray(x.buffer,x.byteOffset,x.byteLength);C=new ImageData(Qe,Kt,r,{colorSpace:A})}else C={data:x,width:Kt,height:Ne};if(w.length===1)return C;l[h]=C}return l};return at[Symbol.toStringTag]==="Promise"?at.then(Ct):Ct(at)}function Ur(){const i={};for(let[u,a]of nt){if(u==="parameters"){const r={};for(const[n,z]of a){const j=r[n]={};for(let[w,c]of z)typeof c=="object"?"string"in c?c=c.string:c=Je(c):typeof c=="function"&&(c=Pr(c.name)),j[w]=c}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());i[u]=a}return i}function Je(i){const u=[];for(let[a,r]of i)typeof r=="object"&&(r=Je(r)),u[a]=r;return u}function Pr(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[u,a,...r]=i.data;Vr(u,r).then(([n,z])=>{postMessage([u,a,n],{transfer:z})}).catch(n=>{postMessage(["error",a,n])})};async function Vr(i,u){switch(i){case"getKernelInfo":return[Ur(...u)];case"createPartialImageData":const r=await Ar(...u),n=[];if("data"in r&&"width"in r&&"height"in r)n.push(r.data.buffer);else for(const z of Object.entries(r))n.push(r.data.buffer);return[r,n];default:throw new Error(`Unknown function: ${i}`)}}
