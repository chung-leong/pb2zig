import{u as Be,a as Le,b as Ge,d as He,c as Je,e as Ne,f as Qe,g as We,h as Xe,i as Ze,j as et,k as tt,l as st,m as rt,n as at,o as mt,p as it,q as ot,r as nt}from"./index-778418ea.js";Be();Le();Ge();He();Je();Ne();Qe();We();Xe();Ze();et();tt();st();rt();at();mt();it();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},h={},X={},Z={},k={},ee={},te={},C={},p={},d={},se={},re={},T={},u={},r={},s={},ae={},v={},me={},D={},V={},ie={},E={},oe={},K={},ne={},F={},ue={},M={},le={},Y={},ce={},$={},ye={},B={},pe={},L={},z={},fe={},G={},be={},H={},de={},J={},he={},N={},Ue={},O={},ge={},Se={},y={},ze={},w={},R={},Ae={},Q={},q={},Oe={},_e={},W={},U={},A={},je={},Pe={},xe={},Ie={},ke={},Ce={},Te={};Object.assign(h,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:5});Object.assign(X,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:4});Object.assign(Z,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:3});Object.assign(k,{...t,type:11,name:"**const [14:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:2});Object.assign(ee,{...t,type:1,name:"[11:0]u8",length:11,byteSize:12,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:8});Object.assign(te,{...t,type:11,name:"*const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:7});Object.assign(C,{...t,type:11,name:"**const [11:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:6});Object.assign(p,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:10});Object.assign(d,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:9});Object.assign(se,{...t,type:1,name:"[32:0]u8",length:32,byteSize:33,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:13});Object.assign(re,{...t,type:11,name:"*const [32:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:12});Object.assign(T,{...t,type:11,name:"**const [32:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:11});Object.assign(u,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:33});Object.assign(r,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:r}],methods:[],template:null},slot:59});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:r}],methods:[],template:null},slot:58});const ut=new Uint8Array([]),lt=new Uint8Array([184,30,16,0]),ct=new Uint8Array([0,0,0,0,0,0,137,64]);Object.assign(ae,{...t,type:2,name:"struct{comptime type: type = f32, comptime defaultValue: comptime_float = 800}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:ut},slots:{0:{structure:s,memory:{array:lt},slots:{0:{structure:r,memory:{array:ct},address:1056440}}}}}},slot:40});Object.assign(v,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime defaultValue: comptime_float = 800}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:39});const yt=new Uint8Array([]),pt=new Uint8Array([176,30,16,0]),ft=new Uint8Array([0,0,0,0,0,192,130,64]);Object.assign(me,{...t,type:2,name:"struct{comptime type: type = f32, comptime defaultValue: comptime_float = 600}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:yt},slots:{0:{structure:s,memory:{array:pt},slots:{0:{structure:r,memory:{array:ft},address:1056432}}}}}},slot:42});Object.assign(D,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime defaultValue: comptime_float = 600}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:41});Object.assign(V,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:34});const bt=new Uint8Array([]),dt=new Uint8Array([120,30,16,0]),Re=new Uint8Array([0,0,0,0,0,0,240,191]),ht=new Uint8Array([120,30,16,0]),gt=new Uint8Array([112,30,16,0]),St=new Uint8Array([0,0,0,0,0,0,0,192]),zt=new Uint8Array([104,30,16,0]),Ot=new Uint8Array([0,0,0,0,0,0,224,191]);Object.assign(ie,{...t,type:2,name:"struct{comptime comptime_float = -1, comptime comptime_float = -1, comptime comptime_float = -2, comptime comptime_float = -0.5}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:s}],methods:[],template:{memory:{array:bt},slots:{0:{structure:s,memory:{array:dt},slots:{0:{structure:r,memory:{array:Re},address:1056376}}},1:{structure:s,memory:{array:ht},slots:{0:{structure:r,memory:{array:Re},address:1056376}}},2:{structure:s,memory:{array:gt},slots:{0:{structure:r,memory:{array:St},address:1056368}}},3:{structure:s,memory:{array:zt},slots:{0:{structure:r,memory:{array:Ot},address:1056360}}}}}},slot:61});Object.assign(E,{...t,type:11,name:"*const struct{comptime comptime_float = -1, comptime comptime_float = -1, comptime comptime_float = -2, comptime comptime_float = -0.5}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:60});const _t=new Uint8Array([]),wt=new Uint8Array([96,30,16,0]),Ve=new Uint8Array([0,0,0,0,0,0,240,63]),Rt=new Uint8Array([96,30,16,0]),Vt=new Uint8Array([88,30,16,0]),qt=new Uint8Array([0,0,0,0,0,0,0,64]),Ut=new Uint8Array([80,30,16,0]),At=new Uint8Array([0,0,0,0,0,0,224,63]);Object.assign(oe,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 2, comptime comptime_float = 0.5}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:s}],methods:[],template:{memory:{array:_t},slots:{0:{structure:s,memory:{array:wt},slots:{0:{structure:r,memory:{array:Ve},address:1056352}}},1:{structure:s,memory:{array:Rt},slots:{0:{structure:r,memory:{array:Ve},address:1056352}}},2:{structure:s,memory:{array:Vt},slots:{0:{structure:r,memory:{array:qt},address:1056344}}},3:{structure:s,memory:{array:Ut},slots:{0:{structure:r,memory:{array:At},address:1056336}}}}}},slot:63});Object.assign(K,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 2, comptime comptime_float = 0.5}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:62});const jt=new Uint8Array([]),Pt=new Uint8Array([72,30,16,0]),xt=new Uint8Array([154,153,153,153,153,153,217,191]),It=new Uint8Array([64,30,16,0]),kt=new Uint8Array([195,245,40,92,143,194,229,191]),Ct=new Uint8Array([56,30,16,0]),Tt=new Uint8Array([10,215,163,112,61,10,215,191]),vt=new Uint8Array([48,30,16,0]),Dt=new Uint8Array([123,20,174,71,225,122,164,191]);Object.assign(ne,{...t,type:2,name:"struct{comptime comptime_float = -0.4, comptime comptime_float = -0.68, comptime comptime_float = -0.36, comptime comptime_float = -0.04}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:s}],methods:[],template:{memory:{array:jt},slots:{0:{structure:s,memory:{array:Pt},slots:{0:{structure:r,memory:{array:xt},address:1056328}}},1:{structure:s,memory:{array:It},slots:{0:{structure:r,memory:{array:kt},address:1056320}}},2:{structure:s,memory:{array:Ct},slots:{0:{structure:r,memory:{array:Tt},address:1056312}}},3:{structure:s,memory:{array:vt},slots:{0:{structure:r,memory:{array:Dt},address:1056304}}}}}},slot:65});Object.assign(F,{...t,type:11,name:"*const struct{comptime comptime_float = -0.4, comptime comptime_float = -0.68, comptime comptime_float = -0.36, comptime comptime_float = -0.04}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:64});const Et=new Uint8Array([]),Kt=new Uint8Array([170,170,170,170]),c=new Uint8Array([]),Ft=new Uint8Array([170,170,170,170]),Mt=new Uint8Array([170,170,170,170]);Object.assign(ue,{...t,type:2,name:"struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1, comptime comptime_float = -2, comptime comptime_float = -0.5} = .{-1, -1, -2, -0.5}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 2, comptime comptime_float = 0.5} = .{1, 1, 2, 0.5}, comptime defaultValue: struct{comptime comptime_float = -0.4, comptime comptime_float = -0.68, comptime comptime_float = -0.36, comptime comptime_float = -0.04} = .{-0.4, -0.68, -0.36, -0.04}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:V},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:E},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:K},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:F}],methods:[],template:{memory:{array:Et},slots:{0:{structure:E,memory:{array:Kt},slots:{0:{structure:ie,memory:{array:c},address:-1431655766}}},1:{structure:K,memory:{array:Ft},slots:{0:{structure:oe,memory:{array:c},address:-1431655766}}},2:{structure:F,memory:{array:Mt},slots:{0:{structure:ne,memory:{array:c},address:-1431655766}}}}}},slot:44});Object.assign(M,{...t,type:11,name:"*const struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1, comptime comptime_float = -2, comptime comptime_float = -0.5} = .{-1, -1, -2, -0.5}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 2, comptime comptime_float = 0.5} = .{1, 1, 2, 0.5}, comptime defaultValue: struct{comptime comptime_float = -0.4, comptime comptime_float = -0.68, comptime comptime_float = -0.36, comptime comptime_float = -0.04} = .{-0.4, -0.68, -0.36, -0.04}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:43});const Yt=new Uint8Array([]),$t=new Uint8Array([120,30,16,0]),Bt=new Uint8Array([96,30,16,0]),Lt=new Uint8Array([136,30,16,0]),ve=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(le,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Yt},slots:{0:{structure:s,memory:{array:$t},slots:{0:{structure:r,memory:{array:Re},address:1056376}}},1:{structure:s,memory:{array:Bt},slots:{0:{structure:r,memory:{array:Ve},address:1056352}}},2:{structure:s,memory:{array:Lt},slots:{0:{structure:r,memory:{array:ve},address:1056392}}}}}},slot:46});Object.assign(Y,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:45});const Gt=new Uint8Array([]),Ht=new Uint8Array([136,30,16,0]),Jt=new Uint8Array([168,30,16,0]),Nt=new Uint8Array([0,0,0,0,0,0,36,64]),Qt=new Uint8Array([160,30,16,0]),Wt=new Uint8Array([0,0,0,0,0,0,8,64]);Object.assign(ce,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 3}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Gt},slots:{0:{structure:s,memory:{array:Ht},slots:{0:{structure:r,memory:{array:ve},address:1056392}}},1:{structure:s,memory:{array:Jt},slots:{0:{structure:r,memory:{array:Nt},address:1056424}}},2:{structure:s,memory:{array:Qt},slots:{0:{structure:r,memory:{array:Wt},address:1056416}}}}}},slot:48});Object.assign($,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 3}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:47});const Xt=new Uint8Array([]),Zt=new Uint8Array([152,30,16,0]),es=new Uint8Array([0,0,0,0,0,0,20,192]),ts=new Uint8Array([144,30,16,0]),ss=new Uint8Array([0,0,0,0,0,0,20,64]),rs=new Uint8Array([136,30,16,0]);Object.assign(ye,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = -5, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Xt},slots:{0:{structure:s,memory:{array:Zt},slots:{0:{structure:r,memory:{array:es},address:1056408}}},1:{structure:s,memory:{array:ts},slots:{0:{structure:r,memory:{array:ss},address:1056400}}},2:{structure:s,memory:{array:rs},slots:{0:{structure:r,memory:{array:ve},address:1056392}}}}}},slot:50});Object.assign(B,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = -5, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:49});const as=new Uint8Array([]),ms=new Uint8Array([170,170,170,170]),is=new Uint8Array([170,170,170,170]),os=new Uint8Array([170,170,170,170]),ns=new Uint8Array([170,170,170,170]),us=new Uint8Array([170,170,170,170]),ls=new Uint8Array([170,170,170,170]);Object.assign(pe,{...t,type:2,name:"struct{comptime width: struct{comptime type: type = f32, comptime defaultValue: comptime_float = 800} = .{.type = f32, .defaultValue = 800}, comptime height: struct{comptime type: type = f32, comptime defaultValue: comptime_float = 600} = .{.type = f32, .defaultValue = 600}, comptime c: struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1, comptime comptime_float = -2, comptime comptime_float = -0.5} = .{-1, -1, -2, -0.5}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 2, comptime comptime_float = 0.5} = .{1, 1, 2, 0.5}, comptime defaultValue: struct{comptime comptime_float = -0.4, comptime comptime_float = -0.68, comptime comptime_float = -0.36, comptime comptime_float = -0.04} = .{-0.4, -0.68, -0.36, -0.04}} = .{.type = @Vector(4, f32), .minValue = .{-1, -1, -2, -0.5}, .maxValue = .{1, 1, 2, 0.5}, .defaultValue = .{-0.4, -0.68, -0.36, -0.04}}, comptime w: struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = -1, .maxValue = 1, .defaultValue = 0}, comptime camDistance: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 3} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 3}, comptime rotationY: struct{comptime type: type = f32, comptime minValue: comptime_float = -5, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = -5, .maxValue = 5, .defaultValue = 0}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"width",structure:v},{...e,type:8,isRequired:!1,slot:1,name:"height",structure:D},{...e,type:8,isRequired:!1,slot:2,name:"c",structure:M},{...e,type:8,isRequired:!1,slot:3,name:"w",structure:Y},{...e,type:8,isRequired:!1,slot:4,name:"camDistance",structure:$},{...e,type:8,isRequired:!1,slot:5,name:"rotationY",structure:B}],methods:[],template:{memory:{array:as},slots:{0:{structure:v,memory:{array:ms},slots:{0:{structure:ae,memory:{array:c},address:-1431655766}}},1:{structure:D,memory:{array:is},slots:{0:{structure:me,memory:{array:c},address:-1431655766}}},2:{structure:M,memory:{array:os},slots:{0:{structure:ue,memory:{array:c},address:-1431655766}}},3:{structure:Y,memory:{array:ns},slots:{0:{structure:le,memory:{array:c},address:-1431655766}}},4:{structure:$,memory:{array:us},slots:{0:{structure:ce,memory:{array:c},address:-1431655766}}},5:{structure:B,memory:{array:ls},slots:{0:{structure:ye,memory:{array:c},address:-1431655766}}}}}},slot:15});Object.assign(L,{...t,type:11,name:"*struct{comptime width: struct{comptime type: type = f32, comptime defaultValue: comptime_float = 800} = .{.type = f32, .defaultValue = 800}, comptime height: struct{comptime type: type = f32, comptime defaultValue: comptime_float = 600} = .{.type = f32, .defaultValue = 600}, comptime c: struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1, comptime comptime_float = -2, comptime comptime_float = -0.5} = .{-1, -1, -2, -0.5}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 2, comptime comptime_float = 0.5} = .{1, 1, 2, 0.5}, comptime defaultValue: struct{comptime comptime_float = -0.4, comptime comptime_float = -0.68, comptime comptime_float = -0.36, comptime comptime_float = -0.04} = .{-0.4, -0.68, -0.36, -0.04}} = .{.type = @Vector(4, f32), .minValue = .{-1, -1, -2, -0.5}, .maxValue = .{1, 1, 2, 0.5}, .defaultValue = .{-0.4, -0.68, -0.36, -0.04}}, comptime w: struct{comptime type: type = f32, comptime minValue: comptime_float = -1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = -1, .maxValue = 1, .defaultValue = 0}, comptime camDistance: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 3} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 3}, comptime rotationY: struct{comptime type: type = f32, comptime minValue: comptime_float = -5, comptime maxValue: comptime_float = 5, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = -5, .maxValue = 5, .defaultValue = 0}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pe}],methods:[],template:null},slot:14});Object.assign(z,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:66});const cs=new Uint8Array([]),ys=new Uint8Array([132,30,16,0]),ps=new Uint8Array([3,0,0,0]);Object.assign(fe,{...t,type:2,name:"struct{comptime channels: comptime_int = 3}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:z}],methods:[],template:{memory:{array:cs},slots:{0:{structure:z,memory:{array:ys},slots:{0:{structure:p,memory:{array:ps},address:1056388}}}}}},slot:52});Object.assign(G,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 3}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:51});const fs=new Uint8Array([]),bs=new Uint8Array([170,170,170,170]);Object.assign(be,{...t,type:2,name:"struct{comptime inputUsedToTest: struct{comptime channels: comptime_int = 3} = .{.channels = 3}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"inputUsedToTest",structure:G}],methods:[],template:{memory:{array:fs},slots:{0:{structure:G,memory:{array:bs},slots:{0:{structure:fe,memory:{array:c},address:-1431655766}}}}}},slot:17});Object.assign(H,{...t,type:11,name:"*struct{comptime inputUsedToTest: struct{comptime channels: comptime_int = 3} = .{.channels = 3}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:16});const ds=new Uint8Array([]),hs=new Uint8Array([128,30,16,0]),gs=new Uint8Array([4,0,0,0]);Object.assign(de,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:z}],methods:[],template:{memory:{array:ds},slots:{0:{structure:z,memory:{array:hs},slots:{0:{structure:p,memory:{array:gs},address:1056384}}}}}},slot:54});Object.assign(J,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:de}],methods:[],template:null},slot:53});const Ss=new Uint8Array([]),zs=new Uint8Array([170,170,170,170]);Object.assign(he,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:J}],methods:[],template:{memory:{array:Ss},slots:{0:{structure:J,memory:{array:zs},slots:{0:{structure:de,memory:{array:c},address:-1431655766}}}}}},slot:19});Object.assign(N,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:he}],methods:[],template:null},slot:18});const Os=new Uint8Array([]),_s=new Uint8Array([]),ws=new Uint8Array([196,250,15,0]),Rs=new Uint8Array([131,65,16,0]),Vs=new Uint8Array([100,101,114,115,99,104,109,97,108,101,46,99,111,109,0]),qs=new Uint8Array([4,251,15,0]),Us=new Uint8Array([119,65,16,0]),As=new Uint8Array([68,101,114,32,83,99,104,109,97,108,101,0]),js=new Uint8Array([68,251,15,0]),Ps=new Uint8Array([1,0,0,0]),xs=new Uint8Array([156,251,15,0]),Is=new Uint8Array([86,65,16,0]),ks=new Uint8Array([82,97,121,116,114,97,99,101,115,32,97,32,81,117,97,116,101,114,110,105,111,110,32,74,117,108,105,97,32,115,101,116,0]),Cs=new Uint8Array([170,170,170,170]),Ts=new Uint8Array([170,170,170,170]),vs=new Uint8Array([170,170,170,170]);Object.assign(Ue,{...t,type:2,name:"rt-julia.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Os}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:k},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:C},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:d},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:T},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:L},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:H},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:N}],methods:[],template:{memory:{array:_s},slots:{0:{structure:k,memory:{array:ws},slots:{0:{structure:Z,memory:{array:Rs},slots:{0:{structure:X,memory:{array:Vs},address:1065347}}}}},1:{structure:C,memory:{array:qs},slots:{0:{structure:te,memory:{array:Us},slots:{0:{structure:ee,memory:{array:As},address:1065335}}}}},2:{structure:d,memory:{array:js},slots:{0:{structure:p,memory:{array:Ps}}}},3:{structure:T,memory:{array:xs},slots:{0:{structure:re,memory:{array:Is},slots:{0:{structure:se,memory:{array:ks},address:1065302}}}}},4:{structure:L,memory:{array:Cs},slots:{0:{structure:pe,memory:{array:c},address:-1431655766}}},5:{structure:H,memory:{array:Ts},slots:{0:{structure:be,memory:{array:c},address:-1431655766}}},6:{structure:N,memory:{array:vs},slots:{0:{structure:he,memory:{array:c},address:-1431655766}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:24});Object.assign(ge,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(Se,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ge}],methods:[],template:null},slot:22});Object.assign(y,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:25});const Ds=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ze,{...t,type:9,name:"rt-julia.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:p},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:p}],methods:[],template:{memory:{array:Ds}}},slot:26});Object.assign(w,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:w}],methods:[],template:null},slot:27});Object.assign(R,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:28});Object.assign(Ae,{...t,type:13,name:"@Vector(3, f32)",length:3,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:55});const Es=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ks=new Uint8Array([]),Fs=new Uint8Array([0,253,15,0]),Ms=new Uint8Array([3,0,0,0]);Object.assign(Q,{...t,type:2,name:"rt-julia.Image(u8,3,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Se},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:y},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:y},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ze},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:w},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:R}],methods:[],template:{memory:{array:Es}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:Ae},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Ks},slots:{0:{structure:d,memory:{array:Fs},slots:{0:{structure:p,memory:{array:Ms}}}}}}},slot:21});const Ys=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),$s=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Bs=new Uint8Array([0,0,0,0,0,0,0,0]),De=new Uint8Array([]);Object.assign(q,{...t,type:2,name:"rt-julia.KernelInput(u8,rt-julia.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"inputUsedToTest",structure:Q}],methods:[],template:{memory:{array:Ys},slots:{0:{structure:Q,memory:{array:$s},slots:{0:{structure:Se,memory:{array:Bs},slots:{0:{structure:ge,memory:{array:De}}}}}}}}},slot:20});Object.assign(Oe,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(_e,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Oe}],methods:[],template:null},slot:31});const Ls=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Gs=new Uint8Array([]),Hs=new Uint8Array([104,253,15,0]),Js=new Uint8Array([4,0,0,0]);Object.assign(W,{...t,type:2,name:"rt-julia.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:_e},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:y},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:y},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ze},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:w},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:R}],methods:[],template:{memory:{array:Ls}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:V},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Gs},slots:{0:{structure:d,memory:{array:Hs},slots:{0:{structure:p,memory:{array:Js}}}}}}},slot:30});const Ns=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Qs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ws=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(U,{...t,type:2,name:"rt-julia.KernelOutput(u8,rt-julia.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:W}],methods:[],template:{memory:{array:Ns},slots:{0:{structure:W,memory:{array:Qs},slots:{0:{structure:_e,memory:{array:Ws},slots:{0:{structure:Oe,memory:{array:De}}}}}}}}},slot:29});const Xs=new Uint8Array([205,204,204,190,123,20,46,191,236,81,184,190,10,215,35,189,0,0,72,68,0,0,22,68,0,0,0,0,0,0,64,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);Object.assign(A,{...t,type:2,name:"rt-julia.KernelParameters(rt-julia.kernel)",length:1,byteSize:48,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"width",structure:u},{...e,type:4,isRequired:!1,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"height",structure:u},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:128,byteSize:16,slot:2,name:"c",structure:V},{...e,type:4,isRequired:!1,bitOffset:192,bitSize:32,byteSize:4,slot:3,name:"w",structure:u},{...e,type:4,isRequired:!1,bitOffset:224,bitSize:32,byteSize:4,slot:4,name:"camDistance",structure:u},{...e,type:4,isRequired:!1,bitOffset:256,bitSize:32,byteSize:4,slot:5,name:"rotationY",structure:u}],methods:[],template:{memory:{array:Xs}}},slot:32});Object.assign(je,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(rt-julia.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:56});Object.assign(Pe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(rt-julia.createOutput)).Fn.return_type.?).ErrorUnion.error_set!rt-julia.KernelOutput(u8,rt-julia.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:je}],methods:[],template:null},slot:37});Object.assign(xe,{...t,type:3,name:"createOutput",length:1,byteSize:112,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:384,bitSize:32,byteSize:4,slot:0,name:"0",structure:y},{...e,type:3,bitOffset:416,bitSize:32,byteSize:4,slot:1,name:"1",structure:y},{...e,type:6,bitOffset:448,bitSize:192,byteSize:24,slot:2,name:"2",structure:q},{...e,type:6,bitOffset:0,bitSize:384,byteSize:48,slot:3,name:"3",structure:A},{...e,type:6,bitOffset:640,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Pe}],methods:[],template:null},slot:35});Object.assign(Ie,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(rt-julia.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:57});Object.assign(ke,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(rt-julia.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!rt-julia.KernelOutput(u8,rt-julia.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Ie}],methods:[],template:null},slot:38});Object.assign(Ce,{...t,type:3,name:"createPartialOutput",length:1,byteSize:128,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:384,bitSize:32,byteSize:4,slot:0,name:"0",structure:y},{...e,type:3,bitOffset:416,bitSize:32,byteSize:4,slot:1,name:"1",structure:y},{...e,type:3,bitOffset:448,bitSize:32,byteSize:4,slot:2,name:"2",structure:y},{...e,type:3,bitOffset:480,bitSize:32,byteSize:4,slot:3,name:"3",structure:y},{...e,type:6,bitOffset:512,bitSize:192,byteSize:24,slot:4,name:"4",structure:q},{...e,type:6,bitOffset:0,bitSize:384,byteSize:48,slot:5,name:"5",structure:A},{...e,type:6,bitOffset:704,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ke}],methods:[],template:null},slot:36});const Zs={argStruct:xe,thunk:8,name:"createOutput"},er={argStruct:Ce,thunk:2,name:"createPartialOutput"};Object.assign(Te,{...t,type:2,name:"rt-julia",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:De}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:Ue},{...e,type:7,isRequired:!1,name:"Input",structure:q},{...e,type:7,isRequired:!1,name:"Output",structure:U},{...e,type:7,isRequired:!1,name:"Parameters",structure:A}],methods:[Zs,er],template:null},slot:0});const tr=[h,X,Z,k,ee,te,C,p,d,se,re,T,u,r,s,ae,v,me,D,V,ie,E,oe,K,ne,F,ue,M,le,Y,ce,$,ye,B,pe,L,z,fe,G,be,H,de,J,he,N,Ue,O,ge,Se,y,ze,w,R,Ae,Q,q,Oe,_e,W,U,A,je,Pe,xe,Ie,ke,Ce,Te],sr=ot(tr),rr=Te.constructor,ar=(async()=>{const o=new URL("rt-julia-f4a5a57f.wasm",import.meta.url).href;return fetch(o)})();nt(ar,{...sr,writeBack:!0});const{createOutput:yr,createPartialOutput:mr,kernel:qe,Input:ir,Output:pr,Parameters:fr}=rr;function or(o,l,m,a,i={},g={}){if(Array.isArray(i)){const b=i;i={};for(const[f,S]of Object.keys(qe.inputImages).entries())i[S]=b[f]}const j=new ir(void 0),P=Object.keys(qe.inputImages),n=[];let _;for(const b of P){let f=i[b];if(f||(P.length===1&&["data","width","height"].every(S=>!!i[S])?f=i:n.push(b)),j[b]=f,_){if(f.colorSpace!==_)throw new Error(`Input images must all use the same color space: ${_}`)}else _=f.colorSpace}if(n.length>0)throw new Error(`Missing input image${n.length>1?"s":""}: ${n.join(", ")}`);const we=mr(o,l,m,a,j,g),Ee=b=>{const f=Object.keys(b),S={};for(const Ke of f){const{data:{typedArray:x},width:Fe,height:Ye}=b[Ke];let I;if(typeof ImageData=="function"){const $e=new Uint8ClampedArray(x.buffer,x.byteOffset,x.byteLength);I=new ImageData($e,Fe,a,{colorSpace:_})}else I={data:x,width:Fe,height:Ye};if(f.length===1)return I;S[Ke]=I}return S};return we[Symbol.toStringTag]==="Promise"?we.then(Ee):Ee(we)}function nr(){const o={};for(let[l,m]of Object.entries(qe)){if(l==="parameters"){const a={};for(const[i,g]of Object.entries(m)){const j=a[i]={};for(let[P,n]of Object.entries(g))typeof n=="object"?"string"in n?n=n.string:n=Me(n):typeof n=="function"&&(n=ur(n.name)),j[P]=n}m=a}else typeof m=="object"&&("string"in m?m=m.string:m=m.valueOf());o[l]=m}return o}function Me(o){const l=[];for(let[m,a]of Object.entries(o))typeof a=="object"&&(a=Me(a)),l[m]=a;return l}function ur(o){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[o]}onmessage=o=>{const[l,m,...a]=o.data;lr(l,a).then(([i,g])=>{postMessage([l,m,i],{transfer:g})}).catch(i=>{postMessage(["error",m,i])})};async function lr(o,l){switch(o){case"getKernelInfo":return[nr(...l)];case"createPartialImageData":const a=await or(...l),i=[];if("data"in a&&"width"in a&&"height"in a)i.push(a.data.buffer);else for(const g of Object.entries(a))i.push(a.data.buffer);return[a,i];default:throw new Error(`Unknown function: ${o}`)}}
