import{u as Ae,a as Ue,b as Pe,d as Ve,c as ke,e as Ie,f as Ce,g as ve,h as xe,i as Ee,j as Ke,k as De,l as Fe,m as Me,o as _e,n as Te,p as $e,q as Be}from"./index-d64bc850.js";Ae();Ue();Pe();Ve();ke();Ie();Ce();ve();xe();Ee();Ke();De();Fe();Me();_e();Te();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},f={},L={},G={},v={},H={},J={},x={},c={},b={},N={},Q={},E={},S={},W={},m={},n={},j={},g={},X={},K={},Y={},D={},Z={},F={},ee={},M={},q={},z={},te={},_={},se={},T={},ye={},O={},re={},ae={},l={},ne={},R={},ie={},$={},A={},ue={},oe={},B={},U={},P={},ce={},be={},pe={},fe={},Se={},de={},he={};Object.assign(f,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:5});Object.assign(L,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:4});Object.assign(G,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:3});Object.assign(v,{...t,type:11,name:"*const *const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:2});Object.assign(H,{...t,type:1,name:"[9:0]u8",length:9,byteSize:10,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:8});Object.assign(J,{...t,type:11,name:"*const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:7});Object.assign(x,{...t,type:11,name:"*const *const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:6});Object.assign(c,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:10});Object.assign(b,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:9});Object.assign(N,{...t,type:1,name:"[6:0]u8",length:6,byteSize:7,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:13});Object.assign(Q,{...t,type:11,name:"*const [6:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:12});Object.assign(E,{...t,type:11,name:"*const *const [6:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:11});Object.assign(S,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:33});Object.assign(W,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:32});Object.assign(m,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:m}],methods:[],template:null},slot:52});Object.assign(n,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:51});const Le=new Uint8Array,Ge=new Uint8Array([128,248,15,0]),He=new Uint8Array([0,0,0,0,0,0,0,0]),Je=new Uint8Array([168,248,15,0]),Ne=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(j,{...t,type:2,name:"Struct0014",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:n},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:n}],methods:[],template:{memory:{array:Le},slots:{0:{structure:n,memory:{array:Ge},slots:{0:{structure:m,memory:{array:He}}}},1:{structure:n,memory:{array:Je},slots:{0:{structure:m,memory:{array:Ne}}}}}}},slot:48});Object.assign(g,{...t,type:11,name:"Struct0012",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:j}],methods:[],template:null},slot:47});const Qe=new Uint8Array,We=new Uint8Array([96,253,15,0]),Xe=new Uint8Array([0,0,0,0,0,0,176,64]),Ye=new Uint8Array([120,253,15,0]),Ze=new Uint8Array([0,0,0,0,0,0,176,64]);Object.assign(X,{...t,type:2,name:"Struct0015",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:n},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:n}],methods:[],template:{memory:{array:Qe},slots:{0:{structure:n,memory:{array:We},slots:{0:{structure:m,memory:{array:Xe}}}},1:{structure:n,memory:{array:Ye},slots:{0:{structure:m,memory:{array:Ze}}}}}}},slot:50});Object.assign(K,{...t,type:11,name:"Struct0013",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:49});const et=new Uint8Array,tt=new Uint8Array([170,170,170,170]),st=new Uint8Array,rt=new Uint8Array([170,170,170,170]),at=new Uint8Array,nt=new Uint8Array([170,170,170,170]),it=new Uint8Array;Object.assign(Y,{...t,type:2,name:"Struct0009",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:W},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:g},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:K},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:g}],methods:[],template:{memory:{array:et},slots:{0:{structure:g,memory:{array:tt},slots:{0:{structure:j,memory:{array:st}}}},1:{structure:K,memory:{array:rt},slots:{0:{structure:X,memory:{array:at}}}},2:{structure:g,memory:{array:nt},slots:{0:{structure:j,memory:{array:it}}}}}}},slot:39});Object.assign(D,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:38});const ut=new Uint8Array,ot=new Uint8Array([112,253,15,0]),lt=new Uint8Array([123,20,174,71,225,122,132,63]),mt=new Uint8Array([136,253,15,0]),yt=new Uint8Array([0,0,0,0,0,0,0,64]),ct=new Uint8Array([144,252,15,0]),bt=new Uint8Array([154,153,153,153,153,153,185,63]);Object.assign(Z,{...t,type:2,name:"Struct0010",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:n},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:n},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:n}],methods:[],template:{memory:{array:ut},slots:{0:{structure:n,memory:{array:ot},slots:{0:{structure:m,memory:{array:lt}}}},1:{structure:n,memory:{array:mt},slots:{0:{structure:m,memory:{array:yt}}}},2:{structure:n,memory:{array:ct},slots:{0:{structure:m,memory:{array:bt}}}}}}},slot:41});Object.assign(F,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:40});const pt=new Uint8Array,ft=new Uint8Array([170,170,170,170]),St=new Uint8Array,dt=new Uint8Array([170,170,170,170]),ht=new Uint8Array;Object.assign(ee,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"center",structure:D},{...e,type:8,isRequired:!1,slot:1,name:"amplitude",structure:F}],methods:[],template:{memory:{array:pt},slots:{0:{structure:D,memory:{array:ft},slots:{0:{structure:Y,memory:{array:St}}}},1:{structure:F,memory:{array:dt},slots:{0:{structure:Z,memory:{array:ht}}}}}}},slot:15});Object.assign(M,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:14});const gt=new Uint8Array,zt=new Uint8Array([160,248,15,0]),Ot=new Uint8Array([4,0,0,0]);Object.assign(q,{...t,type:2,name:"Struct0011",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:gt},slots:{0:{structure:b,memory:{array:zt},slots:{0:{structure:c,memory:{array:Ot}}}}}}},slot:43});Object.assign(z,{...t,type:11,name:"Struct0008",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:42});const wt=new Uint8Array,jt=new Uint8Array([170,170,170,170]),Rt=new Uint8Array;Object.assign(te,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:z}],methods:[],template:{memory:{array:wt},slots:{0:{structure:z,memory:{array:jt},slots:{0:{structure:q,memory:{array:Rt}}}}}}},slot:17});Object.assign(_,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:16});const qt=new Uint8Array,At=new Uint8Array([170,170,170,170]),Ut=new Uint8Array;Object.assign(se,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:z}],methods:[],template:{memory:{array:qt},slots:{0:{structure:z,memory:{array:At},slots:{0:{structure:q,memory:{array:Ut}}}}}}},slot:19});Object.assign(T,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:18});const Pt=new Uint8Array,Vt=new Uint8Array,kt=new Uint8Array([36,36,16,0]),It=new Uint8Array([209,35,16,0]),Ct=new Uint8Array([110,101,116,46,110,105,99,111,112,116,101,114,101,46,102,105,108,116,101,114,115,0]),vt=new Uint8Array([32,36,16,0]),xt=new Uint8Array([188,35,16,0]),Et=new Uint8Array([110,105,99,111,112,116,101,114,101,0]),Kt=new Uint8Array([28,36,16,0]),Dt=new Uint8Array([1,0,0,0]),Ft=new Uint8Array([24,36,16,0]),Mt=new Uint8Array([164,35,16,0]),_t=new Uint8Array([106,105,116,116,101,114,0]),Tt=new Uint8Array([170,170,170,170]),$t=new Uint8Array,Bt=new Uint8Array([170,170,170,170]),Lt=new Uint8Array,Gt=new Uint8Array([170,170,170,170]),Ht=new Uint8Array;Object.assign(ye,{...t,type:2,name:"jitter.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Pt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:v},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:x},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:b},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:E},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:M},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:_},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:T}],methods:[],template:{memory:{array:Vt},slots:{0:{structure:v,memory:{array:kt},slots:{0:{structure:G,memory:{array:It},slots:{0:{structure:L,memory:{array:Ct}}}}}},1:{structure:x,memory:{array:vt},slots:{0:{structure:J,memory:{array:xt},slots:{0:{structure:H,memory:{array:Et}}}}}},2:{structure:b,memory:{array:Kt},slots:{0:{structure:c,memory:{array:Dt}}}},3:{structure:E,memory:{array:Ft},slots:{0:{structure:Q,memory:{array:Mt},slots:{0:{structure:N,memory:{array:_t}}}}}},4:{structure:M,memory:{array:Tt},slots:{0:{structure:ee,memory:{array:$t}}}},5:{structure:_,memory:{array:Bt},slots:{0:{structure:te,memory:{array:Lt}}}},6:{structure:T,memory:{array:Gt},slots:{0:{structure:se,memory:{array:Ht}}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:24});Object.assign(re,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(ae,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:re}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const Jt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ne,{...t,type:9,name:"jitter.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:c},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:c}],methods:[],template:{memory:{array:Jt}}},slot:26});Object.assign(R,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:27});Object.assign(ie,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:44});const Nt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Qt=new Uint8Array,Wt=new Uint8Array([108,35,16,0]),Xt=new Uint8Array([4,0,0,0]);Object.assign($,{...t,type:2,name:"jitter.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ae},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ne},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:R}],methods:[],template:{memory:{array:Nt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:ie},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:Qt},slots:{0:{structure:b,memory:{array:Wt},slots:{0:{structure:c,memory:{array:Xt}}}}}}},slot:21});const Yt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Zt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),we=new Uint8Array([0,0,0,0,0,0,0,0]),es=new Uint8Array;Object.assign(A,{...t,type:2,name:"jitter.KernelInput(u8,jitter.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:$}],methods:[],template:{memory:{array:Yt},slots:{0:{structure:$,memory:{array:Zt},slots:{0:{structure:ae,memory:{array:we},address:1047568,slots:{0:{structure:re,memory:{array:es},address:0}}}}}}}},slot:20});Object.assign(ue,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(oe,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ue}],methods:[],template:null},slot:30});const ts=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ss=new Uint8Array,rs=new Uint8Array([108,35,16,0]),as=new Uint8Array([4,0,0,0]);Object.assign(B,{...t,type:2,name:"jitter.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:oe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ne},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:R}],methods:[],template:{memory:{array:ts}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:ie},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:ss},slots:{0:{structure:b,memory:{array:rs},slots:{0:{structure:c,memory:{array:as}}}}}}},slot:29});const ns=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),is=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),us=new Uint8Array;Object.assign(U,{...t,type:2,name:"jitter.KernelOutput(u8,jitter.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:B}],methods:[],template:{memory:{array:ns},slots:{0:{structure:B,memory:{array:is},slots:{0:{structure:oe,memory:{array:we},address:1047568,slots:{0:{structure:ue,memory:{array:us},address:0}}}}}}}},slot:28});const os=new Uint8Array([0,0,0,0,0,0,0,0,205,204,204,61,0,0,0,0]);Object.assign(P,{...t,type:2,name:"jitter.KernelParameters(jitter.kernel)",length:1,byteSize:16,align:3,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"center",structure:W},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"amplitude",structure:S}],methods:[],template:{memory:{array:os}}},slot:31});Object.assign(ce,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(jitter.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:45});Object.assign(be,{...t,type:7,name:"ErrorSet0000!jitter.KernelOutput(u8,jitter.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ce}],methods:[],template:null},slot:36});Object.assign(pe,{...t,type:3,name:"createOutput",length:1,byteSize:80,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:192,bitSize:192,byteSize:24,slot:2,name:"2",structure:A},{...e,type:6,bitOffset:0,bitSize:128,byteSize:16,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:be}],methods:[],template:null},slot:34});Object.assign(fe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(jitter.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:46});Object.assign(Se,{...t,type:7,name:"ErrorSet0001!jitter.KernelOutput(u8,jitter.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:fe}],methods:[],template:null},slot:37});Object.assign(de,{...t,type:3,name:"createPartialOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:4,name:"4",structure:A},{...e,type:6,bitOffset:0,bitSize:128,byteSize:16,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Se}],methods:[],template:null},slot:35});const ls=new Uint8Array,ms={argStruct:pe,thunk:8,name:"createOutput"},ys={argStruct:de,thunk:2,name:"createPartialOutput"};Object.assign(he,{...t,type:2,name:"jitter",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ls}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ye},{...e,type:7,isRequired:!1,name:"Input",structure:A},{...e,type:7,isRequired:!1,name:"Output",structure:U},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[ms,ys],template:null},slot:0});const cs=[f,L,G,v,H,J,x,c,b,N,Q,E,S,W,m,n,j,g,X,K,Y,D,Z,F,ee,M,q,z,te,_,se,T,ye,O,re,ae,l,ne,R,ie,$,A,ue,oe,B,U,P,ce,be,pe,fe,Se,de,he],bs=$e(cs),ps=he.constructor,fs=(async()=>{const i=new URL("jitter-6544183f.wasm",import.meta.url).href;return fetch(i)})();Be(fs,{...bs,writeBack:!0});const{createOutput:js,createPartialOutput:Ss,kernel:me,Input:ds,Output:Rs,Parameters:qs}=ps;function hs(i,o,r,s,a={},d={}){if(Array.isArray(a)){const p=a;a={};for(const[y,h]of Object.keys(me.inputImages).entries())a[h]=p[y]}const V=new ds(void 0),k=Object.keys(me.inputImages),u=[];let w;for(const p of k){let y=a[p];if(y||(k.length===1&&["data","width","height"].every(h=>!!a[h])?y=a:u.push(p)),V[p]=y,w){if(y.colorSpace!==w)throw new Error(`Input images must all use the same color space: ${w}`)}else w=y.colorSpace}if(u.length>0)throw new Error(`Missing input image${u.length>1?"s":""}: ${u.join(", ")}`);const le=Ss(i,o,r,s,V,d),ge=p=>{const y=Object.keys(p),h={};for(const ze of y){const{data:{typedArray:I},width:Oe,height:Re}=p[ze];let C;if(typeof ImageData=="function"){const qe=new Uint8ClampedArray(I.buffer,I.byteOffset,I.byteLength);C=new ImageData(qe,Oe,s,{colorSpace:w})}else C={data:I,width:Oe,height:Re};if(y.length===1)return C;h[ze]=C}return h};return le[Symbol.toStringTag]==="Promise"?le.then(ge):ge(le)}function gs(){const i={};for(let[o,r]of Object.entries(me)){if(o==="parameters"){const s={};for(const[a,d]of Object.entries(r)){const V=s[a]={};for(let[k,u]of Object.entries(d))typeof u=="object"?"string"in u?u=u.string:u=je(u):typeof u=="function"&&(u=zs(u.name)),V[k]=u}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());i[o]=r}return i}function je(i){const o=[];for(let[r,s]of Object.entries(i))typeof s=="object"&&(s=je(s)),o[r]=s;return o}function zs(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[o,r,...s]=i.data;Os(o,s).then(([a,d])=>{postMessage([o,r,a],{transfer:d})}).catch(a=>{postMessage(["error",r,a])})};async function Os(i,o){switch(i){case"getKernelInfo":return[gs(...o)];case"createPartialImageData":const s=await hs(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const d of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${i}`)}}
