import{u as ze,a as Oe,b as we,c as Re,d as qe,e as je,f as Ae,g as Ue,h as Pe,i as ke,j as Ie,k as Ve,l as Ce,m as ve,o as Ee,n as xe,p as Ke,q as De}from"./index-422d9c98.js";ze();Oe();we();Re();qe();je();Ae();Ue();Pe();ke();Ie();Ve();Ce();ve();Ee();xe();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},d={},$={},B={},E={},L={},G={},x={},m={},c={},H={},J={},K={},S={},p={},b={},q={},z={},N={},D={},A={},O={},Q={},F={},W={},M={},ne={},w={},X={},Y={},u={},Z={},j={},ee={},_={},U={},te={},se={},T={},P={},k={},ie={},oe={},ue={},le={},me={},ce={},ye={};Object.assign(d,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:5});Object.assign($,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:4});Object.assign(B,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:3});Object.assign(E,{...t,type:11,name:"*const *const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:2});Object.assign(L,{...t,type:1,name:"[9:0]u8",length:9,byteSize:10,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:8});Object.assign(G,{...t,type:11,name:"*const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:7});Object.assign(x,{...t,type:11,name:"*const *const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:6});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:10});Object.assign(c,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:9});Object.assign(H,{...t,type:1,name:"[8:0]u8",length:8,byteSize:9,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:13});Object.assign(J,{...t,type:11,name:"*const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:12});Object.assign(K,{...t,type:11,name:"*const *const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:11});Object.assign(S,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:32});Object.assign(p,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:p}],methods:[],template:null},slot:45});Object.assign(b,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:44});const Fe=new Uint8Array([]),Me=new Uint8Array([120,250,15,0]),_e=new Uint8Array([0,0,0,0,0,0,0,0]),Te=new Uint8Array([160,250,15,0]),$e=new Uint8Array([0,0,0,0,0,0,176,64]),Be=new Uint8Array([200,250,15,0]),Le=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(q,{...t,type:2,name:"Struct0008",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:b},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:b}],methods:[],template:{memory:{array:Fe},slots:{0:{structure:b,memory:{array:Me},slots:{0:{structure:p,memory:{array:_e}}}},1:{structure:b,memory:{array:Te},slots:{0:{structure:p,memory:{array:$e}}}},2:{structure:b,memory:{array:Be},slots:{0:{structure:p,memory:{array:Le}}}}}}},slot:38});Object.assign(z,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:37});const Ge=new Uint8Array([]),He=new Uint8Array([170,170,170,170]),f=new Uint8Array([]),Je=new Uint8Array([170,170,170,170]);Object.assign(N,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"center",structure:z},{...e,type:8,isRequired:!1,slot:1,name:"width",structure:z}],methods:[],template:{memory:{array:Ge},slots:{0:{structure:z,memory:{array:He},slots:{0:{structure:q,memory:{array:f},address:-1431655766}}},1:{structure:z,memory:{array:Je},slots:{0:{structure:q,memory:{array:f},address:-1431655766}}}}}},slot:15});Object.assign(D,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:14});const Ne=new Uint8Array([]),Qe=new Uint8Array([192,250,15,0]),We=new Uint8Array([4,0,0,0]);Object.assign(A,{...t,type:2,name:"Struct0009",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:Ne},slots:{0:{structure:c,memory:{array:Qe},slots:{0:{structure:m,memory:{array:We}}}}}}},slot:40});Object.assign(O,{...t,type:11,name:"Struct0007",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:39});const Xe=new Uint8Array([]),Ye=new Uint8Array([170,170,170,170]);Object.assign(Q,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:O}],methods:[],template:{memory:{array:Xe},slots:{0:{structure:O,memory:{array:Ye},slots:{0:{structure:A,memory:{array:f},address:-1431655766}}}}}},slot:17});Object.assign(F,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:16});const Ze=new Uint8Array([]),et=new Uint8Array([170,170,170,170]);Object.assign(W,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:O}],methods:[],template:{memory:{array:Ze},slots:{0:{structure:O,memory:{array:et},slots:{0:{structure:A,memory:{array:f},address:-1431655766}}}}}},slot:19});Object.assign(M,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:18});const tt=new Uint8Array([]),st=new Uint8Array([]),rt=new Uint8Array([252,250,15,0]),at=new Uint8Array([126,35,16,0]),nt=new Uint8Array([110,101,116,46,110,105,99,111,112,116,101,114,101,46,102,105,108,116,101,114,115,0]),it=new Uint8Array([60,251,15,0]),ot=new Uint8Array([116,35,16,0]),ut=new Uint8Array([110,105,99,111,112,116,101,114,101,0]),lt=new Uint8Array([124,251,15,0]),mt=new Uint8Array([1,0,0,0]),ct=new Uint8Array([212,251,15,0]),yt=new Uint8Array([107,35,16,0]),bt=new Uint8Array([109,101,114,99,97,116,111,114,0]),pt=new Uint8Array([170,170,170,170]),ft=new Uint8Array([170,170,170,170]),dt=new Uint8Array([170,170,170,170]);Object.assign(ne,{...t,type:2,name:"mercator.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:tt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:E},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:x},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:c},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:K},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:D},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:F},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:M}],methods:[],template:{memory:{array:st},slots:{0:{structure:E,memory:{array:rt},slots:{0:{structure:B,memory:{array:at},slots:{0:{structure:$,memory:{array:nt},address:1057662}}}}},1:{structure:x,memory:{array:it},slots:{0:{structure:G,memory:{array:ot},slots:{0:{structure:L,memory:{array:ut},address:1057652}}}}},2:{structure:c,memory:{array:lt},slots:{0:{structure:m,memory:{array:mt}}}},3:{structure:K,memory:{array:ct},slots:{0:{structure:J,memory:{array:yt},slots:{0:{structure:H,memory:{array:bt},address:1057643}}}}},4:{structure:D,memory:{array:pt},slots:{0:{structure:N,memory:{array:f},address:-1431655766}}},5:{structure:F,memory:{array:ft},slots:{0:{structure:Q,memory:{array:f},address:-1431655766}}},6:{structure:M,memory:{array:dt},slots:{0:{structure:W,memory:{array:f},address:-1431655766}}}}}},slot:1});Object.assign(w,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:24});Object.assign(X,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(Y,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:X}],methods:[],template:null},slot:22});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:25});const St=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Z,{...t,type:9,name:"mercator.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:St}}},slot:26});Object.assign(j,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:j}],methods:[],template:null},slot:27});Object.assign(ee,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:41});const ht=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),gt=new Uint8Array([]),zt=new Uint8Array([72,253,15,0]),Ot=new Uint8Array([4,0,0,0]);Object.assign(_,{...t,type:2,name:"mercator.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Y},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Z},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:j}],methods:[],template:{memory:{array:ht}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:ee},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:gt},slots:{0:{structure:c,memory:{array:zt},slots:{0:{structure:m,memory:{array:Ot}}}}}}},slot:21});const wt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Rt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),qt=new Uint8Array([0,0,0,0,0,0,0,0]),be=new Uint8Array([]);Object.assign(U,{...t,type:2,name:"mercator.KernelInput(u8,mercator.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:_}],methods:[],template:{memory:{array:wt},slots:{0:{structure:_,memory:{array:Rt},slots:{0:{structure:Y,memory:{array:qt},slots:{0:{structure:X,memory:{array:be}}}}}}}}},slot:20});Object.assign(te,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(se,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:te}],methods:[],template:null},slot:30});const jt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),At=new Uint8Array([]),Ut=new Uint8Array([72,253,15,0]),Pt=new Uint8Array([4,0,0,0]);Object.assign(T,{...t,type:2,name:"mercator.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:se},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Z},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:j}],methods:[],template:{memory:{array:jt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:ee},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:At},slots:{0:{structure:c,memory:{array:Ut},slots:{0:{structure:m,memory:{array:Pt}}}}}}},slot:29});const kt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),It=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Vt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(P,{...t,type:2,name:"mercator.KernelOutput(u8,mercator.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:T}],methods:[],template:{memory:{array:kt},slots:{0:{structure:T,memory:{array:It},slots:{0:{structure:se,memory:{array:Vt},slots:{0:{structure:te,memory:{array:be}}}}}}}}},slot:28});const Ct=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(k,{...t,type:2,name:"mercator.KernelParameters(mercator.kernel)",length:1,byteSize:8,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"center",structure:S},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"width",structure:S}],methods:[],template:{memory:{array:Ct}}},slot:31});Object.assign(ie,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(mercator.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:42});Object.assign(oe,{...t,type:7,name:"ErrorSet0000!mercator.KernelOutput(u8,mercator.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ie}],methods:[],template:null},slot:35});Object.assign(ue,{...t,type:3,name:"createOutput",length:1,byteSize:68,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:U},{...e,type:6,bitOffset:256,bitSize:64,byteSize:8,slot:3,name:"3",structure:k},{...e,type:6,bitOffset:320,bitSize:224,byteSize:28,slot:4,name:"retval",structure:oe}],methods:[],template:null},slot:33});Object.assign(le,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(mercator.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:43});Object.assign(me,{...t,type:7,name:"ErrorSet0001!mercator.KernelOutput(u8,mercator.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:le}],methods:[],template:null},slot:36});Object.assign(ce,{...t,type:3,name:"createPartialOutput",length:1,byteSize:76,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:U},{...e,type:6,bitOffset:320,bitSize:64,byteSize:8,slot:5,name:"5",structure:k},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:6,name:"retval",structure:me}],methods:[],template:null},slot:34});const vt={argStruct:ue,thunk:7,name:"createOutput"},Et={argStruct:ce,thunk:2,name:"createPartialOutput"};Object.assign(ye,{...t,type:2,name:"mercator",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:be}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ne},{...e,type:7,isRequired:!1,name:"Input",structure:U},{...e,type:7,isRequired:!1,name:"Output",structure:P},{...e,type:7,isRequired:!1,name:"Parameters",structure:k}],methods:[vt,Et],template:null},slot:0});const xt=[d,$,B,E,L,G,x,m,c,H,J,K,S,p,b,q,z,N,D,A,O,Q,F,W,M,ne,w,X,Y,u,Z,j,ee,_,U,te,se,T,P,k,ie,oe,ue,le,me,ce,ye],Kt=Ke(xt),Dt=ye.constructor,Ft=(async()=>{const n=new URL("mercator-33cd7d41.wasm",import.meta.url).href;return fetch(n)})();De(Ft,{...Kt,writeBack:!0});const{createOutput:Ht,createPartialOutput:Mt,kernel:ae,Input:_t,Output:Jt,Parameters:Nt}=Dt;function Tt(n,o,r,s,a={},h={}){if(Array.isArray(a)){const y=a;a={};for(const[l,g]of Object.keys(ae.inputImages).entries())a[g]=y[l]}const I=new _t(void 0),V=Object.keys(ae.inputImages),i=[];let R;for(const y of V){let l=a[y];if(l||(V.length===1&&["data","width","height"].every(g=>!!a[g])?l=a:i.push(y)),I[y]=l,R){if(l.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=l.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const re=Mt(n,o,r,s,I,h),pe=y=>{const l=Object.keys(y),g={};for(const fe of l){const{data:{typedArray:C},width:de,height:he}=y[fe];let v;if(typeof ImageData=="function"){const ge=new Uint8ClampedArray(C.buffer,C.byteOffset,C.byteLength);v=new ImageData(ge,de,s,{colorSpace:R})}else v={data:C,width:de,height:he};if(l.length===1)return v;g[fe]=v}return g};return re[Symbol.toStringTag]==="Promise"?re.then(pe):pe(re)}function $t(){const n={};for(let[o,r]of Object.entries(ae)){if(o==="parameters"){const s={};for(const[a,h]of Object.entries(r)){const I=s[a]={};for(let[V,i]of Object.entries(h))typeof i=="object"?"string"in i?i=i.string:i=Se(i):typeof i=="function"&&(i=Bt(i.name)),I[V]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[o]=r}return n}function Se(n){const o=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=Se(s)),o[r]=s;return o}function Bt(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,r,...s]=n.data;Lt(o,s).then(([a,h])=>{postMessage([o,r,a],{transfer:h})}).catch(a=>{postMessage(["error",r,a])})};async function Lt(n,o){switch(n){case"getKernelInfo":return[$t(...o)];case"createPartialImageData":const s=await Tt(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const h of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
