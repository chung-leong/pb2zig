import{u as fe,a as de,b as Se,c as he,d as ge,e as ze,f as Oe,g as we,h as Re,i as qe,j as je,k as Ae,l as Ue,m as Pe,n as ke,o as Ie,p as Ve,q as Ce}from"./index-d64bc850.js";fe();de();Se();he();ge();ze();Oe();we();Re();qe();je();Ae();Ue();Pe();ke();Ie();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},b={},D={},F={},P={},M={},_={},k={},m={},c={},T={},$={},I={},B={},V={},z={},d={},L={},C={},G={},v={},ee={},S={},H={},J={},u={},N={},g={},E={},Q={},x={},O={},W={},X={},K={},w={},R={},te={},se={},re={},ae={},ne={},ie={},oe={};Object.assign(b,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:5});Object.assign(D,{...t,type:1,name:"[12:0]u8",length:12,byteSize:13,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:4});Object.assign(F,{...t,type:11,name:"*const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:D}],methods:[],template:null},slot:3});Object.assign(P,{...t,type:11,name:"*const *const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:F}],methods:[],template:null},slot:2});Object.assign(M,{...t,type:1,name:"[8:0]u8",length:8,byteSize:9,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:8});Object.assign(_,{...t,type:11,name:"*const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:M}],methods:[],template:null},slot:7});Object.assign(k,{...t,type:11,name:"*const *const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_}],methods:[],template:null},slot:6});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:10});Object.assign(c,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:9});Object.assign(T,{...t,type:1,name:"[37:0]u8",length:37,byteSize:38,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:13});Object.assign($,{...t,type:11,name:"*const [37:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[],template:null},slot:12});Object.assign(I,{...t,type:11,name:"*const *const [37:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:11});const ve=new Uint8Array;Object.assign(B,{...t,type:2,name:"Struct0003",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ve}}},slot:15});Object.assign(V,{...t,type:11,name:"Struct0000",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:14});const Ee=new Uint8Array,xe=new Uint8Array([48,252,15,0]),Ke=new Uint8Array([4,0,0,0]);Object.assign(z,{...t,type:2,name:"Struct0007",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:Ee},slots:{0:{structure:c,memory:{array:xe},slots:{0:{structure:m,memory:{array:Ke}}}}}}},slot:37});Object.assign(d,{...t,type:11,name:"Struct0006",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:z}],methods:[],template:null},slot:36});const De=new Uint8Array,Fe=new Uint8Array([170,170,170,170]),Me=new Uint8Array;Object.assign(L,{...t,type:2,name:"Struct0004",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"i",structure:d}],methods:[],template:{memory:{array:De},slots:{0:{structure:d,memory:{array:Fe},slots:{0:{structure:z,memory:{array:Me}}}}}}},slot:17});Object.assign(C,{...t,type:11,name:"Struct0001",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:16});const _e=new Uint8Array,Te=new Uint8Array([170,170,170,170]),$e=new Uint8Array;Object.assign(G,{...t,type:2,name:"Struct0005",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"o",structure:d}],methods:[],template:{memory:{array:_e},slots:{0:{structure:d,memory:{array:Te},slots:{0:{structure:z,memory:{array:$e}}}}}}},slot:19});Object.assign(v,{...t,type:11,name:"Struct0002",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:18});const Be=new Uint8Array,Le=new Uint8Array,Ge=new Uint8Array([224,7,16,0]),He=new Uint8Array([143,7,16,0]),Je=new Uint8Array([99,111,109,46,103,97,115,117,98,97,115,117,0]),Ne=new Uint8Array([220,7,16,0]),Qe=new Uint8Array([123,7,16,0]),We=new Uint8Array([103,97,115,117,98,97,115,117,0]),Xe=new Uint8Array([216,7,16,0]),Ye=new Uint8Array([1,0,0,0]),Ze=new Uint8Array([212,7,16,0]),et=new Uint8Array([68,7,16,0]),tt=new Uint8Array([102,108,97,115,104,32,99,111,109,112,97,116,105,98,108,101,32,101,114,111,100,101,32,102,105,108,116,101,114,32,39,99,114,111,115,115,39,0]),st=new Uint8Array([170,170,170,170]),rt=new Uint8Array,at=new Uint8Array([170,170,170,170]),nt=new Uint8Array,it=new Uint8Array([170,170,170,170]),ot=new Uint8Array;Object.assign(ee,{...t,type:2,name:"erode-cross.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Be}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:P},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:k},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:c},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:I},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:V},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:C},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:v}],methods:[],template:{memory:{array:Le},slots:{0:{structure:P,memory:{array:Ge},slots:{0:{structure:F,memory:{array:He},slots:{0:{structure:D,memory:{array:Je}}}}}},1:{structure:k,memory:{array:Ne},slots:{0:{structure:_,memory:{array:Qe},slots:{0:{structure:M,memory:{array:We}}}}}},2:{structure:c,memory:{array:Xe},slots:{0:{structure:m,memory:{array:Ye}}}},3:{structure:I,memory:{array:Ze},slots:{0:{structure:$,memory:{array:et},slots:{0:{structure:T,memory:{array:tt}}}}}},4:{structure:V,memory:{array:st},slots:{0:{structure:B,memory:{array:rt}}}},5:{structure:C,memory:{array:at},slots:{0:{structure:L,memory:{array:nt}}}},6:{structure:v,memory:{array:it},slots:{0:{structure:G,memory:{array:ot}}}}}}},slot:1});Object.assign(S,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:24});Object.assign(H,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:23});Object.assign(J,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:H}],methods:[],template:null},slot:22});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:25});const ut=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(N,{...t,type:9,name:"erode-cross.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:ut}}},slot:26});Object.assign(g,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:g}],methods:[],template:null},slot:27});Object.assign(E,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:E}],methods:[],template:null},slot:41});Object.assign(Q,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:E}],methods:[],template:null},slot:38});const lt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),mt=new Uint8Array,ct=new Uint8Array([12,7,16,0]),yt=new Uint8Array([4,0,0,0]);Object.assign(x,{...t,type:2,name:"erode-cross.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:J},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:N},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:g}],methods:[],template:{memory:{array:lt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:S},{...e,type:7,isRequired:!1,name:"FPixel",structure:Q},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:mt},slots:{0:{structure:c,memory:{array:ct},slots:{0:{structure:m,memory:{array:yt}}}}}}},slot:21});const bt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),pt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ce=new Uint8Array([0,0,0,0,0,0,0,0]),ft=new Uint8Array;Object.assign(O,{...t,type:2,name:"erode-cross.KernelInput(u8,erode-cross.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"i",structure:x}],methods:[],template:{memory:{array:bt},slots:{0:{structure:x,memory:{array:pt},slots:{0:{structure:J,memory:{array:ce},address:1047200,slots:{0:{structure:H,memory:{array:ft},address:0}}}}}}}},slot:20});Object.assign(W,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:23});Object.assign(X,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:W}],methods:[],template:null},slot:30});const dt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),St=new Uint8Array,ht=new Uint8Array([12,7,16,0]),gt=new Uint8Array([4,0,0,0]);Object.assign(K,{...t,type:2,name:"erode-cross.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:X},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:N},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:g}],methods:[],template:{memory:{array:dt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:S},{...e,type:7,isRequired:!1,name:"FPixel",structure:Q},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:St},slots:{0:{structure:c,memory:{array:ht},slots:{0:{structure:m,memory:{array:gt}}}}}}},slot:29});const zt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ot=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),wt=new Uint8Array;Object.assign(w,{...t,type:2,name:"erode-cross.KernelOutput(u8,erode-cross.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"o",structure:K}],methods:[],template:{memory:{array:zt},slots:{0:{structure:K,memory:{array:Ot},slots:{0:{structure:X,memory:{array:ce},address:1047200,slots:{0:{structure:W,memory:{array:wt},address:0}}}}}}}},slot:28});const Rt=new Uint8Array;Object.assign(R,{...t,type:2,name:"erode-cross.KernelParameters(erode-cross.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Rt}}},slot:31});Object.assign(te,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(erode-cross.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:39});Object.assign(se,{...t,type:7,name:"ErrorSet0000!erode-cross.KernelOutput(u8,erode-cross.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:w},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:te}],methods:[],template:null},slot:34});Object.assign(re,{...t,type:3,name:"createOutput",length:1,byteSize:60,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:O},{...e,type:6,bitOffset:480,bitSize:0,byteSize:0,slot:3,name:"3",structure:R},{...e,type:6,bitOffset:256,bitSize:224,byteSize:28,slot:4,name:"retval",structure:se}],methods:[],template:null},slot:32});Object.assign(ae,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(erode-cross.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:40});Object.assign(ne,{...t,type:7,name:"ErrorSet0001!erode-cross.KernelOutput(u8,erode-cross.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:w},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ae}],methods:[],template:null},slot:35});Object.assign(ie,{...t,type:3,name:"createPartialOutput",length:1,byteSize:68,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:O},{...e,type:6,bitOffset:544,bitSize:0,byteSize:0,slot:5,name:"5",structure:R},{...e,type:6,bitOffset:320,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ne}],methods:[],template:null},slot:33});const qt=new Uint8Array,jt={argStruct:re,thunk:5,name:"createOutput"},At={argStruct:ie,thunk:2,name:"createPartialOutput"};Object.assign(oe,{...t,type:2,name:"erode-cross",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:qt}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ee},{...e,type:7,isRequired:!1,name:"Input",structure:O},{...e,type:7,isRequired:!1,name:"Output",structure:w},{...e,type:7,isRequired:!1,name:"Parameters",structure:R}],methods:[jt,At],template:null},slot:0});const Ut=[b,D,F,P,M,_,k,m,c,T,$,I,B,V,z,d,L,C,G,v,ee,S,H,J,u,N,g,E,Q,x,O,W,X,K,w,R,te,se,re,ae,ne,ie,oe],Pt=Ve(Ut),kt=oe.constructor,It=(async()=>{const n=new URL("erode-cross-efad05f6.wasm",import.meta.url).href;return fetch(n)})();Ce(It,{...Pt,writeBack:!0});const{createOutput:Ft,createPartialOutput:Vt,kernel:Z,Input:Ct,Output:Mt,Parameters:_t}=kt;function vt(n,o,r,s,a={},p={}){if(Array.isArray(a)){const y=a;a={};for(const[l,f]of Object.keys(Z.inputImages).entries())a[f]=y[l]}const q=new Ct(void 0),j=Object.keys(Z.inputImages),i=[];let h;for(const y of j){let l=a[y];if(l||(j.length===1&&["data","width","height"].every(f=>!!a[f])?l=a:i.push(y)),q[y]=l,h){if(l.colorSpace!==h)throw new Error(`Input images must all use the same color space: ${h}`)}else h=l.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const Y=Vt(n,o,r,s,q,p),ue=y=>{const l=Object.keys(y),f={};for(const le of l){const{data:{typedArray:A},width:me,height:be}=y[le];let U;if(typeof ImageData=="function"){const pe=new Uint8ClampedArray(A.buffer,A.byteOffset,A.byteLength);U=new ImageData(pe,me,s,{colorSpace:h})}else U={data:A,width:me,height:be};if(l.length===1)return U;f[le]=U}return f};return Y[Symbol.toStringTag]==="Promise"?Y.then(ue):ue(Y)}function Et(){const n={};for(let[o,r]of Object.entries(Z)){if(o==="parameters"){const s={};for(const[a,p]of Object.entries(r)){const q=s[a]={};for(let[j,i]of Object.entries(p))typeof i=="object"?"string"in i?i=i.string:i=ye(i):typeof i=="function"&&(i=xt(i.name)),q[j]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[o]=r}return n}function ye(n){const o=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=ye(s)),o[r]=s;return o}function xt(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,r,...s]=n.data;Kt(o,s).then(([a,p])=>{postMessage([o,r,a],{transfer:p})}).catch(a=>{postMessage(["error",r,a])})};async function Kt(n,o){switch(n){case"getKernelInfo":return[Et(...o)];case"createPartialImageData":const s=await vt(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const p of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
