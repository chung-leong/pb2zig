import{u as Ue,a as Pe,b as xe,c as Re,d as ke,e as qe,f as Ie,g as Ve,h as ve,i as Ee,j as Ce,k as Ke,l as De,m as Me,n as Te,o as Fe,p as $e,q as _e}from"./index-270629a1.js";Ue();Ke();De();Pe();xe();Me();Te();Fe();Re();ke();qe();Ie();_e();$e();Ve();ve();Ee();const e={constructor:null,typedArray:null,type:0,name:void 0,byteSize:0,align:0,isConst:!1,isTuple:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null}},t={type:0,isRequired:!1},s={},p={},C={},K={},D={},M={},y={},g={},T={},F={},$={},_={},L={},B={},N={},j={},G={},H={},st={},U={},J={},P={},o={},l={},A={},E={},rt={},Q={},x={},W={},R={},X={},k={},q={},z={},at={},nt={},h={},it={},ot={},ct={},zt={},Y={},ht={},jt={},ut={},dt={},mt={},wt={},At={},Ut={},Pt={},xt={},Rt={},kt={},qt={},It={},Vt={},vt={},Et={},Ct={},Kt={},Dt={},Mt={},Tt={},Ft={},$t={},_t={},Lt={},yt={},Bt={},Nt={},bt={},Gt={},lt={},Ht={},Jt={},Qt={},Wt={},Xt={},Yt={},Zt={},pt={},te={},ee={},se={},re={},ae={},ne={},ie={},oe={},ce={},ue={},me={},ye={},be={},le={},pe={},ge={},fe={},Se={},Oe={},ze={},he={},Le=new Uint8Array,Be=new Uint8Array([4]),Ne=new Uint8Array,Ge=new Uint8Array,He=new Uint8Array([20,5,0,1]),Je=new Uint8Array([65,102,116,101,114,69,102,102,101,99,116,115,0]),Qe=new Uint8Array([44,5,0,1]),We=new Uint8Array([65,100,111,98,101,32,83,121,115,116,101,109,115,32,73,110,99,111,114,112,111,114,97,116,101,100,0]),Xe=new Uint8Array,Ye=new Uint8Array([2]),Ze=new Uint8Array([88,5,0,1]),ts=new Uint8Array([69,115,116,105,109,97,116,101,32,97,108,112,104,97,32,98,97,115,101,100,32,111,110,32,99,111,108,111,114,32,99,104,97,110,110,101,108,115,46,0]),es=new Uint8Array([141,5,0,1]),ss=new Uint8Array([65,108,112,104,97,32,70,114,111,109,32,77,97,120,32,67,111,108,111,114,0]),rs=new Uint8Array([175,5,0,1]),as=new Uint8Array([85,116,105,108,105,116,121,0]),ns=new Uint8Array,is=new Uint8Array,os=new Uint8Array,cs=new Uint8Array([0]),us=new Uint8Array([1]),je=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ms=new Uint8Array,ys=new Uint8Array,bs=new Uint8Array,ls=new Uint8Array,ps=new Uint8Array([4]),gt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),de=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),gs=new Uint8Array,fs=new Uint8Array,Ss=new Uint8Array,Os=new Uint8Array,zs=new Uint8Array([4]),ft=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),hs=new Uint8Array([27,0]),js=new Uint8Array([27,0]),ds=new Uint8Array,ws=new Uint8Array,As=new Uint8Array,Us=new Uint8Array;Object.assign(zt,{slots:{0:Y}});Object.assign(Y,{structure:y,memory:{array:Le},const:!0,slots:{0:ht}});Object.assign(ht,{structure:g,memory:{array:Be},const:!0});Object.assign(jt,{slots:{0:ut}});Object.assign(ut,{structure:j,memory:{array:Ne},const:!0,slots:{0:Y}});Object.assign(dt,{slots:{0:mt}});Object.assign(mt,{structure:j,memory:{array:Ge},const:!0,slots:{0:Y}});Object.assign(wt,{slots:{0:At,1:Pt,2:Rt,3:qt,4:Vt,5:Et,6:Kt,7:Dt,8:Mt}});Object.assign(At,{structure:K,memory:{array:He},const:!0,slots:{0:Ut}});Object.assign(Ut,{structure:C,memory:{array:Je},reloc:16778516});Object.assign(Pt,{structure:M,memory:{array:Qe},const:!0,slots:{0:xt}});Object.assign(xt,{structure:D,memory:{array:We},reloc:16778540});Object.assign(Rt,{structure:y,memory:{array:Xe},const:!0,slots:{0:kt}});Object.assign(kt,{structure:g,memory:{array:Ye},const:!0});Object.assign(qt,{structure:F,memory:{array:Ze},const:!0,slots:{0:It}});Object.assign(It,{structure:T,memory:{array:ts},reloc:16778584});Object.assign(Vt,{structure:_,memory:{array:es},const:!0,slots:{0:vt}});Object.assign(vt,{structure:$,memory:{array:ss},reloc:16778637});Object.assign(Et,{structure:B,memory:{array:rs},const:!0,slots:{0:Ct}});Object.assign(Ct,{structure:L,memory:{array:as},reloc:16778671});Object.assign(Kt,{structure:N,memory:{array:ns},const:!0});Object.assign(Dt,{structure:G,memory:{array:is},const:!0,slots:{0:ut}});Object.assign(Mt,{structure:H,memory:{array:os},const:!0,slots:{0:mt}});Object.assign(Tt,{slots:{0:Ft,1:$t}});Object.assign(Ft,{structure:l,memory:{array:cs},const:!0});Object.assign($t,{structure:l,memory:{array:us},const:!0});Object.assign(_t,{memory:{array:je},slots:{0:Lt}});Object.assign(Lt,{structure:P,memory:{array:je,offset:0,length:8},slots:{0:yt}});Object.assign(yt,{structure:J,memory:{array:ms},reloc:0});Object.assign(Bt,{slots:{0:Nt,1:Gt,2:Ht}});Object.assign(Nt,{structure:s,memory:{array:ys},const:!0,slots:{0:bt}});Object.assign(bt,{structure:U});Object.assign(Gt,{structure:s,memory:{array:bs},const:!0,slots:{0:lt}});Object.assign(lt,{structure:rt});Object.assign(Ht,{structure:y,memory:{array:ls},const:!0,slots:{0:Jt}});Object.assign(Jt,{structure:g,memory:{array:ps},const:!0});Object.assign(Qt,{memory:{array:gt},slots:{0:Wt}});Object.assign(Wt,{structure:Q,memory:{array:gt},slots:{0:Xt}});Object.assign(Xt,{structure:P,memory:{array:gt,offset:0,length:8},slots:{0:yt}});Object.assign(Yt,{memory:{array:de},slots:{0:Zt}});Object.assign(Zt,{structure:R,memory:{array:de,offset:0,length:8},slots:{0:pt}});Object.assign(pt,{structure:W,memory:{array:gs},reloc:0});Object.assign(te,{slots:{0:ee,1:se,2:re}});Object.assign(ee,{structure:s,memory:{array:fs},const:!0,slots:{0:bt}});Object.assign(se,{structure:s,memory:{array:Ss},const:!0,slots:{0:lt}});Object.assign(re,{structure:y,memory:{array:Os},const:!0,slots:{0:ae}});Object.assign(ae,{structure:g,memory:{array:zs},const:!0});Object.assign(ne,{memory:{array:ft},slots:{0:ie}});Object.assign(ie,{structure:X,memory:{array:ft},slots:{0:oe}});Object.assign(oe,{structure:R,memory:{array:ft,offset:0,length:8},slots:{0:pt}});Object.assign(ce,{slots:{0:ue}});Object.assign(ue,{structure:z,memory:{array:hs},const:!0});Object.assign(me,{slots:{0:ye}});Object.assign(ye,{structure:h,memory:{array:js},const:!0});Object.assign(be,{slots:{0:le,1:ge,2:Se,3:ze}});Object.assign(le,{structure:s,memory:{array:ds},const:!0,slots:{0:pe}});Object.assign(pe,{structure:st});Object.assign(ge,{structure:s,memory:{array:ws},const:!0,slots:{0:fe}});Object.assign(fe,{structure:x});Object.assign(Se,{structure:s,memory:{array:As},const:!0,slots:{0:Oe}});Object.assign(Oe,{structure:k});Object.assign(ze,{structure:s,memory:{array:Us},const:!0,slots:{0:he}});Object.assign(he,{structure:q});const Ps={argStruct:nt,thunkId:2,name:"createOutput"},xs={argStruct:ot,thunkId:3,name:"createPartialOutput"};Object.assign(s,{...e,name:"type",align:1,instance:{members:[{...t,type:6,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:s}],methods:[]}});Object.assign(p,{...e,name:"u8",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(C,{...e,type:1,name:"[12:0]u8",length:12,byteSize:13,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(K,{...e,type:13,name:"*const [12:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:C}],methods:[]}});Object.assign(D,{...e,type:1,name:"[26:0]u8",length:26,byteSize:27,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(M,{...e,type:13,name:"*const [26:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:D}],methods:[]}});Object.assign(y,{...e,name:"comptime_int",align:1,instance:{members:[{...t,type:7,bitOffset:0,bitSize:0,byteSize:0,slot:0,structure:y}],methods:[]}});Object.assign(g,{...e,name:"i8",byteSize:1,align:1,instance:{members:[{...t,type:2,bitOffset:0,bitSize:8,byteSize:1,structure:g}],methods:[]}});Object.assign(T,{...e,type:1,name:"[39:0]u8",length:39,byteSize:40,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(F,{...e,type:13,name:"*const [39:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:T}],methods:[]}});Object.assign($,{...e,type:1,name:"[20:0]u8",length:20,byteSize:21,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(_,{...e,type:13,name:"*const [20:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[]}});Object.assign(L,{...e,type:1,name:"[7:0]u8",length:7,byteSize:8,align:1,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(B,{...e,type:13,name:"*const [7:0]u8",byteSize:4,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[]}});Object.assign(N,{...e,type:2,name:"@TypeOf(.{})",align:1,isTuple:!0});Object.assign(j,{...e,type:2,name:"Struct3832472641",align:1,instance:{members:[{...t,type:7,slot:0,name:"channels",structure:y}],methods:[],template:zt}});Object.assign(G,{...e,type:2,name:"Struct2242867897",align:1,instance:{members:[{...t,type:7,slot:0,name:"src",structure:j}],methods:[],template:jt}});Object.assign(H,{...e,type:2,name:"Struct172100005",align:1,instance:{members:[{...t,type:7,slot:0,name:"dst",structure:j}],methods:[],template:dt}});Object.assign(st,{...e,type:2,name:"alpha-from-max-color.kernel",align:1,static:{members:[{...t,type:7,slot:0,name:"namespace",structure:K},{...t,type:7,slot:1,name:"vendor",structure:M},{...t,type:7,slot:2,name:"version",structure:y},{...t,type:7,slot:3,name:"description",structure:F},{...t,type:7,slot:4,name:"displayName",structure:_},{...t,type:7,slot:5,name:"category",structure:B},{...t,type:7,slot:6,name:"parameters",structure:N},{...t,type:7,slot:7,name:"inputImages",structure:G},{...t,type:7,slot:8,name:"outputImages",structure:H}],methods:[],template:wt}});Object.assign(U,{...e,type:15,name:"@Vector(4, u8)",length:4,byteSize:4,align:4,instance:{members:[{...t,type:3,bitSize:8,byteSize:1,structure:p}],methods:[]}});Object.assign(J,{...e,type:14,name:"[_]const @Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:U}],methods:[]}});Object.assign(P,{...e,type:13,name:"[]const @Vector(4, u8)",byteSize:8,align:4,isConst:!0,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:J}],methods:[]}});Object.assign(o,{...e,name:"u32",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:o}],methods:[]}});Object.assign(l,{...e,type:11,name:"alpha-from-max-color.ColorSpace",byteSize:1,align:1,instance:{members:[{...t,type:3,bitOffset:0,bitSize:1,byteSize:1,structure:l}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"srgb",structure:l},{...t,type:7,slot:1,name:"display-p3",structure:l}],methods:[],template:Tt}});Object.assign(A,{...e,name:"usize",byteSize:4,align:4,instance:{members:[{...t,type:3,bitOffset:0,bitSize:32,byteSize:4,structure:A}],methods:[]}});Object.assign(E,{...e,name:"f32",byteSize:4,align:4,instance:{members:[{...t,type:4,bitOffset:0,bitSize:32,byteSize:4,structure:E}],methods:[]}});Object.assign(rt,{...e,type:15,name:"@Vector(4, f32)",length:4,byteSize:16,align:16,instance:{members:[{...t,type:4,bitSize:32,byteSize:4,structure:E}],methods:[]}});Object.assign(Q,{...e,type:2,name:"alpha-from-max-color.Image(u8,4,false)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:P},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:o},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:o},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:l},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:A}],methods:[],template:_t},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:y}],methods:[],template:Bt}});Object.assign(x,{...e,type:2,name:"alpha-from-max-color.KernelInput(u8,alpha-from-max-color.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:Q}],methods:[],template:Qt}});Object.assign(W,{...e,type:14,name:"[_]@Vector(4, u8)",byteSize:4,align:4,instance:{members:[{...t,type:5,bitSize:32,byteSize:4,structure:U}],methods:[]}});Object.assign(R,{...e,type:13,name:"[]@Vector(4, u8)",byteSize:8,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitSize:64,byteSize:8,slot:0,structure:W}],methods:[]}});Object.assign(X,{...e,type:2,name:"alpha-from-max-color.Image(u8,4,true)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,isRequired:!0,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:R},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:o},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:o},{...t,type:3,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:l},{...t,type:3,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"offset",structure:A}],methods:[],template:Yt},static:{members:[{...t,type:7,slot:0,name:"Pixel",structure:s},{...t,type:7,slot:1,name:"FPixel",structure:s},{...t,type:7,slot:2,name:"channels",structure:y}],methods:[],template:te}});Object.assign(k,{...e,type:2,name:"alpha-from-max-color.KernelOutput(u8,alpha-from-max-color.kernel)",byteSize:24,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:X}],methods:[],template:ne}});Object.assign(q,{...e,type:2,name:"alpha-from-max-color.KernelParameters(alpha-from-max-color.kernel)",align:1});Object.assign(z,{...e,type:10,name:"ErrorSet172833841",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:z}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:z}],methods:[],template:ce}});Object.assign(at,{...e,type:9,name:"ErrorSet172833841!alpha-from-max-color.KernelOutput(u8,alpha-from-max-color.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:z}],methods:[]}});Object.assign(nt,{...e,type:5,name:"createOutput",byteSize:60,align:4,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:0,bitSize:32,byteSize:4,slot:3,name:"0",structure:o},{...t,type:3,isRequired:!0,bitOffset:32,bitSize:32,byteSize:4,slot:4,name:"1",structure:o},{...t,type:5,isRequired:!0,bitOffset:64,bitSize:192,byteSize:24,slot:0,name:"2",structure:x},{...t,type:5,isRequired:!0,bitOffset:480,bitSize:0,byteSize:0,slot:1,name:"3",structure:q},{...t,type:5,isRequired:!0,bitOffset:256,bitSize:224,byteSize:28,slot:2,name:"retval",structure:at}],methods:[]}});Object.assign(h,{...e,type:10,name:"ErrorSet2287156712",byteSize:2,align:2,instance:{members:[{...t,type:3,bitOffset:0,bitSize:16,byteSize:2,structure:h}],methods:[]},static:{members:[{...t,type:7,slot:0,name:"OutOfMemory",structure:h}],methods:[],template:me}});Object.assign(it,{...e,type:9,name:"ErrorSet2287156712!alpha-from-max-color.KernelOutput(u8,alpha-from-max-color.kernel)",byteSize:28,align:4,hasPointer:!0,instance:{members:[{...t,type:5,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...t,type:3,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:h}],methods:[]}});Object.assign(ot,{...e,type:5,name:"createPartialOutput",byteSize:68,align:4,hasPointer:!0,instance:{members:[{...t,type:3,isRequired:!0,bitOffset:0,bitSize:32,byteSize:4,slot:3,name:"0",structure:o},{...t,type:3,isRequired:!0,bitOffset:32,bitSize:32,byteSize:4,slot:4,name:"1",structure:o},{...t,type:3,isRequired:!0,bitOffset:64,bitSize:32,byteSize:4,slot:5,name:"2",structure:o},{...t,type:3,isRequired:!0,bitOffset:96,bitSize:32,byteSize:4,slot:6,name:"3",structure:o},{...t,type:5,isRequired:!0,bitOffset:128,bitSize:192,byteSize:24,slot:0,name:"4",structure:x},{...t,type:5,isRequired:!0,bitOffset:544,bitSize:0,byteSize:0,slot:1,name:"5",structure:q},{...t,type:5,isRequired:!0,bitOffset:320,bitSize:224,byteSize:28,slot:2,name:"retval",structure:it}],methods:[]}});Object.assign(ct,{...e,type:2,name:"alpha-from-max-color",align:1,static:{members:[{...t,type:7,slot:0,name:"kernel",structure:s},{...t,type:7,slot:1,name:"Input",structure:s},{...t,type:7,slot:2,name:"Output",structure:s},{...t,type:7,slot:3,name:"Parameters",structure:s}],methods:[Ps,xs],template:be}});const Rs=[s,p,C,K,D,M,y,g,T,F,$,_,L,B,N,j,G,H,st,U,J,P,o,l,A,E,rt,Q,x,W,R,X,k,q,z,at,nt,h,it,ot,ct],ks=ct,qs={runtimeSafety:!1,littleEndian:!0},Z=Ce();Z.getSpecialExports();Z.recreateStructures(Rs,qs);const Is=(async()=>{const n=new URL("alpha-from-max-color-5a381335.wasm",import.meta.url).href;return fetch(n)})();Z.loadModule(Is);Z.linkVariables(!0);const{constructor:Vs}=ks,{createPartialOutput:vs,Input:Es,kernel:et}=Vs;function Cs(n,c,i,a,r={},f={}){const S=[];for(const[m]of et.inputImages)S.push(m);const d=[];for(const[m]of et.outputImages)d.push(m);if(Array.isArray(r)){const m=r;r={};for(const[b,O]of S.entries())r[O]=m[b]}const u=new Es(void 0),I=[];let w;for(const m of S){let b=r[m];if(b||(S.length===1&&["data","width","height"].every(O=>!!r[O])?b=r:I.push(m)),u[m]=b,w){if(b.colorSpace!==w)throw new Error(`Input images must all use the same color space: ${w}`)}else w=b.colorSpace}if(I.length>0)throw new Error(`Missing input image${I.length>1?"s":""}: ${I.join(", ")}`);const tt=vs(n,c,i,a,u,f),St=m=>{const b={};for(const O of d){const{data:{typedArray:V},width:Ot,height:we}=m[O];let v;if(typeof ImageData=="function"){const Ae=new Uint8ClampedArray(V.buffer,V.byteOffset,V.byteLength);v=new ImageData(Ae,Ot,a,{colorSpace:w})}else v={data:V,width:Ot,height:we};if(d.length===1)return v;b[O]=v}return b};return tt[Symbol.toStringTag]==="Promise"?tt.then(St):St(tt)}function Ks(){const n={};for(let[c,i]of et){if(c==="parameters"){const a={};for(const[r,f]of i){const S=a[r]={};for(let[d,u]of f)typeof u=="object"?u=u.string??u.valueOf():typeof u=="function"&&(u=Ds(u.name)),S[d]=u}i=a}else typeof i=="object"&&(i=i.string??i.valueOf());n[c]=i}return n}function Ds(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[c,i,...a]=n.data;Ms(c,a).then(([r,f])=>{postMessage([c,i,r],{transfer:f})}).catch(r=>{postMessage(["error",i,r])})};async function Ms(n,c){switch(n){case"getKernelInfo":return[Ks(...c)];case"createPartialImageData":const a=await Cs(...c),r=[];if("data"in a&&"width"in a&&"height"in a)r.push(a.data.buffer);else for(const f of Object.entries(a))r.push(a.data.buffer);return[a,r];default:throw new Error(`Unknown function: ${n}`)}}
