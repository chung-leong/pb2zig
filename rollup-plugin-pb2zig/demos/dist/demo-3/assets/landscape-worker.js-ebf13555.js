import{u as jt,a as xt,b as Pt,d as Ct,c as It,e as kt,f as Dt,g as vt,h as Et,i as Ft,j as Kt,k as Tt,l as Ht,m as Nt,o as Lt,n as Mt,p as $t,q as Bt,r as Gt}from"./index-334ebb77.js";jt();xt();Pt();Ct();It();kt();Dt();vt();Et();Ft();Kt();Tt();Ht();Nt();Lt();Mt();$t();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},h={},fe={},de={},D={},be={},ge={},v={},i={},w={},he={},Ve={},E={},_e={},a={},ze={},F={},Se={},K={},we={},T={},Re={},qe={},H={},Oe={},N={},u={},R={},r={},s={},Ae={},L={},Ue={},M={},je={},$={},xe={},B={},Pe={},G={},Ce={},J={},Ie={},Q={},ke={},W={},De={},X={},ve={},Y={},Ee={},Z={},f={},q={},A={},S={},Fe={},ee={},Ke={},te={},Te={},se={},He={},Ne={},re={},Le={},me={},Me={},ae={},$e={},ie={},Be={},oe={},Ge={},ne={},Je={},ce={},Qe={},ue={},We={},le={},rt={},U={},Xe={},Ye={},Ze={},d={},mt={},pe={},at={},ye={},j={},x={},it={},ot={},nt={},ct={},ut={},lt={},pt={};Object.assign(h,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:5});Object.assign(fe,{...t,type:1,name:"[19:0]u8",length:19,byteSize:20,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:4});Object.assign(de,{...t,type:11,name:"*const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:3});Object.assign(D,{...t,type:11,name:"**const [19:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:de}],methods:[],template:null},slot:2});Object.assign(be,{...t,type:1,name:"[11:0]u8",length:11,byteSize:12,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:8});Object.assign(ge,{...t,type:11,name:"*const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:7});Object.assign(v,{...t,type:11,name:"**const [11:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ge}],methods:[],template:null},slot:6});Object.assign(i,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:i}],methods:[],template:null},slot:10});Object.assign(w,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:i}],methods:[],template:null},slot:9});Object.assign(he,{...t,type:1,name:"[38:0]u8",length:38,byteSize:39,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:13});Object.assign(Ve,{...t,type:11,name:"*const [38:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:he}],methods:[],template:null},slot:12});Object.assign(E,{...t,type:11,name:"**const [38:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ve}],methods:[],template:null},slot:11});Object.assign(_e,{...t,type:13,name:"@Vector(2, i32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,structure:i}],methods:[],template:null},slot:31});Object.assign(a,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:i}],methods:[],template:null},slot:92});const Jt=new Uint8Array([]),Qt=new Uint8Array([176,30,16,0]),ht=new Uint8Array([100,0,0,0]),Wt=new Uint8Array([176,30,16,0]);Object.assign(ze,{...t,type:2,name:"struct{comptime comptime_int = 100, comptime comptime_int = 100}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:a},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:a}],methods:[],template:{memory:{array:Jt},slots:{0:{structure:a,memory:{array:Qt},slots:{0:{structure:i,memory:{array:ht},address:1056432}}},1:{structure:a,memory:{array:Wt},slots:{0:{structure:i,memory:{array:ht},address:1056432}}}}}},slot:69});Object.assign(F,{...t,type:11,name:"*const struct{comptime comptime_int = 100, comptime comptime_int = 100}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ze}],methods:[],template:null},slot:68});const Xt=new Uint8Array([]),Yt=new Uint8Array([172,30,16,0]),Vt=new Uint8Array([232,3,0,0]),Zt=new Uint8Array([172,30,16,0]);Object.assign(Se,{...t,type:2,name:"struct{comptime comptime_int = 1000, comptime comptime_int = 1000}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:a},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:a}],methods:[],template:{memory:{array:Xt},slots:{0:{structure:a,memory:{array:Yt},slots:{0:{structure:i,memory:{array:Vt},address:1056428}}},1:{structure:a,memory:{array:Zt},slots:{0:{structure:i,memory:{array:Vt},address:1056428}}}}}},slot:71});Object.assign(K,{...t,type:11,name:"*const struct{comptime comptime_int = 1000, comptime comptime_int = 1000}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Se}],methods:[],template:null},slot:70});const es=new Uint8Array([]),ts=new Uint8Array([168,30,16,0]),_t=new Uint8Array([0,2,0,0]),ss=new Uint8Array([168,30,16,0]);Object.assign(we,{...t,type:2,name:"struct{comptime comptime_int = 512, comptime comptime_int = 512}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:a},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:a}],methods:[],template:{memory:{array:es},slots:{0:{structure:a,memory:{array:ts},slots:{0:{structure:i,memory:{array:_t},address:1056424}}},1:{structure:a,memory:{array:ss},slots:{0:{structure:i,memory:{array:_t},address:1056424}}}}}},slot:73});Object.assign(T,{...t,type:11,name:"*const struct{comptime comptime_int = 512, comptime comptime_int = 512}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:we}],methods:[],template:null},slot:72});Object.assign(Re,{...t,type:1,name:"[17:0]u8",length:17,byteSize:18,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:76});Object.assign(qe,{...t,type:11,name:"*const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Re}],methods:[],template:null},slot:75});Object.assign(H,{...t,type:11,name:"*const *const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:qe}],methods:[],template:null},slot:74});const rs=new Uint8Array([]),ms=new Uint8Array([170,170,170,170]),m=new Uint8Array([]),as=new Uint8Array([170,170,170,170]),is=new Uint8Array([170,170,170,170]),os=new Uint8Array([24,31,16,0]),ns=new Uint8Array([28,31,16,0]),cs=new Uint8Array([79,117,116,112,117,116,32,105,109,97,103,101,32,115,105,122,101,0]);Object.assign(Oe,{...t,type:2,name:'struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 1000, comptime comptime_int = 1000} = .{1000, 1000}, comptime defaultValue: struct{comptime comptime_int = 512, comptime comptime_int = 512} = .{512, 512}, comptime aeDisplayName: *const [17:0]u8 = "Output image size"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:_e},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:F},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:K},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:T},{...e,type:8,isRequired:!1,slot:3,name:"aeDisplayName",structure:H}],methods:[],template:{memory:{array:rs},slots:{0:{structure:F,memory:{array:ms},slots:{0:{structure:ze,memory:{array:m},address:-1431655766}}},1:{structure:K,memory:{array:as},slots:{0:{structure:Se,memory:{array:m},address:-1431655766}}},2:{structure:T,memory:{array:is},slots:{0:{structure:we,memory:{array:m},address:-1431655766}}},3:{structure:H,memory:{array:os},slots:{0:{structure:qe,memory:{array:ns},address:1056536,slots:{0:{structure:Re,memory:{array:cs},address:1056540}}}}}}}},slot:40});Object.assign(N,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 1000, comptime comptime_int = 1000} = .{1000, 1000}, comptime defaultValue: struct{comptime comptime_int = 512, comptime comptime_int = 512} = .{512, 512}, comptime aeDisplayName: *const [17:0]u8 = "Output image size"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Oe}],methods:[],template:null},slot:39});Object.assign(u,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:33});Object.assign(R,{...t,type:13,name:"@Vector(3, f32)",length:3,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:32});Object.assign(r,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:r}],methods:[],template:null},slot:90});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:r}],methods:[],template:null},slot:89});const us=new Uint8Array([]),ls=new Uint8Array([160,30,16,0]),zt=new Uint8Array([0,0,0,0,0,0,89,192]),ps=new Uint8Array([80,30,16,0]),V=new Uint8Array([0,0,0,0,0,0,0,0]),ys=new Uint8Array([160,30,16,0]);Object.assign(Ae,{...t,type:2,name:"struct{comptime comptime_float = -100, comptime comptime_float = 0, comptime comptime_float = -100}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:us},slots:{0:{structure:s,memory:{array:ls},slots:{0:{structure:r,memory:{array:zt},address:1056416}}},1:{structure:s,memory:{array:ps},slots:{0:{structure:r,memory:{array:V},address:1056336}}},2:{structure:s,memory:{array:ys},slots:{0:{structure:r,memory:{array:zt},address:1056416}}}}}},slot:78});Object.assign(L,{...t,type:11,name:"*const struct{comptime comptime_float = -100, comptime comptime_float = 0, comptime comptime_float = -100}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ae}],methods:[],template:null},slot:77});const fs=new Uint8Array([]),ds=new Uint8Array([144,30,16,0]),tt=new Uint8Array([0,0,0,0,0,0,89,64]),bs=new Uint8Array([152,30,16,0]),gs=new Uint8Array([0,0,0,0,0,0,52,64]),hs=new Uint8Array([144,30,16,0]);Object.assign(Ue,{...t,type:2,name:"struct{comptime comptime_float = 100, comptime comptime_float = 20, comptime comptime_float = 100}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:fs},slots:{0:{structure:s,memory:{array:ds},slots:{0:{structure:r,memory:{array:tt},address:1056400}}},1:{structure:s,memory:{array:bs},slots:{0:{structure:r,memory:{array:gs},address:1056408}}},2:{structure:s,memory:{array:hs},slots:{0:{structure:r,memory:{array:tt},address:1056400}}}}}},slot:80});Object.assign(M,{...t,type:11,name:"*const struct{comptime comptime_float = 100, comptime comptime_float = 20, comptime comptime_float = 100}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ue}],methods:[],template:null},slot:79});const Vs=new Uint8Array([]),_s=new Uint8Array([136,30,16,0]),zs=new Uint8Array([0,0,0,0,0,0,24,192]),Ss=new Uint8Array([128,30,16,0]),ws=new Uint8Array([0,0,0,0,0,0,16,64]),Rs=new Uint8Array([120,30,16,0]),qs=new Uint8Array([0,0,0,0,0,0,24,64]);Object.assign(je,{...t,type:2,name:"struct{comptime comptime_float = -6, comptime comptime_float = 4, comptime comptime_float = 6}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Vs},slots:{0:{structure:s,memory:{array:_s},slots:{0:{structure:r,memory:{array:zs},address:1056392}}},1:{structure:s,memory:{array:Ss},slots:{0:{structure:r,memory:{array:ws},address:1056384}}},2:{structure:s,memory:{array:Rs},slots:{0:{structure:r,memory:{array:qs},address:1056376}}}}}},slot:82});Object.assign($,{...t,type:11,name:"*const struct{comptime comptime_float = -6, comptime comptime_float = 4, comptime comptime_float = 6}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:je}],methods:[],template:null},slot:81});const Os=new Uint8Array([]),As=new Uint8Array([170,170,170,170]),Us=new Uint8Array([170,170,170,170]),js=new Uint8Array([170,170,170,170]);Object.assign(xe,{...t,type:2,name:"struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -100, comptime comptime_float = 0, comptime comptime_float = -100} = .{-100, 0, -100}, comptime maxValue: struct{comptime comptime_float = 100, comptime comptime_float = 20, comptime comptime_float = 100} = .{100, 20, 100}, comptime defaultValue: struct{comptime comptime_float = -6, comptime comptime_float = 4, comptime comptime_float = 6} = .{-6, 4, 6}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:R},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:L},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:M},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:$}],methods:[],template:{memory:{array:Os},slots:{0:{structure:L,memory:{array:As},slots:{0:{structure:Ae,memory:{array:m},address:-1431655766}}},1:{structure:M,memory:{array:Us},slots:{0:{structure:Ue,memory:{array:m},address:-1431655766}}},2:{structure:$,memory:{array:js},slots:{0:{structure:je,memory:{array:m},address:-1431655766}}}}}},slot:42});Object.assign(B,{...t,type:11,name:"*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -100, comptime comptime_float = 0, comptime comptime_float = -100} = .{-100, 0, -100}, comptime maxValue: struct{comptime comptime_float = 100, comptime comptime_float = 20, comptime comptime_float = 100} = .{100, 20, 100}, comptime defaultValue: struct{comptime comptime_float = -6, comptime comptime_float = 4, comptime comptime_float = 6} = .{-6, 4, 6}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:xe}],methods:[],template:null},slot:41});const xs=new Uint8Array([]),Ps=new Uint8Array([104,30,16,0]),St=new Uint8Array([0,0,0,0,0,0,20,192]),Cs=new Uint8Array([112,30,16,0]),Is=new Uint8Array([0,0,0,0,0,0,240,191]),ks=new Uint8Array([104,30,16,0]);Object.assign(Pe,{...t,type:2,name:"struct{comptime comptime_float = -5, comptime comptime_float = -1, comptime comptime_float = -5}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:xs},slots:{0:{structure:s,memory:{array:Ps},slots:{0:{structure:r,memory:{array:St},address:1056360}}},1:{structure:s,memory:{array:Cs},slots:{0:{structure:r,memory:{array:Is},address:1056368}}},2:{structure:s,memory:{array:ks},slots:{0:{structure:r,memory:{array:St},address:1056360}}}}}},slot:84});Object.assign(G,{...t,type:11,name:"*const struct{comptime comptime_float = -5, comptime comptime_float = -1, comptime comptime_float = -5}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Pe}],methods:[],template:null},slot:83});const Ds=new Uint8Array([]),vs=new Uint8Array([88,30,16,0]),wt=new Uint8Array([0,0,0,0,0,0,20,64]),Es=new Uint8Array([96,30,16,0]),yt=new Uint8Array([0,0,0,0,0,0,240,63]),Fs=new Uint8Array([88,30,16,0]);Object.assign(Ce,{...t,type:2,name:"struct{comptime comptime_float = 5, comptime comptime_float = 1, comptime comptime_float = 5}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Ds},slots:{0:{structure:s,memory:{array:vs},slots:{0:{structure:r,memory:{array:wt},address:1056344}}},1:{structure:s,memory:{array:Es},slots:{0:{structure:r,memory:{array:yt},address:1056352}}},2:{structure:s,memory:{array:Fs},slots:{0:{structure:r,memory:{array:wt},address:1056344}}}}}},slot:86});Object.assign(J,{...t,type:11,name:"*const struct{comptime comptime_float = 5, comptime comptime_float = 1, comptime comptime_float = 5}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ce}],methods:[],template:null},slot:85});const Ks=new Uint8Array([]),Ts=new Uint8Array([80,30,16,0]),Hs=new Uint8Array([80,30,16,0]),Ns=new Uint8Array([80,30,16,0]);Object.assign(Ie,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Ks},slots:{0:{structure:s,memory:{array:Ts},slots:{0:{structure:r,memory:{array:V},address:1056336}}},1:{structure:s,memory:{array:Hs},slots:{0:{structure:r,memory:{array:V},address:1056336}}},2:{structure:s,memory:{array:Ns},slots:{0:{structure:r,memory:{array:V},address:1056336}}}}}},slot:88});Object.assign(Q,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ie}],methods:[],template:null},slot:87});const Ls=new Uint8Array([]),Ms=new Uint8Array([170,170,170,170]),$s=new Uint8Array([170,170,170,170]),Bs=new Uint8Array([170,170,170,170]);Object.assign(ke,{...t,type:2,name:"struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -5, comptime comptime_float = -1, comptime comptime_float = -5} = .{-5, -1, -5}, comptime maxValue: struct{comptime comptime_float = 5, comptime comptime_float = 1, comptime comptime_float = 5} = .{5, 1, 5}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:R},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:G},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:J},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:Q}],methods:[],template:{memory:{array:Ls},slots:{0:{structure:G,memory:{array:Ms},slots:{0:{structure:Pe,memory:{array:m},address:-1431655766}}},1:{structure:J,memory:{array:$s},slots:{0:{structure:Ce,memory:{array:m},address:-1431655766}}},2:{structure:Q,memory:{array:Bs},slots:{0:{structure:Ie,memory:{array:m},address:-1431655766}}}}}},slot:44});Object.assign(W,{...t,type:11,name:"*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -5, comptime comptime_float = -1, comptime comptime_float = -5} = .{-5, -1, -5}, comptime maxValue: struct{comptime comptime_float = 5, comptime comptime_float = 1, comptime comptime_float = 5} = .{5, 1, 5}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ke}],methods:[],template:null},slot:43});const Gs=new Uint8Array([]),Js=new Uint8Array([16,31,16,0]),Qs=new Uint8Array([0,0,0,0,0,128,102,192]),Ws=new Uint8Array([8,31,16,0]),Xs=new Uint8Array([0,0,0,0,0,128,102,64]),Ys=new Uint8Array([80,30,16,0]);Object.assign(De,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Gs},slots:{0:{structure:s,memory:{array:Js},slots:{0:{structure:r,memory:{array:Qs},address:1056528}}},1:{structure:s,memory:{array:Ws},slots:{0:{structure:r,memory:{array:Xs},address:1056520}}},2:{structure:s,memory:{array:Ys},slots:{0:{structure:r,memory:{array:V},address:1056336}}}}}},slot:46});Object.assign(X,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:De}],methods:[],template:null},slot:45});const Zs=new Uint8Array([]),er=new Uint8Array([192,30,16,0]),ft=new Uint8Array([0,0,0,0,0,0,36,64]),tr=new Uint8Array([144,30,16,0]),sr=new Uint8Array([0,31,16,0]),rr=new Uint8Array([0,0,0,0,0,0,57,64]);Object.assign(ve,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 10, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 25}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Zs},slots:{0:{structure:s,memory:{array:er},slots:{0:{structure:r,memory:{array:ft},address:1056448}}},1:{structure:s,memory:{array:tr},slots:{0:{structure:r,memory:{array:tt},address:1056400}}},2:{structure:s,memory:{array:sr},slots:{0:{structure:r,memory:{array:rr},address:1056512}}}}}},slot:48});Object.assign(Y,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 10, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 25}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ve}],methods:[],template:null},slot:47});const mr=new Uint8Array([]),ar=new Uint8Array([96,30,16,0]),ir=new Uint8Array([192,30,16,0]),or=new Uint8Array([248,30,16,0]),nr=new Uint8Array([0,0,0,0,0,0,28,64]);Object.assign(Ee,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 7}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:mr},slots:{0:{structure:s,memory:{array:ar},slots:{0:{structure:r,memory:{array:yt},address:1056352}}},1:{structure:s,memory:{array:ir},slots:{0:{structure:r,memory:{array:ft},address:1056448}}},2:{structure:s,memory:{array:or},slots:{0:{structure:r,memory:{array:nr},address:1056504}}}}}},slot:50});Object.assign(Z,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 7}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ee}],methods:[],template:null},slot:49});Object.assign(f,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:f}],methods:[],template:null},slot:28});Object.assign(q,{...t,type:11,name:"*const bool",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:f}],methods:[],template:null},slot:91});const cr=new Uint8Array([]),ur=new Uint8Array([240,30,16,0]),lr=new Uint8Array([0]);Object.assign(A,{...t,type:2,name:"struct{comptime type: type = bool, comptime defaultValue: bool = false}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:q}],methods:[],template:{memory:{array:cr},slots:{0:{structure:q,memory:{array:ur},slots:{0:{structure:f,memory:{array:lr},address:1056496}}}}}},slot:52});Object.assign(S,{...t,type:11,name:"*const struct{comptime type: type = bool, comptime defaultValue: bool = false}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:51});const pr=new Uint8Array([]),yr=new Uint8Array([232,30,16,0]),fr=new Uint8Array([154,153,153,153,153,153,185,191]),dr=new Uint8Array([96,30,16,0]),br=new Uint8Array([224,30,16,0]),gr=new Uint8Array([195,245,40,92,143,194,213,63]);Object.assign(Fe,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = -0.1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.34}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:pr},slots:{0:{structure:s,memory:{array:yr},slots:{0:{structure:r,memory:{array:fr},address:1056488}}},1:{structure:s,memory:{array:dr},slots:{0:{structure:r,memory:{array:yt},address:1056352}}},2:{structure:s,memory:{array:br},slots:{0:{structure:r,memory:{array:gr},address:1056480}}}}}},slot:54});Object.assign(ee,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = -0.1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.34}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Fe}],methods:[],template:null},slot:53});const hr=new Uint8Array([]),Vr=new Uint8Array([212,30,16,0]),Rt=new Uint8Array([0,0,0,0]),_r=new Uint8Array([216,30,16,0]),zr=new Uint8Array([2,0,0,0]),Sr=new Uint8Array([212,30,16,0]);Object.assign(Ke,{...t,type:2,name:"struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 2, comptime defaultValue: comptime_int = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:i},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:a},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:a},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:a}],methods:[],template:{memory:{array:hr},slots:{0:{structure:a,memory:{array:Vr},slots:{0:{structure:i,memory:{array:Rt},address:1056468}}},1:{structure:a,memory:{array:_r},slots:{0:{structure:i,memory:{array:zr},address:1056472}}},2:{structure:a,memory:{array:Sr},slots:{0:{structure:i,memory:{array:Rt},address:1056468}}}}}},slot:56});Object.assign(te,{...t,type:11,name:"*const struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 2, comptime defaultValue: comptime_int = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ke}],methods:[],template:null},slot:55});const wr=new Uint8Array([]),Rr=new Uint8Array([208,30,16,0]),qr=new Uint8Array([1]);Object.assign(Te,{...t,type:2,name:"struct{comptime type: type = bool, comptime defaultValue: bool = true}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:q}],methods:[],template:{memory:{array:wr},slots:{0:{structure:q,memory:{array:Rr},slots:{0:{structure:f,memory:{array:qr},address:1056464}}}}}},slot:58});Object.assign(se,{...t,type:11,name:"*const struct{comptime type: type = bool, comptime defaultValue: bool = true}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Te}],methods:[],template:null},slot:57});Object.assign(He,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:34});const Or=new Uint8Array([]),Ar=new Uint8Array([80,30,16,0]),Ur=new Uint8Array([80,30,16,0]);Object.assign(Ne,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Or},slots:{0:{structure:s,memory:{array:Ar},slots:{0:{structure:r,memory:{array:V},address:1056336}}},1:{structure:s,memory:{array:Ur},slots:{0:{structure:r,memory:{array:V},address:1056336}}}}}},slot:94});Object.assign(re,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ne}],methods:[],template:null},slot:93});const jr=new Uint8Array([]),xr=new Uint8Array([72,30,16,0]),Pr=new Uint8Array([0,0,0,0,0,128,86,64]),Cr=new Uint8Array([64,30,16,0]),Ir=new Uint8Array([0,0,0,0,0,128,118,64]);Object.assign(Le,{...t,type:2,name:"struct{comptime comptime_float = 90, comptime comptime_float = 360}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:jr},slots:{0:{structure:s,memory:{array:xr},slots:{0:{structure:r,memory:{array:Pr},address:1056328}}},1:{structure:s,memory:{array:Cr},slots:{0:{structure:r,memory:{array:Ir},address:1056320}}}}}},slot:96});Object.assign(me,{...t,type:11,name:"*const struct{comptime comptime_float = 90, comptime comptime_float = 360}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Le}],methods:[],template:null},slot:95});const kr=new Uint8Array([]),Dr=new Uint8Array([56,30,16,0]),vr=new Uint8Array([0,0,0,0,0,0,44,64]),Er=new Uint8Array([48,30,16,0]),Fr=new Uint8Array([0,0,0,0,0,128,111,64]);Object.assign(Me,{...t,type:2,name:"struct{comptime comptime_float = 14, comptime comptime_float = 252}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:kr},slots:{0:{structure:s,memory:{array:Dr},slots:{0:{structure:r,memory:{array:vr},address:1056312}}},1:{structure:s,memory:{array:Er},slots:{0:{structure:r,memory:{array:Fr},address:1056304}}}}}},slot:98});Object.assign(ae,{...t,type:11,name:"*const struct{comptime comptime_float = 14, comptime comptime_float = 252}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Me}],methods:[],template:null},slot:97});const Kr=new Uint8Array([]),Tr=new Uint8Array([170,170,170,170]),Hr=new Uint8Array([170,170,170,170]),Nr=new Uint8Array([170,170,170,170]);Object.assign($e,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 90, comptime comptime_float = 360} = .{90, 360}, comptime defaultValue: struct{comptime comptime_float = 14, comptime comptime_float = 252} = .{14, 252}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:He},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:re},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:me},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:ae}],methods:[],template:{memory:{array:Kr},slots:{0:{structure:re,memory:{array:Tr},slots:{0:{structure:Ne,memory:{array:m},address:-1431655766}}},1:{structure:me,memory:{array:Hr},slots:{0:{structure:Le,memory:{array:m},address:-1431655766}}},2:{structure:ae,memory:{array:Nr},slots:{0:{structure:Me,memory:{array:m},address:-1431655766}}}}}},slot:60});Object.assign(ie,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 90, comptime comptime_float = 360} = .{90, 360}, comptime defaultValue: struct{comptime comptime_float = 14, comptime comptime_float = 252} = .{14, 252}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$e}],methods:[],template:null},slot:59});const Lr=new Uint8Array([]),Mr=new Uint8Array([200,30,16,0]),$r=new Uint8Array([0,0,0,0,0,0,224,63]),Br=new Uint8Array([192,30,16,0]),Gr=new Uint8Array([184,30,16,0]),Jr=new Uint8Array([0,0,0,0,0,0,12,64]);Object.assign(Be,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0.5, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 3.5}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Lr},slots:{0:{structure:s,memory:{array:Mr},slots:{0:{structure:r,memory:{array:$r},address:1056456}}},1:{structure:s,memory:{array:Br},slots:{0:{structure:r,memory:{array:ft},address:1056448}}},2:{structure:s,memory:{array:Gr},slots:{0:{structure:r,memory:{array:Jr},address:1056440}}}}}},slot:62});Object.assign(oe,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.5, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 3.5}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Be}],methods:[],template:null},slot:61});const Qr=new Uint8Array([]),Wr=new Uint8Array([170,170,170,170]),Xr=new Uint8Array([170,170,170,170]),Yr=new Uint8Array([170,170,170,170]),Zr=new Uint8Array([170,170,170,170]),em=new Uint8Array([170,170,170,170]),tm=new Uint8Array([170,170,170,170]),sm=new Uint8Array([170,170,170,170]),rm=new Uint8Array([170,170,170,170]),mm=new Uint8Array([170,170,170,170]),am=new Uint8Array([170,170,170,170]),im=new Uint8Array([170,170,170,170]),om=new Uint8Array([170,170,170,170]),nm=new Uint8Array([170,170,170,170]);Object.assign(Ge,{...t,type:2,name:'struct{comptime size: struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 1000, comptime comptime_int = 1000} = .{1000, 1000}, comptime defaultValue: struct{comptime comptime_int = 512, comptime comptime_int = 512} = .{512, 512}, comptime aeDisplayName: *const [17:0]u8 = "Output image size"} = .{.type = @Vector(2, i32), .minValue = .{100, 100}, .maxValue = .{1000, 1000}, .defaultValue = .{512, 512}, .aeDisplayName = "Output image size"}, comptime cameraPosition: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -100, comptime comptime_float = 0, comptime comptime_float = -100} = .{-100, 0, -100}, comptime maxValue: struct{comptime comptime_float = 100, comptime comptime_float = 20, comptime comptime_float = 100} = .{100, 20, 100}, comptime defaultValue: struct{comptime comptime_float = -6, comptime comptime_float = 4, comptime comptime_float = 6} = .{-6, 4, 6}} = .{.type = @Vector(3, f32), .minValue = .{-100, 0, -100}, .maxValue = .{100, 20, 100}, .defaultValue = .{-6, 4, 6}}, comptime cameraPositionFine: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -5, comptime comptime_float = -1, comptime comptime_float = -5} = .{-5, -1, -5}, comptime maxValue: struct{comptime comptime_float = 5, comptime comptime_float = 1, comptime comptime_float = 5} = .{5, 1, 5}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}} = .{.type = @Vector(3, f32), .minValue = .{-5, -1, -5}, .maxValue = .{5, 1, 5}, .defaultValue = .{0, 0, 0}}, comptime cameraRotation: struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = -180, .maxValue = 180, .defaultValue = 0}, comptime terrainHorizon: struct{comptime type: type = f32, comptime minValue: comptime_float = 10, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 25} = .{.type = f32, .minValue = 10, .maxValue = 100, .defaultValue = 25}, comptime terrainDetail: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 7} = .{.type = f32, .minValue = 1, .maxValue = 10, .defaultValue = 7}, comptime buildings: struct{comptime type: type = bool, comptime defaultValue: bool = false} = .{.type = bool, .defaultValue = false}, comptime waterLevel: struct{comptime type: type = f32, comptime minValue: comptime_float = -0.1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.34} = .{.type = f32, .minValue = -0.1, .maxValue = 1, .defaultValue = 0.34}, comptime sampling: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 2, comptime defaultValue: comptime_int = 0} = .{.type = i32, .minValue = 0, .maxValue = 2, .defaultValue = 0}, comptime shadows: struct{comptime type: type = bool, comptime defaultValue: bool = true} = .{.type = bool, .defaultValue = true}, comptime contours: struct{comptime type: type = bool, comptime defaultValue: bool = false} = .{.type = bool, .defaultValue = false}, comptime sun: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 90, comptime comptime_float = 360} = .{90, 360}, comptime defaultValue: struct{comptime comptime_float = 14, comptime comptime_float = 252} = .{14, 252}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{90, 360}, .defaultValue = .{14, 252}}, comptime terrainHeight: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.5, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 3.5} = .{.type = f32, .minValue = 0.5, .maxValue = 10, .defaultValue = 3.5}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"size",structure:N},{...e,type:8,isRequired:!1,slot:1,name:"cameraPosition",structure:B},{...e,type:8,isRequired:!1,slot:2,name:"cameraPositionFine",structure:W},{...e,type:8,isRequired:!1,slot:3,name:"cameraRotation",structure:X},{...e,type:8,isRequired:!1,slot:4,name:"terrainHorizon",structure:Y},{...e,type:8,isRequired:!1,slot:5,name:"terrainDetail",structure:Z},{...e,type:8,isRequired:!1,slot:6,name:"buildings",structure:S},{...e,type:8,isRequired:!1,slot:7,name:"waterLevel",structure:ee},{...e,type:8,isRequired:!1,slot:8,name:"sampling",structure:te},{...e,type:8,isRequired:!1,slot:9,name:"shadows",structure:se},{...e,type:8,isRequired:!1,slot:10,name:"contours",structure:S},{...e,type:8,isRequired:!1,slot:11,name:"sun",structure:ie},{...e,type:8,isRequired:!1,slot:12,name:"terrainHeight",structure:oe}],methods:[],template:{memory:{array:Qr},slots:{0:{structure:N,memory:{array:Wr},slots:{0:{structure:Oe,memory:{array:m},address:-1431655766}}},1:{structure:B,memory:{array:Xr},slots:{0:{structure:xe,memory:{array:m},address:-1431655766}}},2:{structure:W,memory:{array:Yr},slots:{0:{structure:ke,memory:{array:m},address:-1431655766}}},3:{structure:X,memory:{array:Zr},slots:{0:{structure:De,memory:{array:m},address:-1431655766}}},4:{structure:Y,memory:{array:em},slots:{0:{structure:ve,memory:{array:m},address:-1431655766}}},5:{structure:Z,memory:{array:tm},slots:{0:{structure:Ee,memory:{array:m},address:-1431655766}}},6:{structure:S,memory:{array:sm},slots:{0:{structure:A,memory:{array:m},address:-1431655766}}},7:{structure:ee,memory:{array:rm},slots:{0:{structure:Fe,memory:{array:m},address:-1431655766}}},8:{structure:te,memory:{array:mm},slots:{0:{structure:Ke,memory:{array:m},address:-1431655766}}},9:{structure:se,memory:{array:am},slots:{0:{structure:Te,memory:{array:m},address:-1431655766}}},10:{structure:S,memory:{array:im},slots:{0:{structure:A,memory:{array:m},address:-1431655766}}},11:{structure:ie,memory:{array:om},slots:{0:{structure:$e,memory:{array:m},address:-1431655766}}},12:{structure:oe,memory:{array:nm},slots:{0:{structure:Be,memory:{array:m},address:-1431655766}}}}}},slot:15});Object.assign(ne,{...t,type:11,name:'*struct{comptime size: struct{comptime type: type = @Vector(2, i32), comptime minValue: struct{comptime comptime_int = 100, comptime comptime_int = 100} = .{100, 100}, comptime maxValue: struct{comptime comptime_int = 1000, comptime comptime_int = 1000} = .{1000, 1000}, comptime defaultValue: struct{comptime comptime_int = 512, comptime comptime_int = 512} = .{512, 512}, comptime aeDisplayName: *const [17:0]u8 = "Output image size"} = .{.type = @Vector(2, i32), .minValue = .{100, 100}, .maxValue = .{1000, 1000}, .defaultValue = .{512, 512}, .aeDisplayName = "Output image size"}, comptime cameraPosition: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -100, comptime comptime_float = 0, comptime comptime_float = -100} = .{-100, 0, -100}, comptime maxValue: struct{comptime comptime_float = 100, comptime comptime_float = 20, comptime comptime_float = 100} = .{100, 20, 100}, comptime defaultValue: struct{comptime comptime_float = -6, comptime comptime_float = 4, comptime comptime_float = 6} = .{-6, 4, 6}} = .{.type = @Vector(3, f32), .minValue = .{-100, 0, -100}, .maxValue = .{100, 20, 100}, .defaultValue = .{-6, 4, 6}}, comptime cameraPositionFine: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -5, comptime comptime_float = -1, comptime comptime_float = -5} = .{-5, -1, -5}, comptime maxValue: struct{comptime comptime_float = 5, comptime comptime_float = 1, comptime comptime_float = 5} = .{5, 1, 5}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0}} = .{.type = @Vector(3, f32), .minValue = .{-5, -1, -5}, .maxValue = .{5, 1, 5}, .defaultValue = .{0, 0, 0}}, comptime cameraRotation: struct{comptime type: type = f32, comptime minValue: comptime_float = -180, comptime maxValue: comptime_float = 180, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = -180, .maxValue = 180, .defaultValue = 0}, comptime terrainHorizon: struct{comptime type: type = f32, comptime minValue: comptime_float = 10, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 25} = .{.type = f32, .minValue = 10, .maxValue = 100, .defaultValue = 25}, comptime terrainDetail: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 7} = .{.type = f32, .minValue = 1, .maxValue = 10, .defaultValue = 7}, comptime buildings: struct{comptime type: type = bool, comptime defaultValue: bool = false} = .{.type = bool, .defaultValue = false}, comptime waterLevel: struct{comptime type: type = f32, comptime minValue: comptime_float = -0.1, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.34} = .{.type = f32, .minValue = -0.1, .maxValue = 1, .defaultValue = 0.34}, comptime sampling: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 2, comptime defaultValue: comptime_int = 0} = .{.type = i32, .minValue = 0, .maxValue = 2, .defaultValue = 0}, comptime shadows: struct{comptime type: type = bool, comptime defaultValue: bool = true} = .{.type = bool, .defaultValue = true}, comptime contours: struct{comptime type: type = bool, comptime defaultValue: bool = false} = .{.type = bool, .defaultValue = false}, comptime sun: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 90, comptime comptime_float = 360} = .{90, 360}, comptime defaultValue: struct{comptime comptime_float = 14, comptime comptime_float = 252} = .{14, 252}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{90, 360}, .defaultValue = .{14, 252}}, comptime terrainHeight: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.5, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 3.5} = .{.type = f32, .minValue = 0.5, .maxValue = 10, .defaultValue = 3.5}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ge}],methods:[],template:null},slot:14});const cm=new Uint8Array([]);Object.assign(Je,{...t,type:2,name:"@TypeOf(.{})",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:cm}}},slot:17});Object.assign(ce,{...t,type:11,name:"*@TypeOf(.{})",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Je}],methods:[],template:null},slot:16});const um=new Uint8Array([]),lm=new Uint8Array([180,30,16,0]),pm=new Uint8Array([4,0,0,0]);Object.assign(Qe,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:a}],methods:[],template:{memory:{array:um},slots:{0:{structure:a,memory:{array:lm},slots:{0:{structure:i,memory:{array:pm},address:1056436}}}}}},slot:64});Object.assign(ue,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Qe}],methods:[],template:null},slot:63});const ym=new Uint8Array([]),fm=new Uint8Array([170,170,170,170]);Object.assign(We,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:ue}],methods:[],template:{memory:{array:ym},slots:{0:{structure:ue,memory:{array:fm},slots:{0:{structure:Qe,memory:{array:m},address:-1431655766}}}}}},slot:19});Object.assign(le,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:We}],methods:[],template:null},slot:18});const dm=new Uint8Array([]),bm=new Uint8Array([]),gm=new Uint8Array([196,250,15,0]),hm=new Uint8Array([240,101,16,0]),Vm=new Uint8Array([99,111,109,46,115,117,98,98,108,117,101,46,102,105,108,116,101,114,115,0]),_m=new Uint8Array([4,251,15,0]),zm=new Uint8Array([228,101,16,0]),Sm=new Uint8Array([84,111,109,32,66,101,100,100,97,114,100,0]),wm=new Uint8Array([68,251,15,0]),Rm=new Uint8Array([1,0,0,0]),qm=new Uint8Array([156,251,15,0]),Om=new Uint8Array([189,101,16,0]),Am=new Uint8Array([76,97,110,100,115,99,97,112,101,32,114,101,110,100,101,114,105,110,103,32,117,115,105,110,103,32,114,97,121,32,109,97,114,99,104,105,110,103,0]),Um=new Uint8Array([170,170,170,170]),jm=new Uint8Array([170,170,170,170]),xm=new Uint8Array([170,170,170,170]);Object.assign(rt,{...t,type:2,name:"landscape.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:dm}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:D},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:v},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:w},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:E},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:ne},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:ce},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:le}],methods:[],template:{memory:{array:bm},slots:{0:{structure:D,memory:{array:gm},slots:{0:{structure:de,memory:{array:hm},slots:{0:{structure:fe,memory:{array:Vm},address:1074672}}}}},1:{structure:v,memory:{array:_m},slots:{0:{structure:ge,memory:{array:zm},slots:{0:{structure:be,memory:{array:Sm},address:1074660}}}}},2:{structure:w,memory:{array:wm},slots:{0:{structure:i,memory:{array:Rm}}}},3:{structure:E,memory:{array:qm},slots:{0:{structure:Ve,memory:{array:Om},slots:{0:{structure:he,memory:{array:Am},address:1074621}}}}},4:{structure:ne,memory:{array:Um},slots:{0:{structure:Ge,memory:{array:m},address:-1431655766}}},5:{structure:ce,memory:{array:jm},slots:{0:{structure:Je,memory:{array:m},address:-1431655766}}},6:{structure:le,memory:{array:xm},slots:{0:{structure:We,memory:{array:m},address:-1431655766}}}}}},slot:1});const Pm=new Uint8Array([]);Object.assign(U,{...t,type:2,name:"landscape.KernelInput(u8,landscape.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Pm}}},slot:20});Object.assign(Xe,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:25});Object.assign(Ye,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:Xe}],methods:[],template:null},slot:24});Object.assign(Ze,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Ye}],methods:[],template:null},slot:23});Object.assign(d,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:d}],methods:[],template:null},slot:26});const Cm=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(mt,{...t,type:9,name:"landscape.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:i},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:i}],methods:[],template:{memory:{array:Cm}}},slot:27});Object.assign(pe,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:pe}],methods:[],template:null},slot:29});Object.assign(at,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:65});const Im=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),km=new Uint8Array([]),Dm=new Uint8Array([40,253,15,0]),vm=new Uint8Array([4,0,0,0]);Object.assign(ye,{...t,type:2,name:"landscape.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Ze},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:d},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:d},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:mt},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:f},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:pe}],methods:[],template:{memory:{array:Im}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:Xe},{...e,type:7,isRequired:!1,name:"FPixel",structure:at},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:w}],methods:[],template:{memory:{array:km},slots:{0:{structure:w,memory:{array:Dm},slots:{0:{structure:i,memory:{array:vm}}}}}}},slot:22});const Em=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Fm=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Km=new Uint8Array([0,0,0,0,0,0,0,0]),qt=new Uint8Array([]);Object.assign(j,{...t,type:2,name:"landscape.KernelOutput(u8,landscape.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:ye}],methods:[],template:{memory:{array:Em},slots:{0:{structure:ye,memory:{array:Fm},slots:{0:{structure:Ze,memory:{array:Km},slots:{0:{structure:Ye,memory:{array:qt}}}}}}}}},slot:21});const Tm=new Uint8Array([0,0,192,192,0,0,128,64,0,0,192,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,96,65,0,0,124,67,0,0,0,0,0,0,200,65,0,0,224,64,123,20,174,62,0,0,0,0,0,0,96,64,0,1,0,0,0,0,0,0]);Object.assign(x,{...t,type:2,name:"landscape.KernelParameters(landscape.kernel)",length:1,byteSize:80,align:4,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:256,bitSize:64,byteSize:8,slot:0,name:"size",structure:_e},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:96,byteSize:16,slot:1,name:"cameraPosition",structure:R},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:96,byteSize:16,slot:2,name:"cameraPositionFine",structure:R},{...e,type:4,isRequired:!1,bitOffset:384,bitSize:32,byteSize:4,slot:3,name:"cameraRotation",structure:u},{...e,type:4,isRequired:!1,bitOffset:416,bitSize:32,byteSize:4,slot:4,name:"terrainHorizon",structure:u},{...e,type:4,isRequired:!1,bitOffset:448,bitSize:32,byteSize:4,slot:5,name:"terrainDetail",structure:u},{...e,type:1,isRequired:!1,bitOffset:576,bitSize:1,byteSize:1,slot:6,name:"buildings",structure:f},{...e,type:4,isRequired:!1,bitOffset:480,bitSize:32,byteSize:4,slot:7,name:"waterLevel",structure:u},{...e,type:2,isRequired:!1,bitOffset:512,bitSize:32,byteSize:4,slot:8,name:"sampling",structure:i},{...e,type:1,isRequired:!1,bitOffset:584,bitSize:1,byteSize:1,slot:9,name:"shadows",structure:f},{...e,type:1,isRequired:!1,bitOffset:592,bitSize:1,byteSize:1,slot:10,name:"contours",structure:f},{...e,type:6,isRequired:!1,bitOffset:320,bitSize:64,byteSize:8,slot:11,name:"sun",structure:He},{...e,type:4,isRequired:!1,bitOffset:544,bitSize:32,byteSize:4,slot:12,name:"terrainHeight",structure:u}],methods:[],template:{memory:{array:Tm}}},slot:30});Object.assign(it,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(landscape.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:66});Object.assign(ot,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(landscape.createOutput)).Fn.return_type.?).ErrorUnion.error_set!landscape.KernelOutput(u8,landscape.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:it}],methods:[],template:null},slot:37});Object.assign(nt,{...t,type:3,name:"createOutput",length:1,byteSize:128,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:640,bitSize:32,byteSize:4,slot:0,name:"0",structure:d},{...e,type:3,bitOffset:672,bitSize:32,byteSize:4,slot:1,name:"1",structure:d},{...e,type:6,bitOffset:1024,bitSize:0,byteSize:0,slot:2,name:"2",structure:U},{...e,type:6,bitOffset:0,bitSize:640,byteSize:80,slot:3,name:"3",structure:x},{...e,type:6,bitOffset:704,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ot}],methods:[],template:null},slot:35});Object.assign(ct,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(landscape.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:67});Object.assign(ut,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(landscape.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!landscape.KernelOutput(u8,landscape.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ct}],methods:[],template:null},slot:38});Object.assign(lt,{...t,type:3,name:"createPartialOutput",length:1,byteSize:128,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:640,bitSize:32,byteSize:4,slot:0,name:"0",structure:d},{...e,type:3,bitOffset:672,bitSize:32,byteSize:4,slot:1,name:"1",structure:d},{...e,type:3,bitOffset:704,bitSize:32,byteSize:4,slot:2,name:"2",structure:d},{...e,type:3,bitOffset:736,bitSize:32,byteSize:4,slot:3,name:"3",structure:d},{...e,type:6,bitOffset:1024,bitSize:0,byteSize:0,slot:4,name:"4",structure:U},{...e,type:6,bitOffset:0,bitSize:640,byteSize:80,slot:5,name:"5",structure:x},{...e,type:6,bitOffset:768,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ut}],methods:[],template:null},slot:36});const Hm={argStruct:nt,thunk:6,name:"createOutput"},Nm={argStruct:lt,thunk:2,name:"createPartialOutput"};Object.assign(pt,{...t,type:2,name:"landscape",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:qt}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:rt},{...e,type:7,isRequired:!1,name:"Input",structure:U},{...e,type:7,isRequired:!1,name:"Output",structure:j},{...e,type:7,isRequired:!1,name:"Parameters",structure:x}],methods:[Hm,Nm],template:null},slot:0});const Lm=[h,fe,de,D,be,ge,v,i,w,he,Ve,E,_e,a,ze,F,Se,K,we,T,Re,qe,H,Oe,N,u,R,r,s,Ae,L,Ue,M,je,$,xe,B,Pe,G,Ce,J,Ie,Q,ke,W,De,X,ve,Y,Ee,Z,f,q,A,S,Fe,ee,Ke,te,Te,se,He,Ne,re,Le,me,Me,ae,$e,ie,Be,oe,Ge,ne,Je,ce,Qe,ue,We,le,rt,U,Xe,Ye,Ze,d,mt,pe,at,ye,j,x,it,ot,nt,ct,ut,lt,pt],Mm=Bt(Lm),$m=pt.constructor,Bm=(async()=>{const l=new URL("landscape-2f97bd9c.wasm",import.meta.url).href;return fetch(l)})();Gt(Bm,{...Mm,writeBack:!0});const{createOutput:ea,createPartialOutput:Gm,kernel:st,Input:Jm,Output:ta,Parameters:sa}=$m;function Qm(l,y,n,o,c={},_={}){if(Array.isArray(c)){const g=c;c={};for(const[b,z]of Object.keys(st.inputImages).entries())c[z]=g[b]}const P=new Jm(void 0),C=Object.keys(st.inputImages),p=[];let O;for(const g of C){let b=c[g];if(b||(C.length===1&&["data","width","height"].every(z=>!!c[z])?b=c:p.push(g)),P[g]=b,O){if(b.colorSpace!==O)throw new Error(`Input images must all use the same color space: ${O}`)}else O=b.colorSpace}if(p.length>0)throw new Error(`Missing input image${p.length>1?"s":""}: ${p.join(", ")}`);const et=Gm(l,y,n,o,P,_),dt=g=>{const b=Object.keys(g),z={};for(const bt of b){const{data:{typedArray:I},width:gt,height:At}=g[bt];let k;if(typeof ImageData=="function"){const Ut=new Uint8ClampedArray(I.buffer,I.byteOffset,I.byteLength);k=new ImageData(Ut,gt,o,{colorSpace:O})}else k={data:I,width:gt,height:At};if(b.length===1)return k;z[bt]=k}return z};return et[Symbol.toStringTag]==="Promise"?et.then(dt):dt(et)}function Wm(){const l={};for(let[y,n]of Object.entries(st)){if(y==="parameters"){const o={};for(const[c,_]of Object.entries(n)){const P=o[c]={};for(let[C,p]of Object.entries(_))typeof p=="object"?"string"in p?p=p.string:p=Ot(p):typeof p=="function"&&(p=Xm(p.name)),P[C]=p}n=o}else typeof n=="object"&&("string"in n?n=n.string:n=n.valueOf());l[y]=n}return l}function Ot(l){const y=[];for(let[n,o]of Object.entries(l))typeof o=="object"&&(o=Ot(o)),y[n]=o;return y}function Xm(l){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[l]}onmessage=l=>{const[y,n,...o]=l.data;Ym(y,o).then(([c,_])=>{postMessage([y,n,c],{transfer:_})}).catch(c=>{postMessage(["error",n,c])})};async function Ym(l,y){switch(l){case"getKernelInfo":return[Wm(...y)];case"createPartialImageData":const o=await Qm(...y),c=[];if("data"in o&&"width"in o&&"height"in o)c.push(o.data.buffer);else for(const _ of Object.entries(o))c.push(o.data.buffer);return[o,c];default:throw new Error(`Unknown function: ${l}`)}}
