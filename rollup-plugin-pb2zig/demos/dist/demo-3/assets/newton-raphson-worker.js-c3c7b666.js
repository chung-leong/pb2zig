import{u as We,a as Ze,b as et,d as tt,c as rt,e as st,f as at,g as mt,h as ot,i as it,j as ct,k as nt,l as ut,o as lt,m as yt,n as pt,p as ft,q as dt,r as bt}from"./index-334ebb77.js";We();Ze();et();tt();rt();st();at();mt();ot();it();ct();nt();ut();lt();yt();pt();ft();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},w={},ae={},me={},E={},oe={},ie={},K={},g={},A={},ce={},ne={},T={},S={},a={},m={},r={},ue={},D={},le={},F={},ye={},M={},pe={},X={},p={},f={},fe={},Y={},de={},$={},be={},B={},d={},Ve={},L={},_={},q={},b={},i={},he={},G={},ge={},H={},Se={},J={},ze={},N={},Q={},we={},W={},Oe={},Z={},je={},x={},Re={},qe={},Ae={},V={},Pe={},ee={},te={},re={},j={},P={},Ie={},ke={},Ce={},ve={},Ee={},Ke={},Te={};Object.assign(w,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:w}],methods:[],template:null},slot:5});Object.assign(ae,{...t,type:1,name:"[33:0]u8",length:33,byteSize:34,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:w}],methods:[],template:null},slot:4});Object.assign(me,{...t,type:11,name:"*const [33:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:3});Object.assign(E,{...t,type:11,name:"**const [33:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:2});Object.assign(oe,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:w}],methods:[],template:null},slot:8});Object.assign(ie,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:7});Object.assign(K,{...t,type:11,name:"**const [7:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:6});Object.assign(g,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:g}],methods:[],template:null},slot:10});Object.assign(A,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:g}],methods:[],template:null},slot:9});Object.assign(ce,{...t,type:1,name:"[23:0]u8",length:23,byteSize:24,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:w}],methods:[],template:null},slot:13});Object.assign(ne,{...t,type:11,name:"*const [23:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:12});Object.assign(T,{...t,type:11,name:"**const [23:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:11});Object.assign(S,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:33});Object.assign(a,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:31});Object.assign(m,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:m}],methods:[],template:null},slot:69});Object.assign(r,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:68});const Vt=new Uint8Array([]),ht=new Uint8Array([80,30,16,0]),se=new Uint8Array([0,0,0,0,0,0,0,0]),gt=new Uint8Array([80,30,16,0]);Object.assign(ue,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:Vt},slots:{0:{structure:r,memory:{array:ht},slots:{0:{structure:m,memory:{array:se},address:1056336}}},1:{structure:r,memory:{array:gt},slots:{0:{structure:m,memory:{array:se},address:1056336}}}}}},slot:57});Object.assign(D,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:56});const St=new Uint8Array([]),zt=new Uint8Array([96,30,16,0]),Ye=new Uint8Array([0,0,0,0,0,64,143,64]),wt=new Uint8Array([96,30,16,0]);Object.assign(le,{...t,type:2,name:"struct{comptime comptime_float = 1000, comptime comptime_float = 1000}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:St},slots:{0:{structure:r,memory:{array:zt},slots:{0:{structure:m,memory:{array:Ye},address:1056352}}},1:{structure:r,memory:{array:wt},slots:{0:{structure:m,memory:{array:Ye},address:1056352}}}}}},slot:59});Object.assign(F,{...t,type:11,name:"*const struct{comptime comptime_float = 1000, comptime comptime_float = 1000}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:58});const Ot=new Uint8Array([]),Rt=new Uint8Array([88,30,16,0]),$e=new Uint8Array([0,0,0,0,0,0,128,64]),qt=new Uint8Array([88,30,16,0]);Object.assign(ye,{...t,type:2,name:"struct{comptime comptime_float = 512, comptime comptime_float = 512}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:Ot},slots:{0:{structure:r,memory:{array:Rt},slots:{0:{structure:m,memory:{array:$e},address:1056344}}},1:{structure:r,memory:{array:qt},slots:{0:{structure:m,memory:{array:$e},address:1056344}}}}}},slot:61});Object.assign(M,{...t,type:11,name:"*const struct{comptime comptime_float = 512, comptime comptime_float = 512}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:60});const At=new Uint8Array([]),Ut=new Uint8Array([170,170,170,170]),s=new Uint8Array([]),_t=new Uint8Array([170,170,170,170]),xt=new Uint8Array([170,170,170,170]);Object.assign(pe,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 1000, comptime comptime_float = 1000} = .{1000, 1000}, comptime defaultValue: struct{comptime comptime_float = 512, comptime comptime_float = 512} = .{512, 512}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:D},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:F},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:M}],methods:[],template:{memory:{array:At},slots:{0:{structure:D,memory:{array:Ut},slots:{0:{structure:ue,memory:{array:s},address:-1431655766}}},1:{structure:F,memory:{array:_t},slots:{0:{structure:le,memory:{array:s},address:-1431655766}}},2:{structure:M,memory:{array:xt},slots:{0:{structure:ye,memory:{array:s},address:-1431655766}}}}}},slot:39});Object.assign(X,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 1000, comptime comptime_float = 1000} = .{1000, 1000}, comptime defaultValue: struct{comptime comptime_float = 512, comptime comptime_float = 512} = .{512, 512}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pe}],methods:[],template:null},slot:38});Object.assign(p,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:32});Object.assign(f,{...t,type:11,name:"*const @Vector(4, f32)",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:62});const jt=new Uint8Array([]),Pt=new Uint8Array([192,30,16,0]),Be=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),It=new Uint8Array([176,30,16,0]),_e=new Uint8Array([0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63]),kt=new Uint8Array([176,30,16,0]);Object.assign(fe,{...t,type:2,name:"struct{comptime type: type = @Vector(4, f32), comptime minValue: @Vector(4, f32) = .{ 0, 0, 0, 0 }, comptime maxValue: @Vector(4, f32) = .{ 1, 1, 1, 1 }, comptime defaultValue: @Vector(4, f32) = .{ 1, 1, 1, 1 }}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:p},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:f},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:f},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:f}],methods:[],template:{memory:{array:jt},slots:{0:{structure:f,memory:{array:Pt},slots:{0:{structure:p,memory:{array:Be},address:1056448}}},1:{structure:f,memory:{array:It},slots:{0:{structure:p,memory:{array:_e},address:1056432}}},2:{structure:f,memory:{array:kt},slots:{0:{structure:p,memory:{array:_e},address:1056432}}}}}},slot:41});Object.assign(Y,{...t,type:11,name:"*const struct{comptime type: type = @Vector(4, f32), comptime minValue: @Vector(4, f32) = .{ 0, 0, 0, 0 }, comptime maxValue: @Vector(4, f32) = .{ 1, 1, 1, 1 }, comptime defaultValue: @Vector(4, f32) = .{ 1, 1, 1, 1 }}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:40});const Ct=new Uint8Array([]),vt=new Uint8Array([80,30,16,0]),Et=new Uint8Array([80,30,16,0]),Kt=new Uint8Array([72,30,16,0]),Tt=new Uint8Array([154,153,153,153,153,153,233,63]),Dt=new Uint8Array([64,30,16,0]),De=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(de,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0.8, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:r},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:r}],methods:[],template:{memory:{array:Ct},slots:{0:{structure:r,memory:{array:vt},slots:{0:{structure:m,memory:{array:se},address:1056336}}},1:{structure:r,memory:{array:Et},slots:{0:{structure:m,memory:{array:se},address:1056336}}},2:{structure:r,memory:{array:Kt},slots:{0:{structure:m,memory:{array:Tt},address:1056328}}},3:{structure:r,memory:{array:Dt},slots:{0:{structure:m,memory:{array:De},address:1056320}}}}}},slot:64});Object.assign($,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0.8, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:de}],methods:[],template:null},slot:63});const Ft=new Uint8Array([]),Mt=new Uint8Array([192,30,16,0]),Xt=new Uint8Array([176,30,16,0]),Yt=new Uint8Array([170,170,170,170]);Object.assign(be,{...t,type:2,name:"struct{comptime type: type = @Vector(4, f32), comptime minValue: @Vector(4, f32) = .{ 0, 0, 0, 0 }, comptime maxValue: @Vector(4, f32) = .{ 1, 1, 1, 1 }, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0.8, comptime comptime_float = 1} = .{0, 0, 0.8, 1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:p},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:f},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:f},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:$}],methods:[],template:{memory:{array:Ft},slots:{0:{structure:f,memory:{array:Mt},slots:{0:{structure:p,memory:{array:Be},address:1056448}}},1:{structure:f,memory:{array:Xt},slots:{0:{structure:p,memory:{array:_e},address:1056432}}},2:{structure:$,memory:{array:Yt},slots:{0:{structure:de,memory:{array:s},address:-1431655766}}}}}},slot:43});Object.assign(B,{...t,type:11,name:"*const struct{comptime type: type = @Vector(4, f32), comptime minValue: @Vector(4, f32) = .{ 0, 0, 0, 0 }, comptime maxValue: @Vector(4, f32) = .{ 1, 1, 1, 1 }, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0.8, comptime comptime_float = 1} = .{0, 0, 0.8, 1}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:42});Object.assign(d,{...t,type:11,name:"*const @Vector(2, f32)",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:a}],methods:[],template:null},slot:65});const $t=new Uint8Array([]),Bt=new Uint8Array([56,30,16,0]),Lt=new Uint8Array([0,0,0,0,0,0,20,192]),Gt=new Uint8Array([48,30,16,0]),Ht=new Uint8Array([0,0,0,0,0,0,20,64]);Object.assign(Ve,{...t,type:2,name:"struct{comptime comptime_float = -5, comptime comptime_float = 5}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:r}],methods:[],template:{memory:{array:$t},slots:{0:{structure:r,memory:{array:Bt},slots:{0:{structure:m,memory:{array:Lt},address:1056312}}},1:{structure:r,memory:{array:Gt},slots:{0:{structure:m,memory:{array:Ht},address:1056304}}}}}},slot:67});Object.assign(L,{...t,type:11,name:"*const struct{comptime comptime_float = -5, comptime comptime_float = 5}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ve}],methods:[],template:null},slot:66});const Jt=new Uint8Array([]),Nt=new Uint8Array([160,30,16,0]),Le=new Uint8Array([0,0,32,193,0,0,32,193]),Qt=new Uint8Array([152,30,16,0]),Ge=new Uint8Array([0,0,32,65,0,0,32,65]),Wt=new Uint8Array([170,170,170,170]);Object.assign(_,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: struct{comptime comptime_float = -5, comptime comptime_float = 5} = .{-5, 5}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:d},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:d},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:L}],methods:[],template:{memory:{array:Jt},slots:{0:{structure:d,memory:{array:Nt},slots:{0:{structure:a,memory:{array:Le},address:1056416}}},1:{structure:d,memory:{array:Qt},slots:{0:{structure:a,memory:{array:Ge},address:1056408}}},2:{structure:L,memory:{array:Wt},slots:{0:{structure:Ve,memory:{array:s},address:-1431655766}}}}}},slot:45});Object.assign(q,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: struct{comptime comptime_float = -5, comptime comptime_float = 5} = .{-5, 5}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_}],methods:[],template:null},slot:44});const Zt=new Uint8Array([]),er=new Uint8Array([160,30,16,0]),tr=new Uint8Array([152,30,16,0]),rr=new Uint8Array([144,30,16,0]),sr=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(b,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:d},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:d},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:d}],methods:[],template:{memory:{array:Zt},slots:{0:{structure:d,memory:{array:er},slots:{0:{structure:a,memory:{array:Le},address:1056416}}},1:{structure:d,memory:{array:tr},slots:{0:{structure:a,memory:{array:Ge},address:1056408}}},2:{structure:d,memory:{array:rr},slots:{0:{structure:a,memory:{array:sr},address:1056400}}}}}},slot:47});Object.assign(i,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:b}],methods:[],template:null},slot:46});const ar=new Uint8Array([]),mr=new Uint8Array([64,30,16,0]),or=new Uint8Array([136,30,16,0]),ir=new Uint8Array([0,0,0,0,0,0,36,64]),cr=new Uint8Array([128,30,16,0]),nr=new Uint8Array([0,0,0,0,0,0,8,64]);Object.assign(he,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 3}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:ar},slots:{0:{structure:r,memory:{array:mr},slots:{0:{structure:m,memory:{array:De},address:1056320}}},1:{structure:r,memory:{array:or},slots:{0:{structure:m,memory:{array:ir},address:1056392}}},2:{structure:r,memory:{array:cr},slots:{0:{structure:m,memory:{array:nr},address:1056384}}}}}},slot:49});Object.assign(G,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 3}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:he}],methods:[],template:null},slot:48});const ur=new Uint8Array([]),lr=new Uint8Array([64,30,16,0]),yr=new Uint8Array([120,30,16,0]),pr=new Uint8Array([0,0,0,0,0,0,89,64]),fr=new Uint8Array([112,30,16,0]),dr=new Uint8Array([0,0,0,0,0,0,57,64]);Object.assign(ge,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 25}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:ur},slots:{0:{structure:r,memory:{array:lr},slots:{0:{structure:m,memory:{array:De},address:1056320}}},1:{structure:r,memory:{array:yr},slots:{0:{structure:m,memory:{array:pr},address:1056376}}},2:{structure:r,memory:{array:fr},slots:{0:{structure:m,memory:{array:dr},address:1056368}}}}}},slot:51});Object.assign(H,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 25}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ge}],methods:[],template:null},slot:50});const br=new Uint8Array([]),Vr=new Uint8Array([170,170,170,170]),hr=new Uint8Array([170,170,170,170]),gr=new Uint8Array([170,170,170,170]),Sr=new Uint8Array([170,170,170,170]),zr=new Uint8Array([170,170,170,170]),wr=new Uint8Array([170,170,170,170]),Or=new Uint8Array([170,170,170,170]),Rr=new Uint8Array([170,170,170,170]),qr=new Uint8Array([170,170,170,170]),Ar=new Uint8Array([170,170,170,170]),Ur=new Uint8Array([170,170,170,170]),_r=new Uint8Array([170,170,170,170]),xr=new Uint8Array([170,170,170,170]),jr=new Uint8Array([170,170,170,170]),Pr=new Uint8Array([170,170,170,170]);Object.assign(Se,{...t,type:2,name:"struct{comptime size: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 1000, comptime comptime_float = 1000} = .{1000, 1000}, comptime defaultValue: struct{comptime comptime_float = 512, comptime comptime_float = 512} = .{512, 512}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{1000, 1000}, .defaultValue = .{512, 512}}, comptime colorStart: struct{comptime type: type = @Vector(4, f32), comptime minValue: @Vector(4, f32) = .{ 0, 0, 0, 0 }, comptime maxValue: @Vector(4, f32) = .{ 1, 1, 1, 1 }, comptime defaultValue: @Vector(4, f32) = .{ 1, 1, 1, 1 }} = .{.type = @Vector(4, f32), .minValue = .{ 0, 0, 0, 0 }, .maxValue = .{ 1, 1, 1, 1 }, .defaultValue = .{ 1, 1, 1, 1 }}, comptime colorEnd: struct{comptime type: type = @Vector(4, f32), comptime minValue: @Vector(4, f32) = .{ 0, 0, 0, 0 }, comptime maxValue: @Vector(4, f32) = .{ 1, 1, 1, 1 }, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0.8, comptime comptime_float = 1} = .{0, 0, 0.8, 1}} = .{.type = @Vector(4, f32), .minValue = .{ 0, 0, 0, 0 }, .maxValue = .{ 1, 1, 1, 1 }, .defaultValue = .{0, 0, 0.8, 1}}, comptime rangeX: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: struct{comptime comptime_float = -5, comptime comptime_float = 5} = .{-5, 5}} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{-5, 5}}, comptime rangeY: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: struct{comptime comptime_float = -5, comptime comptime_float = 5} = .{-5, 5}} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{-5, 5}}, comptime c0: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{ 0, 0 }}, comptime c1: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{ 0, 0 }}, comptime c2: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{ 0, 0 }}, comptime c3: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{ 0, 0 }}, comptime c4: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{ 0, 0 }}, comptime c5: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{ 0, 0 }}, comptime c6: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{ 0, 0 }}, comptime c7: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{ 0, 0 }}, comptime toleranceInversePower: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 3} = .{.type = f32, .minValue = 1, .maxValue = 10, .defaultValue = 3}, comptime iterations: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 25} = .{.type = f32, .minValue = 1, .maxValue = 100, .defaultValue = 25}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"size",structure:X},{...e,type:8,isRequired:!1,slot:1,name:"colorStart",structure:Y},{...e,type:8,isRequired:!1,slot:2,name:"colorEnd",structure:B},{...e,type:8,isRequired:!1,slot:3,name:"rangeX",structure:q},{...e,type:8,isRequired:!1,slot:4,name:"rangeY",structure:q},{...e,type:8,isRequired:!1,slot:5,name:"c0",structure:i},{...e,type:8,isRequired:!1,slot:6,name:"c1",structure:i},{...e,type:8,isRequired:!1,slot:7,name:"c2",structure:i},{...e,type:8,isRequired:!1,slot:8,name:"c3",structure:i},{...e,type:8,isRequired:!1,slot:9,name:"c4",structure:i},{...e,type:8,isRequired:!1,slot:10,name:"c5",structure:i},{...e,type:8,isRequired:!1,slot:11,name:"c6",structure:i},{...e,type:8,isRequired:!1,slot:12,name:"c7",structure:i},{...e,type:8,isRequired:!1,slot:13,name:"toleranceInversePower",structure:G},{...e,type:8,isRequired:!1,slot:14,name:"iterations",structure:H}],methods:[],template:{memory:{array:br},slots:{0:{structure:X,memory:{array:Vr},slots:{0:{structure:pe,memory:{array:s},address:-1431655766}}},1:{structure:Y,memory:{array:hr},slots:{0:{structure:fe,memory:{array:s},address:-1431655766}}},2:{structure:B,memory:{array:gr},slots:{0:{structure:be,memory:{array:s},address:-1431655766}}},3:{structure:q,memory:{array:Sr},slots:{0:{structure:_,memory:{array:s},address:-1431655766}}},4:{structure:q,memory:{array:zr},slots:{0:{structure:_,memory:{array:s},address:-1431655766}}},5:{structure:i,memory:{array:wr},slots:{0:{structure:b,memory:{array:s},address:-1431655766}}},6:{structure:i,memory:{array:Or},slots:{0:{structure:b,memory:{array:s},address:-1431655766}}},7:{structure:i,memory:{array:Rr},slots:{0:{structure:b,memory:{array:s},address:-1431655766}}},8:{structure:i,memory:{array:qr},slots:{0:{structure:b,memory:{array:s},address:-1431655766}}},9:{structure:i,memory:{array:Ar},slots:{0:{structure:b,memory:{array:s},address:-1431655766}}},10:{structure:i,memory:{array:Ur},slots:{0:{structure:b,memory:{array:s},address:-1431655766}}},11:{structure:i,memory:{array:_r},slots:{0:{structure:b,memory:{array:s},address:-1431655766}}},12:{structure:i,memory:{array:xr},slots:{0:{structure:b,memory:{array:s},address:-1431655766}}},13:{structure:G,memory:{array:jr},slots:{0:{structure:he,memory:{array:s},address:-1431655766}}},14:{structure:H,memory:{array:Pr},slots:{0:{structure:ge,memory:{array:s},address:-1431655766}}}}}},slot:15});Object.assign(J,{...t,type:11,name:"*struct{comptime size: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 1000, comptime comptime_float = 1000} = .{1000, 1000}, comptime defaultValue: struct{comptime comptime_float = 512, comptime comptime_float = 512} = .{512, 512}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{1000, 1000}, .defaultValue = .{512, 512}}, comptime colorStart: struct{comptime type: type = @Vector(4, f32), comptime minValue: @Vector(4, f32) = .{ 0, 0, 0, 0 }, comptime maxValue: @Vector(4, f32) = .{ 1, 1, 1, 1 }, comptime defaultValue: @Vector(4, f32) = .{ 1, 1, 1, 1 }} = .{.type = @Vector(4, f32), .minValue = .{ 0, 0, 0, 0 }, .maxValue = .{ 1, 1, 1, 1 }, .defaultValue = .{ 1, 1, 1, 1 }}, comptime colorEnd: struct{comptime type: type = @Vector(4, f32), comptime minValue: @Vector(4, f32) = .{ 0, 0, 0, 0 }, comptime maxValue: @Vector(4, f32) = .{ 1, 1, 1, 1 }, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0.8, comptime comptime_float = 1} = .{0, 0, 0.8, 1}} = .{.type = @Vector(4, f32), .minValue = .{ 0, 0, 0, 0 }, .maxValue = .{ 1, 1, 1, 1 }, .defaultValue = .{0, 0, 0.8, 1}}, comptime rangeX: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: struct{comptime comptime_float = -5, comptime comptime_float = 5} = .{-5, 5}} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{-5, 5}}, comptime rangeY: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: struct{comptime comptime_float = -5, comptime comptime_float = 5} = .{-5, 5}} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{-5, 5}}, comptime c0: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{ 0, 0 }}, comptime c1: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{ 0, 0 }}, comptime c2: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{ 0, 0 }}, comptime c3: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{ 0, 0 }}, comptime c4: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{ 0, 0 }}, comptime c5: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{ 0, 0 }}, comptime c6: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{ 0, 0 }}, comptime c7: struct{comptime type: type = @Vector(2, f32), comptime minValue: @Vector(2, f32) = .{ -10, -10 }, comptime maxValue: @Vector(2, f32) = .{ 10, 10 }, comptime defaultValue: @Vector(2, f32) = .{ 0, 0 }} = .{.type = @Vector(2, f32), .minValue = .{ -10, -10 }, .maxValue = .{ 10, 10 }, .defaultValue = .{ 0, 0 }}, comptime toleranceInversePower: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 3} = .{.type = f32, .minValue = 1, .maxValue = 10, .defaultValue = 3}, comptime iterations: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 25} = .{.type = f32, .minValue = 1, .maxValue = 100, .defaultValue = 25}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Se}],methods:[],template:null},slot:14});const Ir=new Uint8Array([]);Object.assign(ze,{...t,type:2,name:"@TypeOf(.{})",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ir}}},slot:17});Object.assign(N,{...t,type:11,name:"*@TypeOf(.{})",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ze}],methods:[],template:null},slot:16});Object.assign(Q,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:g}],methods:[],template:null},slot:70});const kr=new Uint8Array([]),Cr=new Uint8Array([104,30,16,0]),vr=new Uint8Array([4,0,0,0]);Object.assign(we,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:Q}],methods:[],template:{memory:{array:kr},slots:{0:{structure:Q,memory:{array:Cr},slots:{0:{structure:g,memory:{array:vr},address:1056360}}}}}},slot:53});Object.assign(W,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:we}],methods:[],template:null},slot:52});const Er=new Uint8Array([]),Kr=new Uint8Array([170,170,170,170]);Object.assign(Oe,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:W}],methods:[],template:{memory:{array:Er},slots:{0:{structure:W,memory:{array:Kr},slots:{0:{structure:we,memory:{array:s},address:-1431655766}}}}}},slot:19});Object.assign(Z,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Oe}],methods:[],template:null},slot:18});const Tr=new Uint8Array([]),Dr=new Uint8Array([]),Fr=new Uint8Array([124,250,15,0]),Mr=new Uint8Array([27,95,16,0]),Xr=new Uint8Array([99,111,109,46,111,109,45,108,97,98,115,46,102,105,108,116,101,114,115,46,110,101,119,116,111,110,82,97,112,104,115,111,110,0]),Yr=new Uint8Array([188,250,15,0]),$r=new Uint8Array([19,95,16,0]),Br=new Uint8Array([79,109,32,76,97,98,115,0]),Lr=new Uint8Array([252,250,15,0]),Gr=new Uint8Array([1,0,0,0]),Hr=new Uint8Array([84,251,15,0]),Jr=new Uint8Array([251,94,16,0]),Nr=new Uint8Array([78,101,119,116,111,110,32,82,97,112,104,115,111,110,32,70,114,97,99,116,97,108,115,0]),Qr=new Uint8Array([170,170,170,170]),Wr=new Uint8Array([170,170,170,170]),Zr=new Uint8Array([170,170,170,170]);Object.assign(je,{...t,type:2,name:"newton-raphson.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Tr}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:E},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:K},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:A},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:T},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:J},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:N},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:Z}],methods:[],template:{memory:{array:Dr},slots:{0:{structure:E,memory:{array:Fr},slots:{0:{structure:me,memory:{array:Mr},slots:{0:{structure:ae,memory:{array:Xr},address:1072923}}}}},1:{structure:K,memory:{array:Yr},slots:{0:{structure:ie,memory:{array:$r},slots:{0:{structure:oe,memory:{array:Br},address:1072915}}}}},2:{structure:A,memory:{array:Lr},slots:{0:{structure:g,memory:{array:Gr}}}},3:{structure:T,memory:{array:Hr},slots:{0:{structure:ne,memory:{array:Jr},slots:{0:{structure:ce,memory:{array:Nr},address:1072891}}}}},4:{structure:J,memory:{array:Qr},slots:{0:{structure:Se,memory:{array:s},address:-1431655766}}},5:{structure:N,memory:{array:Wr},slots:{0:{structure:ze,memory:{array:s},address:-1431655766}}},6:{structure:Z,memory:{array:Zr},slots:{0:{structure:Oe,memory:{array:s},address:-1431655766}}}}}},slot:1});const es=new Uint8Array([]);Object.assign(x,{...t,type:2,name:"newton-raphson.KernelInput(u8,newton-raphson.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:es}}},slot:20});Object.assign(Re,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:w}],methods:[],template:null},slot:25});Object.assign(qe,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:Re}],methods:[],template:null},slot:24});Object.assign(Ae,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:qe}],methods:[],template:null},slot:23});Object.assign(V,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:V}],methods:[],template:null},slot:26});const ts=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Pe,{...t,type:9,name:"newton-raphson.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:g},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:g}],methods:[],template:{memory:{array:ts}}},slot:27});Object.assign(ee,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:ee}],methods:[],template:null},slot:28});Object.assign(te,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:te}],methods:[],template:null},slot:29});const rs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ss=new Uint8Array([]),as=new Uint8Array([96,253,15,0]),ms=new Uint8Array([4,0,0,0]);Object.assign(re,{...t,type:2,name:"newton-raphson.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Ae},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:V},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:V},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Pe},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:ee},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:te}],methods:[],template:{memory:{array:rs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:Re},{...e,type:7,isRequired:!1,name:"FPixel",structure:p},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:A}],methods:[],template:{memory:{array:ss},slots:{0:{structure:A,memory:{array:as},slots:{0:{structure:g,memory:{array:ms}}}}}}},slot:22});const os=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),is=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),cs=new Uint8Array([0,0,0,0,0,0,0,0]),He=new Uint8Array([]);Object.assign(j,{...t,type:2,name:"newton-raphson.KernelOutput(u8,newton-raphson.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:re}],methods:[],template:{memory:{array:os},slots:{0:{structure:re,memory:{array:is},slots:{0:{structure:Ae,memory:{array:cs},slots:{0:{structure:qe,memory:{array:He}}}}}}}}},slot:21});const ns=new Uint8Array([0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,205,204,76,63,0,0,128,63,0,0,0,68,0,0,0,68,0,0,160,192,0,0,160,64,0,0,160,192,0,0,160,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,64,0,0,200,65]);Object.assign(P,{...t,type:2,name:"newton-raphson.KernelParameters(newton-raphson.kernel)",length:1,byteSize:128,align:4,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:256,bitSize:64,byteSize:8,slot:0,name:"size",structure:a},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:128,byteSize:16,slot:1,name:"colorStart",structure:p},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:128,byteSize:16,slot:2,name:"colorEnd",structure:p},{...e,type:6,isRequired:!1,bitOffset:320,bitSize:64,byteSize:8,slot:3,name:"rangeX",structure:a},{...e,type:6,isRequired:!1,bitOffset:384,bitSize:64,byteSize:8,slot:4,name:"rangeY",structure:a},{...e,type:6,isRequired:!1,bitOffset:448,bitSize:64,byteSize:8,slot:5,name:"c0",structure:a},{...e,type:6,isRequired:!1,bitOffset:512,bitSize:64,byteSize:8,slot:6,name:"c1",structure:a},{...e,type:6,isRequired:!1,bitOffset:576,bitSize:64,byteSize:8,slot:7,name:"c2",structure:a},{...e,type:6,isRequired:!1,bitOffset:640,bitSize:64,byteSize:8,slot:8,name:"c3",structure:a},{...e,type:6,isRequired:!1,bitOffset:704,bitSize:64,byteSize:8,slot:9,name:"c4",structure:a},{...e,type:6,isRequired:!1,bitOffset:768,bitSize:64,byteSize:8,slot:10,name:"c5",structure:a},{...e,type:6,isRequired:!1,bitOffset:832,bitSize:64,byteSize:8,slot:11,name:"c6",structure:a},{...e,type:6,isRequired:!1,bitOffset:896,bitSize:64,byteSize:8,slot:12,name:"c7",structure:a},{...e,type:4,isRequired:!1,bitOffset:960,bitSize:32,byteSize:4,slot:13,name:"toleranceInversePower",structure:S},{...e,type:4,isRequired:!1,bitOffset:992,bitSize:32,byteSize:4,slot:14,name:"iterations",structure:S}],methods:[],template:{memory:{array:ns}}},slot:30});Object.assign(Ie,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(newton-raphson.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:54});Object.assign(ke,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(newton-raphson.createOutput)).Fn.return_type.?).ErrorUnion.error_set!newton-raphson.KernelOutput(u8,newton-raphson.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Ie}],methods:[],template:null},slot:36});Object.assign(Ce,{...t,type:3,name:"createOutput",length:1,byteSize:176,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:1024,bitSize:32,byteSize:4,slot:0,name:"0",structure:V},{...e,type:3,bitOffset:1056,bitSize:32,byteSize:4,slot:1,name:"1",structure:V},{...e,type:6,bitOffset:1408,bitSize:0,byteSize:0,slot:2,name:"2",structure:x},{...e,type:6,bitOffset:0,bitSize:1024,byteSize:128,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:1088,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ke}],methods:[],template:null},slot:34});Object.assign(ve,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(newton-raphson.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:55});Object.assign(Ee,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(newton-raphson.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!newton-raphson.KernelOutput(u8,newton-raphson.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ve}],methods:[],template:null},slot:37});Object.assign(Ke,{...t,type:3,name:"createPartialOutput",length:1,byteSize:176,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:1024,bitSize:32,byteSize:4,slot:0,name:"0",structure:V},{...e,type:3,bitOffset:1056,bitSize:32,byteSize:4,slot:1,name:"1",structure:V},{...e,type:3,bitOffset:1088,bitSize:32,byteSize:4,slot:2,name:"2",structure:V},{...e,type:3,bitOffset:1120,bitSize:32,byteSize:4,slot:3,name:"3",structure:V},{...e,type:6,bitOffset:1408,bitSize:0,byteSize:0,slot:4,name:"4",structure:x},{...e,type:6,bitOffset:0,bitSize:1024,byteSize:128,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:1152,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Ee}],methods:[],template:null},slot:35});const us={argStruct:Ce,thunk:8,name:"createOutput"},ls={argStruct:Ke,thunk:2,name:"createPartialOutput"};Object.assign(Te,{...t,type:2,name:"newton-raphson",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:He}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:je},{...e,type:7,isRequired:!1,name:"Input",structure:x},{...e,type:7,isRequired:!1,name:"Output",structure:j},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[us,ls],template:null},slot:0});const ys=[w,ae,me,E,oe,ie,K,g,A,ce,ne,T,S,a,m,r,ue,D,le,F,ye,M,pe,X,p,f,fe,Y,de,$,be,B,d,Ve,L,_,q,b,i,he,G,ge,H,Se,J,ze,N,Q,we,W,Oe,Z,je,x,Re,qe,Ae,V,Pe,ee,te,re,j,P,Ie,ke,Ce,ve,Ee,Ke,Te],ps=dt(ys),fs=Te.constructor,ds=(async()=>{const u=new URL("newton-raphson-51c3f80d.wasm",import.meta.url).href;return fetch(u)})();bt(ds,{...ps,writeBack:!0});const{createOutput:Os,createPartialOutput:bs,kernel:xe,Input:Vs,Output:Rs,Parameters:qs}=fs;function hs(u,y,c,o,n={},O={}){if(Array.isArray(n)){const z=n;n={};for(const[h,R]of Object.keys(xe.inputImages).entries())n[R]=z[h]}const I=new Vs(void 0),k=Object.keys(xe.inputImages),l=[];let U;for(const z of k){let h=n[z];if(h||(k.length===1&&["data","width","height"].every(R=>!!n[R])?h=n:l.push(z)),I[z]=h,U){if(h.colorSpace!==U)throw new Error(`Input images must all use the same color space: ${U}`)}else U=h.colorSpace}if(l.length>0)throw new Error(`Missing input image${l.length>1?"s":""}: ${l.join(", ")}`);const Ue=bs(u,y,c,o,I,O),Fe=z=>{const h=Object.keys(z),R={};for(const Me of h){const{data:{typedArray:C},width:Xe,height:Ne}=z[Me];let v;if(typeof ImageData=="function"){const Qe=new Uint8ClampedArray(C.buffer,C.byteOffset,C.byteLength);v=new ImageData(Qe,Xe,o,{colorSpace:U})}else v={data:C,width:Xe,height:Ne};if(h.length===1)return v;R[Me]=v}return R};return Ue[Symbol.toStringTag]==="Promise"?Ue.then(Fe):Fe(Ue)}function gs(){const u={};for(let[y,c]of Object.entries(xe)){if(y==="parameters"){const o={};for(const[n,O]of Object.entries(c)){const I=o[n]={};for(let[k,l]of Object.entries(O))typeof l=="object"?"string"in l?l=l.string:l=Je(l):typeof l=="function"&&(l=Ss(l.name)),I[k]=l}c=o}else typeof c=="object"&&("string"in c?c=c.string:c=c.valueOf());u[y]=c}return u}function Je(u){const y=[];for(let[c,o]of Object.entries(u))typeof o=="object"&&(o=Je(o)),y[c]=o;return y}function Ss(u){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[u]}onmessage=u=>{const[y,c,...o]=u.data;zs(y,o).then(([n,O])=>{postMessage([y,c,n],{transfer:O})}).catch(n=>{postMessage(["error",c,n])})};async function zs(u,y){switch(u){case"getKernelInfo":return[gs(...y)];case"createPartialImageData":const o=await hs(...y),n=[];if("data"in o&&"width"in o&&"height"in o)n.push(o.data.buffer);else for(const O of Object.entries(o))n.push(o.data.buffer);return[o,n];default:throw new Error(`Unknown function: ${u}`)}}
