import{u as Qe,a as We,b as Xe,c as Ye,d as Ze,e as et,f as tt,g as st,h as rt,i as at,j as mt,k as it,l as ot,n as nt,p as ct,m as lt,o as ut,q as yt,r as pt}from"./index-cfb20c86.js";Qe();We();Xe();Ye();Ze();et();tt();st();rt();at();mt();it();ot();nt();ct();lt();ut();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},z={},R={},q={},g={},se={},re={},K={},p={},d={},u={},r={},s={},ae={},F={},me={},D={},V={},ie={},T={},oe={},M={},ne={},$={},ce={},B={},le={},L={},ue={},G={},ye={},H={},pe={},J={},fe={},N={},be={},Q={},de={},W={},X={},j={},O={},he={},Y={},Se={},Z={},je={},_={},ge={},ze={},y={},Ve={},A={},U={},Oe={},ee={},x={},_e={},we={},te={},P={},I={},xe={},Pe={},Ie={},ke={},Ce={},ve={},Ee={};Object.assign(z,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:5});Object.assign(R,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:4});Object.assign(q,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:3});Object.assign(g,{...t,type:11,name:"**const [13:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:2});Object.assign(se,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:8});Object.assign(re,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:7});Object.assign(K,{...t,type:11,name:"**const [14:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:6});Object.assign(p,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:10});Object.assign(d,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:9});Object.assign(u,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:30});Object.assign(r,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:r}],methods:[],template:null},slot:54});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:r}],methods:[],template:null},slot:53});const ft=new Uint8Array([]),bt=new Uint8Array([176,30,16,0]),dt=new Uint8Array([0,0,0,0,0,0,0,0]),ht=new Uint8Array([168,30,16,0]),St=new Uint8Array([31,133,235,81,184,30,213,63]),gt=new Uint8Array([160,30,16,0]),zt=new Uint8Array([113,61,10,215,163,112,205,63]);Object.assign(ae,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 0.33, comptime defaultValue: comptime_float = 0.23}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:ft},slots:{0:{structure:s,memory:{array:bt},slots:{0:{structure:r,memory:{array:dt},address:1056432}}},1:{structure:s,memory:{array:ht},slots:{0:{structure:r,memory:{array:St},address:1056424}}},2:{structure:s,memory:{array:gt},slots:{0:{structure:r,memory:{array:zt},address:1056416}}}}}},slot:37});Object.assign(F,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 0.33, comptime defaultValue: comptime_float = 0.23}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:36});const Vt=new Uint8Array([]),Ot=new Uint8Array([128,30,16,0]),qe=new Uint8Array([0,0,0,0,0,0,240,63]),_t=new Uint8Array([152,30,16,0]),wt=new Uint8Array([0,0,0,0,0,0,52,64]),Rt=new Uint8Array([128,30,16,0]);Object.assign(me,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 20, comptime defaultValue: comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Vt},slots:{0:{structure:s,memory:{array:Ot},slots:{0:{structure:r,memory:{array:qe},address:1056384}}},1:{structure:s,memory:{array:_t},slots:{0:{structure:r,memory:{array:wt},address:1056408}}},2:{structure:s,memory:{array:Rt},slots:{0:{structure:r,memory:{array:qe},address:1056384}}}}}},slot:39});Object.assign(D,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 20, comptime defaultValue: comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:38});Object.assign(V,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:31});const qt=new Uint8Array([]),At=new Uint8Array([104,30,16,0]),Ae=new Uint8Array([154,153,153,153,153,153,185,63]),Ut=new Uint8Array([104,30,16,0]);Object.assign(ie,{...t,type:2,name:"struct{comptime comptime_float = 0.1, comptime comptime_float = 0.1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:qt},slots:{0:{structure:s,memory:{array:At},slots:{0:{structure:r,memory:{array:Ae},address:1056360}}},1:{structure:s,memory:{array:Ut},slots:{0:{structure:r,memory:{array:Ae},address:1056360}}}}}},slot:56});Object.assign(T,{...t,type:11,name:"*const struct{comptime comptime_float = 0.1, comptime comptime_float = 0.1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:55});const jt=new Uint8Array([]),xt=new Uint8Array([96,30,16,0]),Me=new Uint8Array([0,0,0,0,0,0,32,64]),Pt=new Uint8Array([96,30,16,0]);Object.assign(oe,{...t,type:2,name:"struct{comptime comptime_float = 8, comptime comptime_float = 8}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:jt},slots:{0:{structure:s,memory:{array:xt},slots:{0:{structure:r,memory:{array:Me},address:1056352}}},1:{structure:s,memory:{array:Pt},slots:{0:{structure:r,memory:{array:Me},address:1056352}}}}}},slot:58});Object.assign(M,{...t,type:11,name:"*const struct{comptime comptime_float = 8, comptime comptime_float = 8}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:57});const It=new Uint8Array([]),kt=new Uint8Array([88,30,16,0]),Ct=new Uint8Array([0,0,0,0,0,0,8,64]),vt=new Uint8Array([80,30,16,0]),Et=new Uint8Array([145,43,80,230,122,182,251,63]);Object.assign(ne,{...t,type:2,name:"struct{comptime comptime_float = 3, comptime comptime_float = 1.7320508}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:It},slots:{0:{structure:s,memory:{array:kt},slots:{0:{structure:r,memory:{array:Ct},address:1056344}}},1:{structure:s,memory:{array:vt},slots:{0:{structure:r,memory:{array:Et},address:1056336}}}}}},slot:60});Object.assign($,{...t,type:11,name:"*const struct{comptime comptime_float = 3, comptime comptime_float = 1.7320508}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:59});const Kt=new Uint8Array([]),Ft=new Uint8Array([170,170,170,170]),o=new Uint8Array([]),Dt=new Uint8Array([170,170,170,170]),Tt=new Uint8Array([170,170,170,170]);Object.assign(ce,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0.1, comptime comptime_float = 0.1} = .{0.1, 0.1}, comptime maxValue: struct{comptime comptime_float = 8, comptime comptime_float = 8} = .{8, 8}, comptime defaultValue: struct{comptime comptime_float = 3, comptime comptime_float = 1.7320508} = .{3, 1.7320508}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:V},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:T},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:M},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:$}],methods:[],template:{memory:{array:Kt},slots:{0:{structure:T,memory:{array:Ft},slots:{0:{structure:ie,memory:{array:o},address:-1431655766}}},1:{structure:M,memory:{array:Dt},slots:{0:{structure:oe,memory:{array:o},address:-1431655766}}},2:{structure:$,memory:{array:Tt},slots:{0:{structure:ne,memory:{array:o},address:-1431655766}}}}}},slot:41});Object.assign(B,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0.1, comptime comptime_float = 0.1} = .{0.1, 0.1}, comptime maxValue: struct{comptime comptime_float = 8, comptime comptime_float = 8} = .{8, 8}, comptime defaultValue: struct{comptime comptime_float = 3, comptime comptime_float = 1.7320508} = .{3, 1.7320508}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:40});const Mt=new Uint8Array([]),$t=new Uint8Array([72,30,16,0]),$e=new Uint8Array([0,0,0,0,0,0,52,192]),Bt=new Uint8Array([72,30,16,0]);Object.assign(le,{...t,type:2,name:"struct{comptime comptime_float = -20, comptime comptime_float = -20}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Mt},slots:{0:{structure:s,memory:{array:$t},slots:{0:{structure:r,memory:{array:$e},address:1056328}}},1:{structure:s,memory:{array:Bt},slots:{0:{structure:r,memory:{array:$e},address:1056328}}}}}},slot:62});Object.assign(L,{...t,type:11,name:"*const struct{comptime comptime_float = -20, comptime comptime_float = -20}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:61});const Lt=new Uint8Array([]),Gt=new Uint8Array([64,30,16,0]),Be=new Uint8Array([0,0,0,0,0,0,121,64]),Ht=new Uint8Array([64,30,16,0]);Object.assign(ue,{...t,type:2,name:"struct{comptime comptime_float = 400, comptime comptime_float = 400}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Lt},slots:{0:{structure:s,memory:{array:Gt},slots:{0:{structure:r,memory:{array:Be},address:1056320}}},1:{structure:s,memory:{array:Ht},slots:{0:{structure:r,memory:{array:Be},address:1056320}}}}}},slot:64});Object.assign(G,{...t,type:11,name:"*const struct{comptime comptime_float = 400, comptime comptime_float = 400}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:63});const Jt=new Uint8Array([]),Nt=new Uint8Array([56,30,16,0]),Qt=new Uint8Array([0,0,0,0,0,0,94,64]),Wt=new Uint8Array([48,30,16,0]),Xt=new Uint8Array([0,0,0,0,0,64,96,64]);Object.assign(ye,{...t,type:2,name:"struct{comptime comptime_float = 120, comptime comptime_float = 130}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Jt},slots:{0:{structure:s,memory:{array:Nt},slots:{0:{structure:r,memory:{array:Qt},address:1056312}}},1:{structure:s,memory:{array:Wt},slots:{0:{structure:r,memory:{array:Xt},address:1056304}}}}}},slot:66});Object.assign(H,{...t,type:11,name:"*const struct{comptime comptime_float = 120, comptime comptime_float = 130}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:65});const Yt=new Uint8Array([]),Zt=new Uint8Array([170,170,170,170]),es=new Uint8Array([170,170,170,170]),ts=new Uint8Array([170,170,170,170]);Object.assign(pe,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -20, comptime comptime_float = -20} = .{-20, -20}, comptime maxValue: struct{comptime comptime_float = 400, comptime comptime_float = 400} = .{400, 400}, comptime defaultValue: struct{comptime comptime_float = 120, comptime comptime_float = 130} = .{120, 130}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:V},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:L},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:G},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:H}],methods:[],template:{memory:{array:Yt},slots:{0:{structure:L,memory:{array:Zt},slots:{0:{structure:le,memory:{array:o},address:-1431655766}}},1:{structure:G,memory:{array:es},slots:{0:{structure:ue,memory:{array:o},address:-1431655766}}},2:{structure:H,memory:{array:ts},slots:{0:{structure:ye,memory:{array:o},address:-1431655766}}}}}},slot:43});Object.assign(J,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -20, comptime comptime_float = -20} = .{-20, -20}, comptime maxValue: struct{comptime comptime_float = 400, comptime comptime_float = 400} = .{400, 400}, comptime defaultValue: struct{comptime comptime_float = 120, comptime comptime_float = 130} = .{120, 130}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pe}],methods:[],template:null},slot:42});const ss=new Uint8Array([]),rs=new Uint8Array([136,30,16,0]),Ge=new Uint8Array([252,169,241,210,77,98,80,63]),as=new Uint8Array([104,30,16,0]),ms=new Uint8Array([144,30,16,0]),is=new Uint8Array([123,20,174,71,225,122,116,63]);Object.assign(fe,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0.001, comptime maxValue: comptime_float = 0.1, comptime defaultValue: comptime_float = 0.005}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:ss},slots:{0:{structure:s,memory:{array:rs},slots:{0:{structure:r,memory:{array:Ge},address:1056392}}},1:{structure:s,memory:{array:as},slots:{0:{structure:r,memory:{array:Ae},address:1056360}}},2:{structure:s,memory:{array:ms},slots:{0:{structure:r,memory:{array:is},address:1056400}}}}}},slot:45});Object.assign(N,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.001, comptime maxValue: comptime_float = 0.1, comptime defaultValue: comptime_float = 0.005}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:44});const os=new Uint8Array([]),ns=new Uint8Array([136,30,16,0]),cs=new Uint8Array([128,30,16,0]),ls=new Uint8Array([120,30,16,0]),us=new Uint8Array([154,153,153,153,153,153,169,63]);Object.assign(be,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0.001, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.05}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:u},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:os},slots:{0:{structure:s,memory:{array:ns},slots:{0:{structure:r,memory:{array:Ge},address:1056392}}},1:{structure:s,memory:{array:cs},slots:{0:{structure:r,memory:{array:qe},address:1056384}}},2:{structure:s,memory:{array:ls},slots:{0:{structure:r,memory:{array:us},address:1056376}}}}}},slot:47});Object.assign(Q,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.001, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.05}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:46});const ys=new Uint8Array([]),ps=new Uint8Array([170,170,170,170]),fs=new Uint8Array([170,170,170,170]),bs=new Uint8Array([170,170,170,170]),ds=new Uint8Array([170,170,170,170]),hs=new Uint8Array([170,170,170,170]),Ss=new Uint8Array([170,170,170,170]);Object.assign(de,{...t,type:2,name:"struct{comptime fill: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 0.33, comptime defaultValue: comptime_float = 0.23} = .{.type = f32, .minValue = 0, .maxValue = 0.33, .defaultValue = 0.23}, comptime scale: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 20, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 1, .maxValue = 20, .defaultValue = 1}, comptime distort: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0.1, comptime comptime_float = 0.1} = .{0.1, 0.1}, comptime maxValue: struct{comptime comptime_float = 8, comptime comptime_float = 8} = .{8, 8}, comptime defaultValue: struct{comptime comptime_float = 3, comptime comptime_float = 1.7320508} = .{3, 1.7320508}} = .{.type = @Vector(2, f32), .minValue = .{0.1, 0.1}, .maxValue = .{8, 8}, .defaultValue = .{3, 1.7320508}}, comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -20, comptime comptime_float = -20} = .{-20, -20}, comptime maxValue: struct{comptime comptime_float = 400, comptime comptime_float = 400} = .{400, 400}, comptime defaultValue: struct{comptime comptime_float = 120, comptime comptime_float = 130} = .{120, 130}} = .{.type = @Vector(2, f32), .minValue = .{-20, -20}, .maxValue = .{400, 400}, .defaultValue = .{120, 130}}, comptime minSolid: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.001, comptime maxValue: comptime_float = 0.1, comptime defaultValue: comptime_float = 0.005} = .{.type = f32, .minValue = 0.001, .maxValue = 0.1, .defaultValue = 0.005}, comptime maxSolid: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.001, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.05} = .{.type = f32, .minValue = 0.001, .maxValue = 1, .defaultValue = 0.05}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"fill",structure:F},{...e,type:8,isRequired:!1,slot:1,name:"scale",structure:D},{...e,type:8,isRequired:!1,slot:2,name:"distort",structure:B},{...e,type:8,isRequired:!1,slot:3,name:"center",structure:J},{...e,type:8,isRequired:!1,slot:4,name:"minSolid",structure:N},{...e,type:8,isRequired:!1,slot:5,name:"maxSolid",structure:Q}],methods:[],template:{memory:{array:ys},slots:{0:{structure:F,memory:{array:ps},slots:{0:{structure:ae,memory:{array:o},address:-1431655766}}},1:{structure:D,memory:{array:fs},slots:{0:{structure:me,memory:{array:o},address:-1431655766}}},2:{structure:B,memory:{array:bs},slots:{0:{structure:ce,memory:{array:o},address:-1431655766}}},3:{structure:J,memory:{array:ds},slots:{0:{structure:pe,memory:{array:o},address:-1431655766}}},4:{structure:N,memory:{array:hs},slots:{0:{structure:fe,memory:{array:o},address:-1431655766}}},5:{structure:Q,memory:{array:Ss},slots:{0:{structure:be,memory:{array:o},address:-1431655766}}}}}},slot:12});Object.assign(W,{...t,type:11,name:"*struct{comptime fill: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 0.33, comptime defaultValue: comptime_float = 0.23} = .{.type = f32, .minValue = 0, .maxValue = 0.33, .defaultValue = 0.23}, comptime scale: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 20, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 1, .maxValue = 20, .defaultValue = 1}, comptime distort: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0.1, comptime comptime_float = 0.1} = .{0.1, 0.1}, comptime maxValue: struct{comptime comptime_float = 8, comptime comptime_float = 8} = .{8, 8}, comptime defaultValue: struct{comptime comptime_float = 3, comptime comptime_float = 1.7320508} = .{3, 1.7320508}} = .{.type = @Vector(2, f32), .minValue = .{0.1, 0.1}, .maxValue = .{8, 8}, .defaultValue = .{3, 1.7320508}}, comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -20, comptime comptime_float = -20} = .{-20, -20}, comptime maxValue: struct{comptime comptime_float = 400, comptime comptime_float = 400} = .{400, 400}, comptime defaultValue: struct{comptime comptime_float = 120, comptime comptime_float = 130} = .{120, 130}} = .{.type = @Vector(2, f32), .minValue = .{-20, -20}, .maxValue = .{400, 400}, .defaultValue = .{120, 130}}, comptime minSolid: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.001, comptime maxValue: comptime_float = 0.1, comptime defaultValue: comptime_float = 0.005} = .{.type = f32, .minValue = 0.001, .maxValue = 0.1, .defaultValue = 0.005}, comptime maxSolid: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.001, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.05} = .{.type = f32, .minValue = 0.001, .maxValue = 1, .defaultValue = 0.05}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:de}],methods:[],template:null},slot:11});Object.assign(X,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:67});const gs=new Uint8Array([]),zs=new Uint8Array([112,30,16,0]),Vs=new Uint8Array([4,0,0,0]);Object.assign(j,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:X}],methods:[],template:{memory:{array:gs},slots:{0:{structure:X,memory:{array:zs},slots:{0:{structure:p,memory:{array:Vs},address:1056368}}}}}},slot:49});Object.assign(O,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:j}],methods:[],template:null},slot:48});const Os=new Uint8Array([]),_s=new Uint8Array([170,170,170,170]);Object.assign(he,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:O}],methods:[],template:{memory:{array:Os},slots:{0:{structure:O,memory:{array:_s},slots:{0:{structure:j,memory:{array:o},address:-1431655766}}}}}},slot:14});Object.assign(Y,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:he}],methods:[],template:null},slot:13});const ws=new Uint8Array([]),Rs=new Uint8Array([170,170,170,170]);Object.assign(Se,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:O}],methods:[],template:{memory:{array:ws},slots:{0:{structure:O,memory:{array:Rs},slots:{0:{structure:j,memory:{array:o},address:-1431655766}}}}}},slot:16});Object.assign(Z,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Se}],methods:[],template:null},slot:15});const qs=new Uint8Array([]),As=new Uint8Array([]),Us=new Uint8Array([20,253,15,0]),js=new Uint8Array([169,68,16,0]),Le=new Uint8Array([67,105,114,99,108,101,80,97,116,116,101,114,110,0]),xs=new Uint8Array([76,253,15,0]),Ps=new Uint8Array([154,68,16,0]),Is=new Uint8Array([80,101,116,114,105,32,76,101,115,107,105,110,101,110,0]),ks=new Uint8Array([108,253,15,0]),Cs=new Uint8Array([1,0,0,0]),vs=new Uint8Array([164,253,15,0]),Es=new Uint8Array([169,68,16,0]),Ks=new Uint8Array([170,170,170,170]),Fs=new Uint8Array([170,170,170,170]),Ds=new Uint8Array([170,170,170,170]);Object.assign(je,{...t,type:2,name:"circle-pattern.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:qs}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:g},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:K},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:d},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:g},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:W},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:Y},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:Z}],methods:[],template:{memory:{array:As},slots:{0:{structure:g,memory:{array:Us},slots:{0:{structure:q,memory:{array:js},slots:{0:{structure:R,memory:{array:Le},address:1066153}}}}},1:{structure:K,memory:{array:xs},slots:{0:{structure:re,memory:{array:Ps},slots:{0:{structure:se,memory:{array:Is},address:1066138}}}}},2:{structure:d,memory:{array:ks},slots:{0:{structure:p,memory:{array:Cs}}}},3:{structure:g,memory:{array:vs},slots:{0:{structure:q,memory:{array:Es},slots:{0:{structure:R,memory:{array:Le},address:1066153}}}}},4:{structure:W,memory:{array:Ks},slots:{0:{structure:de,memory:{array:o},address:-1431655766}}},5:{structure:Y,memory:{array:Fs},slots:{0:{structure:he,memory:{array:o},address:-1431655766}}},6:{structure:Z,memory:{array:Ds},slots:{0:{structure:Se,memory:{array:o},address:-1431655766}}}}}},slot:1});Object.assign(_,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:21});Object.assign(ge,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:_}],methods:[],template:null},slot:20});Object.assign(ze,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ge}],methods:[],template:null},slot:19});Object.assign(y,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:22});const Ts=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Ve,{...t,type:9,name:"circle-pattern.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:p},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:p}],methods:[],template:{memory:{array:Ts}}},slot:23});Object.assign(A,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:A}],methods:[],template:null},slot:24});Object.assign(U,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:U}],methods:[],template:null},slot:25});Object.assign(Oe,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:50});const Ms=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),$s=new Uint8Array([]),Bs=new Uint8Array([200,251,15,0]),Ls=new Uint8Array([4,0,0,0]);Object.assign(ee,{...t,type:2,name:"circle-pattern.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ze},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:y},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:y},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Ve},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:A},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:U}],methods:[],template:{memory:{array:Ms}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:_},{...e,type:7,isRequired:!1,name:"FPixel",structure:Oe},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:$s},slots:{0:{structure:d,memory:{array:Bs},slots:{0:{structure:p,memory:{array:Ls}}}}}}},slot:18});const Gs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Hs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Js=new Uint8Array([0,0,0,0,0,0,0,0]),Ke=new Uint8Array([]);Object.assign(x,{...t,type:2,name:"circle-pattern.KernelInput(u8,circle-pattern.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:ee}],methods:[],template:{memory:{array:Gs},slots:{0:{structure:ee,memory:{array:Hs},slots:{0:{structure:ze,memory:{array:Js},slots:{0:{structure:ge,memory:{array:Ke}}}}}}}}},slot:17});Object.assign(_e,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:_}],methods:[],template:null},slot:20});Object.assign(we,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:_e}],methods:[],template:null},slot:28});const Ns=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Qs=new Uint8Array([]),Ws=new Uint8Array([200,251,15,0]),Xs=new Uint8Array([4,0,0,0]);Object.assign(te,{...t,type:2,name:"circle-pattern.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:we},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:y},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:y},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Ve},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:A},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:U}],methods:[],template:{memory:{array:Ns}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:_},{...e,type:7,isRequired:!1,name:"FPixel",structure:Oe},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Qs},slots:{0:{structure:d,memory:{array:Ws},slots:{0:{structure:p,memory:{array:Xs}}}}}}},slot:27});const Ys=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Zs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),er=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(P,{...t,type:2,name:"circle-pattern.KernelOutput(u8,circle-pattern.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:te}],methods:[],template:{memory:{array:Ys},slots:{0:{structure:te,memory:{array:Zs},slots:{0:{structure:we,memory:{array:er},slots:{0:{structure:_e,memory:{array:Ke}}}}}}}}},slot:26});const tr=new Uint8Array([0,0,64,64,215,179,221,63,0,0,240,66,0,0,2,67,31,133,107,62,0,0,128,63,10,215,163,59,205,204,76,61]);Object.assign(I,{...t,type:2,name:"circle-pattern.KernelParameters(circle-pattern.kernel)",length:1,byteSize:32,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:0,name:"fill",structure:u},{...e,type:4,isRequired:!1,bitOffset:160,bitSize:32,byteSize:4,slot:1,name:"scale",structure:u},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:2,name:"distort",structure:V},{...e,type:6,isRequired:!1,bitOffset:64,bitSize:64,byteSize:8,slot:3,name:"center",structure:V},{...e,type:4,isRequired:!1,bitOffset:192,bitSize:32,byteSize:4,slot:4,name:"minSolid",structure:u},{...e,type:4,isRequired:!1,bitOffset:224,bitSize:32,byteSize:4,slot:5,name:"maxSolid",structure:u}],methods:[],template:{memory:{array:tr}}},slot:29});Object.assign(xe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(circle-pattern.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:51});Object.assign(Pe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(circle-pattern.createOutput)).Fn.return_type.?).ErrorUnion.error_set!circle-pattern.KernelOutput(u8,circle-pattern.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:xe}],methods:[],template:null},slot:34});Object.assign(Ie,{...t,type:3,name:"createOutput",length:1,byteSize:96,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"0",structure:y},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:1,name:"1",structure:y},{...e,type:6,bitOffset:320,bitSize:192,byteSize:24,slot:2,name:"2",structure:x},{...e,type:6,bitOffset:0,bitSize:256,byteSize:32,slot:3,name:"3",structure:I},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Pe}],methods:[],template:null},slot:32});Object.assign(ke,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(circle-pattern.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:52});Object.assign(Ce,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(circle-pattern.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!circle-pattern.KernelOutput(u8,circle-pattern.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ke}],methods:[],template:null},slot:35});Object.assign(ve,{...t,type:3,name:"createPartialOutput",length:1,byteSize:104,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"0",structure:y},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:1,name:"1",structure:y},{...e,type:3,bitOffset:320,bitSize:32,byteSize:4,slot:2,name:"2",structure:y},{...e,type:3,bitOffset:352,bitSize:32,byteSize:4,slot:3,name:"3",structure:y},{...e,type:6,bitOffset:384,bitSize:192,byteSize:24,slot:4,name:"4",structure:x},{...e,type:6,bitOffset:0,bitSize:256,byteSize:32,slot:5,name:"5",structure:I},{...e,type:6,bitOffset:576,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Ce}],methods:[],template:null},slot:33});const sr={argStruct:Ie,thunk:2,name:"createOutput"},rr={argStruct:ve,thunk:1,name:"createPartialOutput"};Object.assign(Ee,{...t,type:2,name:"circle-pattern",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ke}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:je},{...e,type:7,isRequired:!1,name:"Input",structure:x},{...e,type:7,isRequired:!1,name:"Output",structure:P},{...e,type:7,isRequired:!1,name:"Parameters",structure:I}],methods:[sr,rr],template:null},slot:0});const ar=[z,R,q,g,se,re,K,p,d,u,r,s,ae,F,me,D,V,ie,T,oe,M,ne,$,ce,B,le,L,ue,G,ye,H,pe,J,fe,N,be,Q,de,W,X,j,O,he,Y,Se,Z,je,_,ge,ze,y,Ve,A,U,Oe,ee,x,_e,we,te,P,I,xe,Pe,Ie,ke,Ce,ve,Ee],mr=yt(ar),ir=Ee.constructor,or=(async()=>{const n=new URL("circle-pattern-bd53c92f.wasm",import.meta.url).href;return fetch(n)})();pt(or,{...mr,writeBack:!0});const{createOutput:br,createPartialOutput:nr,kernel:Ue,Input:cr,Output:dr,Parameters:hr}=ir;function lr(n,l,m,a,i={},h={}){if(Array.isArray(i)){const b=i;i={};for(const[f,S]of Object.keys(Ue.inputImages).entries())i[S]=b[f]}const k=new cr(void 0),C=Object.keys(Ue.inputImages),c=[];let w;for(const b of C){let f=i[b];if(f||(C.length===1&&["data","width","height"].every(S=>!!i[S])?f=i:c.push(b)),k[b]=f,w){if(f.colorSpace!==w)throw new Error(`Input images must all use the same color space: ${w}`)}else w=f.colorSpace}if(c.length>0)throw new Error(`Missing input image${c.length>1?"s":""}: ${c.join(", ")}`);const Re=nr(n,l,m,a,k,h),Fe=b=>{const f=Object.keys(b),S={};for(const De of f){const{data:{typedArray:v},width:Te,height:Je}=b[De];let E;if(typeof ImageData=="function"){const Ne=new Uint8ClampedArray(v.buffer,v.byteOffset,v.byteLength);E=new ImageData(Ne,Te,a,{colorSpace:w})}else E={data:v,width:Te,height:Je};if(f.length===1)return E;S[De]=E}return S};return Re[Symbol.toStringTag]==="Promise"?Re.then(Fe):Fe(Re)}function ur(){const n={};for(let[l,m]of Object.entries(Ue)){if(l==="parameters"){const a={};for(const[i,h]of Object.entries(m)){const k=a[i]={};for(let[C,c]of Object.entries(h))typeof c=="object"?"string"in c?c=c.string:c=He(c):typeof c=="function"&&(c=yr(c.name)),k[C]=c}m=a}else typeof m=="object"&&("string"in m?m=m.string:m=m.valueOf());n[l]=m}return n}function He(n){const l=[];for(let[m,a]of Object.entries(n))typeof a=="object"&&(a=He(a)),l[m]=a;return l}function yr(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[l,m,...a]=n.data;pr(l,a).then(([i,h])=>{postMessage([l,m,i],{transfer:h})}).catch(i=>{postMessage(["error",m,i])})};async function pr(n,l){switch(n){case"getKernelInfo":return[ur(...l)];case"createPartialImageData":const a=await lr(...l),i=[];if("data"in a&&"width"in a&&"height"in a)i.push(a.data.buffer);else for(const h of Object.entries(a))i.push(a.data.buffer);return[a,i];default:throw new Error(`Unknown function: ${n}`)}}
