import{u as ve,a as xe,b as Ie,d as ke,c as Ce,e as Ee,f as Ke,g as Fe,h as De,i as Te,j as Me,k as $e,l as Be,n as Le,p as Ge,m as He,o as Je,q as Ne,r as Qe}from"./index-cfb20c86.js";ve();xe();Ie();ke();Ce();Ee();Ke();Fe();De();Te();Me();$e();Be();Le();Ge();He();Je();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},g={},N={},Q={},E={},W={},X={},K={},c={},d={},Y={},Z={},F={},_={},h={},f={},n={},ee={},D={},te={},T={},se={},M={},S={},p={},re={},$={},B={},A={},V={},ae={},L={},ie={},G={},de={},R={},me={},oe={},l={},ne={},w={},j={},le={},H={},U={},ue={},ce={},J={},P={},v={},he={},Se={},ge={},ze={},Oe={},Ve={},Re={};Object.assign(g,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:5});Object.assign(N,{...t,type:1,name:"[15:0]u8",length:15,byteSize:16,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:4});Object.assign(Q,{...t,type:11,name:"*const [15:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:3});Object.assign(E,{...t,type:11,name:"**const [15:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:2});Object.assign(W,{...t,type:1,name:"[12:0]u8",length:12,byteSize:13,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:8});Object.assign(X,{...t,type:11,name:"*const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:7});Object.assign(K,{...t,type:11,name:"**const [12:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:6});Object.assign(c,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:10});Object.assign(d,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:9});Object.assign(Y,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:13});Object.assign(Z,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:12});Object.assign(F,{...t,type:11,name:"**const [13:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:11});Object.assign(_,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:_}],methods:[],template:null},slot:43});Object.assign(h,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:_}],methods:[],template:null},slot:33});Object.assign(f,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:f}],methods:[],template:null},slot:54});Object.assign(n,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:f}],methods:[],template:null},slot:53});const We=new Uint8Array([]),Xe=new Uint8Array([136,2,16,0]),pe=new Uint8Array([0,0,0,0,0,0,0,0]),Ye=new Uint8Array([136,2,16,0]);Object.assign(ee,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:n},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:n}],methods:[],template:{memory:{array:We},slots:{0:{structure:n,memory:{array:Xe},slots:{0:{structure:f,memory:{array:pe},address:1049224}}},1:{structure:n,memory:{array:Ye},slots:{0:{structure:f,memory:{array:pe},address:1049224}}}}}},slot:47});Object.assign(D,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:46});const Ze=new Uint8Array([]),et=new Uint8Array([128,2,16,0]),fe=new Uint8Array([0,0,0,0,0,0,240,63]),tt=new Uint8Array([128,2,16,0]);Object.assign(te,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:n},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:n}],methods:[],template:{memory:{array:Ze},slots:{0:{structure:n,memory:{array:et},slots:{0:{structure:f,memory:{array:fe},address:1049216}}},1:{structure:n,memory:{array:tt},slots:{0:{structure:f,memory:{array:fe},address:1049216}}}}}},slot:49});Object.assign(T,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:48});const st=new Uint8Array([]),rt=new Uint8Array([136,2,16,0]),at=new Uint8Array([128,2,16,0]);Object.assign(se,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:n},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:n}],methods:[],template:{memory:{array:st},slots:{0:{structure:n,memory:{array:rt},slots:{0:{structure:f,memory:{array:pe},address:1049224}}},1:{structure:n,memory:{array:at},slots:{0:{structure:f,memory:{array:fe},address:1049216}}}}}},slot:51});Object.assign(M,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:50});const it=new Uint8Array([]),mt=new Uint8Array([170,170,170,170]),u=new Uint8Array([]),ot=new Uint8Array([170,170,170,170]),nt=new Uint8Array([170,170,170,170]);Object.assign(S,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:D},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:T},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:M}],methods:[],template:{memory:{array:it},slots:{0:{structure:D,memory:{array:mt},slots:{0:{structure:ee,memory:{array:u},address:-1431655766}}},1:{structure:T,memory:{array:ot},slots:{0:{structure:te,memory:{array:u},address:-1431655766}}},2:{structure:M,memory:{array:nt},slots:{0:{structure:se,memory:{array:u},address:-1431655766}}}}}},slot:39});Object.assign(p,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:S}],methods:[],template:null},slot:38});const lt=new Uint8Array([]),ut=new Uint8Array([170,170,170,170]),ct=new Uint8Array([170,170,170,170]),yt=new Uint8Array([170,170,170,170]),pt=new Uint8Array([170,170,170,170]);Object.assign(re,{...t,type:2,name:"struct{comptime red: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{1, 1}, .defaultValue = .{0, 1}}, comptime green: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{1, 1}, .defaultValue = .{0, 1}}, comptime blue: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{1, 1}, .defaultValue = .{0, 1}}, comptime luminance: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{1, 1}, .defaultValue = .{0, 1}}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"red",structure:p},{...e,type:8,isRequired:!1,slot:1,name:"green",structure:p},{...e,type:8,isRequired:!1,slot:2,name:"blue",structure:p},{...e,type:8,isRequired:!1,slot:3,name:"luminance",structure:p}],methods:[],template:{memory:{array:lt},slots:{0:{structure:p,memory:{array:ut},slots:{0:{structure:S,memory:{array:u},address:-1431655766}}},1:{structure:p,memory:{array:ct},slots:{0:{structure:S,memory:{array:u},address:-1431655766}}},2:{structure:p,memory:{array:yt},slots:{0:{structure:S,memory:{array:u},address:-1431655766}}},3:{structure:p,memory:{array:pt},slots:{0:{structure:S,memory:{array:u},address:-1431655766}}}}}},slot:15});Object.assign($,{...t,type:11,name:"*struct{comptime red: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{1, 1}, .defaultValue = .{0, 1}}, comptime green: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{1, 1}, .defaultValue = .{0, 1}}, comptime blue: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{1, 1}, .defaultValue = .{0, 1}}, comptime luminance: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{1, 1}, .defaultValue = .{0, 1}}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:14});Object.assign(B,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:52});const ft=new Uint8Array([]),bt=new Uint8Array([144,2,16,0]),dt=new Uint8Array([4,0,0,0]);Object.assign(A,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:B}],methods:[],template:{memory:{array:ft},slots:{0:{structure:B,memory:{array:bt},slots:{0:{structure:c,memory:{array:dt},address:1049232}}}}}},slot:41});Object.assign(V,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:40});const ht=new Uint8Array([]),St=new Uint8Array([170,170,170,170]);Object.assign(ae,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:V}],methods:[],template:{memory:{array:ht},slots:{0:{structure:V,memory:{array:St},slots:{0:{structure:A,memory:{array:u},address:-1431655766}}}}}},slot:17});Object.assign(L,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:16});const gt=new Uint8Array([]),zt=new Uint8Array([170,170,170,170]);Object.assign(ie,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:V}],methods:[],template:{memory:{array:gt},slots:{0:{structure:V,memory:{array:zt},slots:{0:{structure:A,memory:{array:u},address:-1431655766}}}}}},slot:19});Object.assign(G,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:18});const Ot=new Uint8Array([]),Vt=new Uint8Array([]),Rt=new Uint8Array([172,250,15,0]),qt=new Uint8Array([5,28,16,0]),_t=new Uint8Array([99,111,109,46,97,110,116,116,105,107,117,112,105,108,97,0]),wt=new Uint8Array([236,250,15,0]),jt=new Uint8Array([248,27,16,0]),At=new Uint8Array([65,110,116,116,105,32,75,117,112,105,108,97,0]),Ut=new Uint8Array([44,251,15,0]),Pt=new Uint8Array([1,0,0,0]),vt=new Uint8Array([132,251,15,0]),xt=new Uint8Array([234,27,16,0]),It=new Uint8Array([76,101,118,101,108,115,32,102,105,108,116,101,114,0]),kt=new Uint8Array([170,170,170,170]),Ct=new Uint8Array([170,170,170,170]),Et=new Uint8Array([170,170,170,170]);Object.assign(de,{...t,type:2,name:"levels.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ot}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:E},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:K},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:d},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:F},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:$},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:L},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:G}],methods:[],template:{memory:{array:Vt},slots:{0:{structure:E,memory:{array:Rt},slots:{0:{structure:Q,memory:{array:qt},slots:{0:{structure:N,memory:{array:_t},address:1055749}}}}},1:{structure:K,memory:{array:wt},slots:{0:{structure:X,memory:{array:jt},slots:{0:{structure:W,memory:{array:At},address:1055736}}}}},2:{structure:d,memory:{array:Ut},slots:{0:{structure:c,memory:{array:Pt}}}},3:{structure:F,memory:{array:vt},slots:{0:{structure:Z,memory:{array:xt},slots:{0:{structure:Y,memory:{array:It},address:1055722}}}}},4:{structure:$,memory:{array:kt},slots:{0:{structure:re,memory:{array:u},address:-1431655766}}},5:{structure:L,memory:{array:Ct},slots:{0:{structure:ae,memory:{array:u},address:-1431655766}}},6:{structure:G,memory:{array:Et},slots:{0:{structure:ie,memory:{array:u},address:-1431655766}}}}}},slot:1});Object.assign(R,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:24});Object.assign(me,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:23});Object.assign(oe,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:me}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const Kt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ne,{...t,type:9,name:"levels.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:c},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:c}],methods:[],template:{memory:{array:Kt}}},slot:26});Object.assign(w,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:w}],methods:[],template:null},slot:27});Object.assign(j,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:j}],methods:[],template:null},slot:28});Object.assign(le,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:_}],methods:[],template:null},slot:42});const Ft=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Dt=new Uint8Array([]),Tt=new Uint8Array([104,253,15,0]),Mt=new Uint8Array([4,0,0,0]);Object.assign(H,{...t,type:2,name:"levels.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:oe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ne},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:w},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:j}],methods:[],template:{memory:{array:Ft}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:R},{...e,type:7,isRequired:!1,name:"FPixel",structure:le},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Dt},slots:{0:{structure:d,memory:{array:Tt},slots:{0:{structure:c,memory:{array:Mt}}}}}}},slot:21});const $t=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Bt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Lt=new Uint8Array([0,0,0,0,0,0,0,0]),qe=new Uint8Array([]);Object.assign(U,{...t,type:2,name:"levels.KernelInput(u8,levels.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:H}],methods:[],template:{memory:{array:$t},slots:{0:{structure:H,memory:{array:Bt},slots:{0:{structure:oe,memory:{array:Lt},slots:{0:{structure:me,memory:{array:qe}}}}}}}}},slot:20});Object.assign(ue,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:23});Object.assign(ce,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ue}],methods:[],template:null},slot:31});const Gt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ht=new Uint8Array([]),Jt=new Uint8Array([104,253,15,0]),Nt=new Uint8Array([4,0,0,0]);Object.assign(J,{...t,type:2,name:"levels.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ce},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ne},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:w},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:j}],methods:[],template:{memory:{array:Gt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:R},{...e,type:7,isRequired:!1,name:"FPixel",structure:le},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Ht},slots:{0:{structure:d,memory:{array:Jt},slots:{0:{structure:c,memory:{array:Nt}}}}}}},slot:30});const Qt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Wt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Xt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(P,{...t,type:2,name:"levels.KernelOutput(u8,levels.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:J}],methods:[],template:{memory:{array:Qt},slots:{0:{structure:J,memory:{array:Wt},slots:{0:{structure:ce,memory:{array:Xt},slots:{0:{structure:ue,memory:{array:qe}}}}}}}}},slot:29});const Yt=new Uint8Array([0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63]);Object.assign(v,{...t,type:2,name:"levels.KernelParameters(levels.kernel)",length:1,byteSize:32,align:3,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"red",structure:h},{...e,type:6,isRequired:!1,bitOffset:64,bitSize:64,byteSize:8,slot:1,name:"green",structure:h},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:64,byteSize:8,slot:2,name:"blue",structure:h},{...e,type:6,isRequired:!1,bitOffset:192,bitSize:64,byteSize:8,slot:3,name:"luminance",structure:h}],methods:[],template:{memory:{array:Yt}}},slot:32});Object.assign(he,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(levels.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:44});Object.assign(Se,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(levels.createOutput)).Fn.return_type.?).ErrorUnion.error_set!levels.KernelOutput(u8,levels.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:he}],methods:[],template:null},slot:36});Object.assign(ge,{...t,type:3,name:"createOutput",length:1,byteSize:96,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:320,bitSize:192,byteSize:24,slot:2,name:"2",structure:U},{...e,type:6,bitOffset:0,bitSize:256,byteSize:32,slot:3,name:"3",structure:v},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Se}],methods:[],template:null},slot:34});Object.assign(ze,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(levels.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:45});Object.assign(Oe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(levels.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!levels.KernelOutput(u8,levels.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ze}],methods:[],template:null},slot:37});Object.assign(Ve,{...t,type:3,name:"createPartialOutput",length:1,byteSize:104,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:320,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:352,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:384,bitSize:192,byteSize:24,slot:4,name:"4",structure:U},{...e,type:6,bitOffset:0,bitSize:256,byteSize:32,slot:5,name:"5",structure:v},{...e,type:6,bitOffset:576,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Oe}],methods:[],template:null},slot:35});const Zt={argStruct:ge,thunk:6,name:"createOutput"},es={argStruct:Ve,thunk:2,name:"createPartialOutput"};Object.assign(Re,{...t,type:2,name:"levels",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:qe}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:de},{...e,type:7,isRequired:!1,name:"Input",structure:U},{...e,type:7,isRequired:!1,name:"Output",structure:P},{...e,type:7,isRequired:!1,name:"Parameters",structure:v}],methods:[Zt,es],template:null},slot:0});const ts=[g,N,Q,E,W,X,K,c,d,Y,Z,F,_,h,f,n,ee,D,te,T,se,M,S,p,re,$,B,A,V,ae,L,ie,G,de,R,me,oe,l,ne,w,j,le,H,U,ue,ce,J,P,v,he,Se,ge,ze,Oe,Ve,Re],ss=Ne(ts),rs=Re.constructor,as=(async()=>{const i=new URL("levels-ee1237f2.wasm",import.meta.url).href;return fetch(i)})();Qe(as,{...ss,writeBack:!0});const{createOutput:ys,createPartialOutput:is,kernel:be,Input:ms,Output:ps,Parameters:fs}=rs;function os(i,o,r,s,a={},z={}){if(Array.isArray(a)){const b=a;a={};for(const[y,O]of Object.keys(be.inputImages).entries())a[O]=b[y]}const x=new ms(void 0),I=Object.keys(be.inputImages),m=[];let q;for(const b of I){let y=a[b];if(y||(I.length===1&&["data","width","height"].every(O=>!!a[O])?y=a:m.push(b)),x[b]=y,q){if(y.colorSpace!==q)throw new Error(`Input images must all use the same color space: ${q}`)}else q=y.colorSpace}if(m.length>0)throw new Error(`Missing input image${m.length>1?"s":""}: ${m.join(", ")}`);const ye=is(i,o,r,s,x,z),_e=b=>{const y=Object.keys(b),O={};for(const we of y){const{data:{typedArray:k},width:je,height:Ue}=b[we];let C;if(typeof ImageData=="function"){const Pe=new Uint8ClampedArray(k.buffer,k.byteOffset,k.byteLength);C=new ImageData(Pe,je,s,{colorSpace:q})}else C={data:k,width:je,height:Ue};if(y.length===1)return C;O[we]=C}return O};return ye[Symbol.toStringTag]==="Promise"?ye.then(_e):_e(ye)}function ns(){const i={};for(let[o,r]of Object.entries(be)){if(o==="parameters"){const s={};for(const[a,z]of Object.entries(r)){const x=s[a]={};for(let[I,m]of Object.entries(z))typeof m=="object"?"string"in m?m=m.string:m=Ae(m):typeof m=="function"&&(m=ls(m.name)),x[I]=m}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());i[o]=r}return i}function Ae(i){const o=[];for(let[r,s]of Object.entries(i))typeof s=="object"&&(s=Ae(s)),o[r]=s;return o}function ls(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[o,r,...s]=i.data;us(o,s).then(([a,z])=>{postMessage([o,r,a],{transfer:z})}).catch(a=>{postMessage(["error",r,a])})};async function us(i,o){switch(i){case"getKernelInfo":return[ns(...o)];case"createPartialImageData":const s=await os(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const z of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${i}`)}}
