import{u as kt,a as Et,b as Kt,d as Ft,c as Dt,e as Tt,f as Mt,g as $t,h as Bt,i as Lt,j as Gt,k as Ht,l as Jt,n as Nt,p as Qt,m as Wt,o as Xt,q as Yt,r as Zt}from"./index-cfb20c86.js";kt();Et();Kt();Ft();Dt();Tt();Mt();$t();Bt();Lt();Gt();Ht();Jt();Nt();Qt();Wt();Xt();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},S={},qe={},Ae={},G={},Ue={},Oe={},H={},f={},_={},je={},xe={},J={},y={},c={},s={},m={},O={},h={},j={},g={},Pe={},N={},Ce={},Q={},ve={},W={},Ie={},X={},ke={},Y={},Ee={},Z={},Ke={},ee={},Fe={},te={},De={},me={},Te={},se={},Me={},re={},$e={},ae={},Be={},oe={},Le={},ie={},E={},A={},Ge={},ce={},He={},ue={},Je={},le={},Ne={},ne={},Qe={},pe={},We={},ye={},Xe={},fe={},Ye={},de={},Ze={},be={},x={},v={},R={},et={},_e={},tt={},he={},mt={},ge={},Ve={},K={},U={},st={},Se={},rt={},ze={},ft={},P={},at={},ot={},p={},it={},I={},k={},we={},F={},ct={},ut={},Re={},D={},T={},dt={},bt={},_t={},ht={},gt={},Vt={},St={};Object.assign(S,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:5});Object.assign(qe,{...t,type:1,name:"[18:0]u8",length:18,byteSize:19,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:4});Object.assign(Ae,{...t,type:11,name:"*const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:qe}],methods:[],template:null},slot:3});Object.assign(G,{...t,type:11,name:"**const [18:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ae}],methods:[],template:null},slot:2});Object.assign(Ue,{...t,type:1,name:"[8:0]u8",length:8,byteSize:9,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:8});Object.assign(Oe,{...t,type:11,name:"*const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ue}],methods:[],template:null},slot:7});Object.assign(H,{...t,type:11,name:"**const [8:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Oe}],methods:[],template:null},slot:6});Object.assign(f,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:10});Object.assign(_,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:f}],methods:[],template:null},slot:9});Object.assign(je,{...t,type:1,name:"[39:0]u8",length:39,byteSize:40,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:13});Object.assign(xe,{...t,type:11,name:"*const [39:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:je}],methods:[],template:null},slot:12});Object.assign(J,{...t,type:11,name:"**const [39:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:xe}],methods:[],template:null},slot:11});Object.assign(y,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:34});Object.assign(c,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:33});Object.assign(s,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:s}],methods:[],template:null},slot:99});Object.assign(m,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:s}],methods:[],template:null},slot:98});const em=new Uint8Array([]),tm=new Uint8Array([224,30,16,0]),At=new Uint8Array([0,0,0,0,0,0,20,192]),mm=new Uint8Array([224,30,16,0]);Object.assign(O,{...t,type:2,name:"struct{comptime comptime_float = -5, comptime comptime_float = -5}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:em},slots:{0:{structure:m,memory:{array:tm},slots:{0:{structure:s,memory:{array:At},address:1056480}}},1:{structure:m,memory:{array:mm},slots:{0:{structure:s,memory:{array:At},address:1056480}}}}}},slot:67});Object.assign(h,{...t,type:11,name:"*const struct{comptime comptime_float = -5, comptime comptime_float = -5}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:O}],methods:[],template:null},slot:66});const sm=new Uint8Array([]),rm=new Uint8Array([216,30,16,0]),Ut=new Uint8Array([0,0,0,0,0,0,20,64]),am=new Uint8Array([216,30,16,0]);Object.assign(j,{...t,type:2,name:"struct{comptime comptime_float = 5, comptime comptime_float = 5}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:sm},slots:{0:{structure:m,memory:{array:rm},slots:{0:{structure:s,memory:{array:Ut},address:1056472}}},1:{structure:m,memory:{array:am},slots:{0:{structure:s,memory:{array:Ut},address:1056472}}}}}},slot:69});Object.assign(g,{...t,type:11,name:"*const struct{comptime comptime_float = 5, comptime comptime_float = 5}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:j}],methods:[],template:null},slot:68});const om=new Uint8Array([]),im=new Uint8Array([208,30,16,0]),cm=new Uint8Array([51,51,51,51,51,51,211,191]),um=new Uint8Array([200,30,16,0]),lm=new Uint8Array([154,153,153,153,153,153,241,191]);Object.assign(Pe,{...t,type:2,name:"struct{comptime comptime_float = -0.3, comptime comptime_float = -1.1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:om},slots:{0:{structure:m,memory:{array:im},slots:{0:{structure:s,memory:{array:cm},address:1056464}}},1:{structure:m,memory:{array:um},slots:{0:{structure:s,memory:{array:lm},address:1056456}}}}}},slot:71});Object.assign(N,{...t,type:11,name:"*const struct{comptime comptime_float = -0.3, comptime comptime_float = -1.1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Pe}],methods:[],template:null},slot:70});const nm=new Uint8Array([]),pm=new Uint8Array([170,170,170,170]),r=new Uint8Array([]),ym=new Uint8Array([170,170,170,170]),fm=new Uint8Array([170,170,170,170]);Object.assign(Ce,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -5, comptime comptime_float = -5} = .{-5, -5}, comptime maxValue: struct{comptime comptime_float = 5, comptime comptime_float = 5} = .{5, 5}, comptime defaultValue: struct{comptime comptime_float = -0.3, comptime comptime_float = -1.1} = .{-0.3, -1.1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:h},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:g},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:N}],methods:[],template:{memory:{array:nm},slots:{0:{structure:h,memory:{array:pm},slots:{0:{structure:O,memory:{array:r},address:-1431655766}}},1:{structure:g,memory:{array:ym},slots:{0:{structure:j,memory:{array:r},address:-1431655766}}},2:{structure:N,memory:{array:fm},slots:{0:{structure:Pe,memory:{array:r},address:-1431655766}}}}}},slot:41});Object.assign(Q,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -5, comptime comptime_float = -5} = .{-5, -5}, comptime maxValue: struct{comptime comptime_float = 5, comptime comptime_float = 5} = .{5, 5}, comptime defaultValue: struct{comptime comptime_float = -0.3, comptime comptime_float = -1.1} = .{-0.3, -1.1}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ce}],methods:[],template:null},slot:40});const dm=new Uint8Array([]),bm=new Uint8Array([192,30,16,0]),_m=new Uint8Array([205,204,204,204,204,204,0,64]),hm=new Uint8Array([144,30,16,0]),nt=new Uint8Array([154,153,153,153,153,153,185,63]);Object.assign(ve,{...t,type:2,name:"struct{comptime comptime_float = 2.1, comptime comptime_float = 0.1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:dm},slots:{0:{structure:m,memory:{array:bm},slots:{0:{structure:s,memory:{array:_m},address:1056448}}},1:{structure:m,memory:{array:hm},slots:{0:{structure:s,memory:{array:nt},address:1056400}}}}}},slot:73});Object.assign(W,{...t,type:11,name:"*const struct{comptime comptime_float = 2.1, comptime comptime_float = 0.1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ve}],methods:[],template:null},slot:72});const gm=new Uint8Array([]),Vm=new Uint8Array([170,170,170,170]),Sm=new Uint8Array([170,170,170,170]),zm=new Uint8Array([170,170,170,170]);Object.assign(Ie,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -5, comptime comptime_float = -5} = .{-5, -5}, comptime maxValue: struct{comptime comptime_float = 5, comptime comptime_float = 5} = .{5, 5}, comptime defaultValue: struct{comptime comptime_float = 2.1, comptime comptime_float = 0.1} = .{2.1, 0.1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:h},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:g},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:W}],methods:[],template:{memory:{array:gm},slots:{0:{structure:h,memory:{array:Vm},slots:{0:{structure:O,memory:{array:r},address:-1431655766}}},1:{structure:g,memory:{array:Sm},slots:{0:{structure:j,memory:{array:r},address:-1431655766}}},2:{structure:W,memory:{array:zm},slots:{0:{structure:ve,memory:{array:r},address:-1431655766}}}}}},slot:43});Object.assign(X,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -5, comptime comptime_float = -5} = .{-5, -5}, comptime maxValue: struct{comptime comptime_float = 5, comptime comptime_float = 5} = .{5, 5}, comptime defaultValue: struct{comptime comptime_float = 2.1, comptime comptime_float = 0.1} = .{2.1, 0.1}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ie}],methods:[],template:null},slot:42});const wm=new Uint8Array([]),Rm=new Uint8Array([184,30,16,0]),qm=new Uint8Array([51,51,51,51,51,51,227,63]),Am=new Uint8Array([56,30,16,0]),q=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(ke,{...t,type:2,name:"struct{comptime comptime_float = 0.6, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:wm},slots:{0:{structure:m,memory:{array:Rm},slots:{0:{structure:s,memory:{array:qm},address:1056440}}},1:{structure:m,memory:{array:Am},slots:{0:{structure:s,memory:{array:q},address:1056312}}}}}},slot:75});Object.assign(Y,{...t,type:11,name:"*const struct{comptime comptime_float = 0.6, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ke}],methods:[],template:null},slot:74});const Um=new Uint8Array([]),Om=new Uint8Array([170,170,170,170]),jm=new Uint8Array([170,170,170,170]),xm=new Uint8Array([170,170,170,170]);Object.assign(Ee,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -5, comptime comptime_float = -5} = .{-5, -5}, comptime maxValue: struct{comptime comptime_float = 5, comptime comptime_float = 5} = .{5, 5}, comptime defaultValue: struct{comptime comptime_float = 0.6, comptime comptime_float = 0} = .{0.6, 0}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:h},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:g},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:Y}],methods:[],template:{memory:{array:Um},slots:{0:{structure:h,memory:{array:Om},slots:{0:{structure:O,memory:{array:r},address:-1431655766}}},1:{structure:g,memory:{array:jm},slots:{0:{structure:j,memory:{array:r},address:-1431655766}}},2:{structure:Y,memory:{array:xm},slots:{0:{structure:ke,memory:{array:r},address:-1431655766}}}}}},slot:45});Object.assign(Z,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -5, comptime comptime_float = -5} = .{-5, -5}, comptime maxValue: struct{comptime comptime_float = 5, comptime comptime_float = 5} = .{5, 5}, comptime defaultValue: struct{comptime comptime_float = 0.6, comptime comptime_float = 0} = .{0.6, 0}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ee}],methods:[],template:null},slot:44});const Pm=new Uint8Array([]),Cm=new Uint8Array([176,30,16,0]),Ot=new Uint8Array([0,0,0,0,0,0,0,192]),vm=new Uint8Array([176,30,16,0]);Object.assign(Ke,{...t,type:2,name:"struct{comptime comptime_float = -2, comptime comptime_float = -2}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:Pm},slots:{0:{structure:m,memory:{array:Cm},slots:{0:{structure:s,memory:{array:Ot},address:1056432}}},1:{structure:m,memory:{array:vm},slots:{0:{structure:s,memory:{array:Ot},address:1056432}}}}}},slot:77});Object.assign(ee,{...t,type:11,name:"*const struct{comptime comptime_float = -2, comptime comptime_float = -2}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ke}],methods:[],template:null},slot:76});const Im=new Uint8Array([]),km=new Uint8Array([168,30,16,0]),jt=new Uint8Array([0,0,0,0,0,0,0,64]),Em=new Uint8Array([168,30,16,0]);Object.assign(Fe,{...t,type:2,name:"struct{comptime comptime_float = 2, comptime comptime_float = 2}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:Im},slots:{0:{structure:m,memory:{array:km},slots:{0:{structure:s,memory:{array:jt},address:1056424}}},1:{structure:m,memory:{array:Em},slots:{0:{structure:s,memory:{array:jt},address:1056424}}}}}},slot:79});Object.assign(te,{...t,type:11,name:"*const struct{comptime comptime_float = 2, comptime comptime_float = 2}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Fe}],methods:[],template:null},slot:78});const Km=new Uint8Array([]),Fm=new Uint8Array([160,30,16,0]),Pt=new Uint8Array([154,153,153,153,153,153,201,63]),Dm=new Uint8Array([152,30,16,0]),Tm=new Uint8Array([236,81,184,30,133,235,241,191]);Object.assign(De,{...t,type:2,name:"struct{comptime comptime_float = 0.2, comptime comptime_float = -1.12}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:Km},slots:{0:{structure:m,memory:{array:Fm},slots:{0:{structure:s,memory:{array:Pt},address:1056416}}},1:{structure:m,memory:{array:Dm},slots:{0:{structure:s,memory:{array:Tm},address:1056408}}}}}},slot:81});Object.assign(me,{...t,type:11,name:"*const struct{comptime comptime_float = 0.2, comptime comptime_float = -1.12}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:De}],methods:[],template:null},slot:80});const Mm=new Uint8Array([]),$m=new Uint8Array([170,170,170,170]),Bm=new Uint8Array([170,170,170,170]),Lm=new Uint8Array([170,170,170,170]);Object.assign(Te,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -2} = .{-2, -2}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 2} = .{2, 2}, comptime defaultValue: struct{comptime comptime_float = 0.2, comptime comptime_float = -1.12} = .{0.2, -1.12}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:ee},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:te},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:me}],methods:[],template:{memory:{array:Mm},slots:{0:{structure:ee,memory:{array:$m},slots:{0:{structure:Ke,memory:{array:r},address:-1431655766}}},1:{structure:te,memory:{array:Bm},slots:{0:{structure:Fe,memory:{array:r},address:-1431655766}}},2:{structure:me,memory:{array:Lm},slots:{0:{structure:De,memory:{array:r},address:-1431655766}}}}}},slot:47});Object.assign(se,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -2} = .{-2, -2}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 2} = .{2, 2}, comptime defaultValue: struct{comptime comptime_float = 0.2, comptime comptime_float = -1.12} = .{0.2, -1.12}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Te}],methods:[],template:null},slot:46});const Gm=new Uint8Array([]),Hm=new Uint8Array([144,30,16,0]),Jm=new Uint8Array([144,30,16,0]);Object.assign(Me,{...t,type:2,name:"struct{comptime comptime_float = 0.1, comptime comptime_float = 0.1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:Gm},slots:{0:{structure:m,memory:{array:Hm},slots:{0:{structure:s,memory:{array:nt},address:1056400}}},1:{structure:m,memory:{array:Jm},slots:{0:{structure:s,memory:{array:nt},address:1056400}}}}}},slot:83});Object.assign(re,{...t,type:11,name:"*const struct{comptime comptime_float = 0.1, comptime comptime_float = 0.1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Me}],methods:[],template:null},slot:82});const Nm=new Uint8Array([]),Qm=new Uint8Array([136,30,16,0]),xt=new Uint8Array([0,0,0,0,0,0,52,64]),Wm=new Uint8Array([136,30,16,0]);Object.assign($e,{...t,type:2,name:"struct{comptime comptime_float = 20, comptime comptime_float = 20}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:Nm},slots:{0:{structure:m,memory:{array:Qm},slots:{0:{structure:s,memory:{array:xt},address:1056392}}},1:{structure:m,memory:{array:Wm},slots:{0:{structure:s,memory:{array:xt},address:1056392}}}}}},slot:85});Object.assign(ae,{...t,type:11,name:"*const struct{comptime comptime_float = 20, comptime comptime_float = 20}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$e}],methods:[],template:null},slot:84});const Xm=new Uint8Array([]),Ym=new Uint8Array([128,30,16,0]),Zm=new Uint8Array([0,0,0,0,0,0,8,64]),es=new Uint8Array([120,30,16,0]),ts=new Uint8Array([145,43,80,230,122,182,251,63]);Object.assign(Be,{...t,type:2,name:"struct{comptime comptime_float = 3, comptime comptime_float = 1.7320508}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:Xm},slots:{0:{structure:m,memory:{array:Ym},slots:{0:{structure:s,memory:{array:Zm},address:1056384}}},1:{structure:m,memory:{array:es},slots:{0:{structure:s,memory:{array:ts},address:1056376}}}}}},slot:87});Object.assign(oe,{...t,type:11,name:"*const struct{comptime comptime_float = 3, comptime comptime_float = 1.7320508}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Be}],methods:[],template:null},slot:86});const ms=new Uint8Array([]),ss=new Uint8Array([170,170,170,170]),rs=new Uint8Array([170,170,170,170]),as=new Uint8Array([170,170,170,170]);Object.assign(Le,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0.1, comptime comptime_float = 0.1} = .{0.1, 0.1}, comptime maxValue: struct{comptime comptime_float = 20, comptime comptime_float = 20} = .{20, 20}, comptime defaultValue: struct{comptime comptime_float = 3, comptime comptime_float = 1.7320508} = .{3, 1.7320508}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:re},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:ae},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:oe}],methods:[],template:{memory:{array:ms},slots:{0:{structure:re,memory:{array:ss},slots:{0:{structure:Me,memory:{array:r},address:-1431655766}}},1:{structure:ae,memory:{array:rs},slots:{0:{structure:$e,memory:{array:r},address:-1431655766}}},2:{structure:oe,memory:{array:as},slots:{0:{structure:Be,memory:{array:r},address:-1431655766}}}}}},slot:49});Object.assign(ie,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0.1, comptime comptime_float = 0.1} = .{0.1, 0.1}, comptime maxValue: struct{comptime comptime_float = 20, comptime comptime_float = 20} = .{20, 20}, comptime defaultValue: struct{comptime comptime_float = 3, comptime comptime_float = 1.7320508} = .{3, 1.7320508}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Le}],methods:[],template:null},slot:48});const os=new Uint8Array([]),is=new Uint8Array([48,30,16,0]),V=new Uint8Array([0,0,0,0,0,0,240,63]),cs=new Uint8Array([48,30,16,0]);Object.assign(E,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:os},slots:{0:{structure:m,memory:{array:is},slots:{0:{structure:s,memory:{array:V},address:1056304}}},1:{structure:m,memory:{array:cs},slots:{0:{structure:s,memory:{array:V},address:1056304}}}}}},slot:89});Object.assign(A,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:E}],methods:[],template:null},slot:88});const us=new Uint8Array([]),ls=new Uint8Array([112,30,16,0]),ns=new Uint8Array([0,0,0,0,0,64,127,64]),ps=new Uint8Array([104,30,16,0]),ys=new Uint8Array([0,0,0,0,0,0,121,64]);Object.assign(Ge,{...t,type:2,name:"struct{comptime comptime_float = 500, comptime comptime_float = 400}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:us},slots:{0:{structure:m,memory:{array:ls},slots:{0:{structure:s,memory:{array:ns},address:1056368}}},1:{structure:m,memory:{array:ps},slots:{0:{structure:s,memory:{array:ys},address:1056360}}}}}},slot:91});Object.assign(ce,{...t,type:11,name:"*const struct{comptime comptime_float = 500, comptime comptime_float = 400}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ge}],methods:[],template:null},slot:90});const fs=new Uint8Array([]),ds=new Uint8Array([96,30,16,0]),bs=new Uint8Array([0,0,0,0,0,64,111,64]),_s=new Uint8Array([88,30,16,0]),hs=new Uint8Array([0,0,0,0,0,128,103,64]);Object.assign(He,{...t,type:2,name:"struct{comptime comptime_float = 250, comptime comptime_float = 188}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:fs},slots:{0:{structure:m,memory:{array:ds},slots:{0:{structure:s,memory:{array:bs},address:1056352}}},1:{structure:m,memory:{array:_s},slots:{0:{structure:s,memory:{array:hs},address:1056344}}}}}},slot:93});Object.assign(ue,{...t,type:11,name:"*const struct{comptime comptime_float = 250, comptime comptime_float = 188}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:He}],methods:[],template:null},slot:92});const gs=new Uint8Array([]),Vs=new Uint8Array([170,170,170,170]),Ss=new Uint8Array([170,170,170,170]),zs=new Uint8Array([170,170,170,170]);Object.assign(Je,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime maxValue: struct{comptime comptime_float = 500, comptime comptime_float = 400} = .{500, 400}, comptime defaultValue: struct{comptime comptime_float = 250, comptime comptime_float = 188} = .{250, 188}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:A},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:ce},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:ue}],methods:[],template:{memory:{array:gs},slots:{0:{structure:A,memory:{array:Vs},slots:{0:{structure:E,memory:{array:r},address:-1431655766}}},1:{structure:ce,memory:{array:Ss},slots:{0:{structure:Ge,memory:{array:r},address:-1431655766}}},2:{structure:ue,memory:{array:zs},slots:{0:{structure:He,memory:{array:r},address:-1431655766}}}}}},slot:51});Object.assign(le,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime maxValue: struct{comptime comptime_float = 500, comptime comptime_float = 400} = .{500, 400}, comptime defaultValue: struct{comptime comptime_float = 250, comptime comptime_float = 188} = .{250, 188}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Je}],methods:[],template:null},slot:50});const ws=new Uint8Array([]),Rs=new Uint8Array([80,30,16,0]),pt=new Uint8Array([0,0,0,0,0,64,143,64]),qs=new Uint8Array([80,30,16,0]);Object.assign(Ne,{...t,type:2,name:"struct{comptime comptime_float = 1000, comptime comptime_float = 1000}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:ws},slots:{0:{structure:m,memory:{array:Rs},slots:{0:{structure:s,memory:{array:pt},address:1056336}}},1:{structure:m,memory:{array:qs},slots:{0:{structure:s,memory:{array:pt},address:1056336}}}}}},slot:95});Object.assign(ne,{...t,type:11,name:"*const struct{comptime comptime_float = 1000, comptime comptime_float = 1000}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ne}],methods:[],template:null},slot:94});const As=new Uint8Array([]),Us=new Uint8Array([72,30,16,0]),Os=new Uint8Array([0,0,0,0,0,128,107,64]),js=new Uint8Array([64,30,16,0]),xs=new Uint8Array([0,0,0,0,0,192,119,64]);Object.assign(Qe,{...t,type:2,name:"struct{comptime comptime_float = 220, comptime comptime_float = 380}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m}],methods:[],template:{memory:{array:As},slots:{0:{structure:m,memory:{array:Us},slots:{0:{structure:s,memory:{array:Os},address:1056328}}},1:{structure:m,memory:{array:js},slots:{0:{structure:s,memory:{array:xs},address:1056320}}}}}},slot:97});Object.assign(pe,{...t,type:11,name:"*const struct{comptime comptime_float = 220, comptime comptime_float = 380}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Qe}],methods:[],template:null},slot:96});const Ps=new Uint8Array([]),Cs=new Uint8Array([170,170,170,170]),vs=new Uint8Array([170,170,170,170]),Is=new Uint8Array([170,170,170,170]);Object.assign(We,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime maxValue: struct{comptime comptime_float = 1000, comptime comptime_float = 1000} = .{1000, 1000}, comptime defaultValue: struct{comptime comptime_float = 220, comptime comptime_float = 380} = .{220, 380}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:A},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:ne},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:pe}],methods:[],template:{memory:{array:Ps},slots:{0:{structure:A,memory:{array:Cs},slots:{0:{structure:E,memory:{array:r},address:-1431655766}}},1:{structure:ne,memory:{array:vs},slots:{0:{structure:Ne,memory:{array:r},address:-1431655766}}},2:{structure:pe,memory:{array:Is},slots:{0:{structure:Qe,memory:{array:r},address:-1431655766}}}}}},slot:53});Object.assign(ye,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime maxValue: struct{comptime comptime_float = 1000, comptime comptime_float = 1000} = .{1000, 1000}, comptime defaultValue: struct{comptime comptime_float = 220, comptime comptime_float = 380} = .{220, 380}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:We}],methods:[],template:null},slot:52});const ks=new Uint8Array([]),Es=new Uint8Array([16,31,16,0]),Ks=new Uint8Array([0,0,0,0,0,0,24,192]),Fs=new Uint8Array([8,31,16,0]),Ds=new Uint8Array([0,0,0,0,0,0,36,64]),Ts=new Uint8Array([56,30,16,0]);Object.assign(Xe,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = -6, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:m},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:m}],methods:[],template:{memory:{array:ks},slots:{0:{structure:m,memory:{array:Es},slots:{0:{structure:s,memory:{array:Ks},address:1056528}}},1:{structure:m,memory:{array:Fs},slots:{0:{structure:s,memory:{array:Ds},address:1056520}}},2:{structure:m,memory:{array:Ts},slots:{0:{structure:s,memory:{array:q},address:1056312}}}}}},slot:55});Object.assign(fe,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = -6, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Xe}],methods:[],template:null},slot:54});const Ms=new Uint8Array([]),$s=new Uint8Array([48,30,16,0]),Bs=new Uint8Array([80,30,16,0]),Ls=new Uint8Array([0,31,16,0]),Gs=new Uint8Array([0,0,0,0,0,0,105,64]);Object.assign(Ye,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 200}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:m},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:m}],methods:[],template:{memory:{array:Ms},slots:{0:{structure:m,memory:{array:$s},slots:{0:{structure:s,memory:{array:V},address:1056304}}},1:{structure:m,memory:{array:Bs},slots:{0:{structure:s,memory:{array:pt},address:1056336}}},2:{structure:m,memory:{array:Ls},slots:{0:{structure:s,memory:{array:Gs},address:1056512}}}}}},slot:57});Object.assign(de,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 200}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ye}],methods:[],template:null},slot:56});const Hs=new Uint8Array([]),Js=new Uint8Array([248,30,16,0]),Ns=new Uint8Array([123,20,174,71,225,122,132,63]),Qs=new Uint8Array([240,30,16,0]),Ws=new Uint8Array([0,0,0,0,0,0,224,63]),Xs=new Uint8Array([160,30,16,0]);Object.assign(Ze,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 0.5, comptime defaultValue: comptime_float = 0.2}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:y},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:m},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:m}],methods:[],template:{memory:{array:Hs},slots:{0:{structure:m,memory:{array:Js},slots:{0:{structure:s,memory:{array:Ns},address:1056504}}},1:{structure:m,memory:{array:Qs},slots:{0:{structure:s,memory:{array:Ws},address:1056496}}},2:{structure:m,memory:{array:Xs},slots:{0:{structure:s,memory:{array:Pt},address:1056416}}}}}},slot:59});Object.assign(be,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 0.5, comptime defaultValue: comptime_float = 0.2}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Ze}],methods:[],template:null},slot:58});Object.assign(x,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:35});const Ys=new Uint8Array([]),Zs=new Uint8Array([56,30,16,0]),er=new Uint8Array([56,30,16,0]),tr=new Uint8Array([56,30,16,0]),mr=new Uint8Array([56,30,16,0]);Object.assign(v,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:m},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:m}],methods:[],template:{memory:{array:Ys},slots:{0:{structure:m,memory:{array:Zs},slots:{0:{structure:s,memory:{array:q},address:1056312}}},1:{structure:m,memory:{array:er},slots:{0:{structure:s,memory:{array:q},address:1056312}}},2:{structure:m,memory:{array:tr},slots:{0:{structure:s,memory:{array:q},address:1056312}}},3:{structure:m,memory:{array:mr},slots:{0:{structure:s,memory:{array:q},address:1056312}}}}}},slot:101});Object.assign(R,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:v}],methods:[],template:null},slot:100});const sr=new Uint8Array([]),rr=new Uint8Array([48,30,16,0]),ar=new Uint8Array([48,30,16,0]),or=new Uint8Array([48,30,16,0]),ir=new Uint8Array([48,30,16,0]);Object.assign(et,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:m},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:m},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:m},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:m}],methods:[],template:{memory:{array:sr},slots:{0:{structure:m,memory:{array:rr},slots:{0:{structure:s,memory:{array:V},address:1056304}}},1:{structure:m,memory:{array:ar},slots:{0:{structure:s,memory:{array:V},address:1056304}}},2:{structure:m,memory:{array:or},slots:{0:{structure:s,memory:{array:V},address:1056304}}},3:{structure:m,memory:{array:ir},slots:{0:{structure:s,memory:{array:V},address:1056304}}}}}},slot:103});Object.assign(_e,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:et}],methods:[],template:null},slot:102});const cr=new Uint8Array([]),ur=new Uint8Array([170,170,170,170]),lr=new Uint8Array([170,170,170,170]),nr=new Uint8Array([170,170,170,170]);Object.assign(tt,{...t,type:2,name:"struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:x},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:R},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:_e},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:R}],methods:[],template:{memory:{array:cr},slots:{0:{structure:R,memory:{array:ur},slots:{0:{structure:v,memory:{array:r},address:-1431655766}}},1:{structure:_e,memory:{array:lr},slots:{0:{structure:et,memory:{array:r},address:-1431655766}}},2:{structure:R,memory:{array:nr},slots:{0:{structure:v,memory:{array:r},address:-1431655766}}}}}},slot:61});Object.assign(he,{...t,type:11,name:"*const struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:tt}],methods:[],template:null},slot:60});const pr=new Uint8Array([]),yr=new Uint8Array([170,170,170,170]),fr=new Uint8Array([170,170,170,170]),dr=new Uint8Array([170,170,170,170]),br=new Uint8Array([170,170,170,170]),_r=new Uint8Array([170,170,170,170]),hr=new Uint8Array([170,170,170,170]),gr=new Uint8Array([170,170,170,170]),Vr=new Uint8Array([170,170,170,170]),Sr=new Uint8Array([170,170,170,170]),zr=new Uint8Array([170,170,170,170]),wr=new Uint8Array([170,170,170,170]);Object.assign(mt,{...t,type:2,name:"struct{comptime a: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -5, comptime comptime_float = -5} = .{-5, -5}, comptime maxValue: struct{comptime comptime_float = 5, comptime comptime_float = 5} = .{5, 5}, comptime defaultValue: struct{comptime comptime_float = -0.3, comptime comptime_float = -1.1} = .{-0.3, -1.1}} = .{.type = @Vector(2, f32), .minValue = .{-5, -5}, .maxValue = .{5, 5}, .defaultValue = .{-0.3, -1.1}}, comptime b: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -5, comptime comptime_float = -5} = .{-5, -5}, comptime maxValue: struct{comptime comptime_float = 5, comptime comptime_float = 5} = .{5, 5}, comptime defaultValue: struct{comptime comptime_float = 2.1, comptime comptime_float = 0.1} = .{2.1, 0.1}} = .{.type = @Vector(2, f32), .minValue = .{-5, -5}, .maxValue = .{5, 5}, .defaultValue = .{2.1, 0.1}}, comptime c: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -5, comptime comptime_float = -5} = .{-5, -5}, comptime maxValue: struct{comptime comptime_float = 5, comptime comptime_float = 5} = .{5, 5}, comptime defaultValue: struct{comptime comptime_float = 0.6, comptime comptime_float = 0} = .{0.6, 0}} = .{.type = @Vector(2, f32), .minValue = .{-5, -5}, .maxValue = .{5, 5}, .defaultValue = .{0.6, 0}}, comptime d: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -2} = .{-2, -2}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 2} = .{2, 2}, comptime defaultValue: struct{comptime comptime_float = 0.2, comptime comptime_float = -1.12} = .{0.2, -1.12}} = .{.type = @Vector(2, f32), .minValue = .{-2, -2}, .maxValue = .{2, 2}, .defaultValue = .{0.2, -1.12}}, comptime distort: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0.1, comptime comptime_float = 0.1} = .{0.1, 0.1}, comptime maxValue: struct{comptime comptime_float = 20, comptime comptime_float = 20} = .{20, 20}, comptime defaultValue: struct{comptime comptime_float = 3, comptime comptime_float = 1.7320508} = .{3, 1.7320508}} = .{.type = @Vector(2, f32), .minValue = .{0.1, 0.1}, .maxValue = .{20, 20}, .defaultValue = .{3, 1.7320508}}, comptime imagesize: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime maxValue: struct{comptime comptime_float = 500, comptime comptime_float = 400} = .{500, 400}, comptime defaultValue: struct{comptime comptime_float = 250, comptime comptime_float = 188} = .{250, 188}} = .{.type = @Vector(2, f32), .minValue = .{1, 1}, .maxValue = .{500, 400}, .defaultValue = .{250, 188}}, comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime maxValue: struct{comptime comptime_float = 1000, comptime comptime_float = 1000} = .{1000, 1000}, comptime defaultValue: struct{comptime comptime_float = 220, comptime comptime_float = 380} = .{220, 380}} = .{.type = @Vector(2, f32), .minValue = .{1, 1}, .maxValue = .{1000, 1000}, .defaultValue = .{220, 380}}, comptime focus: struct{comptime type: type = f32, comptime minValue: comptime_float = -6, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = -6, .maxValue = 10, .defaultValue = 0}, comptime scale: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 200} = .{.type = f32, .minValue = 1, .maxValue = 1000, .defaultValue = 200}, comptime fill: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 0.5, comptime defaultValue: comptime_float = 0.2} = .{.type = f32, .minValue = 0.01, .maxValue = 0.5, .defaultValue = 0.2}, comptime bgcolor: struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}} = .{.type = @Vector(4, f32), .minValue = .{0, 0, 0, 0}, .maxValue = .{1, 1, 1, 1}, .defaultValue = .{0, 0, 0, 0}}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"a",structure:Q},{...e,type:8,isRequired:!1,slot:1,name:"b",structure:X},{...e,type:8,isRequired:!1,slot:2,name:"c",structure:Z},{...e,type:8,isRequired:!1,slot:3,name:"d",structure:se},{...e,type:8,isRequired:!1,slot:4,name:"distort",structure:ie},{...e,type:8,isRequired:!1,slot:5,name:"imagesize",structure:le},{...e,type:8,isRequired:!1,slot:6,name:"center",structure:ye},{...e,type:8,isRequired:!1,slot:7,name:"focus",structure:fe},{...e,type:8,isRequired:!1,slot:8,name:"scale",structure:de},{...e,type:8,isRequired:!1,slot:9,name:"fill",structure:be},{...e,type:8,isRequired:!1,slot:10,name:"bgcolor",structure:he}],methods:[],template:{memory:{array:pr},slots:{0:{structure:Q,memory:{array:yr},slots:{0:{structure:Ce,memory:{array:r},address:-1431655766}}},1:{structure:X,memory:{array:fr},slots:{0:{structure:Ie,memory:{array:r},address:-1431655766}}},2:{structure:Z,memory:{array:dr},slots:{0:{structure:Ee,memory:{array:r},address:-1431655766}}},3:{structure:se,memory:{array:br},slots:{0:{structure:Te,memory:{array:r},address:-1431655766}}},4:{structure:ie,memory:{array:_r},slots:{0:{structure:Le,memory:{array:r},address:-1431655766}}},5:{structure:le,memory:{array:hr},slots:{0:{structure:Je,memory:{array:r},address:-1431655766}}},6:{structure:ye,memory:{array:gr},slots:{0:{structure:We,memory:{array:r},address:-1431655766}}},7:{structure:fe,memory:{array:Vr},slots:{0:{structure:Xe,memory:{array:r},address:-1431655766}}},8:{structure:de,memory:{array:Sr},slots:{0:{structure:Ye,memory:{array:r},address:-1431655766}}},9:{structure:be,memory:{array:zr},slots:{0:{structure:Ze,memory:{array:r},address:-1431655766}}},10:{structure:he,memory:{array:wr},slots:{0:{structure:tt,memory:{array:r},address:-1431655766}}}}}},slot:15});Object.assign(ge,{...t,type:11,name:"*struct{comptime a: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -5, comptime comptime_float = -5} = .{-5, -5}, comptime maxValue: struct{comptime comptime_float = 5, comptime comptime_float = 5} = .{5, 5}, comptime defaultValue: struct{comptime comptime_float = -0.3, comptime comptime_float = -1.1} = .{-0.3, -1.1}} = .{.type = @Vector(2, f32), .minValue = .{-5, -5}, .maxValue = .{5, 5}, .defaultValue = .{-0.3, -1.1}}, comptime b: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -5, comptime comptime_float = -5} = .{-5, -5}, comptime maxValue: struct{comptime comptime_float = 5, comptime comptime_float = 5} = .{5, 5}, comptime defaultValue: struct{comptime comptime_float = 2.1, comptime comptime_float = 0.1} = .{2.1, 0.1}} = .{.type = @Vector(2, f32), .minValue = .{-5, -5}, .maxValue = .{5, 5}, .defaultValue = .{2.1, 0.1}}, comptime c: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -5, comptime comptime_float = -5} = .{-5, -5}, comptime maxValue: struct{comptime comptime_float = 5, comptime comptime_float = 5} = .{5, 5}, comptime defaultValue: struct{comptime comptime_float = 0.6, comptime comptime_float = 0} = .{0.6, 0}} = .{.type = @Vector(2, f32), .minValue = .{-5, -5}, .maxValue = .{5, 5}, .defaultValue = .{0.6, 0}}, comptime d: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = -2, comptime comptime_float = -2} = .{-2, -2}, comptime maxValue: struct{comptime comptime_float = 2, comptime comptime_float = 2} = .{2, 2}, comptime defaultValue: struct{comptime comptime_float = 0.2, comptime comptime_float = -1.12} = .{0.2, -1.12}} = .{.type = @Vector(2, f32), .minValue = .{-2, -2}, .maxValue = .{2, 2}, .defaultValue = .{0.2, -1.12}}, comptime distort: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0.1, comptime comptime_float = 0.1} = .{0.1, 0.1}, comptime maxValue: struct{comptime comptime_float = 20, comptime comptime_float = 20} = .{20, 20}, comptime defaultValue: struct{comptime comptime_float = 3, comptime comptime_float = 1.7320508} = .{3, 1.7320508}} = .{.type = @Vector(2, f32), .minValue = .{0.1, 0.1}, .maxValue = .{20, 20}, .defaultValue = .{3, 1.7320508}}, comptime imagesize: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime maxValue: struct{comptime comptime_float = 500, comptime comptime_float = 400} = .{500, 400}, comptime defaultValue: struct{comptime comptime_float = 250, comptime comptime_float = 188} = .{250, 188}} = .{.type = @Vector(2, f32), .minValue = .{1, 1}, .maxValue = .{500, 400}, .defaultValue = .{250, 188}}, comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime maxValue: struct{comptime comptime_float = 1000, comptime comptime_float = 1000} = .{1000, 1000}, comptime defaultValue: struct{comptime comptime_float = 220, comptime comptime_float = 380} = .{220, 380}} = .{.type = @Vector(2, f32), .minValue = .{1, 1}, .maxValue = .{1000, 1000}, .defaultValue = .{220, 380}}, comptime focus: struct{comptime type: type = f32, comptime minValue: comptime_float = -6, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = -6, .maxValue = 10, .defaultValue = 0}, comptime scale: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 200} = .{.type = f32, .minValue = 1, .maxValue = 1000, .defaultValue = 200}, comptime fill: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 0.5, comptime defaultValue: comptime_float = 0.2} = .{.type = f32, .minValue = 0.01, .maxValue = 0.5, .defaultValue = 0.2}, comptime bgcolor: struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}} = .{.type = @Vector(4, f32), .minValue = .{0, 0, 0, 0}, .maxValue = .{1, 1, 1, 1}, .defaultValue = .{0, 0, 0, 0}}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:mt}],methods:[],template:null},slot:14});Object.assign(Ve,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:f}],methods:[],template:null},slot:104});const Rr=new Uint8Array([]),qr=new Uint8Array([232,30,16,0]),Ar=new Uint8Array([4,0,0,0]);Object.assign(K,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:Ve}],methods:[],template:{memory:{array:Rr},slots:{0:{structure:Ve,memory:{array:qr},slots:{0:{structure:f,memory:{array:Ar},address:1056488}}}}}},slot:63});Object.assign(U,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:K}],methods:[],template:null},slot:62});const Ur=new Uint8Array([]),Or=new Uint8Array([170,170,170,170]);Object.assign(st,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:U}],methods:[],template:{memory:{array:Ur},slots:{0:{structure:U,memory:{array:Or},slots:{0:{structure:K,memory:{array:r},address:-1431655766}}}}}},slot:17});Object.assign(Se,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:st}],methods:[],template:null},slot:16});const jr=new Uint8Array([]),xr=new Uint8Array([170,170,170,170]);Object.assign(rt,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:U}],methods:[],template:{memory:{array:jr},slots:{0:{structure:U,memory:{array:xr},slots:{0:{structure:K,memory:{array:r},address:-1431655766}}}}}},slot:19});Object.assign(ze,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:rt}],methods:[],template:null},slot:18});const Pr=new Uint8Array([]),Cr=new Uint8Array([]),vr=new Uint8Array([44,251,15,0]),Ir=new Uint8Array([123,115,16,0]),kr=new Uint8Array([99,111,109,112,108,101,120,32,114,97,116,105,111,110,97,108,32,51,0]),Er=new Uint8Array([108,251,15,0]),Kr=new Uint8Array([114,115,16,0]),Fr=new Uint8Array([112,105,120,101,108,101,114,111,0]),Dr=new Uint8Array([172,251,15,0]),Tr=new Uint8Array([1,0,0,0]),Mr=new Uint8Array([4,252,15,0]),$r=new Uint8Array([74,115,16,0]),Br=new Uint8Array([99,111,109,112,108,101,120,32,109,97,112,112,105,110,103,32,122,32,61,32,100,47,91,40,122,45,97,41,40,122,45,98,41,40,122,45,99,41,93,0]),Lr=new Uint8Array([170,170,170,170]),Gr=new Uint8Array([170,170,170,170]),Hr=new Uint8Array([170,170,170,170]);Object.assign(ft,{...t,type:2,name:"complex-inverse.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Pr}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:G},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:H},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:_},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:J},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:ge},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:Se},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:ze}],methods:[],template:{memory:{array:Cr},slots:{0:{structure:G,memory:{array:vr},slots:{0:{structure:Ae,memory:{array:Ir},slots:{0:{structure:qe,memory:{array:kr},address:1078139}}}}},1:{structure:H,memory:{array:Er},slots:{0:{structure:Oe,memory:{array:Kr},slots:{0:{structure:Ue,memory:{array:Fr},address:1078130}}}}},2:{structure:_,memory:{array:Dr},slots:{0:{structure:f,memory:{array:Tr}}}},3:{structure:J,memory:{array:Mr},slots:{0:{structure:xe,memory:{array:$r},slots:{0:{structure:je,memory:{array:Br},address:1078090}}}}},4:{structure:ge,memory:{array:Lr},slots:{0:{structure:mt,memory:{array:r},address:-1431655766}}},5:{structure:Se,memory:{array:Gr},slots:{0:{structure:st,memory:{array:r},address:-1431655766}}},6:{structure:ze,memory:{array:Hr},slots:{0:{structure:rt,memory:{array:r},address:-1431655766}}}}}},slot:1});Object.assign(P,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:24});Object.assign(at,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:P}],methods:[],template:null},slot:23});Object.assign(ot,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:at}],methods:[],template:null},slot:22});Object.assign(p,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:25});const Jr=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(it,{...t,type:9,name:"complex-inverse.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:f},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:f}],methods:[],template:{memory:{array:Jr}}},slot:26});Object.assign(I,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:I}],methods:[],template:null},slot:27});Object.assign(k,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:k}],methods:[],template:null},slot:28});const Nr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Qr=new Uint8Array([]),Wr=new Uint8Array([8,250,15,0]),Xr=new Uint8Array([4,0,0,0]);Object.assign(we,{...t,type:2,name:"complex-inverse.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ot},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:p},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:p},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:it},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:I},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:k}],methods:[],template:{memory:{array:Nr}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:P},{...e,type:7,isRequired:!1,name:"FPixel",structure:x},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:_}],methods:[],template:{memory:{array:Qr},slots:{0:{structure:_,memory:{array:Wr},slots:{0:{structure:f,memory:{array:Xr}}}}}}},slot:21});const Yr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Zr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ea=new Uint8Array([0,0,0,0,0,0,0,0]),zt=new Uint8Array([]);Object.assign(F,{...t,type:2,name:"complex-inverse.KernelInput(u8,complex-inverse.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:we}],methods:[],template:{memory:{array:Yr},slots:{0:{structure:we,memory:{array:Zr},slots:{0:{structure:ot,memory:{array:ea},slots:{0:{structure:at,memory:{array:zt}}}}}}}}},slot:20});Object.assign(ct,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:P}],methods:[],template:null},slot:23});Object.assign(ut,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ct}],methods:[],template:null},slot:31});const ta=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ma=new Uint8Array([]),sa=new Uint8Array([8,250,15,0]),ra=new Uint8Array([4,0,0,0]);Object.assign(Re,{...t,type:2,name:"complex-inverse.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ut},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:p},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:p},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:it},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:I},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:k}],methods:[],template:{memory:{array:ta}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:P},{...e,type:7,isRequired:!1,name:"FPixel",structure:x},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:_}],methods:[],template:{memory:{array:ma},slots:{0:{structure:_,memory:{array:sa},slots:{0:{structure:f,memory:{array:ra}}}}}}},slot:30});const aa=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),oa=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ia=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(D,{...t,type:2,name:"complex-inverse.KernelOutput(u8,complex-inverse.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:Re}],methods:[],template:{memory:{array:aa},slots:{0:{structure:Re,memory:{array:oa},slots:{0:{structure:ut,memory:{array:ia},slots:{0:{structure:ct,memory:{array:zt}}}}}}}}},slot:29});const ca=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,190,205,204,140,191,102,102,6,64,205,204,204,61,154,153,25,63,0,0,0,0,205,204,76,62,41,92,143,191,0,0,64,64,215,179,221,63,0,0,122,67,0,0,60,67,0,0,92,67,0,0,190,67,0,0,0,0,0,0,72,67,205,204,76,62,0,0,0,0,0,0,0,0,0,0,0,0]);Object.assign(T,{...t,type:2,name:"complex-inverse.KernelParameters(complex-inverse.kernel)",length:1,byteSize:96,align:4,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:128,bitSize:64,byteSize:8,slot:0,name:"a",structure:c},{...e,type:6,isRequired:!1,bitOffset:192,bitSize:64,byteSize:8,slot:1,name:"b",structure:c},{...e,type:6,isRequired:!1,bitOffset:256,bitSize:64,byteSize:8,slot:2,name:"c",structure:c},{...e,type:6,isRequired:!1,bitOffset:320,bitSize:64,byteSize:8,slot:3,name:"d",structure:c},{...e,type:6,isRequired:!1,bitOffset:384,bitSize:64,byteSize:8,slot:4,name:"distort",structure:c},{...e,type:6,isRequired:!1,bitOffset:448,bitSize:64,byteSize:8,slot:5,name:"imagesize",structure:c},{...e,type:6,isRequired:!1,bitOffset:512,bitSize:64,byteSize:8,slot:6,name:"center",structure:c},{...e,type:4,isRequired:!1,bitOffset:576,bitSize:32,byteSize:4,slot:7,name:"focus",structure:y},{...e,type:4,isRequired:!1,bitOffset:608,bitSize:32,byteSize:4,slot:8,name:"scale",structure:y},{...e,type:4,isRequired:!1,bitOffset:640,bitSize:32,byteSize:4,slot:9,name:"fill",structure:y},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:128,byteSize:16,slot:10,name:"bgcolor",structure:x}],methods:[],template:{memory:{array:ca}}},slot:32});Object.assign(dt,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(complex-inverse.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:64});Object.assign(bt,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(complex-inverse.createOutput)).Fn.return_type.?).ErrorUnion.error_set!complex-inverse.KernelOutput(u8,complex-inverse.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:D},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:dt}],methods:[],template:null},slot:38});Object.assign(_t,{...t,type:3,name:"createOutput",length:1,byteSize:160,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:768,bitSize:32,byteSize:4,slot:0,name:"0",structure:p},{...e,type:3,bitOffset:800,bitSize:32,byteSize:4,slot:1,name:"1",structure:p},{...e,type:6,bitOffset:832,bitSize:192,byteSize:24,slot:2,name:"2",structure:F},{...e,type:6,bitOffset:0,bitSize:768,byteSize:96,slot:3,name:"3",structure:T},{...e,type:6,bitOffset:1024,bitSize:224,byteSize:28,slot:4,name:"retval",structure:bt}],methods:[],template:null},slot:36});Object.assign(ht,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(complex-inverse.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:65});Object.assign(gt,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(complex-inverse.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!complex-inverse.KernelOutput(u8,complex-inverse.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:D},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ht}],methods:[],template:null},slot:39});Object.assign(Vt,{...t,type:3,name:"createPartialOutput",length:1,byteSize:176,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:768,bitSize:32,byteSize:4,slot:0,name:"0",structure:p},{...e,type:3,bitOffset:800,bitSize:32,byteSize:4,slot:1,name:"1",structure:p},{...e,type:3,bitOffset:832,bitSize:32,byteSize:4,slot:2,name:"2",structure:p},{...e,type:3,bitOffset:864,bitSize:32,byteSize:4,slot:3,name:"3",structure:p},{...e,type:6,bitOffset:896,bitSize:192,byteSize:24,slot:4,name:"4",structure:F},{...e,type:6,bitOffset:0,bitSize:768,byteSize:96,slot:5,name:"5",structure:T},{...e,type:6,bitOffset:1088,bitSize:224,byteSize:28,slot:6,name:"retval",structure:gt}],methods:[],template:null},slot:37});const ua={argStruct:_t,thunk:1,name:"createOutput"},la={argStruct:Vt,thunk:6,name:"createPartialOutput"};Object.assign(St,{...t,type:2,name:"complex-inverse",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:zt}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ft},{...e,type:7,isRequired:!1,name:"Input",structure:F},{...e,type:7,isRequired:!1,name:"Output",structure:D},{...e,type:7,isRequired:!1,name:"Parameters",structure:T}],methods:[ua,la],template:null},slot:0});const na=[S,qe,Ae,G,Ue,Oe,H,f,_,je,xe,J,y,c,s,m,O,h,j,g,Pe,N,Ce,Q,ve,W,Ie,X,ke,Y,Ee,Z,Ke,ee,Fe,te,De,me,Te,se,Me,re,$e,ae,Be,oe,Le,ie,E,A,Ge,ce,He,ue,Je,le,Ne,ne,Qe,pe,We,ye,Xe,fe,Ye,de,Ze,be,x,v,R,et,_e,tt,he,mt,ge,Ve,K,U,st,Se,rt,ze,ft,P,at,ot,p,it,I,k,we,F,ct,ut,Re,D,T,dt,bt,_t,ht,gt,Vt,St],pa=Yt(na),ya=St.constructor,fa=(async()=>{const u=new URL("complex-inverse-a1d66040.wasm",import.meta.url).href;return fetch(u)})();Zt(fa,{...pa,writeBack:!0});const{createOutput:za,createPartialOutput:da,kernel:yt,Input:ba,Output:wa,Parameters:Ra}=ya;function _a(u,n,o,a,i={},z={}){if(Array.isArray(i)){const b=i;i={};for(const[d,w]of Object.keys(yt.inputImages).entries())i[w]=b[d]}const M=new ba(void 0),$=Object.keys(yt.inputImages),l=[];let C;for(const b of $){let d=i[b];if(d||($.length===1&&["data","width","height"].every(w=>!!i[w])?d=i:l.push(b)),M[b]=d,C){if(d.colorSpace!==C)throw new Error(`Input images must all use the same color space: ${C}`)}else C=d.colorSpace}if(l.length>0)throw new Error(`Missing input image${l.length>1?"s":""}: ${l.join(", ")}`);const lt=da(u,n,o,a,M,z),wt=b=>{const d=Object.keys(b),w={};for(const Rt of d){const{data:{typedArray:B},width:qt,height:vt}=b[Rt];let L;if(typeof ImageData=="function"){const It=new Uint8ClampedArray(B.buffer,B.byteOffset,B.byteLength);L=new ImageData(It,qt,a,{colorSpace:C})}else L={data:B,width:qt,height:vt};if(d.length===1)return L;w[Rt]=L}return w};return lt[Symbol.toStringTag]==="Promise"?lt.then(wt):wt(lt)}function ha(){const u={};for(let[n,o]of Object.entries(yt)){if(n==="parameters"){const a={};for(const[i,z]of Object.entries(o)){const M=a[i]={};for(let[$,l]of Object.entries(z))typeof l=="object"?"string"in l?l=l.string:l=Ct(l):typeof l=="function"&&(l=ga(l.name)),M[$]=l}o=a}else typeof o=="object"&&("string"in o?o=o.string:o=o.valueOf());u[n]=o}return u}function Ct(u){const n=[];for(let[o,a]of Object.entries(u))typeof a=="object"&&(a=Ct(a)),n[o]=a;return n}function ga(u){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[u]}onmessage=u=>{const[n,o,...a]=u.data;Va(n,a).then(([i,z])=>{postMessage([n,o,i],{transfer:z})}).catch(i=>{postMessage(["error",o,i])})};async function Va(u,n){switch(u){case"getKernelInfo":return[ha(...n)];case"createPartialImageData":const a=await _a(...n),i=[];if("data"in a&&"width"in a&&"height"in a)i.push(a.data.buffer);else for(const z of Object.entries(a))i.push(a.data.buffer);return[a,i];default:throw new Error(`Unknown function: ${u}`)}}
