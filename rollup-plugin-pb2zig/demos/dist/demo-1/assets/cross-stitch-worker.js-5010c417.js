import{u as qe,a as we,b as je,c as Ae,d as Ue,e as Pe,f as Ve,g as _e,h as Ie,i as ke,j as xe,k as ve,l as Ce,p as Ee,m as Ke,n as Fe,o as De,q as Te,r as Me}from"./index-cfb20c86.js";qe();we();je();Ae();Ue();Pe();Ve();_e();Ie();ke();xe();ve();Ce();Ee();Ke();Fe();De();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},p={},$={},B={},I={},L={},G={},k={},a={},b={},H={},J={},x={},c={},N={},Q={},v={},W={},C={},X={},E={},q={},S={},Y={},K={},Z={},F={},ue={},g={},ee={},te={},m={},se={},O={},R={},D={},re={},T={},w={},ie={},ae={},M={},j={},A={},me={},le={},ce={},ye={},pe={},be={},fe={};Object.assign(p,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:5});Object.assign($,{...t,type:1,name:"[17:0]u8",length:17,byteSize:18,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:4});Object.assign(B,{...t,type:11,name:"*const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:3});Object.assign(I,{...t,type:11,name:"**const [17:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:2});Object.assign(L,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:8});Object.assign(G,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:7});Object.assign(k,{...t,type:11,name:"**const [14:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:6});Object.assign(a,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:a}],methods:[],template:null},slot:10});Object.assign(b,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:a}],methods:[],template:null},slot:9});Object.assign(H,{...t,type:1,name:"[19:0]u8",length:19,byteSize:20,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:13});Object.assign(J,{...t,type:11,name:"*const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:12});Object.assign(x,{...t,type:11,name:"**const [19:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:11});Object.assign(c,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:a}],methods:[],template:null},slot:45});Object.assign(N,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:48});Object.assign(Q,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:47});Object.assign(v,{...t,type:11,name:"*const *const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:46});const $e=new Uint8Array([]),Be=new Uint8Array([64,30,16,0]),Le=new Uint8Array([1,0,0,0]),Ge=new Uint8Array([60,30,16,0]),He=new Uint8Array([10,0,0,0]),Je=new Uint8Array([56,30,16,0]),Ne=new Uint8Array([5,0,0,0]),Qe=new Uint8Array([52,30,16,0]),We=new Uint8Array([68,30,16,0]),Xe=new Uint8Array([115,105,122,101,32,111,102,32,116,104,101,32,115,116,105,116,99,104,105,110,103,0]);Object.assign(W,{...t,type:2,name:'struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 10, comptime defaultValue: comptime_int = 5, comptime description: *const [21:0]u8 = "size of the stitching"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:a},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:c},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:c},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:c},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:v}],methods:[],template:{memory:{array:$e},slots:{0:{structure:c,memory:{array:Be},slots:{0:{structure:a,memory:{array:Le},address:1056320}}},1:{structure:c,memory:{array:Ge},slots:{0:{structure:a,memory:{array:He},address:1056316}}},2:{structure:c,memory:{array:Je},slots:{0:{structure:a,memory:{array:Ne},address:1056312}}},3:{structure:v,memory:{array:Qe},slots:{0:{structure:Q,memory:{array:We},address:1056308,slots:{0:{structure:N,memory:{array:Xe},address:1056324}}}}}}}},slot:38});Object.assign(C,{...t,type:11,name:'*const struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 10, comptime defaultValue: comptime_int = 5, comptime description: *const [21:0]u8 = "size of the stitching"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:37});const Ye=new Uint8Array([]),Ze=new Uint8Array([170,170,170,170]),d=new Uint8Array([]);Object.assign(X,{...t,type:2,name:'struct{comptime size: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 10, comptime defaultValue: comptime_int = 5, comptime description: *const [21:0]u8 = "size of the stitching"} = .{.type = i32, .minValue = 1, .maxValue = 10, .defaultValue = 5, .description = "size of the stitching"}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"size",structure:C}],methods:[],template:{memory:{array:Ye},slots:{0:{structure:C,memory:{array:Ze},slots:{0:{structure:W,memory:{array:d},address:-1431655766}}}}}},slot:15});Object.assign(E,{...t,type:11,name:'*struct{comptime size: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 10, comptime defaultValue: comptime_int = 5, comptime description: *const [21:0]u8 = "size of the stitching"} = .{.type = i32, .minValue = 1, .maxValue = 10, .defaultValue = 5, .description = "size of the stitching"}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:14});const et=new Uint8Array([]),tt=new Uint8Array([48,30,16,0]),st=new Uint8Array([4,0,0,0]);Object.assign(q,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:et},slots:{0:{structure:c,memory:{array:tt},slots:{0:{structure:a,memory:{array:st},address:1056304}}}}}},slot:40});Object.assign(S,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:39});const rt=new Uint8Array([]),it=new Uint8Array([170,170,170,170]);Object.assign(Y,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:S}],methods:[],template:{memory:{array:rt},slots:{0:{structure:S,memory:{array:it},slots:{0:{structure:q,memory:{array:d},address:-1431655766}}}}}},slot:17});Object.assign(K,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:16});const at=new Uint8Array([]),nt=new Uint8Array([170,170,170,170]);Object.assign(Z,{...t,type:2,name:"struct{comptime outputPx: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"outputPx",structure:S}],methods:[],template:{memory:{array:at},slots:{0:{structure:S,memory:{array:nt},slots:{0:{structure:q,memory:{array:d},address:-1431655766}}}}}},slot:19});Object.assign(F,{...t,type:11,name:"*struct{comptime outputPx: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:18});const ot=new Uint8Array([]),ut=new Uint8Array([]),mt=new Uint8Array([68,249,15,0]),lt=new Uint8Array([125,42,16,0]),ct=new Uint8Array([110,101,116,46,103,104,111,115,116,114,97,100,105,111,46,112,98,0]),yt=new Uint8Array([132,249,15,0]),pt=new Uint8Array([110,42,16,0]),bt=new Uint8Array([103,104,111,115,116,82,97,100,105,111,46,110,101,116,0]),ft=new Uint8Array([196,249,15,0]),ht=new Uint8Array([1,0,0,0]),dt=new Uint8Array([28,250,15,0]),St=new Uint8Array([90,42,16,0]),gt=new Uint8Array([67,114,111,115,115,45,115,116,105,116,99,104,32,101,102,102,101,99,116,0]),zt=new Uint8Array([170,170,170,170]),Ot=new Uint8Array([170,170,170,170]),Rt=new Uint8Array([170,170,170,170]);Object.assign(ue,{...t,type:2,name:"cross-stitch.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ot}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:I},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:k},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:b},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:x},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:E},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:K},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:F}],methods:[],template:{memory:{array:ut},slots:{0:{structure:I,memory:{array:mt},slots:{0:{structure:B,memory:{array:lt},slots:{0:{structure:$,memory:{array:ct},address:1059453}}}}},1:{structure:k,memory:{array:yt},slots:{0:{structure:G,memory:{array:pt},slots:{0:{structure:L,memory:{array:bt},address:1059438}}}}},2:{structure:b,memory:{array:ft},slots:{0:{structure:a,memory:{array:ht}}}},3:{structure:x,memory:{array:dt},slots:{0:{structure:J,memory:{array:St},slots:{0:{structure:H,memory:{array:gt},address:1059418}}}}},4:{structure:E,memory:{array:zt},slots:{0:{structure:X,memory:{array:d},address:-1431655766}}},5:{structure:K,memory:{array:Ot},slots:{0:{structure:Y,memory:{array:d},address:-1431655766}}},6:{structure:F,memory:{array:Rt},slots:{0:{structure:Z,memory:{array:d},address:-1431655766}}}}}},slot:1});Object.assign(g,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:24});Object.assign(ee,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:g}],methods:[],template:null},slot:23});Object.assign(te,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ee}],methods:[],template:null},slot:22});Object.assign(m,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:25});const qt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(se,{...t,type:9,name:"cross-stitch.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:a},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:a}],methods:[],template:{memory:{array:qt}}},slot:26});Object.assign(O,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:O}],methods:[],template:null},slot:27});Object.assign(R,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:28});Object.assign(D,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:D}],methods:[],template:null},slot:44});Object.assign(re,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:D}],methods:[],template:null},slot:41});const wt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),jt=new Uint8Array([]),At=new Uint8Array([104,253,15,0]),Ut=new Uint8Array([4,0,0,0]);Object.assign(T,{...t,type:2,name:"cross-stitch.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:te},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:se},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:O},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:R}],methods:[],template:{memory:{array:wt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:g},{...e,type:7,isRequired:!1,name:"FPixel",structure:re},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:jt},slots:{0:{structure:b,memory:{array:At},slots:{0:{structure:a,memory:{array:Ut}}}}}}},slot:21});const Pt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Vt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),_t=new Uint8Array([0,0,0,0,0,0,0,0]),he=new Uint8Array([]);Object.assign(w,{...t,type:2,name:"cross-stitch.KernelInput(u8,cross-stitch.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:T}],methods:[],template:{memory:{array:Pt},slots:{0:{structure:T,memory:{array:Vt},slots:{0:{structure:te,memory:{array:_t},slots:{0:{structure:ee,memory:{array:he}}}}}}}}},slot:20});Object.assign(ie,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:g}],methods:[],template:null},slot:23});Object.assign(ae,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ie}],methods:[],template:null},slot:31});const It=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),kt=new Uint8Array([]),xt=new Uint8Array([104,253,15,0]),vt=new Uint8Array([4,0,0,0]);Object.assign(M,{...t,type:2,name:"cross-stitch.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ae},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:se},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:O},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:R}],methods:[],template:{memory:{array:It}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:g},{...e,type:7,isRequired:!1,name:"FPixel",structure:re},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:kt},slots:{0:{structure:b,memory:{array:xt},slots:{0:{structure:a,memory:{array:vt}}}}}}},slot:30});const Ct=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Et=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Kt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(j,{...t,type:2,name:"cross-stitch.KernelOutput(u8,cross-stitch.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"outputPx",structure:M}],methods:[],template:{memory:{array:Ct},slots:{0:{structure:M,memory:{array:Et},slots:{0:{structure:ae,memory:{array:Kt},slots:{0:{structure:ie,memory:{array:he}}}}}}}}},slot:29});const Ft=new Uint8Array([5,0,0,0]);Object.assign(A,{...t,type:2,name:"cross-stitch.KernelParameters(cross-stitch.kernel)",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"size",structure:a}],methods:[],template:{memory:{array:Ft}}},slot:32});Object.assign(me,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(cross-stitch.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:42});Object.assign(le,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(cross-stitch.createOutput)).Fn.return_type.?).ErrorUnion.error_set!cross-stitch.KernelOutput(u8,cross-stitch.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:me}],methods:[],template:null},slot:35});Object.assign(ce,{...t,type:3,name:"createOutput",length:1,byteSize:64,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:w},{...e,type:6,bitOffset:256,bitSize:32,byteSize:4,slot:3,name:"3",structure:A},{...e,type:6,bitOffset:288,bitSize:224,byteSize:28,slot:4,name:"retval",structure:le}],methods:[],template:null},slot:33});Object.assign(ye,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(cross-stitch.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:43});Object.assign(pe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(cross-stitch.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!cross-stitch.KernelOutput(u8,cross-stitch.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ye}],methods:[],template:null},slot:36});Object.assign(be,{...t,type:3,name:"createPartialOutput",length:1,byteSize:72,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:m},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:w},{...e,type:6,bitOffset:320,bitSize:32,byteSize:4,slot:5,name:"5",structure:A},{...e,type:6,bitOffset:352,bitSize:224,byteSize:28,slot:6,name:"retval",structure:pe}],methods:[],template:null},slot:34});const Dt={argStruct:ce,thunk:7,name:"createOutput"},Tt={argStruct:be,thunk:2,name:"createPartialOutput"};Object.assign(fe,{...t,type:2,name:"cross-stitch",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:he}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ue},{...e,type:7,isRequired:!1,name:"Input",structure:w},{...e,type:7,isRequired:!1,name:"Output",structure:j},{...e,type:7,isRequired:!1,name:"Parameters",structure:A}],methods:[Dt,Tt],template:null},slot:0});const Mt=[p,$,B,I,L,G,k,a,b,H,J,x,c,N,Q,v,W,C,X,E,q,S,Y,K,Z,F,ue,g,ee,te,m,se,O,R,D,re,T,w,ie,ae,M,j,A,me,le,ce,ye,pe,be,fe],$t=Te(Mt),Bt=fe.constructor,Lt=(async()=>{const n=new URL("cross-stitch-5dc7cf08.wasm",import.meta.url).href;return fetch(n)})();Me(Lt,{...$t,writeBack:!0});const{createOutput:Yt,createPartialOutput:Gt,kernel:oe,Input:Ht,Output:Zt,Parameters:es}=Bt;function Jt(n,u,r,s,i={},f={}){if(Array.isArray(i)){const y=i;i={};for(const[l,h]of Object.keys(oe.inputImages).entries())i[h]=y[l]}const U=new Ht(void 0),P=Object.keys(oe.inputImages),o=[];let z;for(const y of P){let l=i[y];if(l||(P.length===1&&["data","width","height"].every(h=>!!i[h])?l=i:o.push(y)),U[y]=l,z){if(l.colorSpace!==z)throw new Error(`Input images must all use the same color space: ${z}`)}else z=l.colorSpace}if(o.length>0)throw new Error(`Missing input image${o.length>1?"s":""}: ${o.join(", ")}`);const ne=Gt(n,u,r,s,U,f),de=y=>{const l=Object.keys(y),h={};for(const Se of l){const{data:{typedArray:V},width:ge,height:Oe}=y[Se];let _;if(typeof ImageData=="function"){const Re=new Uint8ClampedArray(V.buffer,V.byteOffset,V.byteLength);_=new ImageData(Re,ge,s,{colorSpace:z})}else _={data:V,width:ge,height:Oe};if(l.length===1)return _;h[Se]=_}return h};return ne[Symbol.toStringTag]==="Promise"?ne.then(de):de(ne)}function Nt(){const n={};for(let[u,r]of Object.entries(oe)){if(u==="parameters"){const s={};for(const[i,f]of Object.entries(r)){const U=s[i]={};for(let[P,o]of Object.entries(f))typeof o=="object"?"string"in o?o=o.string:o=ze(o):typeof o=="function"&&(o=Qt(o.name)),U[P]=o}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[u]=r}return n}function ze(n){const u=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=ze(s)),u[r]=s;return u}function Qt(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[u,r,...s]=n.data;Wt(u,s).then(([i,f])=>{postMessage([u,r,i],{transfer:f})}).catch(i=>{postMessage(["error",r,i])})};async function Wt(n,u){switch(n){case"getKernelInfo":return[Nt(...u)];case"createPartialImageData":const s=await Jt(...u),i=[];if("data"in s&&"width"in s&&"height"in s)i.push(s.data.buffer);else for(const f of Object.entries(s))i.push(s.data.buffer);return[s,i];default:throw new Error(`Unknown function: ${n}`)}}
