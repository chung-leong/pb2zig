import{u as qe,a as we,b as Ae,c as Ue,d as je,e as Ve,f as Pe,g as _e,h as Ie,i as ke,j as xe,k as ve,l as Ce,n as Ee,p as Ke,m as Fe,o as De,q as Te,r as Me}from"./index-cfb20c86.js";qe();we();Ae();Ue();je();Ve();Pe();_e();Ie();ke();xe();ve();Ce();Ee();Ke();Fe();De();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},z={},w={},A={},g={},l={},b={},G={},H={},E={},f={},y={},o={},J={},K={},N={},F={},Q={},D={},T={},V={},O={},W={},M={},X={},$={},ne={},R={},Y={},Z={},u={},ee={},U={},j={},te={},B={},P={},se={},re={},L={},_={},I={},me={},oe={},ue={},le={},ce={},ye={},pe={};Object.assign(z,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:5});Object.assign(w,{...t,type:1,name:"[11:0]u8",length:11,byteSize:12,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:4});Object.assign(A,{...t,type:11,name:"*const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:w}],methods:[],template:null},slot:3});Object.assign(g,{...t,type:11,name:"**const [11:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:2});Object.assign(l,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:7});Object.assign(b,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:l}],methods:[],template:null},slot:6});Object.assign(G,{...t,type:1,name:"[37:0]u8",length:37,byteSize:38,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:10});Object.assign(H,{...t,type:11,name:"*const [37:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:9});Object.assign(E,{...t,type:11,name:"**const [37:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:8});Object.assign(f,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:30});Object.assign(y,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:y}],methods:[],template:null},slot:45});Object.assign(o,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:44});const $e=new Uint8Array([]),Be=new Uint8Array([152,2,16,0]),Se=new Uint8Array([0,0,0,0,0,0,0,0]),Le=new Uint8Array([160,2,16,0]),Ge=new Uint8Array([0,0,0,0,0,0,52,64]),He=new Uint8Array([144,2,16,0]),ge=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(J,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 20, comptime defaultValue: comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:o},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:o}],methods:[],template:{memory:{array:$e},slots:{0:{structure:o,memory:{array:Be},slots:{0:{structure:y,memory:{array:Se},address:1049240}}},1:{structure:o,memory:{array:Le},slots:{0:{structure:y,memory:{array:Ge},address:1049248}}},2:{structure:o,memory:{array:He},slots:{0:{structure:y,memory:{array:ge},address:1049232}}}}}},slot:36});Object.assign(K,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 20, comptime defaultValue: comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:35});const Je=new Uint8Array([]),Ne=new Uint8Array([152,2,16,0]),Qe=new Uint8Array([144,2,16,0]),We=new Uint8Array([136,2,16,0]),Xe=new Uint8Array([154,153,153,153,153,153,185,63]);Object.assign(N,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:o},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:o}],methods:[],template:{memory:{array:Je},slots:{0:{structure:o,memory:{array:Ne},slots:{0:{structure:y,memory:{array:Se},address:1049240}}},1:{structure:o,memory:{array:Qe},slots:{0:{structure:y,memory:{array:ge},address:1049232}}},2:{structure:o,memory:{array:We},slots:{0:{structure:y,memory:{array:Xe},address:1049224}}}}}},slot:38});Object.assign(F,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:37});const Ye=new Uint8Array([]),Ze=new Uint8Array([170,170,170,170]),d=new Uint8Array([]),et=new Uint8Array([170,170,170,170]);Object.assign(Q,{...t,type:2,name:"struct{comptime amount: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 20, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 20, .defaultValue = 1}, comptime radius: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.1} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"amount",structure:K},{...e,type:8,isRequired:!1,slot:1,name:"radius",structure:F}],methods:[],template:{memory:{array:Ye},slots:{0:{structure:K,memory:{array:Ze},slots:{0:{structure:J,memory:{array:d},address:-1431655766}}},1:{structure:F,memory:{array:et},slots:{0:{structure:N,memory:{array:d},address:-1431655766}}}}}},slot:12});Object.assign(D,{...t,type:11,name:"*struct{comptime amount: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 20, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 20, .defaultValue = 1}, comptime radius: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.1} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.1}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:11});Object.assign(T,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:l}],methods:[],template:null},slot:46});const tt=new Uint8Array([]),st=new Uint8Array([128,2,16,0]),rt=new Uint8Array([4,0,0,0]);Object.assign(V,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:T}],methods:[],template:{memory:{array:tt},slots:{0:{structure:T,memory:{array:st},slots:{0:{structure:l,memory:{array:rt},address:1049216}}}}}},slot:40});Object.assign(O,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:V}],methods:[],template:null},slot:39});const at=new Uint8Array([]),it=new Uint8Array([170,170,170,170]);Object.assign(W,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:O}],methods:[],template:{memory:{array:at},slots:{0:{structure:O,memory:{array:it},slots:{0:{structure:V,memory:{array:d},address:-1431655766}}}}}},slot:14});Object.assign(M,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:13});const nt=new Uint8Array([]),mt=new Uint8Array([170,170,170,170]);Object.assign(X,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:O}],methods:[],template:{memory:{array:nt},slots:{0:{structure:O,memory:{array:mt},slots:{0:{structure:V,memory:{array:d},address:-1431655766}}}}}},slot:16});Object.assign($,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:15});const ot=new Uint8Array([]),ut=new Uint8Array([]),lt=new Uint8Array([220,249,15,0]),ct=new Uint8Array([28,16,16,0]),yt=new Uint8Array([99,111,109,46,114,112,104,101,108,97,110,0]),pt=new Uint8Array([52,250,15,0]),bt=new Uint8Array([16,16,16,0]),ft=new Uint8Array([82,121,97,110,32,80,104,101,108,97,110,0]),dt=new Uint8Array([140,250,15,0]),ht=new Uint8Array([1,0,0,0]),St=new Uint8Array([228,250,15,0]),gt=new Uint8Array([234,15,16,0]),zt=new Uint8Array([65,112,112,108,105,101,115,32,97,32,115,104,97,114,112,101,110,32,101,102,102,101,99,116,32,116,111,32,97,110,32,105,109,97,103,101,46,0]),Ot=new Uint8Array([170,170,170,170]),Rt=new Uint8Array([170,170,170,170]),qt=new Uint8Array([170,170,170,170]);Object.assign(ne,{...t,type:2,name:"sharpen.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ot}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:g},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:g},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:b},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:E},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:D},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:M},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:$}],methods:[],template:{memory:{array:ut},slots:{0:{structure:g,memory:{array:lt},slots:{0:{structure:A,memory:{array:ct},slots:{0:{structure:w,memory:{array:yt},address:1052700}}}}},1:{structure:g,memory:{array:pt},slots:{0:{structure:A,memory:{array:bt},slots:{0:{structure:w,memory:{array:ft},address:1052688}}}}},2:{structure:b,memory:{array:dt},slots:{0:{structure:l,memory:{array:ht}}}},3:{structure:E,memory:{array:St},slots:{0:{structure:H,memory:{array:gt},slots:{0:{structure:G,memory:{array:zt},address:1052650}}}}},4:{structure:D,memory:{array:Ot},slots:{0:{structure:Q,memory:{array:d},address:-1431655766}}},5:{structure:M,memory:{array:Rt},slots:{0:{structure:W,memory:{array:d},address:-1431655766}}},6:{structure:$,memory:{array:qt},slots:{0:{structure:X,memory:{array:d},address:-1431655766}}}}}},slot:1});Object.assign(R,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:21});Object.assign(Y,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:20});Object.assign(Z,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Y}],methods:[],template:null},slot:19});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:22});const wt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ee,{...t,type:9,name:"sharpen.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:l},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:l}],methods:[],template:{memory:{array:wt}}},slot:23});Object.assign(U,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:U}],methods:[],template:null},slot:24});Object.assign(j,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:j}],methods:[],template:null},slot:25});Object.assign(te,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:41});const At=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ut=new Uint8Array([]),jt=new Uint8Array([104,253,15,0]),Vt=new Uint8Array([4,0,0,0]);Object.assign(B,{...t,type:2,name:"sharpen.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Z},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ee},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:U},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:j}],methods:[],template:{memory:{array:At}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:R},{...e,type:7,isRequired:!1,name:"FPixel",structure:te},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:Ut},slots:{0:{structure:b,memory:{array:jt},slots:{0:{structure:l,memory:{array:Vt}}}}}}},slot:18});const Pt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),_t=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),It=new Uint8Array([0,0,0,0,0,0,0,0]),be=new Uint8Array([]);Object.assign(P,{...t,type:2,name:"sharpen.KernelInput(u8,sharpen.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:B}],methods:[],template:{memory:{array:Pt},slots:{0:{structure:B,memory:{array:_t},slots:{0:{structure:Z,memory:{array:It},slots:{0:{structure:Y,memory:{array:be}}}}}}}}},slot:17});Object.assign(se,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:20});Object.assign(re,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:se}],methods:[],template:null},slot:28});const kt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),xt=new Uint8Array([]),vt=new Uint8Array([104,253,15,0]),Ct=new Uint8Array([4,0,0,0]);Object.assign(L,{...t,type:2,name:"sharpen.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:re},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ee},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:U},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:j}],methods:[],template:{memory:{array:kt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:R},{...e,type:7,isRequired:!1,name:"FPixel",structure:te},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:xt},slots:{0:{structure:b,memory:{array:vt},slots:{0:{structure:l,memory:{array:Ct}}}}}}},slot:27});const Et=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Kt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ft=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(_,{...t,type:2,name:"sharpen.KernelOutput(u8,sharpen.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:L}],methods:[],template:{memory:{array:Et},slots:{0:{structure:L,memory:{array:Kt},slots:{0:{structure:re,memory:{array:Ft},slots:{0:{structure:se,memory:{array:be}}}}}}}}},slot:26});const Dt=new Uint8Array([0,0,128,63,205,204,204,61]);Object.assign(I,{...t,type:2,name:"sharpen.KernelParameters(sharpen.kernel)",length:1,byteSize:8,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"amount",structure:f},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"radius",structure:f}],methods:[],template:{memory:{array:Dt}}},slot:29});Object.assign(me,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(sharpen.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:42});Object.assign(oe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(sharpen.createOutput)).Fn.return_type.?).ErrorUnion.error_set!sharpen.KernelOutput(u8,sharpen.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:_},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:me}],methods:[],template:null},slot:33});Object.assign(ue,{...t,type:3,name:"createOutput",length:1,byteSize:68,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:P},{...e,type:6,bitOffset:256,bitSize:64,byteSize:8,slot:3,name:"3",structure:I},{...e,type:6,bitOffset:320,bitSize:224,byteSize:28,slot:4,name:"retval",structure:oe}],methods:[],template:null},slot:31});Object.assign(le,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(sharpen.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:43});Object.assign(ce,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(sharpen.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!sharpen.KernelOutput(u8,sharpen.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:_},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:le}],methods:[],template:null},slot:34});Object.assign(ye,{...t,type:3,name:"createPartialOutput",length:1,byteSize:76,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:P},{...e,type:6,bitOffset:320,bitSize:64,byteSize:8,slot:5,name:"5",structure:I},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ce}],methods:[],template:null},slot:32});const Tt={argStruct:ue,thunk:8,name:"createOutput"},Mt={argStruct:ye,thunk:2,name:"createPartialOutput"};Object.assign(pe,{...t,type:2,name:"sharpen",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:be}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ne},{...e,type:7,isRequired:!1,name:"Input",structure:P},{...e,type:7,isRequired:!1,name:"Output",structure:_},{...e,type:7,isRequired:!1,name:"Parameters",structure:I}],methods:[Tt,Mt],template:null},slot:0});const $t=[z,w,A,g,l,b,G,H,E,f,y,o,J,K,N,F,Q,D,T,V,O,W,M,X,$,ne,R,Y,Z,u,ee,U,j,te,B,P,se,re,L,_,I,me,oe,ue,le,ce,ye,pe],Bt=Te($t),Lt=pe.constructor,Gt=(async()=>{const i=new URL("sharpen-a632a0c4.wasm",import.meta.url).href;return fetch(i)})();Me(Gt,{...Bt,writeBack:!0});const{createOutput:Zt,createPartialOutput:Ht,kernel:ie,Input:Jt,Output:es,Parameters:ts}=Lt;function Nt(i,m,r,s,a={},h={}){if(Array.isArray(a)){const p=a;a={};for(const[c,S]of Object.keys(ie.inputImages).entries())a[S]=p[c]}const k=new Jt(void 0),x=Object.keys(ie.inputImages),n=[];let q;for(const p of x){let c=a[p];if(c||(x.length===1&&["data","width","height"].every(S=>!!a[S])?c=a:n.push(p)),k[p]=c,q){if(c.colorSpace!==q)throw new Error(`Input images must all use the same color space: ${q}`)}else q=c.colorSpace}if(n.length>0)throw new Error(`Missing input image${n.length>1?"s":""}: ${n.join(", ")}`);const ae=Ht(i,m,r,s,k,h),fe=p=>{const c=Object.keys(p),S={};for(const de of c){const{data:{typedArray:v},width:he,height:Oe}=p[de];let C;if(typeof ImageData=="function"){const Re=new Uint8ClampedArray(v.buffer,v.byteOffset,v.byteLength);C=new ImageData(Re,he,s,{colorSpace:q})}else C={data:v,width:he,height:Oe};if(c.length===1)return C;S[de]=C}return S};return ae[Symbol.toStringTag]==="Promise"?ae.then(fe):fe(ae)}function Qt(){const i={};for(let[m,r]of Object.entries(ie)){if(m==="parameters"){const s={};for(const[a,h]of Object.entries(r)){const k=s[a]={};for(let[x,n]of Object.entries(h))typeof n=="object"?"string"in n?n=n.string:n=ze(n):typeof n=="function"&&(n=Wt(n.name)),k[x]=n}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());i[m]=r}return i}function ze(i){const m=[];for(let[r,s]of Object.entries(i))typeof s=="object"&&(s=ze(s)),m[r]=s;return m}function Wt(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[m,r,...s]=i.data;Xt(m,s).then(([a,h])=>{postMessage([m,r,a],{transfer:h})}).catch(a=>{postMessage(["error",r,a])})};async function Xt(i,m){switch(i){case"getKernelInfo":return[Qt(...m)];case"createPartialImageData":const s=await Nt(...m),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const h of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${i}`)}}
