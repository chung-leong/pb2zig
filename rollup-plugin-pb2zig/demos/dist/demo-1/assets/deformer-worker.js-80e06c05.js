import{u as Ee,a as Ke,b as Fe,c as De,d as Te,e as Me,f as He,g as $e,h as Be,i as Le,j as Ge,k as Je,l as Ne,n as Qe,p as We,m as Xe,o as Ye,q as Ze,r as et}from"./index-cfb20c86.js";Ee();Ke();Fe();De();Te();Me();He();$e();Be();Le();Ge();Je();Ne();Qe();We();Xe();Ye();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},d={},Z={},ee={},D={},j={},q={},T={},n={},g={},te={},se={},M={},f={},c={},r={},_={},P={},O={},re={},H={},ae={},$={},B={},ie={},L={},p={},ne={},me={},G={},oe={},J={},ue={},N={},x={},R={},le={},Q={},ce={},W={},ze={},w={},ye={},pe={},l={},fe={},A={},U={},be={},X={},I={},de={},he={},Y={},k={},C={},Oe={},Re={},qe={},we={},Ve={},Ae={},Ue={};Object.assign(d,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:5});Object.assign(Z,{...t,type:1,name:"[8:0]u8",length:8,byteSize:9,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:4});Object.assign(ee,{...t,type:11,name:"*const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:3});Object.assign(D,{...t,type:11,name:"**const [8:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:2});Object.assign(j,{...t,type:1,name:"[16:0]u8",length:16,byteSize:17,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:8});Object.assign(q,{...t,type:11,name:"*const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:j}],methods:[],template:null},slot:7});Object.assign(T,{...t,type:11,name:"**const [16:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:6});Object.assign(n,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:n}],methods:[],template:null},slot:10});Object.assign(g,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:n}],methods:[],template:null},slot:9});Object.assign(te,{...t,type:1,name:"[36:0]u8",length:36,byteSize:37,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:13});Object.assign(se,{...t,type:11,name:"*const [36:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:12});Object.assign(M,{...t,type:11,name:"**const [36:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:11});Object.assign(f,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:33});Object.assign(c,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:c}],methods:[],template:null},slot:52});Object.assign(r,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:c}],methods:[],template:null},slot:51});Object.assign(_,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:55});Object.assign(P,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_}],methods:[],template:null},slot:54});Object.assign(O,{...t,type:11,name:"*const *const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:P}],methods:[],template:null},slot:53});const tt=new Uint8Array([]),st=new Uint8Array([144,30,16,0]),rt=new Uint8Array([0,0,0,0,0,192,102,64]),at=new Uint8Array([112,30,16,0]),Ie=new Uint8Array([0,0,0,0,0,32,111,64]),it=new Uint8Array([136,30,16,0]),nt=new Uint8Array([20,174,71,225,122,148,105,64]),mt=new Uint8Array([128,30,16,0]),ot=new Uint8Array([206,30,16,0]),ut=new Uint8Array([99,101,110,116,101,114,32,112,111,105,110,116,32,120,0]);Object.assign(re,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 182, comptime maxValue: comptime_float = 249, comptime defaultValue: comptime_float = 204.64, comptime description: *const [14:0]u8 = "center point x"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:O}],methods:[],template:{memory:{array:tt},slots:{0:{structure:r,memory:{array:st},slots:{0:{structure:c,memory:{array:rt},address:1056400}}},1:{structure:r,memory:{array:at},slots:{0:{structure:c,memory:{array:Ie},address:1056368}}},2:{structure:r,memory:{array:it},slots:{0:{structure:c,memory:{array:nt},address:1056392}}},3:{structure:O,memory:{array:mt},slots:{0:{structure:P,memory:{array:ot},address:1056384,slots:{0:{structure:_,memory:{array:ut},address:1056462}}}}}}}},slot:39});Object.assign(H,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 182, comptime maxValue: comptime_float = 249, comptime defaultValue: comptime_float = 204.64, comptime description: *const [14:0]u8 = "center point x"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:38});const lt=new Uint8Array([]),ct=new Uint8Array([120,30,16,0]),yt=new Uint8Array([0,0,0,0,0,192,99,64]),pt=new Uint8Array([112,30,16,0]),ft=new Uint8Array([104,30,16,0]),bt=new Uint8Array([133,235,81,184,30,197,102,64]),dt=new Uint8Array([96,30,16,0]),ht=new Uint8Array([191,30,16,0]),gt=new Uint8Array([99,101,110,116,101,114,32,112,111,105,110,116,32,121,0]);Object.assign(ae,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 158, comptime maxValue: comptime_float = 249, comptime defaultValue: comptime_float = 182.16, comptime description: *const [14:0]u8 = "center point y"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:O}],methods:[],template:{memory:{array:lt},slots:{0:{structure:r,memory:{array:ct},slots:{0:{structure:c,memory:{array:yt},address:1056376}}},1:{structure:r,memory:{array:pt},slots:{0:{structure:c,memory:{array:Ie},address:1056368}}},2:{structure:r,memory:{array:ft},slots:{0:{structure:c,memory:{array:bt},address:1056360}}},3:{structure:O,memory:{array:dt},slots:{0:{structure:P,memory:{array:ht},address:1056352,slots:{0:{structure:_,memory:{array:gt},address:1056447}}}}}}}},slot:41});Object.assign($,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 158, comptime maxValue: comptime_float = 249, comptime defaultValue: comptime_float = 182.16, comptime description: *const [14:0]u8 = "center point y"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:40});Object.assign(B,{...t,type:11,name:"*const *const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:56});const St=new Uint8Array([]),zt=new Uint8Array([88,30,16,0]),Ot=new Uint8Array([0,0,0,0,0,0,240,63]),Rt=new Uint8Array([80,30,16,0]),qt=new Uint8Array([0,0,0,0,0,160,159,64]),wt=new Uint8Array([72,30,16,0]),Vt=new Uint8Array([0,0,0,0,0,48,116,64]),At=new Uint8Array([68,30,16,0]),Ut=new Uint8Array([174,30,16,0]),jt=new Uint8Array([115,101,116,32,105,109,97,103,101,32,104,101,105,103,104,116,0]);Object.assign(ie,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 2024, comptime defaultValue: comptime_float = 323, comptime description: *const [16:0]u8 = "set image height"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:B}],methods:[],template:{memory:{array:St},slots:{0:{structure:r,memory:{array:zt},slots:{0:{structure:c,memory:{array:Ot},address:1056344}}},1:{structure:r,memory:{array:Rt},slots:{0:{structure:c,memory:{array:qt},address:1056336}}},2:{structure:r,memory:{array:wt},slots:{0:{structure:c,memory:{array:Vt},address:1056328}}},3:{structure:B,memory:{array:At},slots:{0:{structure:q,memory:{array:Ut},address:1056324,slots:{0:{structure:j,memory:{array:jt},address:1056430}}}}}}}},slot:43});Object.assign(L,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 2024, comptime defaultValue: comptime_float = 323, comptime description: *const [16:0]u8 = "set image height"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:42});Object.assign(p,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:n}],methods:[],template:null},slot:57});Object.assign(ne,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:60});Object.assign(me,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:59});Object.assign(G,{...t,type:11,name:"*const *const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:58});const _t=new Uint8Array([]),Pt=new Uint8Array([64,30,16,0]),xt=new Uint8Array([1,0,0,0]),It=new Uint8Array([60,30,16,0]),kt=new Uint8Array([3,0,0,0]),Ct=new Uint8Array([56,30,16,0]),vt=new Uint8Array([2,0,0,0]),Et=new Uint8Array([52,30,16,0]),Kt=new Uint8Array([152,30,16,0]),Ft=new Uint8Array([99,97,108,99,117,108,97,116,101,32,115,116,114,101,116,99,104,40,101,115,41,0]);Object.assign(oe,{...t,type:2,name:'struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 2, comptime description: *const [21:0]u8 = "calculate stretch(es)"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:n},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:p},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:p},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:p},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:G}],methods:[],template:{memory:{array:_t},slots:{0:{structure:p,memory:{array:Pt},slots:{0:{structure:n,memory:{array:xt},address:1056320}}},1:{structure:p,memory:{array:It},slots:{0:{structure:n,memory:{array:kt},address:1056316}}},2:{structure:p,memory:{array:Ct},slots:{0:{structure:n,memory:{array:vt},address:1056312}}},3:{structure:G,memory:{array:Et},slots:{0:{structure:me,memory:{array:Kt},address:1056308,slots:{0:{structure:ne,memory:{array:Ft},address:1056408}}}}}}}},slot:45});Object.assign(J,{...t,type:11,name:'*const struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 2, comptime description: *const [21:0]u8 = "calculate stretch(es)"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:44});const Dt=new Uint8Array([]),Tt=new Uint8Array([170,170,170,170]),b=new Uint8Array([]),Mt=new Uint8Array([170,170,170,170]),Ht=new Uint8Array([170,170,170,170]),$t=new Uint8Array([170,170,170,170]);Object.assign(ue,{...t,type:2,name:'struct{comptime center_x: struct{comptime type: type = f32, comptime minValue: comptime_float = 182, comptime maxValue: comptime_float = 249, comptime defaultValue: comptime_float = 204.64, comptime description: *const [14:0]u8 = "center point x"} = .{.type = f32, .minValue = 182, .maxValue = 249, .defaultValue = 204.64, .description = "center point x"}, comptime center_y: struct{comptime type: type = f32, comptime minValue: comptime_float = 158, comptime maxValue: comptime_float = 249, comptime defaultValue: comptime_float = 182.16, comptime description: *const [14:0]u8 = "center point y"} = .{.type = f32, .minValue = 158, .maxValue = 249, .defaultValue = 182.16, .description = "center point y"}, comptime imageHeight: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 2024, comptime defaultValue: comptime_float = 323, comptime description: *const [16:0]u8 = "set image height"} = .{.type = f32, .minValue = 1, .maxValue = 2024, .defaultValue = 323, .description = "set image height"}, comptime stretch: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 2, comptime description: *const [21:0]u8 = "calculate stretch(es)"} = .{.type = i32, .minValue = 1, .maxValue = 3, .defaultValue = 2, .description = "calculate stretch(es)"}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"center_x",structure:H},{...e,type:8,isRequired:!1,slot:1,name:"center_y",structure:$},{...e,type:8,isRequired:!1,slot:2,name:"imageHeight",structure:L},{...e,type:8,isRequired:!1,slot:3,name:"stretch",structure:J}],methods:[],template:{memory:{array:Dt},slots:{0:{structure:H,memory:{array:Tt},slots:{0:{structure:re,memory:{array:b},address:-1431655766}}},1:{structure:$,memory:{array:Mt},slots:{0:{structure:ae,memory:{array:b},address:-1431655766}}},2:{structure:L,memory:{array:Ht},slots:{0:{structure:ie,memory:{array:b},address:-1431655766}}},3:{structure:J,memory:{array:$t},slots:{0:{structure:oe,memory:{array:b},address:-1431655766}}}}}},slot:15});Object.assign(N,{...t,type:11,name:'*struct{comptime center_x: struct{comptime type: type = f32, comptime minValue: comptime_float = 182, comptime maxValue: comptime_float = 249, comptime defaultValue: comptime_float = 204.64, comptime description: *const [14:0]u8 = "center point x"} = .{.type = f32, .minValue = 182, .maxValue = 249, .defaultValue = 204.64, .description = "center point x"}, comptime center_y: struct{comptime type: type = f32, comptime minValue: comptime_float = 158, comptime maxValue: comptime_float = 249, comptime defaultValue: comptime_float = 182.16, comptime description: *const [14:0]u8 = "center point y"} = .{.type = f32, .minValue = 158, .maxValue = 249, .defaultValue = 182.16, .description = "center point y"}, comptime imageHeight: struct{comptime type: type = f32, comptime minValue: comptime_float = 1, comptime maxValue: comptime_float = 2024, comptime defaultValue: comptime_float = 323, comptime description: *const [16:0]u8 = "set image height"} = .{.type = f32, .minValue = 1, .maxValue = 2024, .defaultValue = 323, .description = "set image height"}, comptime stretch: struct{comptime type: type = i32, comptime minValue: comptime_int = 1, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 2, comptime description: *const [21:0]u8 = "calculate stretch(es)"} = .{.type = i32, .minValue = 1, .maxValue = 3, .defaultValue = 2, .description = "calculate stretch(es)"}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:14});const Bt=new Uint8Array([]),Lt=new Uint8Array([48,30,16,0]),Gt=new Uint8Array([4,0,0,0]);Object.assign(x,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:Bt},slots:{0:{structure:p,memory:{array:Lt},slots:{0:{structure:n,memory:{array:Gt},address:1056304}}}}}},slot:47});Object.assign(R,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:x}],methods:[],template:null},slot:46});const Jt=new Uint8Array([]),Nt=new Uint8Array([170,170,170,170]);Object.assign(le,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:R}],methods:[],template:{memory:{array:Jt},slots:{0:{structure:R,memory:{array:Nt},slots:{0:{structure:x,memory:{array:b},address:-1431655766}}}}}},slot:17});Object.assign(Q,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:16});const Qt=new Uint8Array([]),Wt=new Uint8Array([170,170,170,170]);Object.assign(ce,{...t,type:2,name:"struct{comptime pxl: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"pxl",structure:R}],methods:[],template:{memory:{array:Qt},slots:{0:{structure:R,memory:{array:Wt},slots:{0:{structure:x,memory:{array:b},address:-1431655766}}}}}},slot:19});Object.assign(W,{...t,type:11,name:"*struct{comptime pxl: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:18});const Xt=new Uint8Array([]),Yt=new Uint8Array([]),Zt=new Uint8Array([68,253,15,0]),es=new Uint8Array([232,56,16,0]),ts=new Uint8Array([100,101,102,111,114,109,101,114,0]),ss=new Uint8Array([100,253,15,0]),rs=new Uint8Array([59,57,16,0]),as=new Uint8Array([70,114,97,110,107,32,82,101,105,116,98,101,114,103,101,114,0]),is=new Uint8Array([132,253,15,0]),ns=new Uint8Array([1,0,0,0]),ms=new Uint8Array([188,253,15,0]),os=new Uint8Array([22,57,16,0]),us=new Uint8Array([100,101,102,111,114,109,115,32,119,104,97,116,101,118,101,114,32,103,101,116,239,191,189,115,32,105,110,32,116,104,101,32,119,97,121,46,0]),ls=new Uint8Array([170,170,170,170]),cs=new Uint8Array([170,170,170,170]),ys=new Uint8Array([170,170,170,170]);Object.assign(ze,{...t,type:2,name:"deformer.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Xt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:D},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:T},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:g},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:M},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:N},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:Q},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:W}],methods:[],template:{memory:{array:Yt},slots:{0:{structure:D,memory:{array:Zt},slots:{0:{structure:ee,memory:{array:es},slots:{0:{structure:Z,memory:{array:ts},address:1063144}}}}},1:{structure:T,memory:{array:ss},slots:{0:{structure:q,memory:{array:rs},slots:{0:{structure:j,memory:{array:as},address:1063227}}}}},2:{structure:g,memory:{array:is},slots:{0:{structure:n,memory:{array:ns}}}},3:{structure:M,memory:{array:ms},slots:{0:{structure:se,memory:{array:os},slots:{0:{structure:te,memory:{array:us},address:1063190}}}}},4:{structure:N,memory:{array:ls},slots:{0:{structure:ue,memory:{array:b},address:-1431655766}}},5:{structure:Q,memory:{array:cs},slots:{0:{structure:le,memory:{array:b},address:-1431655766}}},6:{structure:W,memory:{array:ys},slots:{0:{structure:ce,memory:{array:b},address:-1431655766}}}}}},slot:1});Object.assign(w,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:d}],methods:[],template:null},slot:24});Object.assign(ye,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(pe,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ye}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const ps=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(fe,{...t,type:9,name:"deformer.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:n},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:n}],methods:[],template:{memory:{array:ps}}},slot:26});Object.assign(A,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:A}],methods:[],template:null},slot:27});Object.assign(U,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:U}],methods:[],template:null},slot:28});Object.assign(be,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:48});const fs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),bs=new Uint8Array([]),ds=new Uint8Array([248,251,15,0]),hs=new Uint8Array([4,0,0,0]);Object.assign(X,{...t,type:2,name:"deformer.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:pe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:fe},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:A},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:U}],methods:[],template:{memory:{array:fs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:be},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:g}],methods:[],template:{memory:{array:bs},slots:{0:{structure:g,memory:{array:ds},slots:{0:{structure:n,memory:{array:hs}}}}}}},slot:21});const gs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ss=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),zs=new Uint8Array([0,0,0,0,0,0,0,0]),je=new Uint8Array([]);Object.assign(I,{...t,type:2,name:"deformer.KernelInput(u8,deformer.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:X}],methods:[],template:{memory:{array:gs},slots:{0:{structure:X,memory:{array:Ss},slots:{0:{structure:pe,memory:{array:zs},slots:{0:{structure:ye,memory:{array:je}}}}}}}}},slot:20});Object.assign(de,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(he,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:de}],methods:[],template:null},slot:31});const Os=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Rs=new Uint8Array([]),qs=new Uint8Array([248,251,15,0]),ws=new Uint8Array([4,0,0,0]);Object.assign(Y,{...t,type:2,name:"deformer.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:he},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:fe},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:A},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:U}],methods:[],template:{memory:{array:Os}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:be},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:g}],methods:[],template:{memory:{array:Rs},slots:{0:{structure:g,memory:{array:qs},slots:{0:{structure:n,memory:{array:ws}}}}}}},slot:30});const Vs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),As=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Us=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(k,{...t,type:2,name:"deformer.KernelOutput(u8,deformer.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"pxl",structure:Y}],methods:[],template:{memory:{array:Vs},slots:{0:{structure:Y,memory:{array:As},slots:{0:{structure:he,memory:{array:Us},slots:{0:{structure:de,memory:{array:je}}}}}}}}},slot:29});const js=new Uint8Array([215,163,76,67,246,40,54,67,0,128,161,67,2,0,0,0]);Object.assign(C,{...t,type:2,name:"deformer.KernelParameters(deformer.kernel)",length:1,byteSize:16,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"center_x",structure:f},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"center_y",structure:f},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"imageHeight",structure:f},{...e,type:2,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"stretch",structure:n}],methods:[],template:{memory:{array:js}}},slot:32});Object.assign(Oe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(deformer.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:49});Object.assign(Re,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(deformer.createOutput)).Fn.return_type.?).ErrorUnion.error_set!deformer.KernelOutput(u8,deformer.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Oe}],methods:[],template:null},slot:36});Object.assign(qe,{...t,type:3,name:"createOutput",length:1,byteSize:76,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:I},{...e,type:6,bitOffset:256,bitSize:128,byteSize:16,slot:3,name:"3",structure:C},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Re}],methods:[],template:null},slot:34});Object.assign(we,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(deformer.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:50});Object.assign(Ve,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(deformer.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!deformer.KernelOutput(u8,deformer.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:we}],methods:[],template:null},slot:37});Object.assign(Ae,{...t,type:3,name:"createPartialOutput",length:1,byteSize:84,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:I},{...e,type:6,bitOffset:320,bitSize:128,byteSize:16,slot:5,name:"5",structure:C},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Ve}],methods:[],template:null},slot:35});const _s={argStruct:qe,thunk:3,name:"createOutput"},Ps={argStruct:Ae,thunk:7,name:"createPartialOutput"};Object.assign(Ue,{...t,type:2,name:"deformer",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:je}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ze},{...e,type:7,isRequired:!1,name:"Input",structure:I},{...e,type:7,isRequired:!1,name:"Output",structure:k},{...e,type:7,isRequired:!1,name:"Parameters",structure:C}],methods:[_s,Ps],template:null},slot:0});const xs=[d,Z,ee,D,j,q,T,n,g,te,se,M,f,c,r,_,P,O,re,H,ae,$,B,ie,L,p,ne,me,G,oe,J,ue,N,x,R,le,Q,ce,W,ze,w,ye,pe,l,fe,A,U,be,X,I,de,he,Y,k,C,Oe,Re,qe,we,Ve,Ae,Ue],Is=Ze(xs),ks=Ue.constructor,Cs=(async()=>{const m=new URL("deformer-637b527a.wasm",import.meta.url).href;return fetch(m)})();et(Cs,{...Is,writeBack:!0});const{createOutput:Hs,createPartialOutput:vs,kernel:Se,Input:Es,Output:$s,Parameters:Bs}=ks;function Ks(m,u,a,s,i={},S={}){if(Array.isArray(i)){const h=i;i={};for(const[y,z]of Object.keys(Se.inputImages).entries())i[z]=h[y]}const v=new Es(void 0),E=Object.keys(Se.inputImages),o=[];let V;for(const h of E){let y=i[h];if(y||(E.length===1&&["data","width","height"].every(z=>!!i[z])?y=i:o.push(h)),v[h]=y,V){if(y.colorSpace!==V)throw new Error(`Input images must all use the same color space: ${V}`)}else V=y.colorSpace}if(o.length>0)throw new Error(`Missing input image${o.length>1?"s":""}: ${o.join(", ")}`);const ge=vs(m,u,a,s,v,S),_e=h=>{const y=Object.keys(h),z={};for(const Pe of y){const{data:{typedArray:K},width:xe,height:Ce}=h[Pe];let F;if(typeof ImageData=="function"){const ve=new Uint8ClampedArray(K.buffer,K.byteOffset,K.byteLength);F=new ImageData(ve,xe,s,{colorSpace:V})}else F={data:K,width:xe,height:Ce};if(y.length===1)return F;z[Pe]=F}return z};return ge[Symbol.toStringTag]==="Promise"?ge.then(_e):_e(ge)}function Fs(){const m={};for(let[u,a]of Object.entries(Se)){if(u==="parameters"){const s={};for(const[i,S]of Object.entries(a)){const v=s[i]={};for(let[E,o]of Object.entries(S))typeof o=="object"?"string"in o?o=o.string:o=ke(o):typeof o=="function"&&(o=Ds(o.name)),v[E]=o}a=s}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());m[u]=a}return m}function ke(m){const u=[];for(let[a,s]of Object.entries(m))typeof s=="object"&&(s=ke(s)),u[a]=s;return u}function Ds(m){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[m]}onmessage=m=>{const[u,a,...s]=m.data;Ts(u,s).then(([i,S])=>{postMessage([u,a,i],{transfer:S})}).catch(i=>{postMessage(["error",a,i])})};async function Ts(m,u){switch(m){case"getKernelInfo":return[Fs(...u)];case"createPartialImageData":const s=await Ks(...u),i=[];if("data"in s&&"width"in s&&"height"in s)i.push(s.data.buffer);else for(const S of Object.entries(s))i.push(s.data.buffer);return[s,i];default:throw new Error(`Unknown function: ${m}`)}}
