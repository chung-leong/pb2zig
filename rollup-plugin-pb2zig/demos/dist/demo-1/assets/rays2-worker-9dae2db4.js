import{u as Ee,a as Ke,b as Fe,d as De,c as Te,e as Me,f as $e,g as Be,h as Le,i as Ge,j as He,k as Je,l as Ne,n as Qe,p as We,m as Xe,o as Ye,q as Ze,r as et}from"./index-cfb20c86.js";Ee();Ke();Fe();De();Te();Me();$e();Be();Le();Ge();He();Je();Ne();Qe();We();Xe();Ye();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},S={},X={},Y={},F={},Z={},ee={},D={},l={},h={},te={},se={},T={},_={},d={},p={},o={},U={},O={},R={},b={},re={},M={},ae={},$={},ie={},B={},me={},L={},ne={},G={},H={},P={},q={},oe={},J={},ue={},N={},Se={},w={},ce={},le={},c={},ye={},j={},A={},pe={},Q={},I={},fe={},be={},W={},k={},x={},ge={},ze={},Oe={},Re={},qe={},we={},Ve={};Object.assign(S,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:5});Object.assign(X,{...t,type:1,name:"[6:0]u8",length:6,byteSize:7,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:4});Object.assign(Y,{...t,type:11,name:"*const [6:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:3});Object.assign(F,{...t,type:11,name:"**const [6:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:2});Object.assign(Z,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:8});Object.assign(ee,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:7});Object.assign(D,{...t,type:11,name:"**const [7:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:6});Object.assign(l,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:10});Object.assign(h,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:l}],methods:[],template:null},slot:9});Object.assign(te,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:13});Object.assign(se,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:12});Object.assign(T,{...t,type:11,name:"**const [13:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:11});Object.assign(_,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:_}],methods:[],template:null},slot:47});Object.assign(d,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:_}],methods:[],template:null},slot:33});Object.assign(p,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:p}],methods:[],template:null},slot:58});Object.assign(o,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:57});const tt=new Uint8Array([]),st=new Uint8Array([96,30,16,0]),Pe=new Uint8Array([0,0,0,0,0,0,0,0]),rt=new Uint8Array([96,30,16,0]);Object.assign(U,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:o}],methods:[],template:{memory:{array:tt},slots:{0:{structure:o,memory:{array:st},slots:{0:{structure:p,memory:{array:Pe},address:1056352}}},1:{structure:o,memory:{array:rt},slots:{0:{structure:p,memory:{array:Pe},address:1056352}}}}}},slot:51});Object.assign(O,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:U}],methods:[],template:null},slot:50});const at=new Uint8Array([]),it=new Uint8Array([88,30,16,0]),Ie=new Uint8Array([0,0,0,0,0,0,128,64]),mt=new Uint8Array([88,30,16,0]);Object.assign(R,{...t,type:2,name:"struct{comptime comptime_float = 512, comptime comptime_float = 512}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:o}],methods:[],template:{memory:{array:at},slots:{0:{structure:o,memory:{array:it},slots:{0:{structure:p,memory:{array:Ie},address:1056344}}},1:{structure:o,memory:{array:mt},slots:{0:{structure:p,memory:{array:Ie},address:1056344}}}}}},slot:53});Object.assign(b,{...t,type:11,name:"*const struct{comptime comptime_float = 512, comptime comptime_float = 512}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:52});const nt=new Uint8Array([]),ot=new Uint8Array([170,170,170,170]),u=new Uint8Array([]),ut=new Uint8Array([170,170,170,170]),ct=new Uint8Array([170,170,170,170]);Object.assign(re,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 512, comptime comptime_float = 512} = .{512, 512}, comptime defaultValue: struct{comptime comptime_float = 512, comptime comptime_float = 512} = .{512, 512}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:O},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:b},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:b}],methods:[],template:{memory:{array:nt},slots:{0:{structure:O,memory:{array:ot},slots:{0:{structure:U,memory:{array:u},address:-1431655766}}},1:{structure:b,memory:{array:ut},slots:{0:{structure:R,memory:{array:u},address:-1431655766}}},2:{structure:b,memory:{array:ct},slots:{0:{structure:R,memory:{array:u},address:-1431655766}}}}}},slot:39});Object.assign(M,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 512, comptime comptime_float = 512} = .{512, 512}, comptime defaultValue: struct{comptime comptime_float = 512, comptime comptime_float = 512} = .{512, 512}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:38});const lt=new Uint8Array([]),yt=new Uint8Array([80,30,16,0]),ke=new Uint8Array([0,0,0,0,0,0,112,64]),pt=new Uint8Array([80,30,16,0]);Object.assign(ae,{...t,type:2,name:"struct{comptime comptime_float = 256, comptime comptime_float = 256}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:o},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:o}],methods:[],template:{memory:{array:lt},slots:{0:{structure:o,memory:{array:yt},slots:{0:{structure:p,memory:{array:ke},address:1056336}}},1:{structure:o,memory:{array:pt},slots:{0:{structure:p,memory:{array:ke},address:1056336}}}}}},slot:55});Object.assign($,{...t,type:11,name:"*const struct{comptime comptime_float = 256, comptime comptime_float = 256}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:54});const ft=new Uint8Array([]),bt=new Uint8Array([170,170,170,170]),dt=new Uint8Array([170,170,170,170]),ht=new Uint8Array([170,170,170,170]);Object.assign(ie,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 512, comptime comptime_float = 512} = .{512, 512}, comptime defaultValue: struct{comptime comptime_float = 256, comptime comptime_float = 256} = .{256, 256}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:O},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:b},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:$}],methods:[],template:{memory:{array:ft},slots:{0:{structure:O,memory:{array:bt},slots:{0:{structure:U,memory:{array:u},address:-1431655766}}},1:{structure:b,memory:{array:dt},slots:{0:{structure:R,memory:{array:u},address:-1431655766}}},2:{structure:$,memory:{array:ht},slots:{0:{structure:ae,memory:{array:u},address:-1431655766}}}}}},slot:41});Object.assign(B,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 512, comptime comptime_float = 512} = .{512, 512}, comptime defaultValue: struct{comptime comptime_float = 256, comptime comptime_float = 256} = .{256, 256}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:40});const St=new Uint8Array([]);Object.assign(me,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32)}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d}],methods:[],template:{memory:{array:St}}},slot:43});Object.assign(L,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32)}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:42});const gt=new Uint8Array([]),zt=new Uint8Array([170,170,170,170]),Ot=new Uint8Array([170,170,170,170]),Rt=new Uint8Array([170,170,170,170]);Object.assign(ne,{...t,type:2,name:"struct{comptime imgSize: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 512, comptime comptime_float = 512} = .{512, 512}, comptime defaultValue: struct{comptime comptime_float = 512, comptime comptime_float = 512} = .{512, 512}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{512, 512}, .defaultValue = .{512, 512}}, comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 512, comptime comptime_float = 512} = .{512, 512}, comptime defaultValue: struct{comptime comptime_float = 256, comptime comptime_float = 256} = .{256, 256}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{512, 512}, .defaultValue = .{256, 256}}, comptime offset: struct{comptime type: type = @Vector(2, f32)} = .{.type = @Vector(2, f32)}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"imgSize",structure:M},{...e,type:8,isRequired:!1,slot:1,name:"center",structure:B},{...e,type:8,isRequired:!1,slot:2,name:"offset",structure:L}],methods:[],template:{memory:{array:gt},slots:{0:{structure:M,memory:{array:zt},slots:{0:{structure:re,memory:{array:u},address:-1431655766}}},1:{structure:B,memory:{array:Ot},slots:{0:{structure:ie,memory:{array:u},address:-1431655766}}},2:{structure:L,memory:{array:Rt},slots:{0:{structure:me,memory:{array:u},address:-1431655766}}}}}},slot:15});Object.assign(G,{...t,type:11,name:"*struct{comptime imgSize: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 512, comptime comptime_float = 512} = .{512, 512}, comptime defaultValue: struct{comptime comptime_float = 512, comptime comptime_float = 512} = .{512, 512}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{512, 512}, .defaultValue = .{512, 512}}, comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 512, comptime comptime_float = 512} = .{512, 512}, comptime defaultValue: struct{comptime comptime_float = 256, comptime comptime_float = 256} = .{256, 256}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{512, 512}, .defaultValue = .{256, 256}}, comptime offset: struct{comptime type: type = @Vector(2, f32)} = .{.type = @Vector(2, f32)}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:14});Object.assign(H,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:l}],methods:[],template:null},slot:56});const qt=new Uint8Array([]),wt=new Uint8Array([104,30,16,0]),Vt=new Uint8Array([4,0,0,0]);Object.assign(P,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:H}],methods:[],template:{memory:{array:qt},slots:{0:{structure:H,memory:{array:wt},slots:{0:{structure:l,memory:{array:Vt},address:1056360}}}}}},slot:45});Object.assign(q,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:P}],methods:[],template:null},slot:44});const _t=new Uint8Array([]),jt=new Uint8Array([170,170,170,170]);Object.assign(oe,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:q}],methods:[],template:{memory:{array:_t},slots:{0:{structure:q,memory:{array:jt},slots:{0:{structure:P,memory:{array:u},address:-1431655766}}}}}},slot:17});Object.assign(J,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:16});const At=new Uint8Array([]),Ut=new Uint8Array([170,170,170,170]);Object.assign(ue,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:q}],methods:[],template:{memory:{array:At},slots:{0:{structure:q,memory:{array:Ut},slots:{0:{structure:P,memory:{array:u},address:-1431655766}}}}}},slot:19});Object.assign(N,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:18});const Pt=new Uint8Array([]),It=new Uint8Array([]),kt=new Uint8Array([36,249,15,0]),xt=new Uint8Array([92,53,16,0]),Ct=new Uint8Array([82,97,121,115,32,50,0]),vt=new Uint8Array([100,249,15,0]),Et=new Uint8Array([84,53,16,0]),Kt=new Uint8Array([77,114,46,100,111,111,98,0]),Ft=new Uint8Array([164,249,15,0]),Dt=new Uint8Array([1,0,0,0]),Tt=new Uint8Array([252,249,15,0]),Mt=new Uint8Array([70,53,16,0]),$t=new Uint8Array([82,97,121,115,32,101,102,102,101,99,116,32,50,0]),Bt=new Uint8Array([170,170,170,170]),Lt=new Uint8Array([170,170,170,170]),Gt=new Uint8Array([170,170,170,170]);Object.assign(Se,{...t,type:2,name:"rays2.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Pt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:F},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:D},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:h},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:T},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:G},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:J},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:N}],methods:[],template:{memory:{array:It},slots:{0:{structure:F,memory:{array:kt},slots:{0:{structure:Y,memory:{array:xt},slots:{0:{structure:X,memory:{array:Ct},address:1062236}}}}},1:{structure:D,memory:{array:vt},slots:{0:{structure:ee,memory:{array:Et},slots:{0:{structure:Z,memory:{array:Kt},address:1062228}}}}},2:{structure:h,memory:{array:Ft},slots:{0:{structure:l,memory:{array:Dt}}}},3:{structure:T,memory:{array:Tt},slots:{0:{structure:se,memory:{array:Mt},slots:{0:{structure:te,memory:{array:$t},address:1062214}}}}},4:{structure:G,memory:{array:Bt},slots:{0:{structure:ne,memory:{array:u},address:-1431655766}}},5:{structure:J,memory:{array:Lt},slots:{0:{structure:oe,memory:{array:u},address:-1431655766}}},6:{structure:N,memory:{array:Gt},slots:{0:{structure:ue,memory:{array:u},address:-1431655766}}}}}},slot:1});Object.assign(w,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:24});Object.assign(ce,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(le,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ce}],methods:[],template:null},slot:22});Object.assign(c,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:25});const Ht=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ye,{...t,type:9,name:"rays2.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:l},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:l}],methods:[],template:{memory:{array:Ht}}},slot:26});Object.assign(j,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:j}],methods:[],template:null},slot:27});Object.assign(A,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:28});Object.assign(pe,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:_}],methods:[],template:null},slot:46});const Jt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Nt=new Uint8Array([]),Qt=new Uint8Array([104,253,15,0]),Wt=new Uint8Array([4,0,0,0]);Object.assign(Q,{...t,type:2,name:"rays2.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:le},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ye},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:j},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:A}],methods:[],template:{memory:{array:Jt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:pe},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:Nt},slots:{0:{structure:h,memory:{array:Qt},slots:{0:{structure:l,memory:{array:Wt}}}}}}},slot:21});const Xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Yt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Zt=new Uint8Array([0,0,0,0,0,0,0,0]),_e=new Uint8Array([]);Object.assign(I,{...t,type:2,name:"rays2.KernelInput(u8,rays2.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:Q}],methods:[],template:{memory:{array:Xt},slots:{0:{structure:Q,memory:{array:Yt},slots:{0:{structure:le,memory:{array:Zt},slots:{0:{structure:ce,memory:{array:_e}}}}}}}}},slot:20});Object.assign(fe,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(be,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:fe}],methods:[],template:null},slot:31});const es=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ts=new Uint8Array([]),ss=new Uint8Array([104,253,15,0]),rs=new Uint8Array([4,0,0,0]);Object.assign(W,{...t,type:2,name:"rays2.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:be},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ye},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:j},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:A}],methods:[],template:{memory:{array:es}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:pe},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:ts},slots:{0:{structure:h,memory:{array:ss},slots:{0:{structure:l,memory:{array:rs}}}}}}},slot:30});const as=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),is=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ms=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(k,{...t,type:2,name:"rays2.KernelOutput(u8,rays2.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:W}],methods:[],template:{memory:{array:as},slots:{0:{structure:W,memory:{array:is},slots:{0:{structure:be,memory:{array:ms},slots:{0:{structure:fe,memory:{array:_e}}}}}}}}},slot:29});const ns=new Uint8Array([0,0,0,68,0,0,0,68,0,0,128,67,0,0,128,67,0,0,0,0,0,0,0,0]);Object.assign(x,{...t,type:2,name:"rays2.KernelParameters(rays2.kernel)",length:1,byteSize:24,align:3,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"imgSize",structure:d},{...e,type:6,isRequired:!1,bitOffset:64,bitSize:64,byteSize:8,slot:1,name:"center",structure:d},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:64,byteSize:8,slot:2,name:"offset",structure:d}],methods:[],template:{memory:{array:ns}}},slot:32});Object.assign(ge,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(rays2.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(ze,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(rays2.createOutput)).Fn.return_type.?).ErrorUnion.error_set!rays2.KernelOutput(u8,rays2.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ge}],methods:[],template:null},slot:36});Object.assign(Oe,{...t,type:3,name:"createOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:c},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:c},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:2,name:"2",structure:I},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:3,name:"3",structure:x},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ze}],methods:[],template:null},slot:34});Object.assign(Re,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(rays2.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:49});Object.assign(qe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(rays2.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!rays2.KernelOutput(u8,rays2.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Re}],methods:[],template:null},slot:37});Object.assign(we,{...t,type:3,name:"createPartialOutput",length:1,byteSize:96,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:c},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:c},{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:2,name:"2",structure:c},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:3,name:"3",structure:c},{...e,type:6,bitOffset:320,bitSize:192,byteSize:24,slot:4,name:"4",structure:I},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:5,name:"5",structure:x},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:6,name:"retval",structure:qe}],methods:[],template:null},slot:35});const os={argStruct:Oe,thunk:8,name:"createOutput"},us={argStruct:we,thunk:2,name:"createPartialOutput"};Object.assign(Ve,{...t,type:2,name:"rays2",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:_e}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:Se},{...e,type:7,isRequired:!1,name:"Input",structure:I},{...e,type:7,isRequired:!1,name:"Output",structure:k},{...e,type:7,isRequired:!1,name:"Parameters",structure:x}],methods:[os,us],template:null},slot:0});const cs=[S,X,Y,F,Z,ee,D,l,h,te,se,T,_,d,p,o,U,O,R,b,re,M,ae,$,ie,B,me,L,ne,G,H,P,q,oe,J,ue,N,Se,w,ce,le,c,ye,j,A,pe,Q,I,fe,be,W,k,x,ge,ze,Oe,Re,qe,we,Ve],ls=Ze(cs),ys=Ve.constructor,ps=(async()=>{const i=new URL("rays2-8d410e6a.wasm",import.meta.url).href;return fetch(i)})();et(ps,{...ls,writeBack:!0});const{createOutput:Os,createPartialOutput:fs,kernel:he,Input:bs,Output:Rs,Parameters:qs}=ys;function ds(i,n,r,s,a={},g={}){if(Array.isArray(a)){const f=a;a={};for(const[y,z]of Object.keys(he.inputImages).entries())a[z]=f[y]}const C=new bs(void 0),v=Object.keys(he.inputImages),m=[];let V;for(const f of v){let y=a[f];if(y||(v.length===1&&["data","width","height"].every(z=>!!a[z])?y=a:m.push(f)),C[f]=y,V){if(y.colorSpace!==V)throw new Error(`Input images must all use the same color space: ${V}`)}else V=y.colorSpace}if(m.length>0)throw new Error(`Missing input image${m.length>1?"s":""}: ${m.join(", ")}`);const de=fs(i,n,r,s,C,g),je=f=>{const y=Object.keys(f),z={};for(const Ae of y){const{data:{typedArray:E},width:Ue,height:Ce}=f[Ae];let K;if(typeof ImageData=="function"){const ve=new Uint8ClampedArray(E.buffer,E.byteOffset,E.byteLength);K=new ImageData(ve,Ue,s,{colorSpace:V})}else K={data:E,width:Ue,height:Ce};if(y.length===1)return K;z[Ae]=K}return z};return de[Symbol.toStringTag]==="Promise"?de.then(je):je(de)}function hs(){const i={};for(let[n,r]of Object.entries(he)){if(n==="parameters"){const s={};for(const[a,g]of Object.entries(r)){const C=s[a]={};for(let[v,m]of Object.entries(g))typeof m=="object"?"string"in m?m=m.string:m=xe(m):typeof m=="function"&&(m=Ss(m.name)),C[v]=m}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());i[n]=r}return i}function xe(i){const n=[];for(let[r,s]of Object.entries(i))typeof s=="object"&&(s=xe(s)),n[r]=s;return n}function Ss(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[n,r,...s]=i.data;gs(n,s).then(([a,g])=>{postMessage([n,r,a],{transfer:g})}).catch(a=>{postMessage(["error",r,a])})};async function gs(i,n){switch(i){case"getKernelInfo":return[hs(...n)];case"createPartialImageData":const s=await ds(...n),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const g of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${i}`)}}
