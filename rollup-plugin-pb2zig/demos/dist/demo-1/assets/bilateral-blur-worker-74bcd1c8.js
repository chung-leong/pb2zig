import{u as ke,a as xe,b as Ce,c as ve,d as Ge,e as Ee,f as Ke,g as Fe,h as De,i as Te,j as Me,k as $e,l as Be,n as Le,p as He,m as Je,o as Ne,q as Qe,r as We}from"./index-cfb20c86.js";ke();xe();Ce();ve();Ge();Ee();Ke();Fe();De();Te();Me();$e();Be();Le();He();Je();Ne();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},p={},H={},J={},x={},N={},Q={},C={},m={},f={},W={},X={},v={},d={},y={},u={},Y={},Z={},G={},ee={},E={},te={},se={},K={},re={},F={},ae={},D={},T={},A={},z={},ie={},M={},ne={},$={},fe={},O={},oe={},ue={},l={},le={},R={},q={},me={},B={},j={},ce={},ye={},L={},U={},V={},de={},he={},Se={},ge={},ze={},Oe={},we={};Object.assign(p,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:5});Object.assign(H,{...t,type:1,name:"[22:0]u8",length:22,byteSize:23,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:4});Object.assign(J,{...t,type:11,name:"*const [22:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:3});Object.assign(x,{...t,type:11,name:"**const [22:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:2});Object.assign(N,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:8});Object.assign(Q,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:7});Object.assign(C,{...t,type:11,name:"**const [7:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:6});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:10});Object.assign(f,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:9});Object.assign(W,{...t,type:1,name:"[15:0]u8",length:15,byteSize:16,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:13});Object.assign(X,{...t,type:11,name:"*const [15:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:12});Object.assign(v,{...t,type:11,name:"**const [15:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:11});Object.assign(d,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:d}],methods:[],template:null},slot:33});Object.assign(y,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:y}],methods:[],template:null},slot:48});Object.assign(u,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:47});Object.assign(Y,{...t,type:1,name:"[54:0]u8",length:54,byteSize:55,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:51});Object.assign(Z,{...t,type:11,name:"*const [54:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:50});Object.assign(G,{...t,type:11,name:"*const *const [54:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:49});const Xe=new Uint8Array([]),Ye=new Uint8Array([72,30,16,0]),Ue=new Uint8Array([252,169,241,210,77,98,80,63]),Ze=new Uint8Array([64,30,16,0]),Ve=new Uint8Array([0,0,0,0,0,0,36,64]),et=new Uint8Array([88,30,16,0]),tt=new Uint8Array([0,0,0,0,0,0,0,64]),st=new Uint8Array([80,30,16,0]),rt=new Uint8Array([173,30,16,0]),at=new Uint8Array([65,102,102,97,99,116,115,32,116,104,101,32,71,97,117,115,115,105,97,110,32,102,117,110,99,116,105,111,110,32,119,104,105,99,104,32,98,97,115,101,100,32,111,110,32,100,105,115,116,97,110,99,101,46,0]);Object.assign(ee,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0.001, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 2, comptime description: *const [54:0]u8 = "Affacts the Gaussian function which based on distance."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:u},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:u},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:u},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:G}],methods:[],template:{memory:{array:Xe},slots:{0:{structure:u,memory:{array:Ye},slots:{0:{structure:y,memory:{array:Ue},address:1056328}}},1:{structure:u,memory:{array:Ze},slots:{0:{structure:y,memory:{array:Ve},address:1056320}}},2:{structure:u,memory:{array:et},slots:{0:{structure:y,memory:{array:tt},address:1056344}}},3:{structure:G,memory:{array:st},slots:{0:{structure:Z,memory:{array:rt},address:1056336,slots:{0:{structure:Y,memory:{array:at},address:1056429}}}}}}}},slot:39});Object.assign(E,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.001, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 2, comptime description: *const [54:0]u8 = "Affacts the Gaussian function which based on distance."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:38});Object.assign(te,{...t,type:1,name:"[76:0]u8",length:76,byteSize:77,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:54});Object.assign(se,{...t,type:11,name:"*const [76:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:53});Object.assign(K,{...t,type:11,name:"*const *const [76:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:52});const it=new Uint8Array([]),nt=new Uint8Array([72,30,16,0]),ot=new Uint8Array([64,30,16,0]),ut=new Uint8Array([56,30,16,0]),lt=new Uint8Array([51,51,51,51,51,51,219,63]),mt=new Uint8Array([52,30,16,0]),ct=new Uint8Array([96,30,16,0]),yt=new Uint8Array([65,102,102,101,99,116,115,32,116,104,101,32,71,97,117,115,115,105,97,110,32,102,117,110,99,116,105,111,110,32,119,104,105,99,104,32,98,97,115,101,100,32,111,110,32,99,111,108,111,114,32,99,104,97,110,110,101,108,115,40,105,110,99,108,117,100,105,110,103,32,97,108,112,104,97,41,0]);Object.assign(re,{...t,type:2,name:'struct{comptime type: type = f32, comptime minValue: comptime_float = 0.001, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 0.425, comptime description: *const [76:0]u8 = "Affects the Gaussian function which based on color channels(including alpha)"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:u},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:u},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:u},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:K}],methods:[],template:{memory:{array:it},slots:{0:{structure:u,memory:{array:nt},slots:{0:{structure:y,memory:{array:Ue},address:1056328}}},1:{structure:u,memory:{array:ot},slots:{0:{structure:y,memory:{array:Ve},address:1056320}}},2:{structure:u,memory:{array:ut},slots:{0:{structure:y,memory:{array:lt},address:1056312}}},3:{structure:K,memory:{array:mt},slots:{0:{structure:se,memory:{array:ct},address:1056308,slots:{0:{structure:te,memory:{array:yt},address:1056352}}}}}}}},slot:41});Object.assign(F,{...t,type:11,name:'*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.001, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 0.425, comptime description: *const [76:0]u8 = "Affects the Gaussian function which based on color channels(including alpha)"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:40});const pt=new Uint8Array([]),bt=new Uint8Array([170,170,170,170]),h=new Uint8Array([]),ft=new Uint8Array([170,170,170,170]);Object.assign(ae,{...t,type:2,name:'struct{comptime d: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.001, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 2, comptime description: *const [54:0]u8 = "Affacts the Gaussian function which based on distance."} = .{.type = f32, .minValue = 0.001, .maxValue = 10, .defaultValue = 2, .description = "Affacts the Gaussian function which based on distance."}, comptime r: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.001, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 0.425, comptime description: *const [76:0]u8 = "Affects the Gaussian function which based on color channels(including alpha)"} = .{.type = f32, .minValue = 0.001, .maxValue = 10, .defaultValue = 0.425, .description = "Affects the Gaussian function which based on color channels(including alpha)"}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"d",structure:E},{...e,type:8,isRequired:!1,slot:1,name:"r",structure:F}],methods:[],template:{memory:{array:pt},slots:{0:{structure:E,memory:{array:bt},slots:{0:{structure:ee,memory:{array:h},address:-1431655766}}},1:{structure:F,memory:{array:ft},slots:{0:{structure:re,memory:{array:h},address:-1431655766}}}}}},slot:15});Object.assign(D,{...t,type:11,name:'*struct{comptime d: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.001, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 2, comptime description: *const [54:0]u8 = "Affacts the Gaussian function which based on distance."} = .{.type = f32, .minValue = 0.001, .maxValue = 10, .defaultValue = 2, .description = "Affacts the Gaussian function which based on distance."}, comptime r: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.001, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 0.425, comptime description: *const [76:0]u8 = "Affects the Gaussian function which based on color channels(including alpha)"} = .{.type = f32, .minValue = 0.001, .maxValue = 10, .defaultValue = 0.425, .description = "Affects the Gaussian function which based on color channels(including alpha)"}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:14});Object.assign(T,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:55});const dt=new Uint8Array([]),ht=new Uint8Array([48,30,16,0]),St=new Uint8Array([4,0,0,0]);Object.assign(A,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:T}],methods:[],template:{memory:{array:dt},slots:{0:{structure:T,memory:{array:ht},slots:{0:{structure:m,memory:{array:St},address:1056304}}}}}},slot:43});Object.assign(z,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:42});const gt=new Uint8Array([]),zt=new Uint8Array([170,170,170,170]);Object.assign(ie,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:z}],methods:[],template:{memory:{array:gt},slots:{0:{structure:z,memory:{array:zt},slots:{0:{structure:A,memory:{array:h},address:-1431655766}}}}}},slot:17});Object.assign(M,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:16});const Ot=new Uint8Array([]),wt=new Uint8Array([170,170,170,170]);Object.assign(ne,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:z}],methods:[],template:{memory:{array:Ot},slots:{0:{structure:z,memory:{array:wt},slots:{0:{structure:A,memory:{array:h},address:-1431655766}}}}}},slot:19});Object.assign($,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:18});const Rt=new Uint8Array([]),qt=new Uint8Array([]),At=new Uint8Array([36,249,15,0]),jt=new Uint8Array([62,50,16,0]),Ut=new Uint8Array([110,101,116,46,111,110,116,104,101,119,105,110,103,115,46,102,105,108,116,101,114,115,0]),Vt=new Uint8Array([100,249,15,0]),Pt=new Uint8Array([54,50,16,0]),_t=new Uint8Array([65,110,100,121,32,76,105,0]),It=new Uint8Array([164,249,15,0]),kt=new Uint8Array([1,0,0,0]),xt=new Uint8Array([252,249,15,0]),Ct=new Uint8Array([38,50,16,0]),vt=new Uint8Array([66,105,108,97,116,101,114,97,108,32,66,108,117,114,46,0]),Gt=new Uint8Array([170,170,170,170]),Et=new Uint8Array([170,170,170,170]),Kt=new Uint8Array([170,170,170,170]);Object.assign(fe,{...t,type:2,name:"bilateral-blur.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Rt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:x},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:C},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:f},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:v},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:D},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:M},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:$}],methods:[],template:{memory:{array:qt},slots:{0:{structure:x,memory:{array:At},slots:{0:{structure:J,memory:{array:jt},slots:{0:{structure:H,memory:{array:Ut},address:1061438}}}}},1:{structure:C,memory:{array:Vt},slots:{0:{structure:Q,memory:{array:Pt},slots:{0:{structure:N,memory:{array:_t},address:1061430}}}}},2:{structure:f,memory:{array:It},slots:{0:{structure:m,memory:{array:kt}}}},3:{structure:v,memory:{array:xt},slots:{0:{structure:X,memory:{array:Ct},slots:{0:{structure:W,memory:{array:vt},address:1061414}}}}},4:{structure:D,memory:{array:Gt},slots:{0:{structure:ae,memory:{array:h},address:-1431655766}}},5:{structure:M,memory:{array:Et},slots:{0:{structure:ie,memory:{array:h},address:-1431655766}}},6:{structure:$,memory:{array:Kt},slots:{0:{structure:ne,memory:{array:h},address:-1431655766}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:p}],methods:[],template:null},slot:24});Object.assign(oe,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(ue,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:oe}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const Ft=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(le,{...t,type:9,name:"bilateral-blur.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:Ft}}},slot:26});Object.assign(R,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:R}],methods:[],template:null},slot:27});Object.assign(q,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:28});Object.assign(me,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:d}],methods:[],template:null},slot:44});const Dt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Tt=new Uint8Array([]),Mt=new Uint8Array([104,253,15,0]),$t=new Uint8Array([4,0,0,0]);Object.assign(B,{...t,type:2,name:"bilateral-blur.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ue},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:le},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:R},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:q}],methods:[],template:{memory:{array:Dt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:me},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:f}],methods:[],template:{memory:{array:Tt},slots:{0:{structure:f,memory:{array:Mt},slots:{0:{structure:m,memory:{array:$t}}}}}}},slot:21});const Bt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Lt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ht=new Uint8Array([0,0,0,0,0,0,0,0]),Re=new Uint8Array([]);Object.assign(j,{...t,type:2,name:"bilateral-blur.KernelInput(u8,bilateral-blur.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:B}],methods:[],template:{memory:{array:Bt},slots:{0:{structure:B,memory:{array:Lt},slots:{0:{structure:ue,memory:{array:Ht},slots:{0:{structure:oe,memory:{array:Re}}}}}}}}},slot:20});Object.assign(ce,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(ye,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ce}],methods:[],template:null},slot:31});const Jt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Nt=new Uint8Array([]),Qt=new Uint8Array([104,253,15,0]),Wt=new Uint8Array([4,0,0,0]);Object.assign(L,{...t,type:2,name:"bilateral-blur.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ye},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:le},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:R},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:q}],methods:[],template:{memory:{array:Jt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:me},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:f}],methods:[],template:{memory:{array:Nt},slots:{0:{structure:f,memory:{array:Qt},slots:{0:{structure:m,memory:{array:Wt}}}}}}},slot:30});const Xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Yt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Zt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(U,{...t,type:2,name:"bilateral-blur.KernelOutput(u8,bilateral-blur.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:L}],methods:[],template:{memory:{array:Xt},slots:{0:{structure:L,memory:{array:Yt},slots:{0:{structure:ye,memory:{array:Zt},slots:{0:{structure:ce,memory:{array:Re}}}}}}}}},slot:29});const es=new Uint8Array([0,0,0,64,154,153,217,62]);Object.assign(V,{...t,type:2,name:"bilateral-blur.KernelParameters(bilateral-blur.kernel)",length:1,byteSize:8,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"d",structure:d},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"r",structure:d}],methods:[],template:{memory:{array:es}}},slot:32});Object.assign(de,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(bilateral-blur.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:45});Object.assign(he,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(bilateral-blur.createOutput)).Fn.return_type.?).ErrorUnion.error_set!bilateral-blur.KernelOutput(u8,bilateral-blur.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:de}],methods:[],template:null},slot:36});Object.assign(Se,{...t,type:3,name:"createOutput",length:1,byteSize:68,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:j},{...e,type:6,bitOffset:256,bitSize:64,byteSize:8,slot:3,name:"3",structure:V},{...e,type:6,bitOffset:320,bitSize:224,byteSize:28,slot:4,name:"retval",structure:he}],methods:[],template:null},slot:34});Object.assign(ge,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(bilateral-blur.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:46});Object.assign(ze,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(bilateral-blur.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!bilateral-blur.KernelOutput(u8,bilateral-blur.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ge}],methods:[],template:null},slot:37});Object.assign(Oe,{...t,type:3,name:"createPartialOutput",length:1,byteSize:76,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:j},{...e,type:6,bitOffset:320,bitSize:64,byteSize:8,slot:5,name:"5",structure:V},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ze}],methods:[],template:null},slot:35});const ts={argStruct:Se,thunk:7,name:"createOutput"},ss={argStruct:Oe,thunk:2,name:"createPartialOutput"};Object.assign(we,{...t,type:2,name:"bilateral-blur",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Re}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:fe},{...e,type:7,isRequired:!1,name:"Input",structure:j},{...e,type:7,isRequired:!1,name:"Output",structure:U},{...e,type:7,isRequired:!1,name:"Parameters",structure:V}],methods:[ts,ss],template:null},slot:0});const rs=[p,H,J,x,N,Q,C,m,f,W,X,v,d,y,u,Y,Z,G,ee,E,te,se,K,re,F,ae,D,T,A,z,ie,M,ne,$,fe,O,oe,ue,l,le,R,q,me,B,j,ce,ye,L,U,V,de,he,Se,ge,ze,Oe,we],as=Qe(rs),is=we.constructor,ns=(async()=>{const i=new URL("bilateral-blur-524f0dc5.wasm",import.meta.url).href;return fetch(i)})();We(ns,{...as,writeBack:!0});const{createOutput:bs,createPartialOutput:os,kernel:be,Input:us,Output:fs,Parameters:ds}=is;function ls(i,o,r,s,a={},S={}){if(Array.isArray(a)){const b=a;a={};for(const[c,g]of Object.keys(be.inputImages).entries())a[g]=b[c]}const P=new us(void 0),_=Object.keys(be.inputImages),n=[];let w;for(const b of _){let c=a[b];if(c||(_.length===1&&["data","width","height"].every(g=>!!a[g])?c=a:n.push(b)),P[b]=c,w){if(c.colorSpace!==w)throw new Error(`Input images must all use the same color space: ${w}`)}else w=c.colorSpace}if(n.length>0)throw new Error(`Missing input image${n.length>1?"s":""}: ${n.join(", ")}`);const pe=os(i,o,r,s,P,S),qe=b=>{const c=Object.keys(b),g={};for(const Ae of c){const{data:{typedArray:I},width:je,height:_e}=b[Ae];let k;if(typeof ImageData=="function"){const Ie=new Uint8ClampedArray(I.buffer,I.byteOffset,I.byteLength);k=new ImageData(Ie,je,s,{colorSpace:w})}else k={data:I,width:je,height:_e};if(c.length===1)return k;g[Ae]=k}return g};return pe[Symbol.toStringTag]==="Promise"?pe.then(qe):qe(pe)}function ms(){const i={};for(let[o,r]of Object.entries(be)){if(o==="parameters"){const s={};for(const[a,S]of Object.entries(r)){const P=s[a]={};for(let[_,n]of Object.entries(S))typeof n=="object"?"string"in n?n=n.string:n=Pe(n):typeof n=="function"&&(n=cs(n.name)),P[_]=n}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());i[o]=r}return i}function Pe(i){const o=[];for(let[r,s]of Object.entries(i))typeof s=="object"&&(s=Pe(s)),o[r]=s;return o}function cs(i){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[i]}onmessage=i=>{const[o,r,...s]=i.data;ys(o,s).then(([a,S])=>{postMessage([o,r,a],{transfer:S})}).catch(a=>{postMessage(["error",r,a])})};async function ys(i,o){switch(i){case"getKernelInfo":return[ms(...o)];case"createPartialImageData":const s=await ls(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const S of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${i}`)}}
