import{u as Le,a as Ge,b as He,d as Je,c as Ne,e as Qe,f as We,g as Xe,h as Ye,i as Ze,j as et,k as tt,l as st,n as rt,p as at,m as it,o as ot,q as nt,r as mt}from"./index-cfb20c86.js";Le();Ge();He();Je();Ne();Qe();We();Xe();Ye();Ze();et();tt();st();rt();at();it();ot();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},b={},ee={},te={},v={},se={},re={},M={},y={},d={},ae={},ie={},E={},w={},oe={},l={},s={},ne={},K={},me={},le={},D={},ue={},T={},h={},ce={},$={},ye={},pe={},B={},be={},L={},fe={},G={},de={},he={},H={},ge={},J={},Se={},N={},Q={},U={},O={},ze={},W={},Oe={},X={},Pe={},R={},Re={},qe={},u={},we={},A={},j={},Y={},_={},Ae={},je={},Z={},P={},V={},Ve={},Ce={},Ie={},ke={},xe={},Fe={},ve={};Object.assign(b,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:5});Object.assign(ee,{...t,type:1,name:"[22:0]u8",length:22,byteSize:23,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:4});Object.assign(te,{...t,type:11,name:"*const [22:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:3});Object.assign(v,{...t,type:11,name:"**const [22:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:2});Object.assign(se,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:8});Object.assign(re,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:7});Object.assign(M,{...t,type:11,name:"**const [7:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:6});Object.assign(y,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:10});Object.assign(d,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:9});Object.assign(ae,{...t,type:1,name:"[33:0]u8",length:33,byteSize:34,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:13});Object.assign(ie,{...t,type:11,name:"*const [33:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:12});Object.assign(E,{...t,type:11,name:"**const [33:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:11});Object.assign(w,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:47});Object.assign(oe,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:33});Object.assign(l,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:l}],methods:[],template:null},slot:67});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:l}],methods:[],template:null},slot:66});const lt=new Uint8Array([]),ut=new Uint8Array([56,30,16,0]),F=new Uint8Array([0,0,0,0,0,0,0,0]),ct=new Uint8Array([48,30,16,0]),z=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(ne,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:lt},slots:{0:{structure:s,memory:{array:ut},slots:{0:{structure:l,memory:{array:F},address:1056312}}},1:{structure:s,memory:{array:ct},slots:{0:{structure:l,memory:{array:z},address:1056304}}}}}},slot:51});Object.assign(K,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:50});Object.assign(me,{...t,type:1,name:"[19:0]u8",length:19,byteSize:20,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:54});Object.assign(le,{...t,type:11,name:"*const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:53});Object.assign(D,{...t,type:11,name:"*const *const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:52});const yt=new Uint8Array([]),pt=new Uint8Array([170,170,170,170]),c=new Uint8Array([]),bt=new Uint8Array([76,30,16,0]),ft=new Uint8Array([155,30,16,0]),dt=new Uint8Array([77,105,110,32,97,110,100,32,109,97,120,32,108,105,109,105,116,115,46,0]);Object.assign(ue,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [19:0]u8 = "Min and max limits."}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:oe},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:K},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:D}],methods:[],template:{memory:{array:yt},slots:{0:{structure:K,memory:{array:pt},slots:{0:{structure:ne,memory:{array:c},address:-1431655766}}},1:{structure:D,memory:{array:bt},slots:{0:{structure:le,memory:{array:ft},address:1056332,slots:{0:{structure:me,memory:{array:dt},address:1056411}}}}}}}},slot:40});Object.assign(T,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [19:0]u8 = "Min and max limits."}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:39});Object.assign(h,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:34});const ht=new Uint8Array([]),gt=new Uint8Array([56,30,16,0]),St=new Uint8Array([56,30,16,0]),zt=new Uint8Array([56,30,16,0]),Ot=new Uint8Array([48,30,16,0]);Object.assign(ce,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:s}],methods:[],template:{memory:{array:ht},slots:{0:{structure:s,memory:{array:gt},slots:{0:{structure:l,memory:{array:F},address:1056312}}},1:{structure:s,memory:{array:St},slots:{0:{structure:l,memory:{array:F},address:1056312}}},2:{structure:s,memory:{array:zt},slots:{0:{structure:l,memory:{array:F},address:1056312}}},3:{structure:s,memory:{array:Ot},slots:{0:{structure:l,memory:{array:z},address:1056304}}}}}},slot:56});Object.assign($,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:55});Object.assign(ye,{...t,type:1,name:"[48:0]u8",length:48,byteSize:49,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:59});Object.assign(pe,{...t,type:11,name:"*const [48:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:58});Object.assign(B,{...t,type:11,name:"*const *const [48:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pe}],methods:[],template:null},slot:57});const Rt=new Uint8Array([]),qt=new Uint8Array([170,170,170,170]),wt=new Uint8Array([72,30,16,0]),At=new Uint8Array([106,30,16,0]),jt=new Uint8Array([67,111,108,111,114,32,102,111,114,32,116,104,114,101,115,104,111,108,100,101,100,32,97,114,101,97,46,99,111,108,111,114,70,111,114,65,108,108,80,97,115,115,101,100,65,114,101,97,0]);Object.assign(be,{...t,type:2,name:'struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 0, 0, 1}, comptime description: *const [48:0]u8 = "Color for thresholded area.colorForAllPassedArea"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:$},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:B}],methods:[],template:{memory:{array:Rt},slots:{0:{structure:$,memory:{array:qt},slots:{0:{structure:ce,memory:{array:c},address:-1431655766}}},1:{structure:B,memory:{array:wt},slots:{0:{structure:pe,memory:{array:At},address:1056328,slots:{0:{structure:ye,memory:{array:jt},address:1056362}}}}}}}},slot:42});Object.assign(L,{...t,type:11,name:'*const struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 0, 0, 1}, comptime description: *const [48:0]u8 = "Color for thresholded area.colorForAllPassedArea"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:41});const Ut=new Uint8Array([]),_t=new Uint8Array([48,30,16,0]),Pt=new Uint8Array([48,30,16,0]),Vt=new Uint8Array([48,30,16,0]),Ct=new Uint8Array([48,30,16,0]);Object.assign(fe,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:s}],methods:[],template:{memory:{array:Ut},slots:{0:{structure:s,memory:{array:_t},slots:{0:{structure:l,memory:{array:z},address:1056304}}},1:{structure:s,memory:{array:Pt},slots:{0:{structure:l,memory:{array:z},address:1056304}}},2:{structure:s,memory:{array:Vt},slots:{0:{structure:l,memory:{array:z},address:1056304}}},3:{structure:s,memory:{array:Ct},slots:{0:{structure:l,memory:{array:z},address:1056304}}}}}},slot:61});Object.assign(G,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:60});Object.assign(de,{...t,type:1,name:"[25:0]u8",length:25,byteSize:26,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:64});Object.assign(he,{...t,type:11,name:"*const [25:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:de}],methods:[],template:null},slot:63});Object.assign(H,{...t,type:11,name:"*const *const [25:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:he}],methods:[],template:null},slot:62});const It=new Uint8Array([]),kt=new Uint8Array([170,170,170,170]),xt=new Uint8Array([68,30,16,0]),Ft=new Uint8Array([80,30,16,0]),vt=new Uint8Array([67,111,108,111,114,32,102,111,114,32,97,108,108,32,112,97,115,115,101,100,32,97,114,101,97,0]);Object.assign(ge,{...t,type:2,name:'struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime description: *const [25:0]u8 = "Color for all passed area"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:h},{...e,type:8,isRequired:!1,slot:0,name:"defaultValue",structure:G},{...e,type:8,isRequired:!1,slot:1,name:"description",structure:H}],methods:[],template:{memory:{array:It},slots:{0:{structure:G,memory:{array:kt},slots:{0:{structure:fe,memory:{array:c},address:-1431655766}}},1:{structure:H,memory:{array:xt},slots:{0:{structure:he,memory:{array:Ft},address:1056324,slots:{0:{structure:de,memory:{array:vt},address:1056336}}}}}}}},slot:44});Object.assign(J,{...t,type:11,name:'*const struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime description: *const [25:0]u8 = "Color for all passed area"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ge}],methods:[],template:null},slot:43});const Mt=new Uint8Array([]),Et=new Uint8Array([170,170,170,170]),Kt=new Uint8Array([170,170,170,170]),Dt=new Uint8Array([170,170,170,170]);Object.assign(Se,{...t,type:2,name:'struct{comptime threshold: struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [19:0]u8 = "Min and max limits."} = .{.type = @Vector(2, f32), .defaultValue = .{0, 1}, .description = "Min and max limits."}, comptime outputColor1: struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 0, 0, 1}, comptime description: *const [48:0]u8 = "Color for thresholded area.colorForAllPassedArea"} = .{.type = @Vector(4, f32), .defaultValue = .{0, 0, 0, 1}, .description = "Color for thresholded area.colorForAllPassedArea"}, comptime outputColor2: struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime description: *const [25:0]u8 = "Color for all passed area"} = .{.type = @Vector(4, f32), .defaultValue = .{1, 1, 1, 1}, .description = "Color for all passed area"}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"threshold",structure:T},{...e,type:8,isRequired:!1,slot:1,name:"outputColor1",structure:L},{...e,type:8,isRequired:!1,slot:2,name:"outputColor2",structure:J}],methods:[],template:{memory:{array:Mt},slots:{0:{structure:T,memory:{array:Et},slots:{0:{structure:ue,memory:{array:c},address:-1431655766}}},1:{structure:L,memory:{array:Kt},slots:{0:{structure:be,memory:{array:c},address:-1431655766}}},2:{structure:J,memory:{array:Dt},slots:{0:{structure:ge,memory:{array:c},address:-1431655766}}}}}},slot:15});Object.assign(N,{...t,type:11,name:'*struct{comptime threshold: struct{comptime type: type = @Vector(2, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 1}, comptime description: *const [19:0]u8 = "Min and max limits."} = .{.type = @Vector(2, f32), .defaultValue = .{0, 1}, .description = "Min and max limits."}, comptime outputColor1: struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 0, 0, 1}, comptime description: *const [48:0]u8 = "Color for thresholded area.colorForAllPassedArea"} = .{.type = @Vector(4, f32), .defaultValue = .{0, 0, 0, 1}, .description = "Color for thresholded area.colorForAllPassedArea"}, comptime outputColor2: struct{comptime type: type = @Vector(4, f32), comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime description: *const [25:0]u8 = "Color for all passed area"} = .{.type = @Vector(4, f32), .defaultValue = .{1, 1, 1, 1}, .description = "Color for all passed area"}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Se}],methods:[],template:null},slot:14});Object.assign(Q,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:65});const Tt=new Uint8Array([]),$t=new Uint8Array([64,30,16,0]),Bt=new Uint8Array([4,0,0,0]);Object.assign(U,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:Q}],methods:[],template:{memory:{array:Tt},slots:{0:{structure:Q,memory:{array:$t},slots:{0:{structure:y,memory:{array:Bt},address:1056320}}}}}},slot:46});Object.assign(O,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:U}],methods:[],template:null},slot:45});const Lt=new Uint8Array([]),Gt=new Uint8Array([170,170,170,170]);Object.assign(ze,{...t,type:2,name:"struct{comptime source: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"source",structure:O}],methods:[],template:{memory:{array:Lt},slots:{0:{structure:O,memory:{array:Gt},slots:{0:{structure:U,memory:{array:c},address:-1431655766}}}}}},slot:17});Object.assign(W,{...t,type:11,name:"*struct{comptime source: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ze}],methods:[],template:null},slot:16});const Ht=new Uint8Array([]),Jt=new Uint8Array([170,170,170,170]);Object.assign(Oe,{...t,type:2,name:"struct{comptime target: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"target",structure:O}],methods:[],template:{memory:{array:Ht},slots:{0:{structure:O,memory:{array:Jt},slots:{0:{structure:U,memory:{array:c},address:-1431655766}}}}}},slot:19});Object.assign(X,{...t,type:11,name:"*struct{comptime target: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Oe}],methods:[],template:null},slot:18});const Nt=new Uint8Array([]),Qt=new Uint8Array([]),Wt=new Uint8Array([44,251,15,0]),Xt=new Uint8Array([168,57,16,0]),Yt=new Uint8Array([110,101,116,46,111,110,116,104,101,119,105,110,103,115,46,102,105,108,116,101,114,115,0]),Zt=new Uint8Array([108,251,15,0]),es=new Uint8Array([160,57,16,0]),ts=new Uint8Array([65,110,100,121,32,76,105,0]),ss=new Uint8Array([172,251,15,0]),rs=new Uint8Array([1,0,0,0]),as=new Uint8Array([4,252,15,0]),is=new Uint8Array([126,57,16,0]),os=new Uint8Array([84,104,114,101,115,104,111,108,100,105,110,103,32,98,97,115,101,115,32,111,110,32,98,114,105,103,104,116,110,101,115,115,46,0]),ns=new Uint8Array([170,170,170,170]),ms=new Uint8Array([170,170,170,170]),ls=new Uint8Array([170,170,170,170]);Object.assign(Pe,{...t,type:2,name:"brightness-threshold.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Nt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:v},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:M},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:d},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:E},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:N},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:W},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:X}],methods:[],template:{memory:{array:Qt},slots:{0:{structure:v,memory:{array:Wt},slots:{0:{structure:te,memory:{array:Xt},slots:{0:{structure:ee,memory:{array:Yt},address:1063336}}}}},1:{structure:M,memory:{array:Zt},slots:{0:{structure:re,memory:{array:es},slots:{0:{structure:se,memory:{array:ts},address:1063328}}}}},2:{structure:d,memory:{array:ss},slots:{0:{structure:y,memory:{array:rs}}}},3:{structure:E,memory:{array:as},slots:{0:{structure:ie,memory:{array:is},slots:{0:{structure:ae,memory:{array:os},address:1063294}}}}},4:{structure:N,memory:{array:ns},slots:{0:{structure:Se,memory:{array:c},address:-1431655766}}},5:{structure:W,memory:{array:ms},slots:{0:{structure:ze,memory:{array:c},address:-1431655766}}},6:{structure:X,memory:{array:ls},slots:{0:{structure:Oe,memory:{array:c},address:-1431655766}}}}}},slot:1});Object.assign(R,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:24});Object.assign(Re,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:23});Object.assign(qe,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Re}],methods:[],template:null},slot:22});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:25});const us=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(we,{...t,type:9,name:"brightness-threshold.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:y},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:y}],methods:[],template:{memory:{array:us}}},slot:26});Object.assign(A,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:A}],methods:[],template:null},slot:27});Object.assign(j,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:j}],methods:[],template:null},slot:28});const cs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ys=new Uint8Array([]),ps=new Uint8Array([8,250,15,0]),bs=new Uint8Array([4,0,0,0]);Object.assign(Y,{...t,type:2,name:"brightness-threshold.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:qe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:we},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:A},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:j}],methods:[],template:{memory:{array:cs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:R},{...e,type:7,isRequired:!1,name:"FPixel",structure:h},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:ys},slots:{0:{structure:d,memory:{array:ps},slots:{0:{structure:y,memory:{array:bs}}}}}}},slot:21});const fs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ds=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),hs=new Uint8Array([0,0,0,0,0,0,0,0]),Me=new Uint8Array([]);Object.assign(_,{...t,type:2,name:"brightness-threshold.KernelInput(u8,brightness-threshold.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"source",structure:Y}],methods:[],template:{memory:{array:fs},slots:{0:{structure:Y,memory:{array:ds},slots:{0:{structure:qe,memory:{array:hs},slots:{0:{structure:Re,memory:{array:Me}}}}}}}}},slot:20});Object.assign(Ae,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:23});Object.assign(je,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Ae}],methods:[],template:null},slot:31});const gs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ss=new Uint8Array([]),zs=new Uint8Array([8,250,15,0]),Os=new Uint8Array([4,0,0,0]);Object.assign(Z,{...t,type:2,name:"brightness-threshold.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:je},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:we},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:A},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:j}],methods:[],template:{memory:{array:gs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:R},{...e,type:7,isRequired:!1,name:"FPixel",structure:h},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Ss},slots:{0:{structure:d,memory:{array:zs},slots:{0:{structure:y,memory:{array:Os}}}}}}},slot:30});const Rs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),qs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ws=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(P,{...t,type:2,name:"brightness-threshold.KernelOutput(u8,brightness-threshold.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"target",structure:Z}],methods:[],template:{memory:{array:Rs},slots:{0:{structure:Z,memory:{array:qs},slots:{0:{structure:je,memory:{array:ws},slots:{0:{structure:Ae,memory:{array:Me}}}}}}}}},slot:29});const As=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0]);Object.assign(V,{...t,type:2,name:"brightness-threshold.KernelParameters(brightness-threshold.kernel)",length:1,byteSize:48,align:4,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:256,bitSize:64,byteSize:8,slot:0,name:"threshold",structure:oe},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:128,byteSize:16,slot:1,name:"outputColor1",structure:h},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:128,byteSize:16,slot:2,name:"outputColor2",structure:h}],methods:[],template:{memory:{array:As}}},slot:32});Object.assign(Ve,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(brightness-threshold.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(Ce,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(brightness-threshold.createOutput)).Fn.return_type.?).ErrorUnion.error_set!brightness-threshold.KernelOutput(u8,brightness-threshold.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Ve}],methods:[],template:null},slot:37});Object.assign(Ie,{...t,type:3,name:"createOutput",length:1,byteSize:112,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:384,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:416,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:448,bitSize:192,byteSize:24,slot:2,name:"2",structure:_},{...e,type:6,bitOffset:0,bitSize:384,byteSize:48,slot:3,name:"3",structure:V},{...e,type:6,bitOffset:640,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Ce}],methods:[],template:null},slot:35});Object.assign(ke,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(brightness-threshold.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:49});Object.assign(xe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(brightness-threshold.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!brightness-threshold.KernelOutput(u8,brightness-threshold.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:P},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ke}],methods:[],template:null},slot:38});Object.assign(Fe,{...t,type:3,name:"createPartialOutput",length:1,byteSize:128,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:384,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:416,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:448,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:480,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:512,bitSize:192,byteSize:24,slot:4,name:"4",structure:_},{...e,type:6,bitOffset:0,bitSize:384,byteSize:48,slot:5,name:"5",structure:V},{...e,type:6,bitOffset:704,bitSize:224,byteSize:28,slot:6,name:"retval",structure:xe}],methods:[],template:null},slot:36});const js={argStruct:Ie,thunk:1,name:"createOutput"},Us={argStruct:Fe,thunk:4,name:"createPartialOutput"};Object.assign(ve,{...t,type:2,name:"brightness-threshold",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Me}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:Pe},{...e,type:7,isRequired:!1,name:"Input",structure:_},{...e,type:7,isRequired:!1,name:"Output",structure:P},{...e,type:7,isRequired:!1,name:"Parameters",structure:V}],methods:[js,Us],template:null},slot:0});const _s=[b,ee,te,v,se,re,M,y,d,ae,ie,E,w,oe,l,s,ne,K,me,le,D,ue,T,h,ce,$,ye,pe,B,be,L,fe,G,de,he,H,ge,J,Se,N,Q,U,O,ze,W,Oe,X,Pe,R,Re,qe,u,we,A,j,Y,_,Ae,je,Z,P,V,Ve,Ce,Ie,ke,xe,Fe,ve],Ps=nt(_s),Vs=ve.constructor,Cs=(async()=>{const o=new URL("brightness-threshold-7803da50.wasm",import.meta.url).href;return fetch(o)})();mt(Cs,{...Ps,writeBack:!0});const{createOutput:Ks,createPartialOutput:Is,kernel:_e,Input:ks,Output:Ds,Parameters:Ts}=Vs;function xs(o,m,a,r,i={},g={}){if(Array.isArray(i)){const f=i;i={};for(const[p,S]of Object.keys(_e.inputImages).entries())i[S]=f[p]}const C=new ks(void 0),I=Object.keys(_e.inputImages),n=[];let q;for(const f of I){let p=i[f];if(p||(I.length===1&&["data","width","height"].every(S=>!!i[S])?p=i:n.push(f)),C[f]=p,q){if(p.colorSpace!==q)throw new Error(`Input images must all use the same color space: ${q}`)}else q=p.colorSpace}if(n.length>0)throw new Error(`Missing input image${n.length>1?"s":""}: ${n.join(", ")}`);const Ue=Is(o,m,a,r,C,g),Ee=f=>{const p=Object.keys(f),S={};for(const Ke of p){const{data:{typedArray:k},width:De,height:$e}=f[Ke];let x;if(typeof ImageData=="function"){const Be=new Uint8ClampedArray(k.buffer,k.byteOffset,k.byteLength);x=new ImageData(Be,De,r,{colorSpace:q})}else x={data:k,width:De,height:$e};if(p.length===1)return x;S[Ke]=x}return S};return Ue[Symbol.toStringTag]==="Promise"?Ue.then(Ee):Ee(Ue)}function Fs(){const o={};for(let[m,a]of Object.entries(_e)){if(m==="parameters"){const r={};for(const[i,g]of Object.entries(a)){const C=r[i]={};for(let[I,n]of Object.entries(g))typeof n=="object"?"string"in n?n=n.string:n=Te(n):typeof n=="function"&&(n=vs(n.name)),C[I]=n}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());o[m]=a}return o}function Te(o){const m=[];for(let[a,r]of Object.entries(o))typeof r=="object"&&(r=Te(r)),m[a]=r;return m}function vs(o){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[o]}onmessage=o=>{const[m,a,...r]=o.data;Ms(m,r).then(([i,g])=>{postMessage([m,a,i],{transfer:g})}).catch(i=>{postMessage(["error",a,i])})};async function Ms(o,m){switch(o){case"getKernelInfo":return[Fs(...m)];case"createPartialImageData":const r=await xs(...m),i=[];if("data"in r&&"width"in r&&"height"in r)i.push(r.data.buffer);else for(const g of Object.entries(r))i.push(r.data.buffer);return[r,i];default:throw new Error(`Unknown function: ${o}`)}}
