import{u as Se,a as ge,b as ze,c as Oe,d as we,e as Re,f as qe,g as je,h as Ae,i as Ue,j as ke,k as Pe,l as Ve,p as _e,m as Ie,n as xe,o as ve,q as Ee,r as Ce}from"./index-cfb20c86.js";Se();ge();ze();Oe();we();Re();qe();je();Ae();Ue();ke();Pe();Ve();_e();Ie();xe();ve();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},S={},w={},R={},d={},i={},p={},$={},B={},v={},c={},L={},E={},G={},C={},A={},g={},H={},K={},J={},F={},se={},z={},N={},Q={},u={},W={},q={},j={},D={},X={},T={},U={},Y={},Z={},M={},k={},P={},re={},ae={},ie={},ne={},me={},oe={},ue={};Object.assign(S,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:5});Object.assign(w,{...t,type:1,name:"[5:0]u8",length:5,byteSize:6,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:4});Object.assign(R,{...t,type:11,name:"*const [5:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:w}],methods:[],template:null},slot:3});Object.assign(d,{...t,type:11,name:"**const [5:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:2});Object.assign(i,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:i}],methods:[],template:null},slot:7});Object.assign(p,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:i}],methods:[],template:null},slot:6});Object.assign($,{...t,type:1,name:"[33:0]u8",length:33,byteSize:34,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:10});Object.assign(B,{...t,type:11,name:"*const [33:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:9});Object.assign(v,{...t,type:11,name:"**const [33:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:8});Object.assign(c,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:i}],methods:[],template:null},slot:42});const Ke=new Uint8Array([]),Fe=new Uint8Array([132,2,16,0]),be=new Uint8Array([0,0,0,0]),De=new Uint8Array([136,2,16,0]),Te=new Uint8Array([3,0,0,0]),Me=new Uint8Array([132,2,16,0]);Object.assign(L,{...t,type:2,name:"struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:i},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:c},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:c},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:c}],methods:[],template:{memory:{array:Ke},slots:{0:{structure:c,memory:{array:Fe},slots:{0:{structure:i,memory:{array:be},address:1049220}}},1:{structure:c,memory:{array:De},slots:{0:{structure:i,memory:{array:Te},address:1049224}}},2:{structure:c,memory:{array:Me},slots:{0:{structure:i,memory:{array:be},address:1049220}}}}}},slot:35});Object.assign(E,{...t,type:11,name:"*const struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:34});const $e=new Uint8Array([]),Be=new Uint8Array([170,170,170,170]),h=new Uint8Array([]);Object.assign(G,{...t,type:2,name:"struct{comptime mode: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 0} = .{.type = i32, .minValue = 0, .maxValue = 3, .defaultValue = 0}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"mode",structure:E}],methods:[],template:{memory:{array:$e},slots:{0:{structure:E,memory:{array:Be},slots:{0:{structure:L,memory:{array:h},address:-1431655766}}}}}},slot:12});Object.assign(C,{...t,type:11,name:"*struct{comptime mode: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 3, comptime defaultValue: comptime_int = 0} = .{.type = i32, .minValue = 0, .maxValue = 3, .defaultValue = 0}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:11});const Le=new Uint8Array([]),Ge=new Uint8Array([128,2,16,0]),He=new Uint8Array([4,0,0,0]);Object.assign(A,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:c}],methods:[],template:{memory:{array:Le},slots:{0:{structure:c,memory:{array:Ge},slots:{0:{structure:i,memory:{array:He},address:1049216}}}}}},slot:37});Object.assign(g,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:36});const Je=new Uint8Array([]),Ne=new Uint8Array([170,170,170,170]);Object.assign(H,{...t,type:2,name:"struct{comptime mask: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"mask",structure:g}],methods:[],template:{memory:{array:Je},slots:{0:{structure:g,memory:{array:Ne},slots:{0:{structure:A,memory:{array:h},address:-1431655766}}}}}},slot:14});Object.assign(K,{...t,type:11,name:"*struct{comptime mask: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:13});const Qe=new Uint8Array([]),We=new Uint8Array([170,170,170,170]);Object.assign(J,{...t,type:2,name:"struct{comptime result: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"result",structure:g}],methods:[],template:{memory:{array:Qe},slots:{0:{structure:g,memory:{array:We},slots:{0:{structure:A,memory:{array:h},address:-1431655766}}}}}},slot:16});Object.assign(F,{...t,type:11,name:"*struct{comptime result: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:15});const Xe=new Uint8Array([]),Ye=new Uint8Array([]),Ze=new Uint8Array([12,252,15,0]),et=new Uint8Array([162,13,16,0]),tt=new Uint8Array([70,108,97,109,101,0]),st=new Uint8Array([100,252,15,0]),rt=new Uint8Array([156,13,16,0]),at=new Uint8Array([65,100,111,98,101,0]),it=new Uint8Array([188,252,15,0]),nt=new Uint8Array([0,0,0,0]),mt=new Uint8Array([20,253,15,0]),ot=new Uint8Array([122,13,16,0]),ut=new Uint8Array([76,117,109,105,110,111,115,105,116,121,32,77,97,115,107,32,102,105,108,116,101,114,32,45,32,70,108,101,120,32,83,68,75,0]),lt=new Uint8Array([170,170,170,170]),ct=new Uint8Array([170,170,170,170]),yt=new Uint8Array([170,170,170,170]);Object.assign(se,{...t,type:2,name:"luminosity-mask-filter.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Xe}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:d},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:d},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:p},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:v},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:C},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:K},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:F}],methods:[],template:{memory:{array:Ye},slots:{0:{structure:d,memory:{array:Ze},slots:{0:{structure:R,memory:{array:et},slots:{0:{structure:w,memory:{array:tt},address:1052066}}}}},1:{structure:d,memory:{array:st},slots:{0:{structure:R,memory:{array:rt},slots:{0:{structure:w,memory:{array:at},address:1052060}}}}},2:{structure:p,memory:{array:it},slots:{0:{structure:i,memory:{array:nt}}}},3:{structure:v,memory:{array:mt},slots:{0:{structure:B,memory:{array:ot},slots:{0:{structure:$,memory:{array:ut},address:1052026}}}}},4:{structure:C,memory:{array:lt},slots:{0:{structure:G,memory:{array:h},address:-1431655766}}},5:{structure:K,memory:{array:ct},slots:{0:{structure:H,memory:{array:h},address:-1431655766}}},6:{structure:F,memory:{array:yt},slots:{0:{structure:J,memory:{array:h},address:-1431655766}}}}}},slot:1});Object.assign(z,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:S}],methods:[],template:null},slot:21});Object.assign(N,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:20});Object.assign(Q,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:N}],methods:[],template:null},slot:19});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:22});const pt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(W,{...t,type:9,name:"luminosity-mask-filter.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:i},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:i}],methods:[],template:{memory:{array:pt}}},slot:23});Object.assign(q,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:q}],methods:[],template:null},slot:24});Object.assign(j,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:j}],methods:[],template:null},slot:25});Object.assign(D,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:D}],methods:[],template:null},slot:41});Object.assign(X,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:D}],methods:[],template:null},slot:38});const bt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ft=new Uint8Array([]),dt=new Uint8Array([200,250,15,0]),ht=new Uint8Array([4,0,0,0]);Object.assign(T,{...t,type:2,name:"luminosity-mask-filter.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Q},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:W},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:q},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:j}],methods:[],template:{memory:{array:bt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:z},{...e,type:7,isRequired:!1,name:"FPixel",structure:X},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:ft},slots:{0:{structure:p,memory:{array:dt},slots:{0:{structure:i,memory:{array:ht}}}}}}},slot:18});const St=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),gt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),zt=new Uint8Array([0,0,0,0,0,0,0,0]),le=new Uint8Array([]);Object.assign(U,{...t,type:2,name:"luminosity-mask-filter.KernelInput(u8,luminosity-mask-filter.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"mask",structure:T}],methods:[],template:{memory:{array:St},slots:{0:{structure:T,memory:{array:gt},slots:{0:{structure:Q,memory:{array:zt},slots:{0:{structure:N,memory:{array:le}}}}}}}}},slot:17});Object.assign(Y,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:z}],methods:[],template:null},slot:20});Object.assign(Z,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Y}],methods:[],template:null},slot:28});const Ot=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),wt=new Uint8Array([]),Rt=new Uint8Array([200,250,15,0]),qt=new Uint8Array([4,0,0,0]);Object.assign(M,{...t,type:2,name:"luminosity-mask-filter.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Z},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:W},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:q},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:j}],methods:[],template:{memory:{array:Ot}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:z},{...e,type:7,isRequired:!1,name:"FPixel",structure:X},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:wt},slots:{0:{structure:p,memory:{array:Rt},slots:{0:{structure:i,memory:{array:qt}}}}}}},slot:27});const jt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),At=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ut=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(k,{...t,type:2,name:"luminosity-mask-filter.KernelOutput(u8,luminosity-mask-filter.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"result",structure:M}],methods:[],template:{memory:{array:jt},slots:{0:{structure:M,memory:{array:At},slots:{0:{structure:Z,memory:{array:Ut},slots:{0:{structure:Y,memory:{array:le}}}}}}}}},slot:26});const kt=new Uint8Array([0,0,0,0]);Object.assign(P,{...t,type:2,name:"luminosity-mask-filter.KernelParameters(luminosity-mask-filter.kernel)",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"mode",structure:i}],methods:[],template:{memory:{array:kt}}},slot:29});Object.assign(re,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(luminosity-mask-filter.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:39});Object.assign(ae,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(luminosity-mask-filter.createOutput)).Fn.return_type.?).ErrorUnion.error_set!luminosity-mask-filter.KernelOutput(u8,luminosity-mask-filter.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:re}],methods:[],template:null},slot:32});Object.assign(ie,{...t,type:3,name:"createOutput",length:1,byteSize:64,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:U},{...e,type:6,bitOffset:256,bitSize:32,byteSize:4,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:288,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ae}],methods:[],template:null},slot:30});Object.assign(ne,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(luminosity-mask-filter.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:40});Object.assign(me,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(luminosity-mask-filter.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!luminosity-mask-filter.KernelOutput(u8,luminosity-mask-filter.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:k},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ne}],methods:[],template:null},slot:33});Object.assign(oe,{...t,type:3,name:"createPartialOutput",length:1,byteSize:72,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:U},{...e,type:6,bitOffset:320,bitSize:32,byteSize:4,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:352,bitSize:224,byteSize:28,slot:6,name:"retval",structure:me}],methods:[],template:null},slot:31});const Pt={argStruct:ie,thunk:3,name:"createOutput"},Vt={argStruct:oe,thunk:7,name:"createPartialOutput"};Object.assign(ue,{...t,type:2,name:"luminosity-mask-filter",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:le}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:se},{...e,type:7,isRequired:!1,name:"Input",structure:U},{...e,type:7,isRequired:!1,name:"Output",structure:k},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[Pt,Vt],template:null},slot:0});const _t=[S,w,R,d,i,p,$,B,v,c,L,E,G,C,A,g,H,K,J,F,se,z,N,Q,u,W,q,j,D,X,T,U,Y,Z,M,k,P,re,ae,ie,ne,me,oe,ue],It=Ee(_t),xt=ue.constructor,vt=(async()=>{const n=new URL("luminosity-mask-filter-e759b799.wasm",import.meta.url).href;return fetch(n)})();Ce(vt,{...It,writeBack:!0});const{createOutput:$t,createPartialOutput:Et,kernel:te,Input:Ct,Output:Bt,Parameters:Lt}=xt;function Kt(n,o,r,s,a={},b={}){if(Array.isArray(a)){const y=a;a={};for(const[l,f]of Object.keys(te.inputImages).entries())a[f]=y[l]}const V=new Ct(void 0),_=Object.keys(te.inputImages),m=[];let O;for(const y of _){let l=a[y];if(l||(_.length===1&&["data","width","height"].every(f=>!!a[f])?l=a:m.push(y)),V[y]=l,O){if(l.colorSpace!==O)throw new Error(`Input images must all use the same color space: ${O}`)}else O=l.colorSpace}if(m.length>0)throw new Error(`Missing input image${m.length>1?"s":""}: ${m.join(", ")}`);const ee=Et(n,o,r,s,V,b),ce=y=>{const l=Object.keys(y),f={};for(const ye of l){const{data:{typedArray:I},width:pe,height:de}=y[ye];let x;if(typeof ImageData=="function"){const he=new Uint8ClampedArray(I.buffer,I.byteOffset,I.byteLength);x=new ImageData(he,pe,s,{colorSpace:O})}else x={data:I,width:pe,height:de};if(l.length===1)return x;f[ye]=x}return f};return ee[Symbol.toStringTag]==="Promise"?ee.then(ce):ce(ee)}function Ft(){const n={};for(let[o,r]of Object.entries(te)){if(o==="parameters"){const s={};for(const[a,b]of Object.entries(r)){const V=s[a]={};for(let[_,m]of Object.entries(b))typeof m=="object"?"string"in m?m=m.string:m=fe(m):typeof m=="function"&&(m=Dt(m.name)),V[_]=m}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[o]=r}return n}function fe(n){const o=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=fe(s)),o[r]=s;return o}function Dt(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,r,...s]=n.data;Tt(o,s).then(([a,b])=>{postMessage([o,r,a],{transfer:b})}).catch(a=>{postMessage(["error",r,a])})};async function Tt(n,o){switch(n){case"getKernelInfo":return[Ft(...o)];case"createPartialImageData":const s=await Kt(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const b of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
