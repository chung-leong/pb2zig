import{u as ke,a as Ce,b as De,d as ve,c as Ee,e as Ke,f as Fe,g as Te,h as Me,i as $e,j as Be,k as Le,l as Ge,n as He,p as Je,m as Ne,o as Qe,q as We,r as Xe}from"./index-cfb20c86.js";ke();Ce();De();ve();Ee();Ke();Fe();Te();Me();$e();Be();Le();Ge();He();Je();Ne();Qe();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},h={},W={},X={},E={},Y={},Z={},K={},y={},d={},ee={},te={},F={},f={},se={},l={},s={},w={},z={},re={},T={},ae={},M={},ie={},$={},A={},O={},me={},B={},L={},j={},V={},ne={},G={},oe={},H={},he={},R={},le={},ue={},u={},ce={},U={},_={},ye={},J={},P={},pe={},fe={},N={},x={},I={},ge={},Se={},ze={},Oe={},Ve={},Re={},qe={};Object.assign(h,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:5});Object.assign(W,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:4});Object.assign(X,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:3});Object.assign(E,{...t,type:11,name:"**const [7:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:2});Object.assign(Y,{...t,type:1,name:"[11:0]u8",length:11,byteSize:12,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:8});Object.assign(Z,{...t,type:11,name:"*const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:7});Object.assign(K,{...t,type:11,name:"**const [11:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:6});Object.assign(y,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:10});Object.assign(d,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:9});Object.assign(ee,{...t,type:1,name:"[44:0]u8",length:44,byteSize:45,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:13});Object.assign(te,{...t,type:11,name:"*const [44:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:12});Object.assign(F,{...t,type:11,name:"**const [44:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:11});Object.assign(f,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:34});Object.assign(se,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:33});Object.assign(l,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:l}],methods:[],template:null},slot:55});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:l}],methods:[],template:null},slot:54});const Ye=new Uint8Array([]),Ze=new Uint8Array([56,30,16,0]),Q=new Uint8Array([0,0,0,0,0,0,0,0]),et=new Uint8Array([56,30,16,0]);Object.assign(w,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Ye},slots:{0:{structure:s,memory:{array:Ze},slots:{0:{structure:l,memory:{array:Q},address:1056312}}},1:{structure:s,memory:{array:et},slots:{0:{structure:l,memory:{array:Q},address:1056312}}}}}},slot:51});Object.assign(z,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:w}],methods:[],template:null},slot:50});const tt=new Uint8Array([]),st=new Uint8Array([48,30,16,0]),je=new Uint8Array([0,0,0,0,0,0,176,64]),rt=new Uint8Array([48,30,16,0]);Object.assign(re,{...t,type:2,name:"struct{comptime comptime_float = 4096, comptime comptime_float = 4096}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:tt},slots:{0:{structure:s,memory:{array:st},slots:{0:{structure:l,memory:{array:je},address:1056304}}},1:{structure:s,memory:{array:rt},slots:{0:{structure:l,memory:{array:je},address:1056304}}}}}},slot:53});Object.assign(T,{...t,type:11,name:"*const struct{comptime comptime_float = 4096, comptime comptime_float = 4096}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:52});const at=new Uint8Array([]),it=new Uint8Array([170,170,170,170]),c=new Uint8Array([]),mt=new Uint8Array([170,170,170,170]),nt=new Uint8Array([170,170,170,170]);Object.assign(ae,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 4096, comptime comptime_float = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:se},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:z},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:T},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:z}],methods:[],template:{memory:{array:at},slots:{0:{structure:z,memory:{array:it},slots:{0:{structure:w,memory:{array:c},address:-1431655766}}},1:{structure:T,memory:{array:mt},slots:{0:{structure:re,memory:{array:c},address:-1431655766}}},2:{structure:z,memory:{array:nt},slots:{0:{structure:w,memory:{array:c},address:-1431655766}}}}}},slot:40});Object.assign(M,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 4096, comptime comptime_float = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:39});const ot=new Uint8Array([]),lt=new Uint8Array([56,30,16,0]),ut=new Uint8Array([96,30,16,0]),ct=new Uint8Array([0,0,0,0,0,64,159,64]),yt=new Uint8Array([88,30,16,0]),pt=new Uint8Array([0,0,0,0,0,224,101,64]);Object.assign(ie,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2000, comptime defaultValue: comptime_float = 175}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:ot},slots:{0:{structure:s,memory:{array:lt},slots:{0:{structure:l,memory:{array:Q},address:1056312}}},1:{structure:s,memory:{array:ut},slots:{0:{structure:l,memory:{array:ct},address:1056352}}},2:{structure:s,memory:{array:yt},slots:{0:{structure:l,memory:{array:pt},address:1056344}}}}}},slot:42});Object.assign($,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2000, comptime defaultValue: comptime_float = 175}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:41});const ft=new Uint8Array([]),bt=new Uint8Array([56,30,16,0]),dt=new Uint8Array([80,30,16,0]),ht=new Uint8Array([0,0,0,0,0,0,0,64]),gt=new Uint8Array([72,30,16,0]),St=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(A,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:f},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:ft},slots:{0:{structure:s,memory:{array:bt},slots:{0:{structure:l,memory:{array:Q},address:1056312}}},1:{structure:s,memory:{array:dt},slots:{0:{structure:l,memory:{array:ht},address:1056336}}},2:{structure:s,memory:{array:gt},slots:{0:{structure:l,memory:{array:St},address:1056328}}}}}},slot:44});Object.assign(O,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:43});const zt=new Uint8Array([]),Ot=new Uint8Array([170,170,170,170]),Vt=new Uint8Array([170,170,170,170]),Rt=new Uint8Array([170,170,170,170]),qt=new Uint8Array([170,170,170,170]);Object.assign(me,{...t,type:2,name:"struct{comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 4096, comptime comptime_float = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{4096, 4096}, .defaultValue = .{0, 0}}, comptime attenuationDelta: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2000, comptime defaultValue: comptime_float = 175} = .{.type = f32, .minValue = 0, .maxValue = 2000, .defaultValue = 175}, comptime attenuationSpeed: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 2, .defaultValue = 1}, comptime attenuationDecay: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 2, .defaultValue = 1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"center",structure:M},{...e,type:8,isRequired:!1,slot:1,name:"attenuationDelta",structure:$},{...e,type:8,isRequired:!1,slot:2,name:"attenuationSpeed",structure:O},{...e,type:8,isRequired:!1,slot:3,name:"attenuationDecay",structure:O}],methods:[],template:{memory:{array:zt},slots:{0:{structure:M,memory:{array:Ot},slots:{0:{structure:ae,memory:{array:c},address:-1431655766}}},1:{structure:$,memory:{array:Vt},slots:{0:{structure:ie,memory:{array:c},address:-1431655766}}},2:{structure:O,memory:{array:Rt},slots:{0:{structure:A,memory:{array:c},address:-1431655766}}},3:{structure:O,memory:{array:qt},slots:{0:{structure:A,memory:{array:c},address:-1431655766}}}}}},slot:15});Object.assign(B,{...t,type:11,name:"*struct{comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 4096, comptime comptime_float = 4096} = .{4096, 4096}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{4096, 4096}, .defaultValue = .{0, 0}}, comptime attenuationDelta: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2000, comptime defaultValue: comptime_float = 175} = .{.type = f32, .minValue = 0, .maxValue = 2000, .defaultValue = 175}, comptime attenuationSpeed: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 2, .defaultValue = 1}, comptime attenuationDecay: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 2, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 2, .defaultValue = 1}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:14});Object.assign(L,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:56});const wt=new Uint8Array([]),At=new Uint8Array([64,30,16,0]),Ut=new Uint8Array([4,0,0,0]);Object.assign(j,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:L}],methods:[],template:{memory:{array:wt},slots:{0:{structure:L,memory:{array:At},slots:{0:{structure:y,memory:{array:Ut},address:1056320}}}}}},slot:46});Object.assign(V,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:j}],methods:[],template:null},slot:45});const _t=new Uint8Array([]),jt=new Uint8Array([170,170,170,170]);Object.assign(ne,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:V}],methods:[],template:{memory:{array:_t},slots:{0:{structure:V,memory:{array:jt},slots:{0:{structure:j,memory:{array:c},address:-1431655766}}}}}},slot:17});Object.assign(G,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:16});const Pt=new Uint8Array([]),xt=new Uint8Array([170,170,170,170]);Object.assign(oe,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:V}],methods:[],template:{memory:{array:Pt},slots:{0:{structure:V,memory:{array:xt},slots:{0:{structure:j,memory:{array:c},address:-1431655766}}}}}},slot:19});Object.assign(H,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:18});const It=new Uint8Array([]),kt=new Uint8Array([]),Ct=new Uint8Array([212,248,15,0]),Dt=new Uint8Array([215,54,16,0]),vt=new Uint8Array([110,97,118,104,97,108,105,0]),Et=new Uint8Array([20,249,15,0]),Kt=new Uint8Array([203,54,16,0]),Ft=new Uint8Array([74,111,104,110,32,69,110,103,108,101,114,0]),Tt=new Uint8Array([84,249,15,0]),Mt=new Uint8Array([0,0,0,0]),$t=new Uint8Array([172,249,15,0]),Bt=new Uint8Array([158,54,16,0]),Lt=new Uint8Array([83,105,109,112,108,101,32,112,111,105,110,116,32,108,105,103,104,116,45,45,112,108,97,121,105,110,103,32,119,105,116,104,32,80,105,120,101,108,66,101,110,100,101,114,0]),Gt=new Uint8Array([170,170,170,170]),Ht=new Uint8Array([170,170,170,170]),Jt=new Uint8Array([170,170,170,170]);Object.assign(he,{...t,type:2,name:"simple-point-light.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:It}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:E},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:K},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:d},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:F},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:B},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:G},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:H}],methods:[],template:{memory:{array:kt},slots:{0:{structure:E,memory:{array:Ct},slots:{0:{structure:X,memory:{array:Dt},slots:{0:{structure:W,memory:{array:vt},address:1062615}}}}},1:{structure:K,memory:{array:Et},slots:{0:{structure:Z,memory:{array:Kt},slots:{0:{structure:Y,memory:{array:Ft},address:1062603}}}}},2:{structure:d,memory:{array:Tt},slots:{0:{structure:y,memory:{array:Mt}}}},3:{structure:F,memory:{array:$t},slots:{0:{structure:te,memory:{array:Bt},slots:{0:{structure:ee,memory:{array:Lt},address:1062558}}}}},4:{structure:B,memory:{array:Gt},slots:{0:{structure:me,memory:{array:c},address:-1431655766}}},5:{structure:G,memory:{array:Ht},slots:{0:{structure:ne,memory:{array:c},address:-1431655766}}},6:{structure:H,memory:{array:Jt},slots:{0:{structure:oe,memory:{array:c},address:-1431655766}}}}}},slot:1});Object.assign(R,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:24});Object.assign(le,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:23});Object.assign(ue,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:le}],methods:[],template:null},slot:22});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:25});const Nt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ce,{...t,type:9,name:"simple-point-light.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:y},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:y}],methods:[],template:{memory:{array:Nt}}},slot:26});Object.assign(U,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:U}],methods:[],template:null},slot:27});Object.assign(_,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:_}],methods:[],template:null},slot:28});Object.assign(ye,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:f}],methods:[],template:null},slot:47});const Qt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Wt=new Uint8Array([]),Xt=new Uint8Array([104,253,15,0]),Yt=new Uint8Array([4,0,0,0]);Object.assign(J,{...t,type:2,name:"simple-point-light.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ue},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ce},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:U},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:_}],methods:[],template:{memory:{array:Qt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:R},{...e,type:7,isRequired:!1,name:"FPixel",structure:ye},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Wt},slots:{0:{structure:d,memory:{array:Xt},slots:{0:{structure:y,memory:{array:Yt}}}}}}},slot:21});const Zt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),es=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ts=new Uint8Array([0,0,0,0,0,0,0,0]),we=new Uint8Array([]);Object.assign(P,{...t,type:2,name:"simple-point-light.KernelInput(u8,simple-point-light.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:J}],methods:[],template:{memory:{array:Zt},slots:{0:{structure:J,memory:{array:es},slots:{0:{structure:ue,memory:{array:ts},slots:{0:{structure:le,memory:{array:we}}}}}}}}},slot:20});Object.assign(pe,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:R}],methods:[],template:null},slot:23});Object.assign(fe,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:pe}],methods:[],template:null},slot:31});const ss=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),rs=new Uint8Array([]),as=new Uint8Array([104,253,15,0]),is=new Uint8Array([4,0,0,0]);Object.assign(N,{...t,type:2,name:"simple-point-light.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:fe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ce},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:U},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:_}],methods:[],template:{memory:{array:ss}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:R},{...e,type:7,isRequired:!1,name:"FPixel",structure:ye},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:rs},slots:{0:{structure:d,memory:{array:as},slots:{0:{structure:y,memory:{array:is}}}}}}},slot:30});const ms=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ns=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),os=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(x,{...t,type:2,name:"simple-point-light.KernelOutput(u8,simple-point-light.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:N}],methods:[],template:{memory:{array:ms},slots:{0:{structure:N,memory:{array:ns},slots:{0:{structure:fe,memory:{array:os},slots:{0:{structure:pe,memory:{array:we}}}}}}}}},slot:29});const ls=new Uint8Array([0,0,0,0,0,0,0,0,0,0,47,67,0,0,128,63,0,0,128,63,0,0,0,0]);Object.assign(I,{...t,type:2,name:"simple-point-light.KernelParameters(simple-point-light.kernel)",length:1,byteSize:24,align:3,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"center",structure:se},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"attenuationDelta",structure:f},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"attenuationSpeed",structure:f},{...e,type:4,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:3,name:"attenuationDecay",structure:f}],methods:[],template:{memory:{array:ls}}},slot:32});Object.assign(ge,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(simple-point-light.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(Se,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(simple-point-light.createOutput)).Fn.return_type.?).ErrorUnion.error_set!simple-point-light.KernelOutput(u8,simple-point-light.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:x},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ge}],methods:[],template:null},slot:37});Object.assign(ze,{...t,type:3,name:"createOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:2,name:"2",structure:P},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:3,name:"3",structure:I},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Se}],methods:[],template:null},slot:35});Object.assign(Oe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(simple-point-light.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:49});Object.assign(Ve,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(simple-point-light.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!simple-point-light.KernelOutput(u8,simple-point-light.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:x},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Oe}],methods:[],template:null},slot:38});Object.assign(Re,{...t,type:3,name:"createPartialOutput",length:1,byteSize:96,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:320,bitSize:192,byteSize:24,slot:4,name:"4",structure:P},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:5,name:"5",structure:I},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Ve}],methods:[],template:null},slot:36});const us={argStruct:ze,thunk:8,name:"createOutput"},cs={argStruct:Re,thunk:2,name:"createPartialOutput"};Object.assign(qe,{...t,type:2,name:"simple-point-light",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:we}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:he},{...e,type:7,isRequired:!1,name:"Input",structure:P},{...e,type:7,isRequired:!1,name:"Output",structure:x},{...e,type:7,isRequired:!1,name:"Parameters",structure:I}],methods:[us,cs],template:null},slot:0});const ys=[h,W,X,E,Y,Z,K,y,d,ee,te,F,f,se,l,s,w,z,re,T,ae,M,ie,$,A,O,me,B,L,j,V,ne,G,oe,H,he,R,le,ue,u,ce,U,_,ye,J,P,pe,fe,N,x,I,ge,Se,ze,Oe,Ve,Re,qe],ps=We(ys),fs=qe.constructor,bs=(async()=>{const m=new URL("simple-point-light-786de7d7.wasm",import.meta.url).href;return fetch(m)})();Xe(bs,{...ps,writeBack:!0});const{createOutput:Rs,createPartialOutput:ds,kernel:de,Input:hs,Output:qs,Parameters:ws}=fs;function gs(m,o,a,r,i={},g={}){if(Array.isArray(i)){const b=i;i={};for(const[p,S]of Object.keys(de.inputImages).entries())i[S]=b[p]}const k=new hs(void 0),C=Object.keys(de.inputImages),n=[];let q;for(const b of C){let p=i[b];if(p||(C.length===1&&["data","width","height"].every(S=>!!i[S])?p=i:n.push(b)),k[b]=p,q){if(p.colorSpace!==q)throw new Error(`Input images must all use the same color space: ${q}`)}else q=p.colorSpace}if(n.length>0)throw new Error(`Missing input image${n.length>1?"s":""}: ${n.join(", ")}`);const be=ds(m,o,a,r,k,g),Ae=b=>{const p=Object.keys(b),S={};for(const Ue of p){const{data:{typedArray:D},width:_e,height:xe}=b[Ue];let v;if(typeof ImageData=="function"){const Ie=new Uint8ClampedArray(D.buffer,D.byteOffset,D.byteLength);v=new ImageData(Ie,_e,r,{colorSpace:q})}else v={data:D,width:_e,height:xe};if(p.length===1)return v;S[Ue]=v}return S};return be[Symbol.toStringTag]==="Promise"?be.then(Ae):Ae(be)}function Ss(){const m={};for(let[o,a]of Object.entries(de)){if(o==="parameters"){const r={};for(const[i,g]of Object.entries(a)){const k=r[i]={};for(let[C,n]of Object.entries(g))typeof n=="object"?"string"in n?n=n.string:n=Pe(n):typeof n=="function"&&(n=zs(n.name)),k[C]=n}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());m[o]=a}return m}function Pe(m){const o=[];for(let[a,r]of Object.entries(m))typeof r=="object"&&(r=Pe(r)),o[a]=r;return o}function zs(m){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[m]}onmessage=m=>{const[o,a,...r]=m.data;Os(o,r).then(([i,g])=>{postMessage([o,a,i],{transfer:g})}).catch(i=>{postMessage(["error",a,i])})};async function Os(m,o){switch(m){case"getKernelInfo":return[Ss(...o)];case"createPartialImageData":const r=await gs(...o),i=[];if("data"in r&&"width"in r&&"height"in r)i.push(r.data.buffer);else for(const g of Object.entries(r))i.push(r.data.buffer);return[r,i];default:throw new Error(`Unknown function: ${m}`)}}
