import{u as Ge,a as He,b as Je,d as Ne,c as Qe,e as We,f as Xe,g as Ye,h as Ze,i as et,j as tt,k as st,l as rt,n as at,p as mt,m as it,o as ot,q as nt,r as ct}from"./index-cfb20c86.js";Ge();He();Je();Ne();Qe();We();Xe();Ye();Ze();et();tt();st();rt();at();mt();it();ot();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},g={},ee={},te={},F={},se={},re={},D={},p={},h={},ae={},me={},T={},V={},d={},o={},s={},O={},b={},j={},_={},ie={},M={},oe={},$={},ne={},B={},ce={},L={},le={},G={},ue={},H={},pe={},J={},ye={},N={},Q={},P={},R={},fe={},W={},be={},X={},qe={},q={},de={},he={},u={},ge={},A={},U={},Se={},Y={},k={},ze={},Oe={},Z={},x={},I={},we={},Ve={},Ae={},Ue={},je={},Pe={},ke={};Object.assign(g,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:5});Object.assign(ee,{...t,type:1,name:"[10:0]u8",length:10,byteSize:11,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:4});Object.assign(te,{...t,type:11,name:"*const [10:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:3});Object.assign(F,{...t,type:11,name:"**const [10:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:2});Object.assign(se,{...t,type:1,name:"[0:0]u8",length:0,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:8});Object.assign(re,{...t,type:11,name:"*const [0:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:7});Object.assign(D,{...t,type:11,name:"**const [0:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:6});Object.assign(p,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:10});Object.assign(h,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:9});Object.assign(ae,{...t,type:1,name:"[24:0]u8",length:24,byteSize:25,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:13});Object.assign(me,{...t,type:11,name:"*const [24:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:12});Object.assign(T,{...t,type:11,name:"**const [24:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:11});Object.assign(V,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:V}],methods:[],template:null},slot:47});Object.assign(d,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:V}],methods:[],template:null},slot:33});Object.assign(o,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:o}],methods:[],template:null},slot:64});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:o}],methods:[],template:null},slot:63});const lt=new Uint8Array([]),ut=new Uint8Array([88,30,16,0]),Ee=new Uint8Array([0,0,0,0,0,0,0,0]),pt=new Uint8Array([88,30,16,0]);Object.assign(O,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:lt},slots:{0:{structure:s,memory:{array:ut},slots:{0:{structure:o,memory:{array:Ee},address:1056344}}},1:{structure:s,memory:{array:pt},slots:{0:{structure:o,memory:{array:Ee},address:1056344}}}}}},slot:51});Object.assign(b,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:O}],methods:[],template:null},slot:50});const yt=new Uint8Array([]),ft=new Uint8Array([80,30,16,0]),Ke=new Uint8Array([0,0,0,0,0,0,89,64]),bt=new Uint8Array([80,30,16,0]);Object.assign(j,{...t,type:2,name:"struct{comptime comptime_float = 100, comptime comptime_float = 100}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:yt},slots:{0:{structure:s,memory:{array:ft},slots:{0:{structure:o,memory:{array:Ke},address:1056336}}},1:{structure:s,memory:{array:bt},slots:{0:{structure:o,memory:{array:Ke},address:1056336}}}}}},slot:53});Object.assign(_,{...t,type:11,name:"*const struct{comptime comptime_float = 100, comptime comptime_float = 100}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:j}],methods:[],template:null},slot:52});const dt=new Uint8Array([]),ht=new Uint8Array([72,30,16,0]),Fe=new Uint8Array([0,0,0,0,0,0,52,64]),gt=new Uint8Array([72,30,16,0]);Object.assign(ie,{...t,type:2,name:"struct{comptime comptime_float = 20, comptime comptime_float = 20}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:dt},slots:{0:{structure:s,memory:{array:ht},slots:{0:{structure:o,memory:{array:Fe},address:1056328}}},1:{structure:s,memory:{array:gt},slots:{0:{structure:o,memory:{array:Fe},address:1056328}}}}}},slot:55});Object.assign(M,{...t,type:11,name:"*const struct{comptime comptime_float = 20, comptime comptime_float = 20}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:54});const St=new Uint8Array([]),zt=new Uint8Array([170,170,170,170]),i=new Uint8Array([]),Ot=new Uint8Array([170,170,170,170]),_t=new Uint8Array([170,170,170,170]);Object.assign(oe,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 100, comptime comptime_float = 100} = .{100, 100}, comptime defaultValue: struct{comptime comptime_float = 20, comptime comptime_float = 20} = .{20, 20}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:_},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:M}],methods:[],template:{memory:{array:St},slots:{0:{structure:b,memory:{array:zt},slots:{0:{structure:O,memory:{array:i},address:-1431655766}}},1:{structure:_,memory:{array:Ot},slots:{0:{structure:j,memory:{array:i},address:-1431655766}}},2:{structure:M,memory:{array:_t},slots:{0:{structure:ie,memory:{array:i},address:-1431655766}}}}}},slot:39});Object.assign($,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 100, comptime comptime_float = 100} = .{100, 100}, comptime defaultValue: struct{comptime comptime_float = 20, comptime comptime_float = 20} = .{20, 20}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:38});const Rt=new Uint8Array([]),qt=new Uint8Array([64,30,16,0]),De=new Uint8Array([0,0,0,0,0,0,240,63]),wt=new Uint8Array([64,30,16,0]);Object.assign(ne,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Rt},slots:{0:{structure:s,memory:{array:qt},slots:{0:{structure:o,memory:{array:De},address:1056320}}},1:{structure:s,memory:{array:wt},slots:{0:{structure:o,memory:{array:De},address:1056320}}}}}},slot:57});Object.assign(B,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:56});const Vt=new Uint8Array([]),At=new Uint8Array([56,30,16,0]),Te=new Uint8Array([0,0,0,0,0,0,36,64]),Ut=new Uint8Array([56,30,16,0]);Object.assign(ce,{...t,type:2,name:"struct{comptime comptime_float = 10, comptime comptime_float = 10}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:Vt},slots:{0:{structure:s,memory:{array:At},slots:{0:{structure:o,memory:{array:Te},address:1056312}}},1:{structure:s,memory:{array:Ut},slots:{0:{structure:o,memory:{array:Te},address:1056312}}}}}},slot:59});Object.assign(L,{...t,type:11,name:"*const struct{comptime comptime_float = 10, comptime comptime_float = 10}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:58});const jt=new Uint8Array([]),Pt=new Uint8Array([170,170,170,170]),kt=new Uint8Array([170,170,170,170]),xt=new Uint8Array([170,170,170,170]);Object.assign(le,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime maxValue: struct{comptime comptime_float = 100, comptime comptime_float = 100} = .{100, 100}, comptime defaultValue: struct{comptime comptime_float = 10, comptime comptime_float = 10} = .{10, 10}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:B},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:_},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:L}],methods:[],template:{memory:{array:jt},slots:{0:{structure:B,memory:{array:Pt},slots:{0:{structure:ne,memory:{array:i},address:-1431655766}}},1:{structure:_,memory:{array:kt},slots:{0:{structure:j,memory:{array:i},address:-1431655766}}},2:{structure:L,memory:{array:xt},slots:{0:{structure:ce,memory:{array:i},address:-1431655766}}}}}},slot:41});Object.assign(G,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime maxValue: struct{comptime comptime_float = 100, comptime comptime_float = 100} = .{100, 100}, comptime defaultValue: struct{comptime comptime_float = 10, comptime comptime_float = 10} = .{10, 10}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:40});const It=new Uint8Array([]),Ct=new Uint8Array([48,30,16,0]),Me=new Uint8Array([111,18,131,192,202,33,25,64]),vt=new Uint8Array([48,30,16,0]);Object.assign(ue,{...t,type:2,name:"struct{comptime comptime_float = 6.283, comptime comptime_float = 6.283}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:It},slots:{0:{structure:s,memory:{array:Ct},slots:{0:{structure:o,memory:{array:Me},address:1056304}}},1:{structure:s,memory:{array:vt},slots:{0:{structure:o,memory:{array:Me},address:1056304}}}}}},slot:61});Object.assign(H,{...t,type:11,name:"*const struct{comptime comptime_float = 6.283, comptime comptime_float = 6.283}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:60});const Et=new Uint8Array([]),Kt=new Uint8Array([170,170,170,170]),Ft=new Uint8Array([170,170,170,170]),Dt=new Uint8Array([170,170,170,170]);Object.assign(pe,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 6.283, comptime comptime_float = 6.283} = .{6.283, 6.283}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:b},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:H},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:b}],methods:[],template:{memory:{array:Et},slots:{0:{structure:b,memory:{array:Kt},slots:{0:{structure:O,memory:{array:i},address:-1431655766}}},1:{structure:H,memory:{array:Ft},slots:{0:{structure:ue,memory:{array:i},address:-1431655766}}},2:{structure:b,memory:{array:Dt},slots:{0:{structure:O,memory:{array:i},address:-1431655766}}}}}},slot:43});Object.assign(J,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 6.283, comptime comptime_float = 6.283} = .{6.283, 6.283}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:pe}],methods:[],template:null},slot:42});const Tt=new Uint8Array([]),Mt=new Uint8Array([170,170,170,170]),$t=new Uint8Array([170,170,170,170]),Bt=new Uint8Array([170,170,170,170]);Object.assign(ye,{...t,type:2,name:"struct{comptime amplitude: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 100, comptime comptime_float = 100} = .{100, 100}, comptime defaultValue: struct{comptime comptime_float = 20, comptime comptime_float = 20} = .{20, 20}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{100, 100}, .defaultValue = .{20, 20}}, comptime wavelength: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime maxValue: struct{comptime comptime_float = 100, comptime comptime_float = 100} = .{100, 100}, comptime defaultValue: struct{comptime comptime_float = 10, comptime comptime_float = 10} = .{10, 10}} = .{.type = @Vector(2, f32), .minValue = .{1, 1}, .maxValue = .{100, 100}, .defaultValue = .{10, 10}}, comptime phase: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 6.283, comptime comptime_float = 6.283} = .{6.283, 6.283}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{6.283, 6.283}, .defaultValue = .{0, 0}}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"amplitude",structure:$},{...e,type:8,isRequired:!1,slot:1,name:"wavelength",structure:G},{...e,type:8,isRequired:!1,slot:2,name:"phase",structure:J}],methods:[],template:{memory:{array:Tt},slots:{0:{structure:$,memory:{array:Mt},slots:{0:{structure:oe,memory:{array:i},address:-1431655766}}},1:{structure:G,memory:{array:$t},slots:{0:{structure:le,memory:{array:i},address:-1431655766}}},2:{structure:J,memory:{array:Bt},slots:{0:{structure:pe,memory:{array:i},address:-1431655766}}}}}},slot:15});Object.assign(N,{...t,type:11,name:"*struct{comptime amplitude: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 100, comptime comptime_float = 100} = .{100, 100}, comptime defaultValue: struct{comptime comptime_float = 20, comptime comptime_float = 20} = .{20, 20}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{100, 100}, .defaultValue = .{20, 20}}, comptime wavelength: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime maxValue: struct{comptime comptime_float = 100, comptime comptime_float = 100} = .{100, 100}, comptime defaultValue: struct{comptime comptime_float = 10, comptime comptime_float = 10} = .{10, 10}} = .{.type = @Vector(2, f32), .minValue = .{1, 1}, .maxValue = .{100, 100}, .defaultValue = .{10, 10}}, comptime phase: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 6.283, comptime comptime_float = 6.283} = .{6.283, 6.283}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{6.283, 6.283}, .defaultValue = .{0, 0}}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:14});Object.assign(Q,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:62});const Lt=new Uint8Array([]),Gt=new Uint8Array([96,30,16,0]),Ht=new Uint8Array([4,0,0,0]);Object.assign(P,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:Q}],methods:[],template:{memory:{array:Lt},slots:{0:{structure:Q,memory:{array:Gt},slots:{0:{structure:p,memory:{array:Ht},address:1056352}}}}}},slot:45});Object.assign(R,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:P}],methods:[],template:null},slot:44});const Jt=new Uint8Array([]),Nt=new Uint8Array([170,170,170,170]);Object.assign(fe,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:R}],methods:[],template:{memory:{array:Jt},slots:{0:{structure:R,memory:{array:Nt},slots:{0:{structure:P,memory:{array:i},address:-1431655766}}}}}},slot:17});Object.assign(W,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:16});const Qt=new Uint8Array([]),Wt=new Uint8Array([170,170,170,170]);Object.assign(be,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:R}],methods:[],template:{memory:{array:Qt},slots:{0:{structure:R,memory:{array:Wt},slots:{0:{structure:P,memory:{array:i},address:-1431655766}}}}}},slot:19});Object.assign(X,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:18});const Xt=new Uint8Array([]),Yt=new Uint8Array([]),Zt=new Uint8Array([44,251,15,0]),es=new Uint8Array([228,60,16,0]),ts=new Uint8Array([65,108,108,101,110,32,67,104,111,117,0]),ss=new Uint8Array([108,251,15,0]),rs=new Uint8Array([227,60,16,0]),as=new Uint8Array([0]),ms=new Uint8Array([172,251,15,0]),is=new Uint8Array([1,0,0,0]),os=new Uint8Array([4,252,15,0]),ns=new Uint8Array([202,60,16,0]),cs=new Uint8Array([98,111,120,45,115,104,97,112,101,100,32,114,105,112,112,108,101,32,101,102,102,101,99,116,0]),ls=new Uint8Array([170,170,170,170]),us=new Uint8Array([170,170,170,170]),ps=new Uint8Array([170,170,170,170]);Object.assign(qe,{...t,type:2,name:"ripple-blocks.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Xt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:F},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:D},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:h},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:T},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:N},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:W},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:X}],methods:[],template:{memory:{array:Yt},slots:{0:{structure:F,memory:{array:Zt},slots:{0:{structure:te,memory:{array:es},slots:{0:{structure:ee,memory:{array:ts},address:1064164}}}}},1:{structure:D,memory:{array:ss},slots:{0:{structure:re,memory:{array:rs},slots:{0:{structure:se,memory:{array:as},address:1064163}}}}},2:{structure:h,memory:{array:ms},slots:{0:{structure:p,memory:{array:is}}}},3:{structure:T,memory:{array:os},slots:{0:{structure:me,memory:{array:ns},slots:{0:{structure:ae,memory:{array:cs},address:1064138}}}}},4:{structure:N,memory:{array:ls},slots:{0:{structure:ye,memory:{array:i},address:-1431655766}}},5:{structure:W,memory:{array:us},slots:{0:{structure:fe,memory:{array:i},address:-1431655766}}},6:{structure:X,memory:{array:ps},slots:{0:{structure:be,memory:{array:i},address:-1431655766}}}}}},slot:1});Object.assign(q,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:24});Object.assign(de,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:23});Object.assign(he,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:de}],methods:[],template:null},slot:22});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:25});const ys=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ge,{...t,type:9,name:"ripple-blocks.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:p},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:p}],methods:[],template:{memory:{array:ys}}},slot:26});Object.assign(A,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:A}],methods:[],template:null},slot:27});Object.assign(U,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:U}],methods:[],template:null},slot:28});Object.assign(Se,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:V}],methods:[],template:null},slot:46});const fs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),bs=new Uint8Array([]),ds=new Uint8Array([8,250,15,0]),hs=new Uint8Array([4,0,0,0]);Object.assign(Y,{...t,type:2,name:"ripple-blocks.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:he},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ge},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:A},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:U}],methods:[],template:{memory:{array:fs}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:q},{...e,type:7,isRequired:!1,name:"FPixel",structure:Se},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:bs},slots:{0:{structure:h,memory:{array:ds},slots:{0:{structure:p,memory:{array:hs}}}}}}},slot:21});const gs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ss=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),zs=new Uint8Array([0,0,0,0,0,0,0,0]),xe=new Uint8Array([]);Object.assign(k,{...t,type:2,name:"ripple-blocks.KernelInput(u8,ripple-blocks.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:Y}],methods:[],template:{memory:{array:gs},slots:{0:{structure:Y,memory:{array:Ss},slots:{0:{structure:he,memory:{array:zs},slots:{0:{structure:de,memory:{array:xe}}}}}}}}},slot:20});Object.assign(ze,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:23});Object.assign(Oe,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ze}],methods:[],template:null},slot:31});const Os=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),_s=new Uint8Array([]),Rs=new Uint8Array([8,250,15,0]),qs=new Uint8Array([4,0,0,0]);Object.assign(Z,{...t,type:2,name:"ripple-blocks.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Oe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ge},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:A},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:U}],methods:[],template:{memory:{array:Os}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:q},{...e,type:7,isRequired:!1,name:"FPixel",structure:Se},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:_s},slots:{0:{structure:h,memory:{array:Rs},slots:{0:{structure:p,memory:{array:qs}}}}}}},slot:30});const ws=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Vs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),As=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(x,{...t,type:2,name:"ripple-blocks.KernelOutput(u8,ripple-blocks.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:Z}],methods:[],template:{memory:{array:ws},slots:{0:{structure:Z,memory:{array:Vs},slots:{0:{structure:Oe,memory:{array:As},slots:{0:{structure:ze,memory:{array:xe}}}}}}}}},slot:29});const Us=new Uint8Array([0,0,160,65,0,0,160,65,0,0,32,65,0,0,32,65,0,0,0,0,0,0,0,0]);Object.assign(I,{...t,type:2,name:"ripple-blocks.KernelParameters(ripple-blocks.kernel)",length:1,byteSize:24,align:3,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"amplitude",structure:d},{...e,type:6,isRequired:!1,bitOffset:64,bitSize:64,byteSize:8,slot:1,name:"wavelength",structure:d},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:64,byteSize:8,slot:2,name:"phase",structure:d}],methods:[],template:{memory:{array:Us}}},slot:32});Object.assign(we,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(ripple-blocks.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(Ve,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(ripple-blocks.createOutput)).Fn.return_type.?).ErrorUnion.error_set!ripple-blocks.KernelOutput(u8,ripple-blocks.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:x},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:we}],methods:[],template:null},slot:36});Object.assign(Ae,{...t,type:3,name:"createOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:2,name:"2",structure:k},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:3,name:"3",structure:I},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Ve}],methods:[],template:null},slot:34});Object.assign(Ue,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(ripple-blocks.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:49});Object.assign(je,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(ripple-blocks.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!ripple-blocks.KernelOutput(u8,ripple-blocks.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:x},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Ue}],methods:[],template:null},slot:37});Object.assign(Pe,{...t,type:3,name:"createPartialOutput",length:1,byteSize:96,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:320,bitSize:192,byteSize:24,slot:4,name:"4",structure:k},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:5,name:"5",structure:I},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:6,name:"retval",structure:je}],methods:[],template:null},slot:35});const js={argStruct:Ae,thunk:1,name:"createOutput"},Ps={argStruct:Pe,thunk:6,name:"createPartialOutput"};Object.assign(ke,{...t,type:2,name:"ripple-blocks",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:xe}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:qe},{...e,type:7,isRequired:!1,name:"Input",structure:k},{...e,type:7,isRequired:!1,name:"Output",structure:x},{...e,type:7,isRequired:!1,name:"Parameters",structure:I}],methods:[js,Ps],template:null},slot:0});const ks=[g,ee,te,F,se,re,D,p,h,ae,me,T,V,d,o,s,O,b,j,_,ie,M,oe,$,ne,B,ce,L,le,G,ue,H,pe,J,ye,N,Q,P,R,fe,W,be,X,qe,q,de,he,u,ge,A,U,Se,Y,k,ze,Oe,Z,x,I,we,Ve,Ae,Ue,je,Pe,ke],xs=nt(ks),Is=ke.constructor,Cs=(async()=>{const n=new URL("ripple-blocks-6e8790f2.wasm",import.meta.url).href;return fetch(n)})();ct(Cs,{...xs,writeBack:!0});const{createOutput:$s,createPartialOutput:vs,kernel:Re,Input:Es,Output:Bs,Parameters:Ls}=Is;function Ks(n,l,a,r,m={},S={}){if(Array.isArray(m)){const f=m;m={};for(const[y,z]of Object.keys(Re.inputImages).entries())m[z]=f[y]}const C=new Es(void 0),v=Object.keys(Re.inputImages),c=[];let w;for(const f of v){let y=m[f];if(y||(v.length===1&&["data","width","height"].every(z=>!!m[z])?y=m:c.push(f)),C[f]=y,w){if(y.colorSpace!==w)throw new Error(`Input images must all use the same color space: ${w}`)}else w=y.colorSpace}if(c.length>0)throw new Error(`Missing input image${c.length>1?"s":""}: ${c.join(", ")}`);const _e=vs(n,l,a,r,C,S),Ie=f=>{const y=Object.keys(f),z={};for(const Ce of y){const{data:{typedArray:E},width:ve,height:Be}=f[Ce];let K;if(typeof ImageData=="function"){const Le=new Uint8ClampedArray(E.buffer,E.byteOffset,E.byteLength);K=new ImageData(Le,ve,r,{colorSpace:w})}else K={data:E,width:ve,height:Be};if(y.length===1)return K;z[Ce]=K}return z};return _e[Symbol.toStringTag]==="Promise"?_e.then(Ie):Ie(_e)}function Fs(){const n={};for(let[l,a]of Object.entries(Re)){if(l==="parameters"){const r={};for(const[m,S]of Object.entries(a)){const C=r[m]={};for(let[v,c]of Object.entries(S))typeof c=="object"?"string"in c?c=c.string:c=$e(c):typeof c=="function"&&(c=Ds(c.name)),C[v]=c}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());n[l]=a}return n}function $e(n){const l=[];for(let[a,r]of Object.entries(n))typeof r=="object"&&(r=$e(r)),l[a]=r;return l}function Ds(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[l,a,...r]=n.data;Ts(l,r).then(([m,S])=>{postMessage([l,a,m],{transfer:S})}).catch(m=>{postMessage(["error",a,m])})};async function Ts(n,l){switch(n){case"getKernelInfo":return[Fs(...l)];case"createPartialImageData":const r=await Ks(...l),m=[];if("data"in r&&"width"in r&&"height"in r)m.push(r.data.buffer);else for(const S of Object.entries(r))m.push(r.data.buffer);return[r,m];default:throw new Error(`Unknown function: ${n}`)}}
