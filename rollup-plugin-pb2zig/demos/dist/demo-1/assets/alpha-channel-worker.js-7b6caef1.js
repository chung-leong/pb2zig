import{u as fe,a as he,b as de,c as Se,d as ge,e as ze,f as Oe,g as Re,h as qe,i as we,j as je,k as Ae,l as Ue,m as Pe,n as Ie,o as ke,p as Ve,q as _e,r as ve}from"./index-cfb20c86.js";fe();he();de();Se();ge();ze();Oe();Re();qe();we();je();Ae();Ue();Pe();Ie();ke();Ve();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},f={},F={},D={},k={},M={},$={},V={},u={},y={},B={},_={},v={},R={},h={},L={},E={},G={},x={},ee={},d={},H={},J={},o={},N={},z={},O={},K={},Q={},T={},q={},W={},X={},C={},w={},j={},te={},se={},re={},ae={},ne={},ie={},le={};Object.assign(f,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:5});Object.assign(F,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:4});Object.assign(D,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:F}],methods:[],template:null},slot:3});Object.assign(k,{...t,type:11,name:"**const [14:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:D}],methods:[],template:null},slot:2});Object.assign(M,{...t,type:1,name:"[11:0]u8",length:11,byteSize:12,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:8});Object.assign($,{...t,type:11,name:"*const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:M}],methods:[],template:null},slot:7});Object.assign(V,{...t,type:11,name:"**const [11:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:6});Object.assign(u,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:10});Object.assign(y,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:9});const Ee=new Uint8Array([]);Object.assign(B,{...t,type:2,name:"@TypeOf(.{})",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ee}}},slot:12});Object.assign(_,{...t,type:11,name:"*@TypeOf(.{})",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:11});Object.assign(v,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:40});const xe=new Uint8Array([]),Ke=new Uint8Array([128,2,16,0]),Te=new Uint8Array([4,0,0,0]);Object.assign(R,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:v}],methods:[],template:{memory:{array:xe},slots:{0:{structure:v,memory:{array:Ke},slots:{0:{structure:u,memory:{array:Te},address:1049216}}}}}},slot:35});Object.assign(h,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:34});const Ce=new Uint8Array([]),Fe=new Uint8Array([170,170,170,170]),g=new Uint8Array([]);Object.assign(L,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:h}],methods:[],template:{memory:{array:Ce},slots:{0:{structure:h,memory:{array:Fe},slots:{0:{structure:R,memory:{array:g},address:-1431655766}}}}}},slot:14});Object.assign(E,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:13});const De=new Uint8Array([]),Me=new Uint8Array([170,170,170,170]);Object.assign(G,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:h}],methods:[],template:{memory:{array:De},slots:{0:{structure:h,memory:{array:Me},slots:{0:{structure:R,memory:{array:g},address:-1431655766}}}}}},slot:16});Object.assign(x,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:15});const $e=new Uint8Array([]),Be=new Uint8Array([]),Le=new Uint8Array([100,253,15,0]),Ge=new Uint8Array([138,9,16,0]),He=new Uint8Array([89,111,117,114,32,78,97,109,101,115,112,97,99,101,0]),Je=new Uint8Array([132,253,15,0]),Ne=new Uint8Array([126,9,16,0]),Qe=new Uint8Array([89,111,117,114,32,86,101,110,100,111,114,0]),We=new Uint8Array([164,253,15,0]),Xe=new Uint8Array([1,0,0,0]),Ye=new Uint8Array([170,170,170,170]),Ze=new Uint8Array([170,170,170,170]),et=new Uint8Array([170,170,170,170]);Object.assign(ee,{...t,type:2,name:"alpha-channel.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:$e}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:k},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:V},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:y},{...e,type:6,isRequired:!1,slot:3,name:"parameters",structure:_},{...e,type:6,isRequired:!1,slot:4,name:"inputImages",structure:E},{...e,type:6,isRequired:!1,slot:5,name:"outputImages",structure:x}],methods:[],template:{memory:{array:Be},slots:{0:{structure:k,memory:{array:Le},slots:{0:{structure:D,memory:{array:Ge},slots:{0:{structure:F,memory:{array:He},address:1051018}}}}},1:{structure:V,memory:{array:Je},slots:{0:{structure:$,memory:{array:Ne},slots:{0:{structure:M,memory:{array:Qe},address:1051006}}}}},2:{structure:y,memory:{array:We},slots:{0:{structure:u,memory:{array:Xe}}}},3:{structure:_,memory:{array:Ye},slots:{0:{structure:B,memory:{array:g},address:-1431655766}}},4:{structure:E,memory:{array:Ze},slots:{0:{structure:L,memory:{array:g},address:-1431655766}}},5:{structure:x,memory:{array:et},slots:{0:{structure:G,memory:{array:g},address:-1431655766}}}}}},slot:1});Object.assign(d,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:21});Object.assign(H,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:d}],methods:[],template:null},slot:20});Object.assign(J,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:H}],methods:[],template:null},slot:19});Object.assign(o,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:o}],methods:[],template:null},slot:22});const tt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(N,{...t,type:9,name:"alpha-channel.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:u},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:u}],methods:[],template:{memory:{array:tt}}},slot:23});Object.assign(z,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:z}],methods:[],template:null},slot:24});Object.assign(O,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:25});Object.assign(K,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:K}],methods:[],template:null},slot:39});Object.assign(Q,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:K}],methods:[],template:null},slot:36});const st=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),rt=new Uint8Array([]),at=new Uint8Array([56,252,15,0]),nt=new Uint8Array([4,0,0,0]);Object.assign(T,{...t,type:2,name:"alpha-channel.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:J},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:o},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:o},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:N},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:z},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:O}],methods:[],template:{memory:{array:st}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:d},{...e,type:7,isRequired:!1,name:"FPixel",structure:Q},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:y}],methods:[],template:{memory:{array:rt},slots:{0:{structure:y,memory:{array:at},slots:{0:{structure:u,memory:{array:nt}}}}}}},slot:18});const it=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),lt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ot=new Uint8Array([0,0,0,0,0,0,0,0]),oe=new Uint8Array([]);Object.assign(q,{...t,type:2,name:"alpha-channel.KernelInput(u8,alpha-channel.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:T}],methods:[],template:{memory:{array:it},slots:{0:{structure:T,memory:{array:lt},slots:{0:{structure:J,memory:{array:ot},slots:{0:{structure:H,memory:{array:oe}}}}}}}}},slot:17});Object.assign(W,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:d}],methods:[],template:null},slot:20});Object.assign(X,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:W}],methods:[],template:null},slot:28});const ut=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),mt=new Uint8Array([]),ct=new Uint8Array([56,252,15,0]),yt=new Uint8Array([4,0,0,0]);Object.assign(C,{...t,type:2,name:"alpha-channel.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:X},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:o},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:o},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:N},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:z},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:O}],methods:[],template:{memory:{array:ut}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:d},{...e,type:7,isRequired:!1,name:"FPixel",structure:Q},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:y}],methods:[],template:{memory:{array:mt},slots:{0:{structure:y,memory:{array:ct},slots:{0:{structure:u,memory:{array:yt}}}}}}},slot:27});const bt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),pt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ft=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(w,{...t,type:2,name:"alpha-channel.KernelOutput(u8,alpha-channel.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:C}],methods:[],template:{memory:{array:bt},slots:{0:{structure:C,memory:{array:pt},slots:{0:{structure:X,memory:{array:ft},slots:{0:{structure:W,memory:{array:oe}}}}}}}}},slot:26});const ht=new Uint8Array([]);Object.assign(j,{...t,type:2,name:"alpha-channel.KernelParameters(alpha-channel.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ht}}},slot:29});Object.assign(te,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(alpha-channel.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:37});Object.assign(se,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(alpha-channel.createOutput)).Fn.return_type.?).ErrorUnion.error_set!alpha-channel.KernelOutput(u8,alpha-channel.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:w},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:te}],methods:[],template:null},slot:32});Object.assign(re,{...t,type:3,name:"createOutput",length:1,byteSize:60,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:o},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:o},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:q},{...e,type:6,bitOffset:480,bitSize:0,byteSize:0,slot:3,name:"3",structure:j},{...e,type:6,bitOffset:256,bitSize:224,byteSize:28,slot:4,name:"retval",structure:se}],methods:[],template:null},slot:30});Object.assign(ae,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(alpha-channel.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:38});Object.assign(ne,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(alpha-channel.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!alpha-channel.KernelOutput(u8,alpha-channel.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:w},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ae}],methods:[],template:null},slot:33});Object.assign(ie,{...t,type:3,name:"createPartialOutput",length:1,byteSize:68,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:o},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:o},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:o},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:o},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:q},{...e,type:6,bitOffset:544,bitSize:0,byteSize:0,slot:5,name:"5",structure:j},{...e,type:6,bitOffset:320,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ne}],methods:[],template:null},slot:31});const dt={argStruct:re,thunk:3,name:"createOutput"},St={argStruct:ie,thunk:7,name:"createPartialOutput"};Object.assign(le,{...t,type:2,name:"alpha-channel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:oe}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ee},{...e,type:7,isRequired:!1,name:"Input",structure:q},{...e,type:7,isRequired:!1,name:"Output",structure:w},{...e,type:7,isRequired:!1,name:"Parameters",structure:j}],methods:[dt,St],template:null},slot:0});const gt=[f,F,D,k,M,$,V,u,y,B,_,v,R,h,L,E,G,x,ee,d,H,J,o,N,z,O,K,Q,T,q,W,X,C,w,j,te,se,re,ae,ne,ie,le],zt=_e(gt),Ot=le.constructor,Rt=(async()=>{const n=new URL("alpha-channel-0e1ffda2.wasm",import.meta.url).href;return fetch(n)})();ve(Rt,{...zt,writeBack:!0});const{createOutput:kt,createPartialOutput:qt,kernel:Z,Input:wt,Output:Vt,Parameters:_t}=Ot;function jt(n,l,r,s,a={},b={}){if(Array.isArray(a)){const c=a;a={};for(const[m,p]of Object.keys(Z.inputImages).entries())a[p]=c[m]}const A=new wt(void 0),U=Object.keys(Z.inputImages),i=[];let S;for(const c of U){let m=a[c];if(m||(U.length===1&&["data","width","height"].every(p=>!!a[p])?m=a:i.push(c)),A[c]=m,S){if(m.colorSpace!==S)throw new Error(`Input images must all use the same color space: ${S}`)}else S=m.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const Y=qt(n,l,r,s,A,b),ue=c=>{const m=Object.keys(c),p={};for(const me of m){const{data:{typedArray:P},width:ce,height:be}=c[me];let I;if(typeof ImageData=="function"){const pe=new Uint8ClampedArray(P.buffer,P.byteOffset,P.byteLength);I=new ImageData(pe,ce,s,{colorSpace:S})}else I={data:P,width:ce,height:be};if(m.length===1)return I;p[me]=I}return p};return Y[Symbol.toStringTag]==="Promise"?Y.then(ue):ue(Y)}function At(){const n={};for(let[l,r]of Object.entries(Z)){if(l==="parameters"){const s={};for(const[a,b]of Object.entries(r)){const A=s[a]={};for(let[U,i]of Object.entries(b))typeof i=="object"?"string"in i?i=i.string:i=ye(i):typeof i=="function"&&(i=Ut(i.name)),A[U]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[l]=r}return n}function ye(n){const l=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=ye(s)),l[r]=s;return l}function Ut(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[l,r,...s]=n.data;Pt(l,s).then(([a,b])=>{postMessage([l,r,a],{transfer:b})}).catch(a=>{postMessage(["error",r,a])})};async function Pt(n,l){switch(n){case"getKernelInfo":return[At(...l)];case"createPartialImageData":const s=await jt(...l),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const b of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
