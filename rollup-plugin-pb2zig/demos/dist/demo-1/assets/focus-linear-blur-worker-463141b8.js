import{u as ke,a as ve,b as Ce,d as Ee,c as Ke,e as Fe,f as De,g as Te,h as Me,i as $e,j as Be,k as Le,l as Ge,n as He,p as Je,m as Ne,o as Qe,q as We,r as Xe}from"./index-cfb20c86.js";ke();ve();Ce();Ee();Ke();Fe();De();Te();Me();$e();Be();Le();Ge();He();Je();Ne();Qe();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},h={},N={},Q={},C={},W={},X={},E={},y={},b={},Y={},Z={},K={},d={},ee={},m={},s={},te={},F={},se={},D={},re={},T={},ae={},M={},w={},z={},ie={},$={},B={},U={},O={},me={},L={},ne={},G={},he={},q={},oe={},ue={},l={},le={},_={},A={},ce={},H={},V={},ye={},pe={},J={},j={},P={},Se={},ge={},ze={},Oe={},qe={},Re={},we={};Object.assign(h,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:5});Object.assign(N,{...t,type:1,name:"[18:0]u8",length:18,byteSize:19,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:4});Object.assign(Q,{...t,type:11,name:"*const [18:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:3});Object.assign(C,{...t,type:11,name:"**const [18:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:2});Object.assign(W,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:8});Object.assign(X,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:7});Object.assign(E,{...t,type:11,name:"**const [14:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:6});Object.assign(y,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:10});Object.assign(b,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:9});Object.assign(Y,{...t,type:1,name:"[30:0]u8",length:30,byteSize:31,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:13});Object.assign(Z,{...t,type:11,name:"*const [30:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:12});Object.assign(K,{...t,type:11,name:"**const [30:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:11});Object.assign(d,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:d}],methods:[],template:null},slot:34});Object.assign(ee,{...t,type:13,name:"@Vector(3, f32)",length:3,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:d}],methods:[],template:null},slot:33});Object.assign(m,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:m}],methods:[],template:null},slot:55});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:54});const Ye=new Uint8Array([]),Ze=new Uint8Array([176,2,16,0]),je=new Uint8Array([0,0,0,0,0,0,240,191]),et=new Uint8Array([176,2,16,0]),tt=new Uint8Array([168,2,16,0]),st=new Uint8Array([0,0,0,0,0,0,89,192]);Object.assign(te,{...t,type:2,name:"struct{comptime comptime_float = -1, comptime comptime_float = -1, comptime comptime_float = -100}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:Ye},slots:{0:{structure:s,memory:{array:Ze},slots:{0:{structure:m,memory:{array:je},address:1049264}}},1:{structure:s,memory:{array:et},slots:{0:{structure:m,memory:{array:je},address:1049264}}},2:{structure:s,memory:{array:tt},slots:{0:{structure:m,memory:{array:st},address:1049256}}}}}},slot:49});Object.assign(F,{...t,type:11,name:"*const struct{comptime comptime_float = -1, comptime comptime_float = -1, comptime comptime_float = -100}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:48});const rt=new Uint8Array([]),at=new Uint8Array([160,2,16,0]),be=new Uint8Array([0,0,0,0,0,0,240,63]),it=new Uint8Array([160,2,16,0]),mt=new Uint8Array([152,2,16,0]),nt=new Uint8Array([0,0,0,0,0,0,89,64]);Object.assign(se,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 100}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:rt},slots:{0:{structure:s,memory:{array:at},slots:{0:{structure:m,memory:{array:be},address:1049248}}},1:{structure:s,memory:{array:it},slots:{0:{structure:m,memory:{array:be},address:1049248}}},2:{structure:s,memory:{array:mt},slots:{0:{structure:m,memory:{array:nt},address:1049240}}}}}},slot:51});Object.assign(D,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 100}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:50});const ot=new Uint8Array([]),ut=new Uint8Array([144,2,16,0]),lt=new Uint8Array([57,180,200,118,190,159,230,63]),ct=new Uint8Array([136,2,16,0]),yt=new Uint8Array([57,180,200,118,190,159,230,191]),pt=new Uint8Array([128,2,16,0]),ft=new Uint8Array([0,0,0,0,0,0,62,64]);Object.assign(re,{...t,type:2,name:"struct{comptime comptime_float = 0.707, comptime comptime_float = -0.707, comptime comptime_float = 30}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s}],methods:[],template:{memory:{array:ot},slots:{0:{structure:s,memory:{array:ut},slots:{0:{structure:m,memory:{array:lt},address:1049232}}},1:{structure:s,memory:{array:ct},slots:{0:{structure:m,memory:{array:yt},address:1049224}}},2:{structure:s,memory:{array:pt},slots:{0:{structure:m,memory:{array:ft},address:1049216}}}}}},slot:53});Object.assign(T,{...t,type:11,name:"*const struct{comptime comptime_float = 0.707, comptime comptime_float = -0.707, comptime comptime_float = 30}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:52});const bt=new Uint8Array([]),dt=new Uint8Array([170,170,170,170]),c=new Uint8Array([]),ht=new Uint8Array([170,170,170,170]),St=new Uint8Array([170,170,170,170]);Object.assign(ae,{...t,type:2,name:"struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1, comptime comptime_float = -100} = .{-1, -1, -100}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 100} = .{1, 1, 100}, comptime defaultValue: struct{comptime comptime_float = 0.707, comptime comptime_float = -0.707, comptime comptime_float = 30} = .{0.707, -0.707, 30}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:ee},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:F},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:D},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:T}],methods:[],template:{memory:{array:bt},slots:{0:{structure:F,memory:{array:dt},slots:{0:{structure:te,memory:{array:c},address:-1431655766}}},1:{structure:D,memory:{array:ht},slots:{0:{structure:se,memory:{array:c},address:-1431655766}}},2:{structure:T,memory:{array:St},slots:{0:{structure:re,memory:{array:c},address:-1431655766}}}}}},slot:40});Object.assign(M,{...t,type:11,name:"*const struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1, comptime comptime_float = -100} = .{-1, -1, -100}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 100} = .{1, 1, 100}, comptime defaultValue: struct{comptime comptime_float = 0.707, comptime comptime_float = -0.707, comptime comptime_float = 30} = .{0.707, -0.707, 30}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:39});const gt=new Uint8Array([]),zt=new Uint8Array([200,2,16,0]),Ot=new Uint8Array([0,0,0,0,0,0,0,0]),qt=new Uint8Array([192,2,16,0]),Rt=new Uint8Array([0,0,0,0,0,0,36,64]),wt=new Uint8Array([160,2,16,0]);Object.assign(w,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:d},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:gt},slots:{0:{structure:s,memory:{array:zt},slots:{0:{structure:m,memory:{array:Ot},address:1049288}}},1:{structure:s,memory:{array:qt},slots:{0:{structure:m,memory:{array:Rt},address:1049280}}},2:{structure:s,memory:{array:wt},slots:{0:{structure:m,memory:{array:be},address:1049248}}}}}},slot:42});Object.assign(z,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:w}],methods:[],template:null},slot:41});const _t=new Uint8Array([]),At=new Uint8Array([170,170,170,170]),Ut=new Uint8Array([170,170,170,170]),Vt=new Uint8Array([170,170,170,170]);Object.assign(ie,{...t,type:2,name:"struct{comptime lineEquation: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1, comptime comptime_float = -100} = .{-1, -1, -100}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 100} = .{1, 1, 100}, comptime defaultValue: struct{comptime comptime_float = 0.707, comptime comptime_float = -0.707, comptime comptime_float = 30} = .{0.707, -0.707, 30}} = .{.type = @Vector(3, f32), .minValue = .{-1, -1, -100}, .maxValue = .{1, 1, 100}, .defaultValue = .{0.707, -0.707, 30}}, comptime uScale: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 1}, comptime vScale: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 1}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"lineEquation",structure:M},{...e,type:8,isRequired:!1,slot:1,name:"uScale",structure:z},{...e,type:8,isRequired:!1,slot:2,name:"vScale",structure:z}],methods:[],template:{memory:{array:_t},slots:{0:{structure:M,memory:{array:At},slots:{0:{structure:ae,memory:{array:c},address:-1431655766}}},1:{structure:z,memory:{array:Ut},slots:{0:{structure:w,memory:{array:c},address:-1431655766}}},2:{structure:z,memory:{array:Vt},slots:{0:{structure:w,memory:{array:c},address:-1431655766}}}}}},slot:15});Object.assign($,{...t,type:11,name:"*struct{comptime lineEquation: struct{comptime type: type = @Vector(3, f32), comptime minValue: struct{comptime comptime_float = -1, comptime comptime_float = -1, comptime comptime_float = -100} = .{-1, -1, -100}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 100} = .{1, 1, 100}, comptime defaultValue: struct{comptime comptime_float = 0.707, comptime comptime_float = -0.707, comptime comptime_float = 30} = .{0.707, -0.707, 30}} = .{.type = @Vector(3, f32), .minValue = .{-1, -1, -100}, .maxValue = .{1, 1, 100}, .defaultValue = .{0.707, -0.707, 30}}, comptime uScale: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 1}, comptime vScale: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 1}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:14});Object.assign(B,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:56});const jt=new Uint8Array([]),Pt=new Uint8Array([184,2,16,0]),xt=new Uint8Array([4,0,0,0]);Object.assign(U,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:B}],methods:[],template:{memory:{array:jt},slots:{0:{structure:B,memory:{array:Pt},slots:{0:{structure:y,memory:{array:xt},address:1049272}}}}}},slot:44});Object.assign(O,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:U}],methods:[],template:null},slot:43});const It=new Uint8Array([]),kt=new Uint8Array([170,170,170,170]);Object.assign(me,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:O}],methods:[],template:{memory:{array:It},slots:{0:{structure:O,memory:{array:kt},slots:{0:{structure:U,memory:{array:c},address:-1431655766}}}}}},slot:17});Object.assign(L,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:16});const vt=new Uint8Array([]),Ct=new Uint8Array([170,170,170,170]);Object.assign(ne,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:O}],methods:[],template:{memory:{array:vt},slots:{0:{structure:O,memory:{array:Ct},slots:{0:{structure:U,memory:{array:c},address:-1431655766}}}}}},slot:19});Object.assign(G,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:18});const Et=new Uint8Array([]),Kt=new Uint8Array([]),Ft=new Uint8Array([236,248,15,0]),Dt=new Uint8Array([20,27,16,0]),Tt=new Uint8Array([70,111,99,117,115,105,110,103,76,105,110,101,97,114,66,108,117,114,0]),Mt=new Uint8Array([44,249,15,0]),$t=new Uint8Array([5,27,16,0]),Bt=new Uint8Array([80,101,116,114,105,32,76,101,115,107,105,110,101,110,0]),Lt=new Uint8Array([108,249,15,0]),Gt=new Uint8Array([1,0,0,0]),Ht=new Uint8Array([196,249,15,0]),Jt=new Uint8Array([230,26,16,0]),Nt=new Uint8Array([108,105,110,101,97,114,32,98,108,117,114,32,98,121,32,97,32,108,105,110,101,32,101,113,117,97,116,105,111,110,0]),Qt=new Uint8Array([170,170,170,170]),Wt=new Uint8Array([170,170,170,170]),Xt=new Uint8Array([170,170,170,170]);Object.assign(he,{...t,type:2,name:"focus-linear-blur.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Et}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:C},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:E},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:b},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:K},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:$},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:L},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:G}],methods:[],template:{memory:{array:Kt},slots:{0:{structure:C,memory:{array:Ft},slots:{0:{structure:Q,memory:{array:Dt},slots:{0:{structure:N,memory:{array:Tt},address:1055508}}}}},1:{structure:E,memory:{array:Mt},slots:{0:{structure:X,memory:{array:$t},slots:{0:{structure:W,memory:{array:Bt},address:1055493}}}}},2:{structure:b,memory:{array:Lt},slots:{0:{structure:y,memory:{array:Gt}}}},3:{structure:K,memory:{array:Ht},slots:{0:{structure:Z,memory:{array:Jt},slots:{0:{structure:Y,memory:{array:Nt},address:1055462}}}}},4:{structure:$,memory:{array:Qt},slots:{0:{structure:ie,memory:{array:c},address:-1431655766}}},5:{structure:L,memory:{array:Wt},slots:{0:{structure:me,memory:{array:c},address:-1431655766}}},6:{structure:G,memory:{array:Xt},slots:{0:{structure:ne,memory:{array:c},address:-1431655766}}}}}},slot:1});Object.assign(q,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:24});Object.assign(oe,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:23});Object.assign(ue,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:oe}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const Yt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(le,{...t,type:9,name:"focus-linear-blur.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:y},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:y}],methods:[],template:{memory:{array:Yt}}},slot:26});Object.assign(_,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:_}],methods:[],template:null},slot:27});Object.assign(A,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:28});Object.assign(ce,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:d}],methods:[],template:null},slot:45});const Zt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),es=new Uint8Array([]),ts=new Uint8Array([104,253,15,0]),ss=new Uint8Array([4,0,0,0]);Object.assign(H,{...t,type:2,name:"focus-linear-blur.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ue},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:le},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:_},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:A}],methods:[],template:{memory:{array:Zt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:q},{...e,type:7,isRequired:!1,name:"FPixel",structure:ce},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:es},slots:{0:{structure:b,memory:{array:ts},slots:{0:{structure:y,memory:{array:ss}}}}}}},slot:21});const rs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),as=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),is=new Uint8Array([0,0,0,0,0,0,0,0]),_e=new Uint8Array([]);Object.assign(V,{...t,type:2,name:"focus-linear-blur.KernelInput(u8,focus-linear-blur.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:H}],methods:[],template:{memory:{array:rs},slots:{0:{structure:H,memory:{array:as},slots:{0:{structure:ue,memory:{array:is},slots:{0:{structure:oe,memory:{array:_e}}}}}}}}},slot:20});Object.assign(ye,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:23});Object.assign(pe,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ye}],methods:[],template:null},slot:31});const ms=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ns=new Uint8Array([]),os=new Uint8Array([104,253,15,0]),us=new Uint8Array([4,0,0,0]);Object.assign(J,{...t,type:2,name:"focus-linear-blur.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:pe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:le},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:_},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:A}],methods:[],template:{memory:{array:ms}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:q},{...e,type:7,isRequired:!1,name:"FPixel",structure:ce},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:b}],methods:[],template:{memory:{array:ns},slots:{0:{structure:b,memory:{array:os},slots:{0:{structure:y,memory:{array:us}}}}}}},slot:30});const ls=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),cs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ys=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(j,{...t,type:2,name:"focus-linear-blur.KernelOutput(u8,focus-linear-blur.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:J}],methods:[],template:{memory:{array:ls},slots:{0:{structure:J,memory:{array:cs},slots:{0:{structure:pe,memory:{array:ys},slots:{0:{structure:ye,memory:{array:_e}}}}}}}}},slot:29});const ps=new Uint8Array([244,253,52,63,244,253,52,191,0,0,240,65,0,0,0,0,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0]);Object.assign(P,{...t,type:2,name:"focus-linear-blur.KernelParameters(focus-linear-blur.kernel)",length:1,byteSize:32,align:4,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:96,byteSize:16,slot:0,name:"lineEquation",structure:ee},{...e,type:4,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:1,name:"uScale",structure:d},{...e,type:4,isRequired:!1,bitOffset:160,bitSize:32,byteSize:4,slot:2,name:"vScale",structure:d}],methods:[],template:{memory:{array:ps}}},slot:32});Object.assign(Se,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(focus-linear-blur.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:46});Object.assign(ge,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(focus-linear-blur.createOutput)).Fn.return_type.?).ErrorUnion.error_set!focus-linear-blur.KernelOutput(u8,focus-linear-blur.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Se}],methods:[],template:null},slot:37});Object.assign(ze,{...t,type:3,name:"createOutput",length:1,byteSize:96,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:320,bitSize:192,byteSize:24,slot:2,name:"2",structure:V},{...e,type:6,bitOffset:0,bitSize:256,byteSize:32,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ge}],methods:[],template:null},slot:35});Object.assign(Oe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(focus-linear-blur.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:47});Object.assign(qe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(focus-linear-blur.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!focus-linear-blur.KernelOutput(u8,focus-linear-blur.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:j},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Oe}],methods:[],template:null},slot:38});Object.assign(Re,{...t,type:3,name:"createPartialOutput",length:1,byteSize:112,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:320,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:352,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:384,bitSize:192,byteSize:24,slot:4,name:"4",structure:V},{...e,type:6,bitOffset:0,bitSize:256,byteSize:32,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:576,bitSize:224,byteSize:28,slot:6,name:"retval",structure:qe}],methods:[],template:null},slot:36});const fs={argStruct:ze,thunk:7,name:"createOutput"},bs={argStruct:Re,thunk:2,name:"createPartialOutput"};Object.assign(we,{...t,type:2,name:"focus-linear-blur",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:_e}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:he},{...e,type:7,isRequired:!1,name:"Input",structure:V},{...e,type:7,isRequired:!1,name:"Output",structure:j},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[fs,bs],template:null},slot:0});const ds=[h,N,Q,C,W,X,E,y,b,Y,Z,K,d,ee,m,s,te,F,se,D,re,T,ae,M,w,z,ie,$,B,U,O,me,L,ne,G,he,q,oe,ue,l,le,_,A,ce,H,V,ye,pe,J,j,P,Se,ge,ze,Oe,qe,Re,we],hs=We(ds),Ss=we.constructor,gs=(async()=>{const n=new URL("focus-linear-blur-3b74189e.wasm",import.meta.url).href;return fetch(n)})();Xe(gs,{...hs,writeBack:!0});const{createOutput:Us,createPartialOutput:zs,kernel:de,Input:Os,Output:Vs,Parameters:js}=Ss;function qs(n,u,a,r,i={},S={}){if(Array.isArray(i)){const f=i;i={};for(const[p,g]of Object.keys(de.inputImages).entries())i[g]=f[p]}const x=new Os(void 0),I=Object.keys(de.inputImages),o=[];let R;for(const f of I){let p=i[f];if(p||(I.length===1&&["data","width","height"].every(g=>!!i[g])?p=i:o.push(f)),x[f]=p,R){if(p.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=p.colorSpace}if(o.length>0)throw new Error(`Missing input image${o.length>1?"s":""}: ${o.join(", ")}`);const fe=zs(n,u,a,r,x,S),Ae=f=>{const p=Object.keys(f),g={};for(const Ue of p){const{data:{typedArray:k},width:Ve,height:xe}=f[Ue];let v;if(typeof ImageData=="function"){const Ie=new Uint8ClampedArray(k.buffer,k.byteOffset,k.byteLength);v=new ImageData(Ie,Ve,r,{colorSpace:R})}else v={data:k,width:Ve,height:xe};if(p.length===1)return v;g[Ue]=v}return g};return fe[Symbol.toStringTag]==="Promise"?fe.then(Ae):Ae(fe)}function Rs(){const n={};for(let[u,a]of Object.entries(de)){if(u==="parameters"){const r={};for(const[i,S]of Object.entries(a)){const x=r[i]={};for(let[I,o]of Object.entries(S))typeof o=="object"?"string"in o?o=o.string:o=Pe(o):typeof o=="function"&&(o=ws(o.name)),x[I]=o}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());n[u]=a}return n}function Pe(n){const u=[];for(let[a,r]of Object.entries(n))typeof r=="object"&&(r=Pe(r)),u[a]=r;return u}function ws(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[u,a,...r]=n.data;_s(u,r).then(([i,S])=>{postMessage([u,a,i],{transfer:S})}).catch(i=>{postMessage(["error",a,i])})};async function _s(n,u){switch(n){case"getKernelInfo":return[Rs(...u)];case"createPartialImageData":const r=await qs(...u),i=[];if("data"in r&&"width"in r&&"height"in r)i.push(r.data.buffer);else for(const S of Object.entries(r))i.push(r.data.buffer);return[r,i];default:throw new Error(`Unknown function: ${n}`)}}
