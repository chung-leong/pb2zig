<languageVersion : 1.0;>

kernel hslColorDifference
<   namespace : "net.onthewings.filters";
    vendor : "Andy Li";
    version : 1;
    description : "Return the difference of colors in HSL.";
>
{
    parameter float3 color <
        defaultValue: float3(0.0,0.0,0.0);
        description:"The color value in HSL. h: 0 - 360. s: 0 - 1. l: 0 - 1.";
    >;

    input image4 src;
    output pixel4 dst;

    void
    evaluatePixel()
    {
        pixel4 ori = sampleNearest(src,outCoord());
        
        //Modified from wikipedia http://en.wikipedia.org/wiki/HSL_and_HSV and mojocolor http://code.google.com/p/mojocolors/
        float min;
        float max;
        float delta;

        min = min(min(ori.r,ori.g),ori.b);
        max = max(max(ori.r,ori.g),ori.b);
        
        float h;
        float s;
        float l = 0.5*(max+min);
        delta = max - min;
        
        if( max != 0.0 ) {
            if( ori.r == max ) {
                h = ( ori.g - ori.b ) / delta;		// between yellow & magenta
            } else if ( ori.g == max ) {
                h = 2.0 + ( ori.b - ori.r ) / delta;	// between cyan & yellow
            } else {
                h = 4.0 + ( ori.r - ori.g ) / delta;	// between magenta & cyan
            }
            h *= 60.0;				
            // degrees
            if( h < 0.0 ) {
                h += 360.0;
            }
        } else {
            h = -1.0;
        }
        
        if (l == 0.0){
        	s = 0.0;
        } else if (l <= 0.5) {
        	s = delta / (2.0 * l);
        } else { //l > 0.5
        	s = delta / (2.0-2.0*l);
        }
        
        //hsl is calculated at this point
        //h: 0 - 360
        //s: 0 - 1
        //l: 0 - 1
        
        min = min(h,color[0]);
        max = max(h,color[0]);
        float hDiff = max - min;
        if (hDiff > 180.0) hDiff = min+360.0 - max;
        hDiff /= 180.0; // = hDiff/360 * 2, change to 0 - 1 and double it so that it lies across blank to white.

        dst = float4(hDiff,abs(s-color[1]),abs(l-color[2]),ori[3]);
    }
}