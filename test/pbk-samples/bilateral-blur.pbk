<languageVersion : 1.0;>

kernel BilateralBlur
<   namespace : "net.onthewings.filters";
    vendor : "Andy Li";
    version : 1;
    description : "Bilateral Blur.";
>
{
    parameter float d<
        minValue: 0.001;
        maxValue:10.0;
        defaultValue:2.0;
        description:"Affacts the Gaussian function which based on distance.";
    >;
    parameter float r<
        minValue: 0.001;
        maxValue:10.0;
        defaultValue:0.425;
        description:"Affects the Gaussian function which based on color channels(including alpha)";
    >;

    input image4 src;
    output pixel4 dst;

    void evaluatePixel(){
        float2 pt, curPt;
        float4 p0, p, tempP, totalP;
        float w, totalWeight;
        
        curPt = outCoord();
        totalP = float4(0.0,0.0,0.0,0.0);
        totalWeight = 0.0;
        
        /*
        The two Gaussian functions are combined into one for better preformance.
        Only 9x9 area is sampled for each pixel.
        
        Copy and paste the below comment block to Flash to gen the codes below.
        
        function formatNumber(num:Number,forceSign:Boolean = true):String{
            var str:String = num.toString();
            if (num-Math.floor(num) == 0){
                str += ".0";
            }
            
            if (num < 0){
                return str;
            }else {
                return "+"+str;
            }
        }
        
        var sampleLength:uint = 4;
        
        trace("p0 = sampleNearest(src,curPt);")
        for (var x:int = -sampleLength ; x<=sampleLength ; x++){
        	if (x == -sampleLength){
        		trace("pt.x = curPt.x" + formatNumber(-sampleLength) + ";")
        	} else {
        		trace("++pt.x;")
        	}
            for (var y:int = -sampleLength ; y<=sampleLength ; y++){
            	if (y == -sampleLength){
	        		trace("pt.y = curPt.y" + formatNumber(-sampleLength) + ";")
	        	} else {
	        		trace("++pt.y;")
	        	}
                trace("p = sampleNearest(src,pt);")
                trace("tempP = abs(p0-p);")
                trace("w = exp(" + 
                            "-0.5*(" + 
                                "pow("+formatNumber(Point.distance(new Point(),new Point(x,y)),false)+"/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)" + 
                            ")" + 
                        ");");
                trace("p *= w;")
                trace("totalP += p;")
                trace("totalWeight += w;")
            }
        }
        */

        p0 = sampleNearest(src,curPt);
        pt.x = curPt.x-4.0;
        pt.y = curPt.y-4.0;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+5.656854249492381/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+5.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.47213595499958/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.123105625617661/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.123105625617661/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.47213595499958/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+5.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+5.656854249492381/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.x;
        pt.y = curPt.y-4.0;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+5.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.242640687119285/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.605551275463989/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.1622776601683795/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.1622776601683795/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.605551275463989/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.242640687119285/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+5.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.x;
        pt.y = curPt.y-4.0;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.47213595499958/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.605551275463989/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+2.8284271247461903/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+2.23606797749979/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+2.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+2.23606797749979/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+2.8284271247461903/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.605551275463989/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.47213595499958/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.x;
        pt.y = curPt.y-4.0;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.123105625617661/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.1622776601683795/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+2.23606797749979/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+1.4142135623730951/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+1.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+1.4142135623730951/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+2.23606797749979/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.1622776601683795/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.123105625617661/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.x;
        pt.y = curPt.y-4.0;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+2.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+1.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+0.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+1.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+2.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.x;
        pt.y = curPt.y-4.0;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.123105625617661/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.1622776601683795/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+2.23606797749979/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+1.4142135623730951/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+1.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+1.4142135623730951/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+2.23606797749979/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.1622776601683795/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.123105625617661/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.x;
        pt.y = curPt.y-4.0;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.47213595499958/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.605551275463989/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+2.8284271247461903/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+2.23606797749979/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+2.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+2.23606797749979/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+2.8284271247461903/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.605551275463989/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.47213595499958/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.x;
        pt.y = curPt.y-4.0;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+5.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.242640687119285/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.605551275463989/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.1622776601683795/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.1622776601683795/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+3.605551275463989/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.242640687119285/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+5.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.x;
        pt.y = curPt.y-4.0;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+5.656854249492381/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+5.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.47213595499958/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.123105625617661/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.123105625617661/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+4.47213595499958/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+5.0/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;
        ++pt.y;
        p = sampleNearest(src,pt);
        tempP = abs(p0-p);
        w = exp(-0.5*(pow(+5.656854249492381/d,2.0)+pow((tempP[0]+tempP[1]+tempP[2]+tempP[3])/r,2.0)));
        p *= w;
        totalP += p;
        totalWeight += w;

        dst = totalP/totalWeight;
    }
}
