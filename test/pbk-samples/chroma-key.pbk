<languageVersion: 1.0;>
kernel ChromaKey
<
	namespace: "net.onthewings.filters";
	vendor: "Andy Li";
	version: 1;
	description: "Chroma Key";
>
{
	//uncomment one of the colorspace and one of the threshold
	//#define COLORSPACE_HSV
	#define COLORSPACE_HSL
	//#define THRESHOLD_PER_CHANNEL
	#define THRESHOLD_COMBINE_CHANNEL
	
	//uncomment to output the first part, without threshold.
	//#define DEBUG_COLORDIFF
	
	#ifdef THRESHOLD_COMBINE_CHANNEL
	parameter float2 threshold <
        defaultValue: float2(0.0,1.0);
        description:"For combined channel.";
    >;
    parameter float4 weighting <
        defaultValue: float4(0.33,0.33,0.33,0.0);
        description:"The value of a pixel is the sum of individual channels with weightings.";
    >;
    #endif
    
    #ifdef THRESHOLD_PER_CHANNEL
	parameter float2 threshold0 <
        defaultValue: float2(0.0,1.0);
        description:"For red channel.";
    >;
	parameter float2 threshold1 <
        defaultValue: float2(0.0,1.0);
        description:"For green channel.";
    >;
    parameter float2 threshold2 <
        defaultValue: float2(0.0,1.0);
        description:"For blue channel.";
    >;
    parameter float2 threshold3 <
        defaultValue: float2(0.0,1.0);
        description:"For alpha channel.";
    >;
    #endif
    
    parameter float4 color <
        defaultValue: float4(0.0,0.0,0.0,1.0);
        #ifdef COLORSPACE_HSV
        description:"The color value in HSV. h: 0 - 360. s: 0 - 1. v: 0 - 1.";
        #endif
        #ifdef COLORSPACE_HSL
        description:"The color value in HSL. h: 0 - 360. s: 0 - 1. l: 0 - 1.";
        #endif
    >;
    parameter float4 outputColor0 <
        defaultValue: float4(0.0,0.0,0.0,1.0);
        description:"Color for thresholded area.";
    >;
    parameter float4 outputColor1 <
        defaultValue: float4(1.0,1.0,1.0,1.0);
        description:"Color for all passed area.";
    >;
    parameter bool outputColor0UseInputColor <
        defaultValue: false;
        description:"If true, ignore outputColor0 and use input color in thresholded area.";
    >;
    parameter bool outputColor1UseInputColor <
        defaultValue: false;
        description:"If true, ignore outputColor1 and use input color in all passed area.";
    >;
	
	input image4 src;
	output pixel4 target;

	void evaluatePixel()
	{
		pixel4 ori = sampleNearest(src,outCoord());
		pixel4 converted;
        
        /*
        	1. Convert color space and get the color difference.
        */
        
        //Modified from wikipedia http://en.wikipedia.org/wiki/HSL_and_HSV and mojocolor http://code.google.com/p/mojocolors/
        float min;
        float max;
        float delta;
        
        min = min(min(ori.r,ori.g),ori.b);
        max = max(max(ori.r,ori.g),ori.b);
        
		#ifdef COLORSPACE_HSV
        float h;
        float s;
        float v = max;
        delta = max - min;
        
        if( max != 0.0 ) {
            s = delta / max;		// s
            
            if( ori.r == max ) {
                h = ( ori.g - ori.b ) / delta;		// between yellow & magenta
            } else if ( ori.g == max ) {
                h = 2.0 + ( ori.b - ori.r ) / delta;	// between cyan & yellow
            } else {
                h = 4.0 + ( ori.r - ori.g ) / delta;	// between magenta & cyan
            }
            h *= 60.0;				
            // degrees
            if( h < 0.0 ) {
                h += 360.0;
            }
        } else {
            s = 0.0;
            h = -1.0;
        }
        //hsv is calculated at this point
        //h: 0 - 360
        //s: 0 - 1
        //v: 0 - 1
        
        min = min(h,color[0]);
        max = max(h,color[0]);
        float hDiff = max - min;
        if (hDiff > 180.0) hDiff = min+360.0 - max;
        hDiff /= 180.0; // = hDiff/360 * 2, change to 0 - 1 and double it so that it lies across blank to white.

        converted = float4(hDiff,abs(s-color[1]),abs(v-color[2]),ori[3]);
		#endif
		
		#ifdef COLORSPACE_HSL
        float h;
        float s;
        float l = 0.5*(max+min);
        delta = max - min;
        
        if( max != 0.0 ) {
            if( ori.r == max ) {
                h = ( ori.g - ori.b ) / delta;		// between yellow & magenta
            } else if ( ori.g == max ) {
                h = 2.0 + ( ori.b - ori.r ) / delta;	// between cyan & yellow
            } else {
                h = 4.0 + ( ori.r - ori.g ) / delta;	// between magenta & cyan
            }
            h *= 60.0;				
            // degrees
            if( h < 0.0 ) {
                h += 360.0;
            }
        } else {
            h = -1.0;
        }
        
        if (l == 0.0){
        	s = 0.0;
        } else if (l <= 0.5) {
        	s = delta / (2.0 * l);
        } else { //l > 0.5
        	s = delta / (2.0-2.0*l);
        }
        
        //hsl is calculated at this point
        //h: 0 - 360
        //s: 0 - 1
        //l: 0 - 1
        
        min = min(h,color[0]);
        max = max(h,color[0]);
        float hDiff = max - min;
        if (hDiff > 180.0) hDiff = min+360.0 - max;
        hDiff /= 180.0; // = hDiff/360 * 2, change to 0 - 1 and double it so that it lies across blank to white.

        converted = float4(hDiff,abs(s-color[1]),abs(l-color[2]),ori[3]);
		#endif
		
		#ifdef DEBUG_COLORDIFF
		target = converted;
		return;
		#endif
        
        /*
        	2. Threshold.
        */
        
        bool thresholded;
        
        #ifdef THRESHOLD_PER_CHANNEL
        thresholded = (	converted[0]<threshold0[0] || converted[0]>threshold0[1] || 
						converted[1]<threshold1[0] || converted[1]>threshold1[1] || 
						converted[2]<threshold2[0] || converted[2]>threshold2[1] || 
						converted[3]<threshold3[0] || converted[3]>threshold3[1]	);
		#endif
		
		#ifdef THRESHOLD_COMBINE_CHANNEL
		float brightness = weighting[0]*converted[0] + weighting[1]*converted[1] + weighting[2]*converted[2] + weighting[3]*converted[3];
		thresholded = (brightness < threshold[0] || brightness > threshold[1]);
		#endif
		
		if (thresholded)
			target = outputColor0UseInputColor ? ori : outputColor0;
		else
			target = outputColor1UseInputColor ? ori : outputColor1;
	}
}
