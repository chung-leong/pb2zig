import{u as ke,a as Ce,b as ve,c as Ee,d as Ke,e as Fe,f as De,g as Te,h as Me,i as $e,j as Be,k as Le,l as Ge,m as He,n as Je,o as Ne,p as Qe,q as We,r as Xe}from"./index-9f315e7a.js";ke();Ce();ve();Ee();Ke();Fe();De();Te();Me();$e();Be();Le();Ge();He();Je();Ne();Qe();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},z={},R={},w={},g={},N={},Q={},E={},y={},d={},l={},a={},s={},W={},K={},X={},F={},Y={},D={},Z={},T={},ee={},M={},te={},$={},B={},_={},O={},se={},L={},re={},G={},ye={},V={},ae={},ie={},c={},me={},A={},U={},ne={},H={},j={},oe={},ue={},J={},x={},P={},pe={},fe={},be={},de={},he={},Se={},ge={};Object.assign(z,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:5});Object.assign(R,{...t,type:1,name:"[25:0]u8",length:25,byteSize:26,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:4});Object.assign(w,{...t,type:11,name:"*const [25:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:3});Object.assign(g,{...t,type:11,name:"**const [25:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:w}],methods:[],template:null},slot:2});Object.assign(N,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:8});Object.assign(Q,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:7});Object.assign(E,{...t,type:11,name:"**const [21:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:6});Object.assign(y,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:10});Object.assign(d,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:9});Object.assign(l,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:30});Object.assign(a,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:a}],methods:[],template:null},slot:51});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:a}],methods:[],template:null},slot:50});const Ye=new Uint8Array([]),Ze=new Uint8Array([112,30,16,0]),we=new Uint8Array([0,0,0,0,0,64,143,192]),et=new Uint8Array([104,30,16,0]),Ae=new Uint8Array([0,0,0,0,0,64,143,64]),tt=new Uint8Array([120,30,16,0]),st=new Uint8Array([0,0,0,0,0,0,105,64]);Object.assign(W,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = -1000, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 200}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:l},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Ye},slots:{0:{structure:s,memory:{array:Ze},slots:{0:{structure:a,memory:{array:we},address:1056368}}},1:{structure:s,memory:{array:et},slots:{0:{structure:a,memory:{array:Ae},address:1056360}}},2:{structure:s,memory:{array:tt},slots:{0:{structure:a,memory:{array:st},address:1056376}}}}}},slot:36});Object.assign(K,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = -1000, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 200}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:35});const rt=new Uint8Array([]),at=new Uint8Array([112,30,16,0]),it=new Uint8Array([104,30,16,0]),mt=new Uint8Array([80,30,16,0]),Ue=new Uint8Array([0,0,0,0,0,0,89,64]);Object.assign(X,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = -1000, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 100}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:l},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:rt},slots:{0:{structure:s,memory:{array:at},slots:{0:{structure:a,memory:{array:we},address:1056368}}},1:{structure:s,memory:{array:it},slots:{0:{structure:a,memory:{array:Ae},address:1056360}}},2:{structure:s,memory:{array:mt},slots:{0:{structure:a,memory:{array:Ue},address:1056336}}}}}},slot:38});Object.assign(F,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = -1000, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 100}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:37});const nt=new Uint8Array([]),ot=new Uint8Array([88,30,16,0]),_e=new Uint8Array([123,20,174,71,225,122,132,63]),ut=new Uint8Array([96,30,16,0]),lt=new Uint8Array([0,0,0,0,0,0,36,64]),ct=new Uint8Array([72,30,16,0]),je=new Uint8Array([0,0,0,0,0,0,240,63]);Object.assign(Y,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:l},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:nt},slots:{0:{structure:s,memory:{array:ot},slots:{0:{structure:a,memory:{array:_e},address:1056344}}},1:{structure:s,memory:{array:ut},slots:{0:{structure:a,memory:{array:lt},address:1056352}}},2:{structure:s,memory:{array:ct},slots:{0:{structure:a,memory:{array:je},address:1056328}}}}}},slot:40});Object.assign(D,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:39});const yt=new Uint8Array([]),pt=new Uint8Array([88,30,16,0]),ft=new Uint8Array([80,30,16,0]),bt=new Uint8Array([72,30,16,0]);Object.assign(Z,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:l},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:yt},slots:{0:{structure:s,memory:{array:pt},slots:{0:{structure:a,memory:{array:_e},address:1056344}}},1:{structure:s,memory:{array:ft},slots:{0:{structure:a,memory:{array:Ue},address:1056336}}},2:{structure:s,memory:{array:bt},slots:{0:{structure:a,memory:{array:je},address:1056328}}}}}},slot:42});Object.assign(T,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:41});const dt=new Uint8Array([]),ht=new Uint8Array([56,30,16,0]),Re=new Uint8Array([0,0,0,0,0,0,0,0]),St=new Uint8Array([64,30,16,0]),gt=new Uint8Array([31,133,235,81,184,30,25,64]),zt=new Uint8Array([56,30,16,0]);Object.assign(ee,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 6.28, comptime defaultValue: comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:l},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:dt},slots:{0:{structure:s,memory:{array:ht},slots:{0:{structure:a,memory:{array:Re},address:1056312}}},1:{structure:s,memory:{array:St},slots:{0:{structure:a,memory:{array:gt},address:1056320}}},2:{structure:s,memory:{array:zt},slots:{0:{structure:a,memory:{array:Re},address:1056312}}}}}},slot:44});Object.assign(M,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 6.28, comptime defaultValue: comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:43});const Ot=new Uint8Array([]),Vt=new Uint8Array([170,170,170,170]),f=new Uint8Array([]),qt=new Uint8Array([170,170,170,170]),Rt=new Uint8Array([170,170,170,170]),wt=new Uint8Array([170,170,170,170]),At=new Uint8Array([170,170,170,170]);Object.assign(te,{...t,type:2,name:"struct{comptime line: struct{comptime type: type = f32, comptime minValue: comptime_float = -1000, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 200} = .{.type = f32, .minValue = -1000, .maxValue = 1000, .defaultValue = 200}, comptime height: struct{comptime type: type = f32, comptime minValue: comptime_float = -1000, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 100} = .{.type = f32, .minValue = -1000, .maxValue = 1000, .defaultValue = 100}, comptime stemScale: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0.01, .maxValue = 10, .defaultValue = 1}, comptime squiggleScale: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0.01, .maxValue = 100, .defaultValue = 1}, comptime animationIndex: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 6.28, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = 0, .maxValue = 6.28, .defaultValue = 0}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"line",structure:K},{...e,type:8,isRequired:!1,slot:1,name:"height",structure:F},{...e,type:8,isRequired:!1,slot:2,name:"stemScale",structure:D},{...e,type:8,isRequired:!1,slot:3,name:"squiggleScale",structure:T},{...e,type:8,isRequired:!1,slot:4,name:"animationIndex",structure:M}],methods:[],template:{memory:{array:Ot},slots:{0:{structure:K,memory:{array:Vt},slots:{0:{structure:W,memory:{array:f},address:-1431655766}}},1:{structure:F,memory:{array:qt},slots:{0:{structure:X,memory:{array:f},address:-1431655766}}},2:{structure:D,memory:{array:Rt},slots:{0:{structure:Y,memory:{array:f},address:-1431655766}}},3:{structure:T,memory:{array:wt},slots:{0:{structure:Z,memory:{array:f},address:-1431655766}}},4:{structure:M,memory:{array:At},slots:{0:{structure:ee,memory:{array:f},address:-1431655766}}}}}},slot:12});Object.assign($,{...t,type:11,name:"*struct{comptime line: struct{comptime type: type = f32, comptime minValue: comptime_float = -1000, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 200} = .{.type = f32, .minValue = -1000, .maxValue = 1000, .defaultValue = 200}, comptime height: struct{comptime type: type = f32, comptime minValue: comptime_float = -1000, comptime maxValue: comptime_float = 1000, comptime defaultValue: comptime_float = 100} = .{.type = f32, .minValue = -1000, .maxValue = 1000, .defaultValue = 100}, comptime stemScale: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0.01, .maxValue = 10, .defaultValue = 1}, comptime squiggleScale: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.01, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0.01, .maxValue = 100, .defaultValue = 1}, comptime animationIndex: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 6.28, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = 0, .maxValue = 6.28, .defaultValue = 0}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:11});Object.assign(B,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:52});const Ut=new Uint8Array([]),_t=new Uint8Array([48,30,16,0]),jt=new Uint8Array([4,0,0,0]);Object.assign(_,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:B}],methods:[],template:{memory:{array:Ut},slots:{0:{structure:B,memory:{array:_t},slots:{0:{structure:y,memory:{array:jt},address:1056304}}}}}},slot:46});Object.assign(O,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_}],methods:[],template:null},slot:45});const xt=new Uint8Array([]),Pt=new Uint8Array([170,170,170,170]);Object.assign(se,{...t,type:2,name:"struct{comptime inputImage: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"inputImage",structure:O}],methods:[],template:{memory:{array:xt},slots:{0:{structure:O,memory:{array:Pt},slots:{0:{structure:_,memory:{array:f},address:-1431655766}}}}}},slot:14});Object.assign(L,{...t,type:11,name:"*struct{comptime inputImage: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:13});const It=new Uint8Array([]),kt=new Uint8Array([170,170,170,170]);Object.assign(re,{...t,type:2,name:"struct{comptime outputPixel: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"outputPixel",structure:O}],methods:[],template:{memory:{array:It},slots:{0:{structure:O,memory:{array:kt},slots:{0:{structure:_,memory:{array:f},address:-1431655766}}}}}},slot:16});Object.assign(G,{...t,type:11,name:"*struct{comptime outputPixel: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:15});const Ct=new Uint8Array([]),vt=new Uint8Array([]),Et=new Uint8Array([124,249,15,0]),Kt=new Uint8Array([138,54,16,0]),Ft=new Uint8Array([99,111,109,46,101,118,101,114,101,116,116,45,99,104,117,114,99,104,46,106,117,115,116,105,110,0]),Dt=new Uint8Array([212,249,15,0]),Tt=new Uint8Array([116,54,16,0]),Mt=new Uint8Array([74,117,115,116,105,110,32,69,118,101,114,101,116,116,45,67,104,117,114,99,104,0]),$t=new Uint8Array([20,250,15,0]),Bt=new Uint8Array([1,0,0,0]),Lt=new Uint8Array([108,250,15,0]),Gt=new Uint8Array([90,54,16,0]),Ht=new Uint8Array([99,104,105,104,117,108,121,32,116,104,101,109,101,100,32,116,114,97,110,115,105,116,105,111,110,0]),Jt=new Uint8Array([170,170,170,170]),Nt=new Uint8Array([170,170,170,170]),Qt=new Uint8Array([170,170,170,170]);Object.assign(ye,{...t,type:2,name:"chihuly.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ct}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:g},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:E},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:d},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:g},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:$},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:L},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:G}],methods:[],template:{memory:{array:vt},slots:{0:{structure:g,memory:{array:Et},slots:{0:{structure:w,memory:{array:Kt},slots:{0:{structure:R,memory:{array:Ft},address:1062538}}}}},1:{structure:E,memory:{array:Dt},slots:{0:{structure:Q,memory:{array:Tt},slots:{0:{structure:N,memory:{array:Mt},address:1062516}}}}},2:{structure:d,memory:{array:$t},slots:{0:{structure:y,memory:{array:Bt}}}},3:{structure:g,memory:{array:Lt},slots:{0:{structure:w,memory:{array:Gt},slots:{0:{structure:R,memory:{array:Ht},address:1062490}}}}},4:{structure:$,memory:{array:Jt},slots:{0:{structure:te,memory:{array:f},address:-1431655766}}},5:{structure:L,memory:{array:Nt},slots:{0:{structure:se,memory:{array:f},address:-1431655766}}},6:{structure:G,memory:{array:Qt},slots:{0:{structure:re,memory:{array:f},address:-1431655766}}}}}},slot:1});Object.assign(V,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:21});Object.assign(ae,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:V}],methods:[],template:null},slot:20});Object.assign(ie,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ae}],methods:[],template:null},slot:19});Object.assign(c,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:22});const Wt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(me,{...t,type:9,name:"chihuly.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:y},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:y}],methods:[],template:{memory:{array:Wt}}},slot:23});Object.assign(A,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:A}],methods:[],template:null},slot:24});Object.assign(U,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:U}],methods:[],template:null},slot:25});Object.assign(ne,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:47});const Xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Yt=new Uint8Array([]),Zt=new Uint8Array([104,253,15,0]),es=new Uint8Array([4,0,0,0]);Object.assign(H,{...t,type:2,name:"chihuly.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ie},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:me},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:A},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:U}],methods:[],template:{memory:{array:Xt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:V},{...e,type:7,isRequired:!1,name:"FPixel",structure:ne},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Yt},slots:{0:{structure:d,memory:{array:Zt},slots:{0:{structure:y,memory:{array:es}}}}}}},slot:18});const ts=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ss=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),rs=new Uint8Array([0,0,0,0,0,0,0,0]),ze=new Uint8Array([]);Object.assign(j,{...t,type:2,name:"chihuly.KernelInput(u8,chihuly.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"inputImage",structure:H}],methods:[],template:{memory:{array:ts},slots:{0:{structure:H,memory:{array:ss},slots:{0:{structure:ie,memory:{array:rs},slots:{0:{structure:ae,memory:{array:ze}}}}}}}}},slot:17});Object.assign(oe,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:V}],methods:[],template:null},slot:20});Object.assign(ue,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:oe}],methods:[],template:null},slot:28});const as=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),is=new Uint8Array([]),ms=new Uint8Array([104,253,15,0]),ns=new Uint8Array([4,0,0,0]);Object.assign(J,{...t,type:2,name:"chihuly.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ue},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:me},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:A},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:U}],methods:[],template:{memory:{array:as}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:V},{...e,type:7,isRequired:!1,name:"FPixel",structure:ne},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:is},slots:{0:{structure:d,memory:{array:ms},slots:{0:{structure:y,memory:{array:ns}}}}}}},slot:27});const os=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),us=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ls=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(x,{...t,type:2,name:"chihuly.KernelOutput(u8,chihuly.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"outputPixel",structure:J}],methods:[],template:{memory:{array:os},slots:{0:{structure:J,memory:{array:us},slots:{0:{structure:ue,memory:{array:ls},slots:{0:{structure:oe,memory:{array:ze}}}}}}}}},slot:26});const cs=new Uint8Array([0,0,72,67,0,0,200,66,0,0,128,63,0,0,128,63,0,0,0,0]);Object.assign(P,{...t,type:2,name:"chihuly.KernelParameters(chihuly.kernel)",length:1,byteSize:20,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"line",structure:l},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"height",structure:l},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"stemScale",structure:l},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"squiggleScale",structure:l},{...e,type:4,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:4,name:"animationIndex",structure:l}],methods:[],template:{memory:{array:cs}}},slot:29});Object.assign(pe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(chihuly.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(fe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(chihuly.createOutput)).Fn.return_type.?).ErrorUnion.error_set!chihuly.KernelOutput(u8,chihuly.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:x},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:pe}],methods:[],template:null},slot:33});Object.assign(be,{...t,type:3,name:"createOutput",length:1,byteSize:80,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:c},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:c},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:j},{...e,type:6,bitOffset:256,bitSize:160,byteSize:20,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:416,bitSize:224,byteSize:28,slot:4,name:"retval",structure:fe}],methods:[],template:null},slot:31});Object.assign(de,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(chihuly.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:49});Object.assign(he,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(chihuly.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!chihuly.KernelOutput(u8,chihuly.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:x},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:de}],methods:[],template:null},slot:34});Object.assign(Se,{...t,type:3,name:"createPartialOutput",length:1,byteSize:88,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:c},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:c},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:c},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:c},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:j},{...e,type:6,bitOffset:320,bitSize:160,byteSize:20,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:480,bitSize:224,byteSize:28,slot:6,name:"retval",structure:he}],methods:[],template:null},slot:32});const ys={argStruct:be,thunk:8,name:"createOutput"},ps={argStruct:Se,thunk:2,name:"createPartialOutput"};Object.assign(ge,{...t,type:2,name:"chihuly",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ze}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ye},{...e,type:7,isRequired:!1,name:"Input",structure:j},{...e,type:7,isRequired:!1,name:"Output",structure:x},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[ys,ps],template:null},slot:0});const fs=[z,R,w,g,N,Q,E,y,d,l,a,s,W,K,X,F,Y,D,Z,T,ee,M,te,$,B,_,O,se,L,re,G,ye,V,ae,ie,c,me,A,U,ne,H,j,oe,ue,J,x,P,pe,fe,be,de,he,Se,ge],bs=We(fs),ds=ge.constructor,hs=(async()=>{const n=new URL("chihuly-9d5192b5.wasm",import.meta.url).href;return fetch(n)})();Xe(hs,{...bs,writeBack:!0});const{createOutput:ws,createPartialOutput:Ss,kernel:ce,Input:gs,Output:As,Parameters:Us}=ds;function zs(n,u,i,r,m={},h={}){if(Array.isArray(m)){const b=m;m={};for(const[p,S]of Object.keys(ce.inputImages).entries())m[S]=b[p]}const I=new gs(void 0),k=Object.keys(ce.inputImages),o=[];let q;for(const b of k){let p=m[b];if(p||(k.length===1&&["data","width","height"].every(S=>!!m[S])?p=m:o.push(b)),I[b]=p,q){if(p.colorSpace!==q)throw new Error(`Input images must all use the same color space: ${q}`)}else q=p.colorSpace}if(o.length>0)throw new Error(`Missing input image${o.length>1?"s":""}: ${o.join(", ")}`);const le=Ss(n,u,i,r,I,h),Oe=b=>{const p=Object.keys(b),S={};for(const Ve of p){const{data:{typedArray:C},width:qe,height:Pe}=b[Ve];let v;if(typeof ImageData=="function"){const Ie=new Uint8ClampedArray(C.buffer,C.byteOffset,C.byteLength);v=new ImageData(Ie,qe,r,{colorSpace:q})}else v={data:C,width:qe,height:Pe};if(p.length===1)return v;S[Ve]=v}return S};return le[Symbol.toStringTag]==="Promise"?le.then(Oe):Oe(le)}function Os(){const n={};for(let[u,i]of Object.entries(ce)){if(u==="parameters"){const r={};for(const[m,h]of Object.entries(i)){const I=r[m]={};for(let[k,o]of Object.entries(h))typeof o=="object"?"string"in o?o=o.string:o=xe(o):typeof o=="function"&&(o=Vs(o.name)),I[k]=o}i=r}else typeof i=="object"&&("string"in i?i=i.string:i=i.valueOf());n[u]=i}return n}function xe(n){const u=[];for(let[i,r]of Object.entries(n))typeof r=="object"&&(r=xe(r)),u[i]=r;return u}function Vs(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[u,i,...r]=n.data;qs(u,r).then(([m,h])=>{postMessage([u,i,m],{transfer:h})}).catch(m=>{postMessage(["error",i,m])})};async function qs(n,u){switch(n){case"getKernelInfo":return[Os(...u)];case"createPartialImageData":const r=await zs(...u),m=[];if("data"in r&&"width"in r&&"height"in r)m.push(r.data.buffer);else for(const h of Object.entries(r))m.push(r.data.buffer);return[r,m];default:throw new Error(`Unknown function: ${n}`)}}
