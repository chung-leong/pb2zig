import{u as Pe,a as xe,b as ke,c as Ce,d as Ie,e as Me,f as ve,g as Ee,h as Ke,i as Fe,j as De,k as Te,l as $e,m as Be,n as Le,o as Ge,p as He,q as Je,r as Ne}from"./index-9f315e7a.js";Pe();xe();ke();Ce();Ie();Me();ve();Ee();Ke();Fe();De();Te();$e();Be();Le();Ge();He();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},h={},H={},J={},C={},N={},Q={},I={},y={},d={},W={},X={},M={},c={},n={},s={},Y={},v={},Z={},E={},ee={},K={},te={},F={},se={},D={},T={},w={},z={},re={},$={},ae={},B={},be={},O={},ie={},ne={},u={},me={},R={},q={},oe={},L={},A={},le={},ue={},G={},U={},j={},de={},he={},Se={},ge={},ze={},Oe={},Ve={};Object.assign(h,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:5});Object.assign(H,{...t,type:1,name:"[19:0]u8",length:19,byteSize:20,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:4});Object.assign(J,{...t,type:11,name:"*const [19:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:3});Object.assign(C,{...t,type:11,name:"**const [19:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:2});Object.assign(N,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:8});Object.assign(Q,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:7});Object.assign(I,{...t,type:11,name:"**const [13:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:6});Object.assign(y,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:10});Object.assign(d,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:9});Object.assign(W,{...t,type:1,name:"[17:0]u8",length:17,byteSize:18,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:13});Object.assign(X,{...t,type:11,name:"*const [17:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:12});Object.assign(M,{...t,type:11,name:"**const [17:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:11});Object.assign(c,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:33});Object.assign(n,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:n}],methods:[],template:null},slot:52});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:n}],methods:[],template:null},slot:51});const Qe=new Uint8Array([]),We=new Uint8Array([152,2,16,0]),ce=new Uint8Array([0,0,0,0,0,0,0,0]),Xe=new Uint8Array([144,2,16,0]),ye=new Uint8Array([0,0,0,0,0,0,240,63]),Ye=new Uint8Array([176,2,16,0]),Ze=new Uint8Array([90,90,90,90,90,90,218,63]);Object.assign(Y,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.4117647058823529}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Qe},slots:{0:{structure:s,memory:{array:We},slots:{0:{structure:n,memory:{array:ce},address:1049240}}},1:{structure:s,memory:{array:Xe},slots:{0:{structure:n,memory:{array:ye},address:1049232}}},2:{structure:s,memory:{array:Ye},slots:{0:{structure:n,memory:{array:Ze},address:1049264}}}}}},slot:39});Object.assign(v,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.4117647058823529}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:38});const et=new Uint8Array([]),tt=new Uint8Array([152,2,16,0]),st=new Uint8Array([144,2,16,0]),rt=new Uint8Array([168,2,16,0]),at=new Uint8Array([241,240,240,240,240,240,224,63]);Object.assign(Z,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.5294117647058824}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:et},slots:{0:{structure:s,memory:{array:tt},slots:{0:{structure:n,memory:{array:ce},address:1049240}}},1:{structure:s,memory:{array:st},slots:{0:{structure:n,memory:{array:ye},address:1049232}}},2:{structure:s,memory:{array:rt},slots:{0:{structure:n,memory:{array:at},address:1049256}}}}}},slot:41});Object.assign(E,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.5294117647058824}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:40});const it=new Uint8Array([]),nt=new Uint8Array([152,2,16,0]),mt=new Uint8Array([144,2,16,0]),ot=new Uint8Array([160,2,16,0]),lt=new Uint8Array([146,145,145,145,145,145,225,63]);Object.assign(ee,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.5490196078431373}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:it},slots:{0:{structure:s,memory:{array:nt},slots:{0:{structure:n,memory:{array:ce},address:1049240}}},1:{structure:s,memory:{array:mt},slots:{0:{structure:n,memory:{array:ye},address:1049232}}},2:{structure:s,memory:{array:ot},slots:{0:{structure:n,memory:{array:lt},address:1049248}}}}}},slot:43});Object.assign(K,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.5490196078431373}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:42});const ut=new Uint8Array([]),ct=new Uint8Array([152,2,16,0]),yt=new Uint8Array([144,2,16,0]),pt=new Uint8Array([136,2,16,0]),ft=new Uint8Array([181,180,180,180,180,180,228,63]);Object.assign(te,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.6470588235294118}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:ut},slots:{0:{structure:s,memory:{array:ct},slots:{0:{structure:n,memory:{array:ce},address:1049240}}},1:{structure:s,memory:{array:yt},slots:{0:{structure:n,memory:{array:ye},address:1049232}}},2:{structure:s,memory:{array:pt},slots:{0:{structure:n,memory:{array:ft},address:1049224}}}}}},slot:45});Object.assign(F,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.6470588235294118}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:44});const bt=new Uint8Array([]),dt=new Uint8Array([170,170,170,170]),f=new Uint8Array([]),ht=new Uint8Array([170,170,170,170]),St=new Uint8Array([170,170,170,170]),gt=new Uint8Array([170,170,170,170]);Object.assign(se,{...t,type:2,name:"struct{comptime CbMin: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.4117647058823529} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.4117647058823529}, comptime CbMax: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.5294117647058824} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.5294117647058824}, comptime CrMin: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.5490196078431373} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.5490196078431373}, comptime CrMax: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.6470588235294118} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.6470588235294118}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"CbMin",structure:v},{...e,type:8,isRequired:!1,slot:1,name:"CbMax",structure:E},{...e,type:8,isRequired:!1,slot:2,name:"CrMin",structure:K},{...e,type:8,isRequired:!1,slot:3,name:"CrMax",structure:F}],methods:[],template:{memory:{array:bt},slots:{0:{structure:v,memory:{array:dt},slots:{0:{structure:Y,memory:{array:f},address:-1431655766}}},1:{structure:E,memory:{array:ht},slots:{0:{structure:Z,memory:{array:f},address:-1431655766}}},2:{structure:K,memory:{array:St},slots:{0:{structure:ee,memory:{array:f},address:-1431655766}}},3:{structure:F,memory:{array:gt},slots:{0:{structure:te,memory:{array:f},address:-1431655766}}}}}},slot:15});Object.assign(D,{...t,type:11,name:"*struct{comptime CbMin: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.4117647058823529} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.4117647058823529}, comptime CbMax: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.5294117647058824} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.5294117647058824}, comptime CrMin: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.5490196078431373} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.5490196078431373}, comptime CrMax: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0.6470588235294118} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0.6470588235294118}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:14});Object.assign(T,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:53});const zt=new Uint8Array([]),Ot=new Uint8Array([128,2,16,0]),Vt=new Uint8Array([4,0,0,0]);Object.assign(w,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:T}],methods:[],template:{memory:{array:zt},slots:{0:{structure:T,memory:{array:Ot},slots:{0:{structure:y,memory:{array:Vt},address:1049216}}}}}},slot:47});Object.assign(z,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:w}],methods:[],template:null},slot:46});const Rt=new Uint8Array([]),qt=new Uint8Array([170,170,170,170]);Object.assign(re,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:z}],methods:[],template:{memory:{array:Rt},slots:{0:{structure:z,memory:{array:qt},slots:{0:{structure:w,memory:{array:f},address:-1431655766}}}}}},slot:17});Object.assign($,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:16});const wt=new Uint8Array([]),At=new Uint8Array([170,170,170,170]);Object.assign(ae,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:z}],methods:[],template:{memory:{array:wt},slots:{0:{structure:z,memory:{array:At},slots:{0:{structure:w,memory:{array:f},address:-1431655766}}}}}},slot:19});Object.assign(B,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:18});const Ut=new Uint8Array([]),jt=new Uint8Array([]),_t=new Uint8Array([204,249,15,0]),Pt=new Uint8Array([218,24,16,0]),xt=new Uint8Array([109,101,46,99,111,115,109,111,100,114,111,46,102,105,108,116,101,114,115,0]),kt=new Uint8Array([12,250,15,0]),Ct=new Uint8Array([204,24,16,0]),It=new Uint8Array([83,116,101,118,101,32,83,104,105,112,109,97,110,0]),Mt=new Uint8Array([76,250,15,0]),vt=new Uint8Array([1,0,0,0]),Et=new Uint8Array([164,250,15,0]),Kt=new Uint8Array([186,24,16,0]),Ft=new Uint8Array([83,107,105,110,32,67,111,108,111,114,32,102,105,108,116,101,114,0]),Dt=new Uint8Array([170,170,170,170]),Tt=new Uint8Array([170,170,170,170]),$t=new Uint8Array([170,170,170,170]);Object.assign(be,{...t,type:2,name:"skin-color-filter.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ut}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:C},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:I},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:d},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:M},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:D},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:$},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:B}],methods:[],template:{memory:{array:jt},slots:{0:{structure:C,memory:{array:_t},slots:{0:{structure:J,memory:{array:Pt},slots:{0:{structure:H,memory:{array:xt},address:1054938}}}}},1:{structure:I,memory:{array:kt},slots:{0:{structure:Q,memory:{array:Ct},slots:{0:{structure:N,memory:{array:It},address:1054924}}}}},2:{structure:d,memory:{array:Mt},slots:{0:{structure:y,memory:{array:vt}}}},3:{structure:M,memory:{array:Et},slots:{0:{structure:X,memory:{array:Kt},slots:{0:{structure:W,memory:{array:Ft},address:1054906}}}}},4:{structure:D,memory:{array:Dt},slots:{0:{structure:se,memory:{array:f},address:-1431655766}}},5:{structure:$,memory:{array:Tt},slots:{0:{structure:re,memory:{array:f},address:-1431655766}}},6:{structure:B,memory:{array:$t},slots:{0:{structure:ae,memory:{array:f},address:-1431655766}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:24});Object.assign(ie,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(ne,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ie}],methods:[],template:null},slot:22});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:25});const Bt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(me,{...t,type:9,name:"skin-color-filter.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:y},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:y}],methods:[],template:{memory:{array:Bt}}},slot:26});Object.assign(R,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:R}],methods:[],template:null},slot:27});Object.assign(q,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:28});Object.assign(oe,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:48});const Lt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Gt=new Uint8Array([]),Ht=new Uint8Array([104,253,15,0]),Jt=new Uint8Array([4,0,0,0]);Object.assign(L,{...t,type:2,name:"skin-color-filter.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ne},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:me},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:R},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:q}],methods:[],template:{memory:{array:Lt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:oe},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Gt},slots:{0:{structure:d,memory:{array:Ht},slots:{0:{structure:y,memory:{array:Jt}}}}}}},slot:21});const Nt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Qt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Wt=new Uint8Array([0,0,0,0,0,0,0,0]),Re=new Uint8Array([]);Object.assign(A,{...t,type:2,name:"skin-color-filter.KernelInput(u8,skin-color-filter.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:L}],methods:[],template:{memory:{array:Nt},slots:{0:{structure:L,memory:{array:Qt},slots:{0:{structure:ne,memory:{array:Wt},slots:{0:{structure:ie,memory:{array:Re}}}}}}}}},slot:20});Object.assign(le,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(ue,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:le}],methods:[],template:null},slot:31});const Xt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Yt=new Uint8Array([]),Zt=new Uint8Array([104,253,15,0]),es=new Uint8Array([4,0,0,0]);Object.assign(G,{...t,type:2,name:"skin-color-filter.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ue},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:me},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:R},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:q}],methods:[],template:{memory:{array:Xt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:oe},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Yt},slots:{0:{structure:d,memory:{array:Zt},slots:{0:{structure:y,memory:{array:es}}}}}}},slot:30});const ts=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ss=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),rs=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(U,{...t,type:2,name:"skin-color-filter.KernelOutput(u8,skin-color-filter.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:G}],methods:[],template:{memory:{array:ts},slots:{0:{structure:G,memory:{array:ss},slots:{0:{structure:ue,memory:{array:rs},slots:{0:{structure:le,memory:{array:Re}}}}}}}}},slot:29});const as=new Uint8Array([211,210,210,62,136,135,7,63,141,140,12,63,166,165,37,63]);Object.assign(j,{...t,type:2,name:"skin-color-filter.KernelParameters(skin-color-filter.kernel)",length:1,byteSize:16,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"CbMin",structure:c},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"CbMax",structure:c},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"CrMin",structure:c},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"CrMax",structure:c}],methods:[],template:{memory:{array:as}}},slot:32});Object.assign(de,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(skin-color-filter.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:49});Object.assign(he,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(skin-color-filter.createOutput)).Fn.return_type.?).ErrorUnion.error_set!skin-color-filter.KernelOutput(u8,skin-color-filter.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:de}],methods:[],template:null},slot:36});Object.assign(Se,{...t,type:3,name:"createOutput",length:1,byteSize:76,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:A},{...e,type:6,bitOffset:256,bitSize:128,byteSize:16,slot:3,name:"3",structure:j},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:he}],methods:[],template:null},slot:34});Object.assign(ge,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(skin-color-filter.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:50});Object.assign(ze,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(skin-color-filter.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!skin-color-filter.KernelOutput(u8,skin-color-filter.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ge}],methods:[],template:null},slot:37});Object.assign(Oe,{...t,type:3,name:"createPartialOutput",length:1,byteSize:84,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:A},{...e,type:6,bitOffset:320,bitSize:128,byteSize:16,slot:5,name:"5",structure:j},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ze}],methods:[],template:null},slot:35});const is={argStruct:Se,thunk:8,name:"createOutput"},ns={argStruct:Oe,thunk:2,name:"createPartialOutput"};Object.assign(Ve,{...t,type:2,name:"skin-color-filter",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Re}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:be},{...e,type:7,isRequired:!1,name:"Input",structure:A},{...e,type:7,isRequired:!1,name:"Output",structure:U},{...e,type:7,isRequired:!1,name:"Parameters",structure:j}],methods:[is,ns],template:null},slot:0});const ms=[h,H,J,C,N,Q,I,y,d,W,X,M,c,n,s,Y,v,Z,E,ee,K,te,F,se,D,T,w,z,re,$,ae,B,be,O,ie,ne,u,me,R,q,oe,L,A,le,ue,G,U,j,de,he,Se,ge,ze,Oe,Ve],os=Je(ms),ls=Ve.constructor,us=(async()=>{const m=new URL("skin-color-filter-c889eb7c.wasm",import.meta.url).href;return fetch(m)})();Ne(us,{...os,writeBack:!0});const{createOutput:Ss,createPartialOutput:cs,kernel:fe,Input:ys,Output:gs,Parameters:zs}=ls;function ps(m,l,a,r,i={},S={}){if(Array.isArray(i)){const b=i;i={};for(const[p,g]of Object.keys(fe.inputImages).entries())i[g]=b[p]}const _=new ys(void 0),P=Object.keys(fe.inputImages),o=[];let V;for(const b of P){let p=i[b];if(p||(P.length===1&&["data","width","height"].every(g=>!!i[g])?p=i:o.push(b)),_[b]=p,V){if(p.colorSpace!==V)throw new Error(`Input images must all use the same color space: ${V}`)}else V=p.colorSpace}if(o.length>0)throw new Error(`Missing input image${o.length>1?"s":""}: ${o.join(", ")}`);const pe=cs(m,l,a,r,_,S),qe=b=>{const p=Object.keys(b),g={};for(const we of p){const{data:{typedArray:x},width:Ae,height:je}=b[we];let k;if(typeof ImageData=="function"){const _e=new Uint8ClampedArray(x.buffer,x.byteOffset,x.byteLength);k=new ImageData(_e,Ae,r,{colorSpace:V})}else k={data:x,width:Ae,height:je};if(p.length===1)return k;g[we]=k}return g};return pe[Symbol.toStringTag]==="Promise"?pe.then(qe):qe(pe)}function fs(){const m={};for(let[l,a]of Object.entries(fe)){if(l==="parameters"){const r={};for(const[i,S]of Object.entries(a)){const _=r[i]={};for(let[P,o]of Object.entries(S))typeof o=="object"?"string"in o?o=o.string:o=Ue(o):typeof o=="function"&&(o=bs(o.name)),_[P]=o}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());m[l]=a}return m}function Ue(m){const l=[];for(let[a,r]of Object.entries(m))typeof r=="object"&&(r=Ue(r)),l[a]=r;return l}function bs(m){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[m]}onmessage=m=>{const[l,a,...r]=m.data;ds(l,r).then(([i,S])=>{postMessage([l,a,i],{transfer:S})}).catch(i=>{postMessage(["error",a,i])})};async function ds(m,l){switch(m){case"getKernelInfo":return[fs(...l)];case"createPartialImageData":const r=await ps(...l),i=[];if("data"in r&&"width"in r&&"height"in r)i.push(r.data.buffer);else for(const S of Object.entries(r))i.push(r.data.buffer);return[r,i];default:throw new Error(`Unknown function: ${m}`)}}
