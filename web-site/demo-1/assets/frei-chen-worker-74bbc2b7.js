import{u as we,a as Ae,b as Ue,c as je,d as _e,e as Pe,f as xe,g as Ie,h as ke,i as ve,j as Ce,k as Ee,l as Ke,m as Fe,n as De,o as Te,p as Me,q as $e,r as Be}from"./index-9f315e7a.js";we();Ae();Ue();je();_e();Pe();xe();Ie();ke();ve();Ce();Ee();Ke();Fe();De();Te();Me();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},z={},H={},J={},C={},N={},Q={},E={},y={},d={},c={},l={},r={},q={},g={},W={},K={},X={},F={},Y={},D={},T={},U={},O={},Z={},M={},ee={},$={},ue={},V={},te={},se={},u={},re={},w={},A={},ae={},B={},j={},ie={},ne={},L={},_={},P={},le={},ce={},ye={},pe={},fe={},be={},de={};Object.assign(z,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:5});Object.assign(H,{...t,type:1,name:"[14:0]u8",length:14,byteSize:15,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:4});Object.assign(J,{...t,type:11,name:"*const [14:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:3});Object.assign(C,{...t,type:11,name:"**const [14:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:2});Object.assign(N,{...t,type:1,name:"[16:0]u8",length:16,byteSize:17,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:8});Object.assign(Q,{...t,type:11,name:"*const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:7});Object.assign(E,{...t,type:11,name:"**const [16:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:6});Object.assign(y,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:10});Object.assign(d,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:9});Object.assign(c,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:30});Object.assign(l,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:l}],methods:[],template:null},slot:47});Object.assign(r,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:l}],methods:[],template:null},slot:46});const Le=new Uint8Array([]),Ge=new Uint8Array([72,30,16,0]),G=new Uint8Array([0,0,0,0,0,0,0,0]),He=new Uint8Array([56,30,16,0]),he=new Uint8Array([0,0,0,0,0,0,240,63]),Je=new Uint8Array([72,30,16,0]);Object.assign(q,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:Le},slots:{0:{structure:r,memory:{array:Ge},slots:{0:{structure:l,memory:{array:G},address:1056328}}},1:{structure:r,memory:{array:He},slots:{0:{structure:l,memory:{array:he},address:1056312}}},2:{structure:r,memory:{array:Je},slots:{0:{structure:l,memory:{array:G},address:1056328}}}}}},slot:36});Object.assign(g,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:35});const Ne=new Uint8Array([]),Qe=new Uint8Array([72,30,16,0]),We=new Uint8Array([80,30,16,0]),Xe=new Uint8Array([0,0,0,0,0,0,36,64]),Ye=new Uint8Array([56,30,16,0]);Object.assign(W,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:Ne},slots:{0:{structure:r,memory:{array:Qe},slots:{0:{structure:l,memory:{array:G},address:1056328}}},1:{structure:r,memory:{array:We},slots:{0:{structure:l,memory:{array:Xe},address:1056336}}},2:{structure:r,memory:{array:Ye},slots:{0:{structure:l,memory:{array:he},address:1056312}}}}}},slot:38});Object.assign(K,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:37});const Ze=new Uint8Array([]),et=new Uint8Array([72,30,16,0]),tt=new Uint8Array([64,30,16,0]),st=new Uint8Array([0,0,0,0,0,0,52,64]),rt=new Uint8Array([56,30,16,0]);Object.assign(X,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 20, comptime defaultValue: comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:Ze},slots:{0:{structure:r,memory:{array:et},slots:{0:{structure:l,memory:{array:G},address:1056328}}},1:{structure:r,memory:{array:tt},slots:{0:{structure:l,memory:{array:st},address:1056320}}},2:{structure:r,memory:{array:rt},slots:{0:{structure:l,memory:{array:he},address:1056312}}}}}},slot:40});Object.assign(F,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 20, comptime defaultValue: comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:39});const at=new Uint8Array([]),it=new Uint8Array([170,170,170,170]),f=new Uint8Array([]),nt=new Uint8Array([170,170,170,170]),mt=new Uint8Array([170,170,170,170]),ot=new Uint8Array([170,170,170,170]);Object.assign(Y,{...t,type:2,name:"struct{comptime threshold: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0}, comptime factor: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 1}, comptime gamma: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 20, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 20, .defaultValue = 1}, comptime invert: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"threshold",structure:g},{...e,type:8,isRequired:!1,slot:1,name:"factor",structure:K},{...e,type:8,isRequired:!1,slot:2,name:"gamma",structure:F},{...e,type:8,isRequired:!1,slot:3,name:"invert",structure:g}],methods:[],template:{memory:{array:at},slots:{0:{structure:g,memory:{array:it},slots:{0:{structure:q,memory:{array:f},address:-1431655766}}},1:{structure:K,memory:{array:nt},slots:{0:{structure:W,memory:{array:f},address:-1431655766}}},2:{structure:F,memory:{array:mt},slots:{0:{structure:X,memory:{array:f},address:-1431655766}}},3:{structure:g,memory:{array:ot},slots:{0:{structure:q,memory:{array:f},address:-1431655766}}}}}},slot:12});Object.assign(D,{...t,type:11,name:"*struct{comptime threshold: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0}, comptime factor: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 1}, comptime gamma: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 20, comptime defaultValue: comptime_float = 1} = .{.type = f32, .minValue = 0, .maxValue = 20, .defaultValue = 1}, comptime invert: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 1, comptime defaultValue: comptime_float = 0} = .{.type = f32, .minValue = 0, .maxValue = 1, .defaultValue = 0}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:11});Object.assign(T,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:48});const ut=new Uint8Array([]),lt=new Uint8Array([48,30,16,0]),ct=new Uint8Array([4,0,0,0]);Object.assign(U,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:T}],methods:[],template:{memory:{array:ut},slots:{0:{structure:T,memory:{array:lt},slots:{0:{structure:y,memory:{array:ct},address:1056304}}}}}},slot:42});Object.assign(O,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:U}],methods:[],template:null},slot:41});const yt=new Uint8Array([]),pt=new Uint8Array([170,170,170,170]);Object.assign(Z,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:O}],methods:[],template:{memory:{array:yt},slots:{0:{structure:O,memory:{array:pt},slots:{0:{structure:U,memory:{array:f},address:-1431655766}}}}}},slot:14});Object.assign(M,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:13});const ft=new Uint8Array([]),bt=new Uint8Array([170,170,170,170]);Object.assign(ee,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:O}],methods:[],template:{memory:{array:ft},slots:{0:{structure:O,memory:{array:bt},slots:{0:{structure:U,memory:{array:f},address:-1431655766}}}}}},slot:16});Object.assign($,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:15});const dt=new Uint8Array([]),ht=new Uint8Array([]),St=new Uint8Array([220,249,15,0]),gt=new Uint8Array([203,48,16,0]),zt=new Uint8Array([99,111,109,46,113,117,97,115,105,109,111,110,100,111,0]),Ot=new Uint8Array([28,250,15,0]),Vt=new Uint8Array([186,48,16,0]),Rt=new Uint8Array([77,97,114,105,111,32,75,108,105,110,103,101,109,97,110,110,0]),qt=new Uint8Array([92,250,15,0]),wt=new Uint8Array([1,0,0,0]),At=new Uint8Array([170,170,170,170]),Ut=new Uint8Array([170,170,170,170]),jt=new Uint8Array([170,170,170,170]);Object.assign(ue,{...t,type:2,name:"frei-chen.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:dt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:C},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:E},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:d},{...e,type:6,isRequired:!1,slot:3,name:"parameters",structure:D},{...e,type:6,isRequired:!1,slot:4,name:"inputImages",structure:M},{...e,type:6,isRequired:!1,slot:5,name:"outputImages",structure:$}],methods:[],template:{memory:{array:ht},slots:{0:{structure:C,memory:{array:St},slots:{0:{structure:J,memory:{array:gt},slots:{0:{structure:H,memory:{array:zt},address:1061067}}}}},1:{structure:E,memory:{array:Ot},slots:{0:{structure:Q,memory:{array:Vt},slots:{0:{structure:N,memory:{array:Rt},address:1061050}}}}},2:{structure:d,memory:{array:qt},slots:{0:{structure:y,memory:{array:wt}}}},3:{structure:D,memory:{array:At},slots:{0:{structure:Y,memory:{array:f},address:-1431655766}}},4:{structure:M,memory:{array:Ut},slots:{0:{structure:Z,memory:{array:f},address:-1431655766}}},5:{structure:$,memory:{array:jt},slots:{0:{structure:ee,memory:{array:f},address:-1431655766}}}}}},slot:1});Object.assign(V,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:z}],methods:[],template:null},slot:21});Object.assign(te,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:V}],methods:[],template:null},slot:20});Object.assign(se,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:te}],methods:[],template:null},slot:19});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:22});const _t=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(re,{...t,type:9,name:"frei-chen.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:y},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:y}],methods:[],template:{memory:{array:_t}}},slot:23});Object.assign(w,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:w}],methods:[],template:null},slot:24});Object.assign(A,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:25});Object.assign(ae,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:43});const Pt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),xt=new Uint8Array([]),It=new Uint8Array([104,253,15,0]),kt=new Uint8Array([4,0,0,0]);Object.assign(B,{...t,type:2,name:"frei-chen.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:se},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:re},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:w},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:A}],methods:[],template:{memory:{array:Pt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:V},{...e,type:7,isRequired:!1,name:"FPixel",structure:ae},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:xt},slots:{0:{structure:d,memory:{array:It},slots:{0:{structure:y,memory:{array:kt}}}}}}},slot:18});const vt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ct=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Et=new Uint8Array([0,0,0,0,0,0,0,0]),Se=new Uint8Array([]);Object.assign(j,{...t,type:2,name:"frei-chen.KernelInput(u8,frei-chen.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:B}],methods:[],template:{memory:{array:vt},slots:{0:{structure:B,memory:{array:Ct},slots:{0:{structure:se,memory:{array:Et},slots:{0:{structure:te,memory:{array:Se}}}}}}}}},slot:17});Object.assign(ie,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:V}],methods:[],template:null},slot:20});Object.assign(ne,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ie}],methods:[],template:null},slot:28});const Kt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ft=new Uint8Array([]),Dt=new Uint8Array([104,253,15,0]),Tt=new Uint8Array([4,0,0,0]);Object.assign(L,{...t,type:2,name:"frei-chen.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ne},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:re},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:w},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:A}],methods:[],template:{memory:{array:Kt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:V},{...e,type:7,isRequired:!1,name:"FPixel",structure:ae},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Ft},slots:{0:{structure:d,memory:{array:Dt},slots:{0:{structure:y,memory:{array:Tt}}}}}}},slot:27});const Mt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),$t=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Bt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(_,{...t,type:2,name:"frei-chen.KernelOutput(u8,frei-chen.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:L}],methods:[],template:{memory:{array:Mt},slots:{0:{structure:L,memory:{array:$t},slots:{0:{structure:ne,memory:{array:Bt},slots:{0:{structure:ie,memory:{array:Se}}}}}}}}},slot:26});const Lt=new Uint8Array([0,0,0,0,0,0,128,63,0,0,128,63,0,0,0,0]);Object.assign(P,{...t,type:2,name:"frei-chen.KernelParameters(frei-chen.kernel)",length:1,byteSize:16,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"threshold",structure:c},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"factor",structure:c},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"gamma",structure:c},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"invert",structure:c}],methods:[],template:{memory:{array:Lt}}},slot:29});Object.assign(le,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(frei-chen.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:44});Object.assign(ce,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(frei-chen.createOutput)).Fn.return_type.?).ErrorUnion.error_set!frei-chen.KernelOutput(u8,frei-chen.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:_},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:le}],methods:[],template:null},slot:33});Object.assign(ye,{...t,type:3,name:"createOutput",length:1,byteSize:76,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:j},{...e,type:6,bitOffset:256,bitSize:128,byteSize:16,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ce}],methods:[],template:null},slot:31});Object.assign(pe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(frei-chen.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:45});Object.assign(fe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(frei-chen.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!frei-chen.KernelOutput(u8,frei-chen.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:_},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:pe}],methods:[],template:null},slot:34});Object.assign(be,{...t,type:3,name:"createPartialOutput",length:1,byteSize:84,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:j},{...e,type:6,bitOffset:320,bitSize:128,byteSize:16,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:fe}],methods:[],template:null},slot:32});const Gt={argStruct:ye,thunk:6,name:"createOutput"},Ht={argStruct:be,thunk:2,name:"createPartialOutput"};Object.assign(de,{...t,type:2,name:"frei-chen",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Se}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ue},{...e,type:7,isRequired:!1,name:"Input",structure:j},{...e,type:7,isRequired:!1,name:"Output",structure:_},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[Gt,Ht],template:null},slot:0});const Jt=[z,H,J,C,N,Q,E,y,d,c,l,r,q,g,W,K,X,F,Y,D,T,U,O,Z,M,ee,$,ue,V,te,se,u,re,w,A,ae,B,j,ie,ne,L,_,P,le,ce,ye,pe,fe,be,de],Nt=$e(Jt),Qt=de.constructor,Wt=(async()=>{const n=new URL("frei-chen-7017ace4.wasm",import.meta.url).href;return fetch(n)})();Be(Wt,{...Nt,writeBack:!0});const{createOutput:as,createPartialOutput:Xt,kernel:oe,Input:Yt,Output:is,Parameters:ns}=Qt;function Zt(n,o,a,s,i={},h={}){if(Array.isArray(i)){const b=i;i={};for(const[p,S]of Object.keys(oe.inputImages).entries())i[S]=b[p]}const x=new Yt(void 0),I=Object.keys(oe.inputImages),m=[];let R;for(const b of I){let p=i[b];if(p||(I.length===1&&["data","width","height"].every(S=>!!i[S])?p=i:m.push(b)),x[b]=p,R){if(p.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=p.colorSpace}if(m.length>0)throw new Error(`Missing input image${m.length>1?"s":""}: ${m.join(", ")}`);const me=Xt(n,o,a,s,x,h),ge=b=>{const p=Object.keys(b),S={};for(const ze of p){const{data:{typedArray:k},width:Oe,height:Re}=b[ze];let v;if(typeof ImageData=="function"){const qe=new Uint8ClampedArray(k.buffer,k.byteOffset,k.byteLength);v=new ImageData(qe,Oe,s,{colorSpace:R})}else v={data:k,width:Oe,height:Re};if(p.length===1)return v;S[ze]=v}return S};return me[Symbol.toStringTag]==="Promise"?me.then(ge):ge(me)}function es(){const n={};for(let[o,a]of Object.entries(oe)){if(o==="parameters"){const s={};for(const[i,h]of Object.entries(a)){const x=s[i]={};for(let[I,m]of Object.entries(h))typeof m=="object"?"string"in m?m=m.string:m=Ve(m):typeof m=="function"&&(m=ts(m.name)),x[I]=m}a=s}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());n[o]=a}return n}function Ve(n){const o=[];for(let[a,s]of Object.entries(n))typeof s=="object"&&(s=Ve(s)),o[a]=s;return o}function ts(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,a,...s]=n.data;ss(o,s).then(([i,h])=>{postMessage([o,a,i],{transfer:h})}).catch(i=>{postMessage(["error",a,i])})};async function ss(n,o){switch(n){case"getKernelInfo":return[es(...o)];case"createPartialImageData":const s=await Zt(...o),i=[];if("data"in s&&"width"in s&&"height"in s)i.push(s.data.buffer);else for(const h of Object.entries(s))i.push(s.data.buffer);return[s,i];default:throw new Error(`Unknown function: ${n}`)}}
