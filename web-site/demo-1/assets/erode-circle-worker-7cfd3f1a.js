import{u as Se,a as ge,b as ze,c as Oe,d as Re,e as qe,f as we,g as je,h as Ae,i as Ue,j as Pe,k as Ie,l as ke,o as Ve,m as _e,p as ve,n as Ee,q as xe,r as Ce}from"./index-9f315e7a.js";Se();ge();ze();Oe();Re();qe();we();je();Ae();Ue();Pe();Ie();ke();Ve();_e();ve();Ee();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},b={},D={},M={},k={},$={},B={},V={},u={},y={},L={},G={},_={},H={},v={},E={},R={},d={},J={},x={},N={},C={},re={},h={},Q={},W={},l={},X={},z={},O={},K={},Y={},T={},q={},Z={},ee={},F={},w={},j={},ne={},ae={},ie={},oe={},le={},ue={},me={};Object.assign(b,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:5});Object.assign(D,{...t,type:1,name:"[12:0]u8",length:12,byteSize:13,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:4});Object.assign(M,{...t,type:11,name:"*const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:D}],methods:[],template:null},slot:3});Object.assign(k,{...t,type:11,name:"**const [12:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:M}],methods:[],template:null},slot:2});Object.assign($,{...t,type:1,name:"[8:0]u8",length:8,byteSize:9,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:8});Object.assign(B,{...t,type:11,name:"*const [8:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:$}],methods:[],template:null},slot:7});Object.assign(V,{...t,type:11,name:"**const [8:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:6});Object.assign(u,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:10});Object.assign(y,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:9});Object.assign(L,{...t,type:1,name:"[38:0]u8",length:38,byteSize:39,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:13});Object.assign(G,{...t,type:11,name:"*const [38:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:12});Object.assign(_,{...t,type:11,name:"**const [38:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:11});const Ke=new Uint8Array([]);Object.assign(H,{...t,type:2,name:"@TypeOf(.{})",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ke}}},slot:15});Object.assign(v,{...t,type:11,name:"*@TypeOf(.{})",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:14});Object.assign(E,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:43});const Te=new Uint8Array([]),Fe=new Uint8Array([128,2,16,0]),De=new Uint8Array([4,0,0,0]);Object.assign(R,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:E}],methods:[],template:{memory:{array:Te},slots:{0:{structure:E,memory:{array:Fe},slots:{0:{structure:u,memory:{array:De},address:1049216}}}}}},slot:38});Object.assign(d,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:R}],methods:[],template:null},slot:37});const Me=new Uint8Array([]),$e=new Uint8Array([170,170,170,170]),g=new Uint8Array([]);Object.assign(J,{...t,type:2,name:"struct{comptime i: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"i",structure:d}],methods:[],template:{memory:{array:Me},slots:{0:{structure:d,memory:{array:$e},slots:{0:{structure:R,memory:{array:g},address:-1431655766}}}}}},slot:17});Object.assign(x,{...t,type:11,name:"*struct{comptime i: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:16});const Be=new Uint8Array([]),Le=new Uint8Array([170,170,170,170]);Object.assign(N,{...t,type:2,name:"struct{comptime o: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"o",structure:d}],methods:[],template:{memory:{array:Be},slots:{0:{structure:d,memory:{array:Le},slots:{0:{structure:R,memory:{array:g},address:-1431655766}}}}}},slot:19});Object.assign(C,{...t,type:11,name:"*struct{comptime o: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:18});const Ge=new Uint8Array([]),He=new Uint8Array([]),Je=new Uint8Array([44,251,15,0]),Ne=new Uint8Array([190,9,16,0]),Qe=new Uint8Array([99,111,109,46,103,97,115,117,98,97,115,117,0]),We=new Uint8Array([108,251,15,0]),Xe=new Uint8Array([181,9,16,0]),Ye=new Uint8Array([103,97,115,117,98,97,115,117,0]),Ze=new Uint8Array([172,251,15,0]),et=new Uint8Array([1,0,0,0]),tt=new Uint8Array([4,252,15,0]),st=new Uint8Array([142,9,16,0]),rt=new Uint8Array([102,108,97,115,104,32,99,111,109,112,97,116,105,98,108,101,32,101,114,111,100,101,32,102,105,108,116,101,114,32,39,99,105,114,99,108,101,39,0]),nt=new Uint8Array([170,170,170,170]),at=new Uint8Array([170,170,170,170]),it=new Uint8Array([170,170,170,170]);Object.assign(re,{...t,type:2,name:"erode-circle.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ge}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:k},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:V},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:y},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:_},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:v},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:x},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:C}],methods:[],template:{memory:{array:He},slots:{0:{structure:k,memory:{array:Je},slots:{0:{structure:M,memory:{array:Ne},slots:{0:{structure:D,memory:{array:Qe},address:1051070}}}}},1:{structure:V,memory:{array:We},slots:{0:{structure:B,memory:{array:Xe},slots:{0:{structure:$,memory:{array:Ye},address:1051061}}}}},2:{structure:y,memory:{array:Ze},slots:{0:{structure:u,memory:{array:et}}}},3:{structure:_,memory:{array:tt},slots:{0:{structure:G,memory:{array:st},slots:{0:{structure:L,memory:{array:rt},address:1051022}}}}},4:{structure:v,memory:{array:nt},slots:{0:{structure:H,memory:{array:g},address:-1431655766}}},5:{structure:x,memory:{array:at},slots:{0:{structure:J,memory:{array:g},address:-1431655766}}},6:{structure:C,memory:{array:it},slots:{0:{structure:N,memory:{array:g},address:-1431655766}}}}}},slot:1});Object.assign(h,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:24});Object.assign(Q,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:23});Object.assign(W,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Q}],methods:[],template:null},slot:22});Object.assign(l,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:l}],methods:[],template:null},slot:25});const ot=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(X,{...t,type:9,name:"erode-circle.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:u},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:u}],methods:[],template:{memory:{array:ot}}},slot:26});Object.assign(z,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:z}],methods:[],template:null},slot:27});Object.assign(O,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:28});Object.assign(K,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:K}],methods:[],template:null},slot:42});Object.assign(Y,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:K}],methods:[],template:null},slot:39});const lt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ut=new Uint8Array([]),mt=new Uint8Array([8,250,15,0]),ct=new Uint8Array([4,0,0,0]);Object.assign(T,{...t,type:2,name:"erode-circle.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:W},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:X},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:z},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:O}],methods:[],template:{memory:{array:lt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:h},{...e,type:7,isRequired:!1,name:"FPixel",structure:Y},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:y}],methods:[],template:{memory:{array:ut},slots:{0:{structure:y,memory:{array:mt},slots:{0:{structure:u,memory:{array:ct}}}}}}},slot:21});const yt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),bt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),pt=new Uint8Array([0,0,0,0,0,0,0,0]),ce=new Uint8Array([]);Object.assign(q,{...t,type:2,name:"erode-circle.KernelInput(u8,erode-circle.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"i",structure:T}],methods:[],template:{memory:{array:yt},slots:{0:{structure:T,memory:{array:bt},slots:{0:{structure:W,memory:{array:pt},slots:{0:{structure:Q,memory:{array:ce}}}}}}}}},slot:20});Object.assign(Z,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:h}],methods:[],template:null},slot:23});Object.assign(ee,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Z}],methods:[],template:null},slot:31});const ft=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),dt=new Uint8Array([]),ht=new Uint8Array([8,250,15,0]),St=new Uint8Array([4,0,0,0]);Object.assign(F,{...t,type:2,name:"erode-circle.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ee},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:l},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:X},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:z},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:O}],methods:[],template:{memory:{array:ft}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:h},{...e,type:7,isRequired:!1,name:"FPixel",structure:Y},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:y}],methods:[],template:{memory:{array:dt},slots:{0:{structure:y,memory:{array:ht},slots:{0:{structure:u,memory:{array:St}}}}}}},slot:30});const gt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),zt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ot=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(w,{...t,type:2,name:"erode-circle.KernelOutput(u8,erode-circle.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"o",structure:F}],methods:[],template:{memory:{array:gt},slots:{0:{structure:F,memory:{array:zt},slots:{0:{structure:ee,memory:{array:Ot},slots:{0:{structure:Z,memory:{array:ce}}}}}}}}},slot:29});const Rt=new Uint8Array([]);Object.assign(j,{...t,type:2,name:"erode-circle.KernelParameters(erode-circle.kernel)",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Rt}}},slot:32});Object.assign(ne,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(erode-circle.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:40});Object.assign(ae,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(erode-circle.createOutput)).Fn.return_type.?).ErrorUnion.error_set!erode-circle.KernelOutput(u8,erode-circle.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:w},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ne}],methods:[],template:null},slot:35});Object.assign(ie,{...t,type:3,name:"createOutput",length:1,byteSize:60,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:q},{...e,type:6,bitOffset:480,bitSize:0,byteSize:0,slot:3,name:"3",structure:j},{...e,type:6,bitOffset:256,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ae}],methods:[],template:null},slot:33});Object.assign(oe,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(erode-circle.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:41});Object.assign(le,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(erode-circle.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!erode-circle.KernelOutput(u8,erode-circle.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:w},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:oe}],methods:[],template:null},slot:36});Object.assign(ue,{...t,type:3,name:"createPartialOutput",length:1,byteSize:68,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:l},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:l},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:l},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:l},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:q},{...e,type:6,bitOffset:544,bitSize:0,byteSize:0,slot:5,name:"5",structure:j},{...e,type:6,bitOffset:320,bitSize:224,byteSize:28,slot:6,name:"retval",structure:le}],methods:[],template:null},slot:34});const qt={argStruct:ie,thunk:1,name:"createOutput"},wt={argStruct:ue,thunk:6,name:"createPartialOutput"};Object.assign(me,{...t,type:2,name:"erode-circle",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ce}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:re},{...e,type:7,isRequired:!1,name:"Input",structure:q},{...e,type:7,isRequired:!1,name:"Output",structure:w},{...e,type:7,isRequired:!1,name:"Parameters",structure:j}],methods:[qt,wt],template:null},slot:0});const jt=[b,D,M,k,$,B,V,u,y,L,G,_,H,v,E,R,d,J,x,N,C,re,h,Q,W,l,X,z,O,K,Y,T,q,Z,ee,F,w,j,ne,ae,ie,oe,le,ue,me],At=xe(jt),Ut=me.constructor,Pt=(async()=>{const a=new URL("erode-circle-e2044bee.wasm",import.meta.url).href;return fetch(a)})();Ce(Pt,{...At,writeBack:!0});const{createOutput:Ct,createPartialOutput:It,kernel:se,Input:kt,Output:Kt,Parameters:Tt}=Ut;function Vt(a,o,r,s,n={},p={}){if(Array.isArray(n)){const c=n;n={};for(const[m,f]of Object.keys(se.inputImages).entries())n[f]=c[m]}const A=new kt(void 0),U=Object.keys(se.inputImages),i=[];let S;for(const c of U){let m=n[c];if(m||(U.length===1&&["data","width","height"].every(f=>!!n[f])?m=n:i.push(c)),A[c]=m,S){if(m.colorSpace!==S)throw new Error(`Input images must all use the same color space: ${S}`)}else S=m.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const te=It(a,o,r,s,A,p),ye=c=>{const m=Object.keys(c),f={};for(const be of m){const{data:{typedArray:P},width:pe,height:de}=c[be];let I;if(typeof ImageData=="function"){const he=new Uint8ClampedArray(P.buffer,P.byteOffset,P.byteLength);I=new ImageData(he,pe,s,{colorSpace:S})}else I={data:P,width:pe,height:de};if(m.length===1)return I;f[be]=I}return f};return te[Symbol.toStringTag]==="Promise"?te.then(ye):ye(te)}function _t(){const a={};for(let[o,r]of Object.entries(se)){if(o==="parameters"){const s={};for(const[n,p]of Object.entries(r)){const A=s[n]={};for(let[U,i]of Object.entries(p))typeof i=="object"?"string"in i?i=i.string:i=fe(i):typeof i=="function"&&(i=vt(i.name)),A[U]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());a[o]=r}return a}function fe(a){const o=[];for(let[r,s]of Object.entries(a))typeof s=="object"&&(s=fe(s)),o[r]=s;return o}function vt(a){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[a]}onmessage=a=>{const[o,r,...s]=a.data;Et(o,s).then(([n,p])=>{postMessage([o,r,n],{transfer:p})}).catch(n=>{postMessage(["error",r,n])})};async function Et(a,o){switch(a){case"getKernelInfo":return[_t(...o)];case"createPartialImageData":const s=await Vt(...o),n=[];if("data"in s&&"width"in s&&"height"in s)n.push(s.data.buffer);else for(const p of Object.entries(s))n.push(s.data.buffer);return[s,n];default:throw new Error(`Unknown function: ${a}`)}}
