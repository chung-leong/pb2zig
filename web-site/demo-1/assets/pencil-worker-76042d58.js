import{u as je,a as _e,b as Pe,c as xe,d as Ie,e as ke,f as ve,g as Ce,h as Ee,i as Ke,j as Fe,k as De,l as Te,m as Me,n as $e,o as Be,p as Le,q as Ge,r as He}from"./index-9f315e7a.js";je();_e();Pe();xe();Ie();ke();ve();Ce();Ee();Ke();Fe();De();Te();Me();$e();Be();Le();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},h={},H={},J={},C={},N={},Q={},E={},y={},d={},W={},X={},K={},c={},l={},r={},q={},z={},Y={},F={},Z={},D={},ee={},T={},M={},U={},O={},te={},$={},se={},B={},ce={},V={},re={},ae={},u={},ie={},w={},A={},ne={},L={},j={},me={},oe={},G={},_={},P={},ye={},pe={},fe={},be={},de={},he={},Se={};Object.assign(h,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:5});Object.assign(H,{...t,type:1,name:"[16:0]u8",length:16,byteSize:17,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:4});Object.assign(J,{...t,type:11,name:"*const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:3});Object.assign(C,{...t,type:11,name:"**const [16:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:2});Object.assign(N,{...t,type:1,name:"[9:0]u8",length:9,byteSize:10,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:8});Object.assign(Q,{...t,type:11,name:"*const [9:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:7});Object.assign(E,{...t,type:11,name:"**const [9:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:6});Object.assign(y,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:y}],methods:[],template:null},slot:10});Object.assign(d,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:9});Object.assign(W,{...t,type:1,name:"[6:0]u8",length:6,byteSize:7,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:13});Object.assign(X,{...t,type:11,name:"*const [6:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:12});Object.assign(K,{...t,type:11,name:"**const [6:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:11});Object.assign(c,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:33});Object.assign(l,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:l}],methods:[],template:null},slot:50});Object.assign(r,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:l}],methods:[],template:null},slot:49});const Je=new Uint8Array([]),Ne=new Uint8Array([72,30,16,0]),ge=new Uint8Array([0,0,0,0,0,0,0,0]),Qe=new Uint8Array([88,30,16,0]),qe=new Uint8Array([0,0,0,0,0,0,89,64]),We=new Uint8Array([96,30,16,0]),Xe=new Uint8Array([0,0,0,0,0,64,88,64]);Object.assign(q,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 97}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:Je},slots:{0:{structure:r,memory:{array:Ne},slots:{0:{structure:l,memory:{array:ge},address:1056328}}},1:{structure:r,memory:{array:Qe},slots:{0:{structure:l,memory:{array:qe},address:1056344}}},2:{structure:r,memory:{array:We},slots:{0:{structure:l,memory:{array:Xe},address:1056352}}}}}},slot:39});Object.assign(z,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 97}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:38});const Ye=new Uint8Array([]),Ze=new Uint8Array([72,30,16,0]),et=new Uint8Array([88,30,16,0]),tt=new Uint8Array([80,30,16,0]),st=new Uint8Array([0,0,0,0,0,0,46,64]);Object.assign(Y,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 15}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:Ye},slots:{0:{structure:r,memory:{array:Ze},slots:{0:{structure:l,memory:{array:ge},address:1056328}}},1:{structure:r,memory:{array:et},slots:{0:{structure:l,memory:{array:qe},address:1056344}}},2:{structure:r,memory:{array:tt},slots:{0:{structure:l,memory:{array:st},address:1056336}}}}}},slot:41});Object.assign(F,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 15}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:40});const rt=new Uint8Array([]),at=new Uint8Array([72,30,16,0]),it=new Uint8Array([64,30,16,0]),nt=new Uint8Array([0,0,0,0,0,0,36,64]),mt=new Uint8Array([56,30,16,0]),ot=new Uint8Array([102,102,102,102,102,102,35,64]);Object.assign(Z,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 9.7}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:c},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:r},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:r},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:r}],methods:[],template:{memory:{array:rt},slots:{0:{structure:r,memory:{array:at},slots:{0:{structure:l,memory:{array:ge},address:1056328}}},1:{structure:r,memory:{array:it},slots:{0:{structure:l,memory:{array:nt},address:1056320}}},2:{structure:r,memory:{array:mt},slots:{0:{structure:l,memory:{array:ot},address:1056312}}}}}},slot:43});Object.assign(D,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 9.7}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:42});const ut=new Uint8Array([]),lt=new Uint8Array([170,170,170,170]),f=new Uint8Array([]),ct=new Uint8Array([170,170,170,170]),yt=new Uint8Array([170,170,170,170]),pt=new Uint8Array([170,170,170,170]);Object.assign(ee,{...t,type:2,name:"struct{comptime n0: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 97} = .{.type = f32, .minValue = 0, .maxValue = 100, .defaultValue = 97}, comptime n1: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 15} = .{.type = f32, .minValue = 0, .maxValue = 100, .defaultValue = 15}, comptime n2: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 97} = .{.type = f32, .minValue = 0, .maxValue = 100, .defaultValue = 97}, comptime n3: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 9.7} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 9.7}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"n0",structure:z},{...e,type:8,isRequired:!1,slot:1,name:"n1",structure:F},{...e,type:8,isRequired:!1,slot:2,name:"n2",structure:z},{...e,type:8,isRequired:!1,slot:3,name:"n3",structure:D}],methods:[],template:{memory:{array:ut},slots:{0:{structure:z,memory:{array:lt},slots:{0:{structure:q,memory:{array:f},address:-1431655766}}},1:{structure:F,memory:{array:ct},slots:{0:{structure:Y,memory:{array:f},address:-1431655766}}},2:{structure:z,memory:{array:yt},slots:{0:{structure:q,memory:{array:f},address:-1431655766}}},3:{structure:D,memory:{array:pt},slots:{0:{structure:Z,memory:{array:f},address:-1431655766}}}}}},slot:15});Object.assign(T,{...t,type:11,name:"*struct{comptime n0: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 97} = .{.type = f32, .minValue = 0, .maxValue = 100, .defaultValue = 97}, comptime n1: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 15} = .{.type = f32, .minValue = 0, .maxValue = 100, .defaultValue = 15}, comptime n2: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 97} = .{.type = f32, .minValue = 0, .maxValue = 100, .defaultValue = 97}, comptime n3: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 10, comptime defaultValue: comptime_float = 9.7} = .{.type = f32, .minValue = 0, .maxValue = 10, .defaultValue = 9.7}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:14});Object.assign(M,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:y}],methods:[],template:null},slot:51});const ft=new Uint8Array([]),bt=new Uint8Array([48,30,16,0]),dt=new Uint8Array([4,0,0,0]);Object.assign(U,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:M}],methods:[],template:{memory:{array:ft},slots:{0:{structure:M,memory:{array:bt},slots:{0:{structure:y,memory:{array:dt},address:1056304}}}}}},slot:45});Object.assign(O,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:U}],methods:[],template:null},slot:44});const ht=new Uint8Array([]),St=new Uint8Array([170,170,170,170]);Object.assign(te,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:O}],methods:[],template:{memory:{array:ht},slots:{0:{structure:O,memory:{array:St},slots:{0:{structure:U,memory:{array:f},address:-1431655766}}}}}},slot:17});Object.assign($,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:16});const gt=new Uint8Array([]),zt=new Uint8Array([170,170,170,170]);Object.assign(se,{...t,type:2,name:"struct{comptime result: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"result",structure:O}],methods:[],template:{memory:{array:gt},slots:{0:{structure:O,memory:{array:zt},slots:{0:{structure:U,memory:{array:f},address:-1431655766}}}}}},slot:19});Object.assign(B,{...t,type:11,name:"*struct{comptime result: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:se}],methods:[],template:null},slot:18});const Ot=new Uint8Array([]),Vt=new Uint8Array([]),Rt=new Uint8Array([156,249,15,0]),qt=new Uint8Array([243,48,16,0]),wt=new Uint8Array([97,114,46,115,104,97,100,101,114,46,112,101,110,99,105,108,0]),At=new Uint8Array([220,249,15,0]),Ut=new Uint8Array([233,48,16,0]),jt=new Uint8Array([65,108,97,110,32,82,111,115,115,0]),_t=new Uint8Array([28,250,15,0]),Pt=new Uint8Array([1,0,0,0]),xt=new Uint8Array([116,250,15,0]),It=new Uint8Array([226,48,16,0]),kt=new Uint8Array([80,101,110,99,105,108,0]),vt=new Uint8Array([170,170,170,170]),Ct=new Uint8Array([170,170,170,170]),Et=new Uint8Array([170,170,170,170]);Object.assign(ce,{...t,type:2,name:"pencil.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ot}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:C},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:E},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:d},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:K},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:T},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:$},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:B}],methods:[],template:{memory:{array:Vt},slots:{0:{structure:C,memory:{array:Rt},slots:{0:{structure:J,memory:{array:qt},slots:{0:{structure:H,memory:{array:wt},address:1061107}}}}},1:{structure:E,memory:{array:At},slots:{0:{structure:Q,memory:{array:Ut},slots:{0:{structure:N,memory:{array:jt},address:1061097}}}}},2:{structure:d,memory:{array:_t},slots:{0:{structure:y,memory:{array:Pt}}}},3:{structure:K,memory:{array:xt},slots:{0:{structure:X,memory:{array:It},slots:{0:{structure:W,memory:{array:kt},address:1061090}}}}},4:{structure:T,memory:{array:vt},slots:{0:{structure:ee,memory:{array:f},address:-1431655766}}},5:{structure:$,memory:{array:Ct},slots:{0:{structure:te,memory:{array:f},address:-1431655766}}},6:{structure:B,memory:{array:Et},slots:{0:{structure:se,memory:{array:f},address:-1431655766}}}}}},slot:1});Object.assign(V,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:h}],methods:[],template:null},slot:24});Object.assign(re,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:V}],methods:[],template:null},slot:23});Object.assign(ae,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:re}],methods:[],template:null},slot:22});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:25});const Kt=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(ie,{...t,type:9,name:"pencil.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:y},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:y}],methods:[],template:{memory:{array:Kt}}},slot:26});Object.assign(w,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:w}],methods:[],template:null},slot:27});Object.assign(A,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:A}],methods:[],template:null},slot:28});Object.assign(ne,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:46});const Ft=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Dt=new Uint8Array([]),Tt=new Uint8Array([104,253,15,0]),Mt=new Uint8Array([4,0,0,0]);Object.assign(L,{...t,type:2,name:"pencil.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ae},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ie},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:w},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:A}],methods:[],template:{memory:{array:Ft}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:V},{...e,type:7,isRequired:!1,name:"FPixel",structure:ne},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Dt},slots:{0:{structure:d,memory:{array:Tt},slots:{0:{structure:y,memory:{array:Mt}}}}}}},slot:21});const $t=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Bt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Lt=new Uint8Array([0,0,0,0,0,0,0,0]),ze=new Uint8Array([]);Object.assign(j,{...t,type:2,name:"pencil.KernelInput(u8,pencil.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:L}],methods:[],template:{memory:{array:$t},slots:{0:{structure:L,memory:{array:Bt},slots:{0:{structure:ae,memory:{array:Lt},slots:{0:{structure:re,memory:{array:ze}}}}}}}}},slot:20});Object.assign(me,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:V}],methods:[],template:null},slot:23});Object.assign(oe,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:me}],methods:[],template:null},slot:31});const Gt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ht=new Uint8Array([]),Jt=new Uint8Array([104,253,15,0]),Nt=new Uint8Array([4,0,0,0]);Object.assign(G,{...t,type:2,name:"pencil.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:oe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:ie},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:w},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:A}],methods:[],template:{memory:{array:Gt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:V},{...e,type:7,isRequired:!1,name:"FPixel",structure:ne},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:d}],methods:[],template:{memory:{array:Ht},slots:{0:{structure:d,memory:{array:Jt},slots:{0:{structure:y,memory:{array:Nt}}}}}}},slot:30});const Qt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Wt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Xt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(_,{...t,type:2,name:"pencil.KernelOutput(u8,pencil.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"result",structure:G}],methods:[],template:{memory:{array:Qt},slots:{0:{structure:G,memory:{array:Wt},slots:{0:{structure:oe,memory:{array:Xt},slots:{0:{structure:me,memory:{array:ze}}}}}}}}},slot:29});const Yt=new Uint8Array([0,0,194,66,0,0,112,65,0,0,194,66,51,51,27,65]);Object.assign(P,{...t,type:2,name:"pencil.KernelParameters(pencil.kernel)",length:1,byteSize:16,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"n0",structure:c},{...e,type:4,isRequired:!1,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"n1",structure:c},{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"n2",structure:c},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"n3",structure:c}],methods:[],template:{memory:{array:Yt}}},slot:32});Object.assign(ye,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(pencil.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:47});Object.assign(pe,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(pencil.createOutput)).Fn.return_type.?).ErrorUnion.error_set!pencil.KernelOutput(u8,pencil.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:_},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ye}],methods:[],template:null},slot:36});Object.assign(fe,{...t,type:3,name:"createOutput",length:1,byteSize:76,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:j},{...e,type:6,bitOffset:256,bitSize:128,byteSize:16,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:384,bitSize:224,byteSize:28,slot:4,name:"retval",structure:pe}],methods:[],template:null},slot:34});Object.assign(be,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(pencil.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(de,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(pencil.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!pencil.KernelOutput(u8,pencil.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:_},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:be}],methods:[],template:null},slot:37});Object.assign(he,{...t,type:3,name:"createPartialOutput",length:1,byteSize:84,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:j},{...e,type:6,bitOffset:320,bitSize:128,byteSize:16,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:6,name:"retval",structure:de}],methods:[],template:null},slot:35});const Zt={argStruct:fe,thunk:7,name:"createOutput"},es={argStruct:he,thunk:2,name:"createPartialOutput"};Object.assign(Se,{...t,type:2,name:"pencil",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ze}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ce},{...e,type:7,isRequired:!1,name:"Input",structure:j},{...e,type:7,isRequired:!1,name:"Output",structure:_},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[Zt,es],template:null},slot:0});const ts=[h,H,J,C,N,Q,E,y,d,W,X,K,c,l,r,q,z,Y,F,Z,D,ee,T,M,U,O,te,$,se,B,ce,V,re,ae,u,ie,w,A,ne,L,j,me,oe,G,_,P,ye,pe,fe,be,de,he,Se],ss=Ge(ts),rs=Se.constructor,as=(async()=>{const n=new URL("pencil-92d8d890.wasm",import.meta.url).href;return fetch(n)})();He(as,{...ss,writeBack:!0});const{createOutput:ys,createPartialOutput:is,kernel:le,Input:ns,Output:ps,Parameters:fs}=rs;function ms(n,o,a,s,i={},S={}){if(Array.isArray(i)){const b=i;i={};for(const[p,g]of Object.keys(le.inputImages).entries())i[g]=b[p]}const x=new ns(void 0),I=Object.keys(le.inputImages),m=[];let R;for(const b of I){let p=i[b];if(p||(I.length===1&&["data","width","height"].every(g=>!!i[g])?p=i:m.push(b)),x[b]=p,R){if(p.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=p.colorSpace}if(m.length>0)throw new Error(`Missing input image${m.length>1?"s":""}: ${m.join(", ")}`);const ue=is(n,o,a,s,x,S),Oe=b=>{const p=Object.keys(b),g={};for(const Ve of p){const{data:{typedArray:k},width:Re,height:Ae}=b[Ve];let v;if(typeof ImageData=="function"){const Ue=new Uint8ClampedArray(k.buffer,k.byteOffset,k.byteLength);v=new ImageData(Ue,Re,s,{colorSpace:R})}else v={data:k,width:Re,height:Ae};if(p.length===1)return v;g[Ve]=v}return g};return ue[Symbol.toStringTag]==="Promise"?ue.then(Oe):Oe(ue)}function os(){const n={};for(let[o,a]of Object.entries(le)){if(o==="parameters"){const s={};for(const[i,S]of Object.entries(a)){const x=s[i]={};for(let[I,m]of Object.entries(S))typeof m=="object"?"string"in m?m=m.string:m=we(m):typeof m=="function"&&(m=us(m.name)),x[I]=m}a=s}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());n[o]=a}return n}function we(n){const o=[];for(let[a,s]of Object.entries(n))typeof s=="object"&&(s=we(s)),o[a]=s;return o}function us(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,a,...s]=n.data;ls(o,s).then(([i,S])=>{postMessage([o,a,i],{transfer:S})}).catch(i=>{postMessage(["error",a,i])})};async function ls(n,o){switch(n){case"getKernelInfo":return[os(...o)];case"createPartialImageData":const s=await ms(...o),i=[];if("data"in s&&"width"in s&&"height"in s)i.push(s.data.buffer);else for(const S of Object.entries(s))i.push(s.data.buffer);return[s,i];default:throw new Error(`Unknown function: ${n}`)}}
