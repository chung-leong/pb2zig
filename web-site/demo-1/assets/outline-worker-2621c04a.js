import{u as Je,a as Ne,b as Qe,d as We,c as Xe,e as Ye,f as Ze,g as et,h as tt,i as st,j as rt,k as mt,l as at,m as it,n as ot,o as nt,p as ct,q as lt,r as ut}from"./index-9f315e7a.js";Je();Ne();Qe();We();Xe();Ye();Ze();et();tt();st();rt();mt();at();it();ot();nt();ct();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},b={},ie={},oe={},B={},ne={},ce={},L={},p={},h={},le={},ue={},G={},j={},pe={},r={},s={},ye={},H={},fe={},J={},be={},N={},de={},ge={},Q={},he={},W={},S={},k={},R={},q={},g={},Se={},X={},I={},C={},w={},ze={},Y={},_e={},Z={},Oe={},ee={},te={},v={},A={},Re={},se={},qe={},re={},ke={},U={},we={},Ae={},u={},Ue={},P={},x={},me={},E={},Ve={},je={},ae={},K={},F={},Ie={},Ce={},ve={},Ee={},Ke={},Fe={},De={};Object.assign(b,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:5});Object.assign(ie,{...t,type:1,name:"[7:0]u8",length:7,byteSize:8,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:4});Object.assign(oe,{...t,type:11,name:"*const [7:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:3});Object.assign(B,{...t,type:11,name:"**const [7:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:2});Object.assign(ne,{...t,type:1,name:"[12:0]u8",length:12,byteSize:13,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:8});Object.assign(ce,{...t,type:11,name:"*const [12:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:7});Object.assign(L,{...t,type:11,name:"**const [12:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:6});Object.assign(p,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:p}],methods:[],template:null},slot:10});Object.assign(h,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:9});Object.assign(le,{...t,type:1,name:"[0:0]u8",length:0,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:13});Object.assign(ue,{...t,type:11,name:"*const [0:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:12});Object.assign(G,{...t,type:11,name:"**const [0:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:11});Object.assign(j,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:j}],methods:[],template:null},slot:47});Object.assign(pe,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:j}],methods:[],template:null},slot:33});Object.assign(r,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:r}],methods:[],template:null},slot:70});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:r}],methods:[],template:null},slot:69});const pt=new Uint8Array([]),yt=new Uint8Array([56,30,16,0]),f=new Uint8Array([0,0,0,0,0,0,0,0]),ft=new Uint8Array([56,30,16,0]);Object.assign(ye,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:pt},slots:{0:{structure:s,memory:{array:yt},slots:{0:{structure:r,memory:{array:f},address:1056312}}},1:{structure:s,memory:{array:ft},slots:{0:{structure:r,memory:{array:f},address:1056312}}}}}},slot:51});Object.assign(H,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ye}],methods:[],template:null},slot:50});const bt=new Uint8Array([]),dt=new Uint8Array([48,30,16,0]),z=new Uint8Array([0,0,0,0,0,0,240,63]),gt=new Uint8Array([48,30,16,0]);Object.assign(fe,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:bt},slots:{0:{structure:s,memory:{array:dt},slots:{0:{structure:r,memory:{array:z},address:1056304}}},1:{structure:s,memory:{array:gt},slots:{0:{structure:r,memory:{array:z},address:1056304}}}}}},slot:53});Object.assign(J,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:fe}],methods:[],template:null},slot:52});const ht=new Uint8Array([]),St=new Uint8Array([72,30,16,0]),zt=new Uint8Array([154,153,153,153,153,153,185,63]),_t=new Uint8Array([64,30,16,0]),Ot=new Uint8Array([123,20,174,71,225,122,132,63]);Object.assign(be,{...t,type:2,name:"struct{comptime comptime_float = 0.1, comptime comptime_float = 0.01}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:ht},slots:{0:{structure:s,memory:{array:St},slots:{0:{structure:r,memory:{array:zt},address:1056328}}},1:{structure:s,memory:{array:_t},slots:{0:{structure:r,memory:{array:Ot},address:1056320}}}}}},slot:55});Object.assign(N,{...t,type:11,name:"*const struct{comptime comptime_float = 0.1, comptime comptime_float = 0.01}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:be}],methods:[],template:null},slot:54});Object.assign(de,{...t,type:1,name:"[33:0]u8",length:33,byteSize:34,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:58});Object.assign(ge,{...t,type:11,name:"*const [33:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:de}],methods:[],template:null},slot:57});Object.assign(Q,{...t,type:11,name:"*const *const [33:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ge}],methods:[],template:null},slot:56});const Rt=new Uint8Array([]),qt=new Uint8Array([170,170,170,170]),o=new Uint8Array([]),wt=new Uint8Array([170,170,170,170]),At=new Uint8Array([170,170,170,170]),Ut=new Uint8Array([92,30,16,0]),Vt=new Uint8Array([130,30,16,0]),jt=new Uint8Array([49,58,109,97,120,32,100,105,102,102,101,114,101,110,99,101,32,50,58,109,105,110,32,100,105,102,102,101,114,101,110,99,101,0]);Object.assign(he,{...t,type:2,name:'struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.1, comptime comptime_float = 0.01} = .{0.1, 0.01}, comptime description: *const [33:0]u8 = "1:max difference 2:min difference"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:pe},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:H},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:J},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:N},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:Q}],methods:[],template:{memory:{array:Rt},slots:{0:{structure:H,memory:{array:qt},slots:{0:{structure:ye,memory:{array:o},address:-1431655766}}},1:{structure:J,memory:{array:wt},slots:{0:{structure:fe,memory:{array:o},address:-1431655766}}},2:{structure:N,memory:{array:At},slots:{0:{structure:be,memory:{array:o},address:-1431655766}}},3:{structure:Q,memory:{array:Ut},slots:{0:{structure:ge,memory:{array:Vt},address:1056348,slots:{0:{structure:de,memory:{array:jt},address:1056386}}}}}}}},slot:40});Object.assign(W,{...t,type:11,name:'*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.1, comptime comptime_float = 0.01} = .{0.1, 0.01}, comptime description: *const [33:0]u8 = "1:max difference 2:min difference"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:he}],methods:[],template:null},slot:39});Object.assign(S,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:j}],methods:[],template:null},slot:34});const Pt=new Uint8Array([]),xt=new Uint8Array([56,30,16,0]),kt=new Uint8Array([56,30,16,0]),It=new Uint8Array([56,30,16,0]),Ct=new Uint8Array([56,30,16,0]);Object.assign(k,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:s}],methods:[],template:{memory:{array:Pt},slots:{0:{structure:s,memory:{array:xt},slots:{0:{structure:r,memory:{array:f},address:1056312}}},1:{structure:s,memory:{array:kt},slots:{0:{structure:r,memory:{array:f},address:1056312}}},2:{structure:s,memory:{array:It},slots:{0:{structure:r,memory:{array:f},address:1056312}}},3:{structure:s,memory:{array:Ct},slots:{0:{structure:r,memory:{array:f},address:1056312}}}}}},slot:60});Object.assign(R,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:k}],methods:[],template:null},slot:59});const vt=new Uint8Array([]),Et=new Uint8Array([48,30,16,0]),Kt=new Uint8Array([48,30,16,0]),Ft=new Uint8Array([48,30,16,0]),Dt=new Uint8Array([48,30,16,0]);Object.assign(q,{...t,type:2,name:"struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:s}],methods:[],template:{memory:{array:vt},slots:{0:{structure:s,memory:{array:Et},slots:{0:{structure:r,memory:{array:z},address:1056304}}},1:{structure:s,memory:{array:Kt},slots:{0:{structure:r,memory:{array:z},address:1056304}}},2:{structure:s,memory:{array:Ft},slots:{0:{structure:r,memory:{array:z},address:1056304}}},3:{structure:s,memory:{array:Dt},slots:{0:{structure:r,memory:{array:z},address:1056304}}}}}},slot:62});Object.assign(g,{...t,type:11,name:"*const struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:q}],methods:[],template:null},slot:61});const Tt=new Uint8Array([]),Mt=new Uint8Array([56,30,16,0]),$t=new Uint8Array([56,30,16,0]),Bt=new Uint8Array([56,30,16,0]),Lt=new Uint8Array([48,30,16,0]);Object.assign(Se,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"2",structure:s},{...e,type:8,isRequired:!1,slot:3,name:"3",structure:s}],methods:[],template:{memory:{array:Tt},slots:{0:{structure:s,memory:{array:Mt},slots:{0:{structure:r,memory:{array:f},address:1056312}}},1:{structure:s,memory:{array:$t},slots:{0:{structure:r,memory:{array:f},address:1056312}}},2:{structure:s,memory:{array:Bt},slots:{0:{structure:r,memory:{array:f},address:1056312}}},3:{structure:s,memory:{array:Lt},slots:{0:{structure:r,memory:{array:z},address:1056304}}}}}},slot:64});Object.assign(X,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Se}],methods:[],template:null},slot:63});Object.assign(I,{...t,type:1,name:"[16:0]u8",length:16,byteSize:17,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:67});Object.assign(C,{...t,type:11,name:"*const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:I}],methods:[],template:null},slot:66});Object.assign(w,{...t,type:11,name:"*const *const [16:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:C}],methods:[],template:null},slot:65});const Gt=new Uint8Array([]),Ht=new Uint8Array([170,170,170,170]),Jt=new Uint8Array([170,170,170,170]),Nt=new Uint8Array([170,170,170,170]),Qt=new Uint8Array([88,30,16,0]),Wt=new Uint8Array([113,30,16,0]),Xt=new Uint8Array([102,111,114,101,103,114,111,117,110,100,32,99,111,108,111,114,0]);Object.assign(ze,{...t,type:2,name:'struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 0, 0, 1}, comptime description: *const [16:0]u8 = "foreground color"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:R},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:g},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:X},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:w}],methods:[],template:{memory:{array:Gt},slots:{0:{structure:R,memory:{array:Ht},slots:{0:{structure:k,memory:{array:o},address:-1431655766}}},1:{structure:g,memory:{array:Jt},slots:{0:{structure:q,memory:{array:o},address:-1431655766}}},2:{structure:X,memory:{array:Nt},slots:{0:{structure:Se,memory:{array:o},address:-1431655766}}},3:{structure:w,memory:{array:Qt},slots:{0:{structure:C,memory:{array:Wt},address:1056344,slots:{0:{structure:I,memory:{array:Xt},address:1056369}}}}}}}},slot:42});Object.assign(Y,{...t,type:11,name:'*const struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 0, 0, 1}, comptime description: *const [16:0]u8 = "foreground color"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ze}],methods:[],template:null},slot:41});const Yt=new Uint8Array([]),Zt=new Uint8Array([170,170,170,170]),es=new Uint8Array([170,170,170,170]),ts=new Uint8Array([170,170,170,170]),ss=new Uint8Array([84,30,16,0]),rs=new Uint8Array([96,30,16,0]),ms=new Uint8Array([98,97,99,107,103,114,111,117,110,100,32,99,111,108,111,114,0]);Object.assign(_e,{...t,type:2,name:'struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime description: *const [16:0]u8 = "background color"}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:R},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:g},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:g},{...e,type:8,isRequired:!1,slot:3,name:"description",structure:w}],methods:[],template:{memory:{array:Yt},slots:{0:{structure:R,memory:{array:Zt},slots:{0:{structure:k,memory:{array:o},address:-1431655766}}},1:{structure:g,memory:{array:es},slots:{0:{structure:q,memory:{array:o},address:-1431655766}}},2:{structure:g,memory:{array:ts},slots:{0:{structure:q,memory:{array:o},address:-1431655766}}},3:{structure:w,memory:{array:ss},slots:{0:{structure:C,memory:{array:rs},address:1056340,slots:{0:{structure:I,memory:{array:ms},address:1056352}}}}}}}},slot:44});Object.assign(Z,{...t,type:11,name:'*const struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime description: *const [16:0]u8 = "background color"}',length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:_e}],methods:[],template:null},slot:43});const as=new Uint8Array([]),is=new Uint8Array([170,170,170,170]),os=new Uint8Array([170,170,170,170]),ns=new Uint8Array([170,170,170,170]);Object.assign(Oe,{...t,type:2,name:'struct{comptime difference: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.1, comptime comptime_float = 0.01} = .{0.1, 0.01}, comptime description: *const [33:0]u8 = "1:max difference 2:min difference"} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{1, 1}, .defaultValue = .{0.1, 0.01}, .description = "1:max difference 2:min difference"}, comptime color: struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 0, 0, 1}, comptime description: *const [16:0]u8 = "foreground color"} = .{.type = @Vector(4, f32), .minValue = .{0, 0, 0, 0}, .maxValue = .{1, 1, 1, 1}, .defaultValue = .{0, 0, 0, 1}, .description = "foreground color"}, comptime bgcolor: struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime description: *const [16:0]u8 = "background color"} = .{.type = @Vector(4, f32), .minValue = .{0, 0, 0, 0}, .maxValue = .{1, 1, 1, 1}, .defaultValue = .{1, 1, 1, 1}, .description = "background color"}}',length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"difference",structure:W},{...e,type:8,isRequired:!1,slot:1,name:"color",structure:Y},{...e,type:8,isRequired:!1,slot:2,name:"bgcolor",structure:Z}],methods:[],template:{memory:{array:as},slots:{0:{structure:W,memory:{array:is},slots:{0:{structure:he,memory:{array:o},address:-1431655766}}},1:{structure:Y,memory:{array:os},slots:{0:{structure:ze,memory:{array:o},address:-1431655766}}},2:{structure:Z,memory:{array:ns},slots:{0:{structure:_e,memory:{array:o},address:-1431655766}}}}}},slot:15});Object.assign(ee,{...t,type:11,name:'*struct{comptime difference: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1}, comptime defaultValue: struct{comptime comptime_float = 0.1, comptime comptime_float = 0.01} = .{0.1, 0.01}, comptime description: *const [33:0]u8 = "1:max difference 2:min difference"} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{1, 1}, .defaultValue = .{0.1, 0.01}, .description = "1:max difference 2:min difference"}, comptime color: struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 1} = .{0, 0, 0, 1}, comptime description: *const [16:0]u8 = "foreground color"} = .{.type = @Vector(4, f32), .minValue = .{0, 0, 0, 0}, .maxValue = .{1, 1, 1, 1}, .defaultValue = .{0, 0, 0, 1}, .description = "foreground color"}, comptime bgcolor: struct{comptime type: type = @Vector(4, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0, 0, 0}, comptime maxValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime defaultValue: struct{comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1, comptime comptime_float = 1} = .{1, 1, 1, 1}, comptime description: *const [16:0]u8 = "background color"} = .{.type = @Vector(4, f32), .minValue = .{0, 0, 0, 0}, .maxValue = .{1, 1, 1, 1}, .defaultValue = .{1, 1, 1, 1}, .description = "background color"}}',length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Oe}],methods:[],template:null},slot:14});Object.assign(te,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:p}],methods:[],template:null},slot:68});const cs=new Uint8Array([]),ls=new Uint8Array([80,30,16,0]),us=new Uint8Array([4,0,0,0]);Object.assign(v,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:te}],methods:[],template:{memory:{array:cs},slots:{0:{structure:te,memory:{array:ls},slots:{0:{structure:p,memory:{array:us},address:1056336}}}}}},slot:46});Object.assign(A,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:v}],methods:[],template:null},slot:45});const ps=new Uint8Array([]),ys=new Uint8Array([170,170,170,170]);Object.assign(Re,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:A}],methods:[],template:{memory:{array:ps},slots:{0:{structure:A,memory:{array:ys},slots:{0:{structure:v,memory:{array:o},address:-1431655766}}}}}},slot:17});Object.assign(se,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Re}],methods:[],template:null},slot:16});const fs=new Uint8Array([]),bs=new Uint8Array([170,170,170,170]);Object.assign(qe,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:A}],methods:[],template:{memory:{array:fs},slots:{0:{structure:A,memory:{array:bs},slots:{0:{structure:v,memory:{array:o},address:-1431655766}}}}}},slot:19});Object.assign(re,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:qe}],methods:[],template:null},slot:18});const ds=new Uint8Array([]),gs=new Uint8Array([]),hs=new Uint8Array([44,251,15,0]),Ss=new Uint8Array([207,71,16,0]),zs=new Uint8Array([111,117,116,108,105,110,101,0]),_s=new Uint8Array([108,251,15,0]),Os=new Uint8Array([255,71,16,0]),Rs=new Uint8Array([83,104,111,103,111,32,75,105,109,117,114,97,0]),qs=new Uint8Array([172,251,15,0]),ws=new Uint8Array([1,0,0,0]),As=new Uint8Array([4,252,15,0]),Us=new Uint8Array([254,71,16,0]),Vs=new Uint8Array([0]),js=new Uint8Array([170,170,170,170]),Ps=new Uint8Array([170,170,170,170]),xs=new Uint8Array([170,170,170,170]);Object.assign(ke,{...t,type:2,name:"outline.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:ds}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:B},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:L},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:h},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:G},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:ee},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:se},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:re}],methods:[],template:{memory:{array:gs},slots:{0:{structure:B,memory:{array:hs},slots:{0:{structure:oe,memory:{array:Ss},slots:{0:{structure:ie,memory:{array:zs},address:1066959}}}}},1:{structure:L,memory:{array:_s},slots:{0:{structure:ce,memory:{array:Os},slots:{0:{structure:ne,memory:{array:Rs},address:1067007}}}}},2:{structure:h,memory:{array:qs},slots:{0:{structure:p,memory:{array:ws}}}},3:{structure:G,memory:{array:As},slots:{0:{structure:ue,memory:{array:Us},slots:{0:{structure:le,memory:{array:Vs},address:1067006}}}}},4:{structure:ee,memory:{array:js},slots:{0:{structure:Oe,memory:{array:o},address:-1431655766}}},5:{structure:se,memory:{array:Ps},slots:{0:{structure:Re,memory:{array:o},address:-1431655766}}},6:{structure:re,memory:{array:xs},slots:{0:{structure:qe,memory:{array:o},address:-1431655766}}}}}},slot:1});Object.assign(U,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:b}],methods:[],template:null},slot:24});Object.assign(we,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:U}],methods:[],template:null},slot:23});Object.assign(Ae,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:we}],methods:[],template:null},slot:22});Object.assign(u,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:25});const ks=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(Ue,{...t,type:9,name:"outline.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:p},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:p}],methods:[],template:{memory:{array:ks}}},slot:26});Object.assign(P,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:P}],methods:[],template:null},slot:27});Object.assign(x,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:x}],methods:[],template:null},slot:28});const Is=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Cs=new Uint8Array([]),vs=new Uint8Array([8,250,15,0]),Es=new Uint8Array([4,0,0,0]);Object.assign(me,{...t,type:2,name:"outline.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:Ae},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Ue},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:P},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:x}],methods:[],template:{memory:{array:Is}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:U},{...e,type:7,isRequired:!1,name:"FPixel",structure:S},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:Cs},slots:{0:{structure:h,memory:{array:vs},slots:{0:{structure:p,memory:{array:Es}}}}}}},slot:21});const Ks=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Fs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ds=new Uint8Array([0,0,0,0,0,0,0,0]),Te=new Uint8Array([]);Object.assign(E,{...t,type:2,name:"outline.KernelInput(u8,outline.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:me}],methods:[],template:{memory:{array:Ks},slots:{0:{structure:me,memory:{array:Fs},slots:{0:{structure:Ae,memory:{array:Ds},slots:{0:{structure:we,memory:{array:Te}}}}}}}}},slot:20});Object.assign(Ve,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:U}],methods:[],template:null},slot:23});Object.assign(je,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Ve}],methods:[],template:null},slot:31});const Ts=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ms=new Uint8Array([]),$s=new Uint8Array([8,250,15,0]),Bs=new Uint8Array([4,0,0,0]);Object.assign(ae,{...t,type:2,name:"outline.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:je},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:u},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:u},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:Ue},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:P},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:x}],methods:[],template:{memory:{array:Ts}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:U},{...e,type:7,isRequired:!1,name:"FPixel",structure:S},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:Ms},slots:{0:{structure:h,memory:{array:$s},slots:{0:{structure:p,memory:{array:Bs}}}}}}},slot:30});const Ls=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Gs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Hs=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(K,{...t,type:2,name:"outline.KernelOutput(u8,outline.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:ae}],methods:[],template:{memory:{array:Ls},slots:{0:{structure:ae,memory:{array:Gs},slots:{0:{structure:je,memory:{array:Hs},slots:{0:{structure:Ve,memory:{array:Te}}}}}}}}},slot:29});const Js=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,205,204,204,61,10,215,35,60,0,0,0,0,0,0,0,0]);Object.assign(F,{...t,type:2,name:"outline.KernelParameters(outline.kernel)",length:1,byteSize:48,align:4,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:256,bitSize:64,byteSize:8,slot:0,name:"difference",structure:pe},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:128,byteSize:16,slot:1,name:"color",structure:S},{...e,type:6,isRequired:!1,bitOffset:128,bitSize:128,byteSize:16,slot:2,name:"bgcolor",structure:S}],methods:[],template:{memory:{array:Js}}},slot:32});Object.assign(Ie,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(outline.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:48});Object.assign(Ce,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(outline.createOutput)).Fn.return_type.?).ErrorUnion.error_set!outline.KernelOutput(u8,outline.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:K},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Ie}],methods:[],template:null},slot:37});Object.assign(ve,{...t,type:3,name:"createOutput",length:1,byteSize:112,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:384,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:416,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:6,bitOffset:448,bitSize:192,byteSize:24,slot:2,name:"2",structure:E},{...e,type:6,bitOffset:0,bitSize:384,byteSize:48,slot:3,name:"3",structure:F},{...e,type:6,bitOffset:640,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Ce}],methods:[],template:null},slot:35});Object.assign(Ee,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(outline.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:49});Object.assign(Ke,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(outline.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!outline.KernelOutput(u8,outline.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:K},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Ee}],methods:[],template:null},slot:38});Object.assign(Fe,{...t,type:3,name:"createPartialOutput",length:1,byteSize:128,align:4,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:384,bitSize:32,byteSize:4,slot:0,name:"0",structure:u},{...e,type:3,bitOffset:416,bitSize:32,byteSize:4,slot:1,name:"1",structure:u},{...e,type:3,bitOffset:448,bitSize:32,byteSize:4,slot:2,name:"2",structure:u},{...e,type:3,bitOffset:480,bitSize:32,byteSize:4,slot:3,name:"3",structure:u},{...e,type:6,bitOffset:512,bitSize:192,byteSize:24,slot:4,name:"4",structure:E},{...e,type:6,bitOffset:0,bitSize:384,byteSize:48,slot:5,name:"5",structure:F},{...e,type:6,bitOffset:704,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Ke}],methods:[],template:null},slot:36});const Ns={argStruct:ve,thunk:1,name:"createOutput"},Qs={argStruct:Fe,thunk:6,name:"createPartialOutput"};Object.assign(De,{...t,type:2,name:"outline",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Te}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:ke},{...e,type:7,isRequired:!1,name:"Input",structure:E},{...e,type:7,isRequired:!1,name:"Output",structure:K},{...e,type:7,isRequired:!1,name:"Parameters",structure:F}],methods:[Ns,Qs],template:null},slot:0});const Ws=[b,ie,oe,B,ne,ce,L,p,h,le,ue,G,j,pe,r,s,ye,H,fe,J,be,N,de,ge,Q,he,W,S,k,R,q,g,Se,X,I,C,w,ze,Y,_e,Z,Oe,ee,te,v,A,Re,se,qe,re,ke,U,we,Ae,u,Ue,P,x,me,E,Ve,je,ae,K,F,Ie,Ce,ve,Ee,Ke,Fe,De],Xs=lt(Ws),Ys=De.constructor,Zs=(async()=>{const n=new URL("outline-c3f5b70a.wasm",import.meta.url).href;return fetch(n)})();ut(Zs,{...Xs,writeBack:!0});const{createOutput:or,createPartialOutput:er,kernel:xe,Input:tr,Output:nr,Parameters:cr}=Ys;function sr(n,l,a,m,i={},_={}){if(Array.isArray(i)){const d=i;i={};for(const[y,O]of Object.keys(xe.inputImages).entries())i[O]=d[y]}const D=new tr(void 0),T=Object.keys(xe.inputImages),c=[];let V;for(const d of T){let y=i[d];if(y||(T.length===1&&["data","width","height"].every(O=>!!i[O])?y=i:c.push(d)),D[d]=y,V){if(y.colorSpace!==V)throw new Error(`Input images must all use the same color space: ${V}`)}else V=y.colorSpace}if(c.length>0)throw new Error(`Missing input image${c.length>1?"s":""}: ${c.join(", ")}`);const Pe=er(n,l,a,m,D,_),Me=d=>{const y=Object.keys(d),O={};for(const $e of y){const{data:{typedArray:M},width:Be,height:Ge}=d[$e];let $;if(typeof ImageData=="function"){const He=new Uint8ClampedArray(M.buffer,M.byteOffset,M.byteLength);$=new ImageData(He,Be,m,{colorSpace:V})}else $={data:M,width:Be,height:Ge};if(y.length===1)return $;O[$e]=$}return O};return Pe[Symbol.toStringTag]==="Promise"?Pe.then(Me):Me(Pe)}function rr(){const n={};for(let[l,a]of Object.entries(xe)){if(l==="parameters"){const m={};for(const[i,_]of Object.entries(a)){const D=m[i]={};for(let[T,c]of Object.entries(_))typeof c=="object"?"string"in c?c=c.string:c=Le(c):typeof c=="function"&&(c=mr(c.name)),D[T]=c}a=m}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());n[l]=a}return n}function Le(n){const l=[];for(let[a,m]of Object.entries(n))typeof m=="object"&&(m=Le(m)),l[a]=m;return l}function mr(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[l,a,...m]=n.data;ar(l,m).then(([i,_])=>{postMessage([l,a,i],{transfer:_})}).catch(i=>{postMessage(["error",a,i])})};async function ar(n,l){switch(n){case"getKernelInfo":return[rr(...l)];case"createPartialImageData":const m=await sr(...l),i=[];if("data"in m&&"width"in m&&"height"in m)i.push(m.data.buffer);else for(const _ of Object.entries(m))i.push(m.data.buffer);return[m,i];default:throw new Error(`Unknown function: ${n}`)}}
