import{u as De,a as Te,b as Me,c as $e,d as Be,e as Le,f as Ge,g as He,h as Je,i as Ne,j as Qe,k as We,l as Xe,m as Ye,n as Ze,o as et,p as tt,q as st,r as rt}from"./index-9f315e7a.js";De();Te();Me();$e();Be();Le();Ge();He();Je();Ne();Qe();We();Xe();Ye();Ze();et();tt();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},g={},Q={},W={},C={},X={},Y={},v={},m={},h={},Z={},ee={},E={},b={},n={},s={},te={},K={},se={},re={},F={},ae={},D={},ie={},T={},me={},M={},ne={},$={},f={},oe={},B={},ue={},L={},A={},O={},le={},G={},ce={},H={},we={},w={},ye={},pe={},c={},fe={},R={},q={},be={},J={},U={},de={},he={},N={},_={},j={},Ve={},Re={},qe={},Ae={},Ue={},_e={},je={};Object.assign(g,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:5});Object.assign(Q,{...t,type:1,name:"[20:0]u8",length:20,byteSize:21,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:4});Object.assign(W,{...t,type:11,name:"*const [20:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:3});Object.assign(C,{...t,type:11,name:"**const [20:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:2});Object.assign(X,{...t,type:1,name:"[13:0]u8",length:13,byteSize:14,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:8});Object.assign(Y,{...t,type:11,name:"*const [13:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:7});Object.assign(v,{...t,type:11,name:"**const [13:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:6});Object.assign(m,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:10});Object.assign(h,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:9});Object.assign(Z,{...t,type:1,name:"[21:0]u8",length:21,byteSize:22,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:13});Object.assign(ee,{...t,type:11,name:"*const [21:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Z}],methods:[],template:null},slot:12});Object.assign(E,{...t,type:11,name:"**const [21:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ee}],methods:[],template:null},slot:11});Object.assign(b,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:33});Object.assign(n,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:n}],methods:[],template:null},slot:53});Object.assign(s,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:n}],methods:[],template:null},slot:52});const at=new Uint8Array([]),it=new Uint8Array([112,30,16,0]),mt=new Uint8Array([154,153,153,153,153,153,185,63]),nt=new Uint8Array([56,30,16,0]),Se=new Uint8Array([0,0,0,0,0,0,160,64]),ot=new Uint8Array([104,30,16,0]),ut=new Uint8Array([0,0,0,0,0,0,36,64]);Object.assign(te,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 2048, comptime defaultValue: comptime_float = 10}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:b},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:at},slots:{0:{structure:s,memory:{array:it},slots:{0:{structure:n,memory:{array:mt},address:1056368}}},1:{structure:s,memory:{array:nt},slots:{0:{structure:n,memory:{array:Se},address:1056312}}},2:{structure:s,memory:{array:ot},slots:{0:{structure:n,memory:{array:ut},address:1056360}}}}}},slot:40});Object.assign(K,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 2048, comptime defaultValue: comptime_float = 10}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:te}],methods:[],template:null},slot:39});Object.assign(se,{...t,type:13,name:"@Vector(2, f32)",length:2,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:34});const lt=new Uint8Array([]),ct=new Uint8Array([64,30,16,0]),ze=new Uint8Array([0,0,0,0,0,0,0,0]),yt=new Uint8Array([64,30,16,0]);Object.assign(re,{...t,type:2,name:"struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:lt},slots:{0:{structure:s,memory:{array:ct},slots:{0:{structure:n,memory:{array:ze},address:1056320}}},1:{structure:s,memory:{array:yt},slots:{0:{structure:n,memory:{array:ze},address:1056320}}}}}},slot:55});Object.assign(F,{...t,type:11,name:"*const struct{comptime comptime_float = 0, comptime comptime_float = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:re}],methods:[],template:null},slot:54});const pt=new Uint8Array([]),ft=new Uint8Array([56,30,16,0]),bt=new Uint8Array([56,30,16,0]);Object.assign(ae,{...t,type:2,name:"struct{comptime comptime_float = 2048, comptime comptime_float = 2048}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:pt},slots:{0:{structure:s,memory:{array:ft},slots:{0:{structure:n,memory:{array:Se},address:1056312}}},1:{structure:s,memory:{array:bt},slots:{0:{structure:n,memory:{array:Se},address:1056312}}}}}},slot:57});Object.assign(D,{...t,type:11,name:"*const struct{comptime comptime_float = 2048, comptime comptime_float = 2048}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ae}],methods:[],template:null},slot:56});const dt=new Uint8Array([]),ht=new Uint8Array([48,30,16,0]),Ce=new Uint8Array([0,0,0,0,0,0,112,64]),gt=new Uint8Array([48,30,16,0]);Object.assign(ie,{...t,type:2,name:"struct{comptime comptime_float = 256, comptime comptime_float = 256}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"0",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"1",structure:s}],methods:[],template:{memory:{array:dt},slots:{0:{structure:s,memory:{array:ht},slots:{0:{structure:n,memory:{array:Ce},address:1056304}}},1:{structure:s,memory:{array:gt},slots:{0:{structure:n,memory:{array:Ce},address:1056304}}}}}},slot:59});Object.assign(T,{...t,type:11,name:"*const struct{comptime comptime_float = 256, comptime comptime_float = 256}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ie}],methods:[],template:null},slot:58});const St=new Uint8Array([]),zt=new Uint8Array([170,170,170,170]),y=new Uint8Array([]),Ot=new Uint8Array([170,170,170,170]),wt=new Uint8Array([170,170,170,170]);Object.assign(me,{...t,type:2,name:"struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 2048, comptime comptime_float = 2048} = .{2048, 2048}, comptime defaultValue: struct{comptime comptime_float = 256, comptime comptime_float = 256} = .{256, 256}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:se},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:F},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:D},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:T}],methods:[],template:{memory:{array:St},slots:{0:{structure:F,memory:{array:zt},slots:{0:{structure:re,memory:{array:y},address:-1431655766}}},1:{structure:D,memory:{array:Ot},slots:{0:{structure:ae,memory:{array:y},address:-1431655766}}},2:{structure:T,memory:{array:wt},slots:{0:{structure:ie,memory:{array:y},address:-1431655766}}}}}},slot:42});Object.assign(M,{...t,type:11,name:"*const struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 2048, comptime comptime_float = 2048} = .{2048, 2048}, comptime defaultValue: struct{comptime comptime_float = 256, comptime comptime_float = 256} = .{256, 256}}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:me}],methods:[],template:null},slot:41});const Vt=new Uint8Array([]),Rt=new Uint8Array([64,30,16,0]),qt=new Uint8Array([96,30,16,0]),At=new Uint8Array([0,0,0,0,0,128,118,64]),Ut=new Uint8Array([88,30,16,0]),_t=new Uint8Array([0,0,0,0,0,128,86,64]);Object.assign(ne,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 360, comptime defaultValue: comptime_float = 90}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:b},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:s},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:s},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:s}],methods:[],template:{memory:{array:Vt},slots:{0:{structure:s,memory:{array:Rt},slots:{0:{structure:n,memory:{array:ze},address:1056320}}},1:{structure:s,memory:{array:qt},slots:{0:{structure:n,memory:{array:At},address:1056352}}},2:{structure:s,memory:{array:Ut},slots:{0:{structure:n,memory:{array:_t},address:1056344}}}}}},slot:44});Object.assign($,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 360, comptime defaultValue: comptime_float = 90}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ne}],methods:[],template:null},slot:43});Object.assign(f,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:m}],methods:[],template:null},slot:60});const jt=new Uint8Array([]),Pt=new Uint8Array([76,30,16,0]),ve=new Uint8Array([0,0,0,0]),xt=new Uint8Array([80,30,16,0]),It=new Uint8Array([1,0,0,0]),kt=new Uint8Array([76,30,16,0]);Object.assign(oe,{...t,type:2,name:"struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 0}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:m},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:f},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:f},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:f}],methods:[],template:{memory:{array:jt},slots:{0:{structure:f,memory:{array:Pt},slots:{0:{structure:m,memory:{array:ve},address:1056332}}},1:{structure:f,memory:{array:xt},slots:{0:{structure:m,memory:{array:It},address:1056336}}},2:{structure:f,memory:{array:kt},slots:{0:{structure:m,memory:{array:ve},address:1056332}}}}}},slot:46});Object.assign(B,{...t,type:11,name:"*const struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 0}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:oe}],methods:[],template:null},slot:45});const Ct=new Uint8Array([]),vt=new Uint8Array([170,170,170,170]),Et=new Uint8Array([170,170,170,170]),Kt=new Uint8Array([170,170,170,170]),Ft=new Uint8Array([170,170,170,170]);Object.assign(ue,{...t,type:2,name:"struct{comptime radius: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 2048, comptime defaultValue: comptime_float = 10} = .{.type = f32, .minValue = 0.1, .maxValue = 2048, .defaultValue = 10}, comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 2048, comptime comptime_float = 2048} = .{2048, 2048}, comptime defaultValue: struct{comptime comptime_float = 256, comptime comptime_float = 256} = .{256, 256}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{2048, 2048}, .defaultValue = .{256, 256}}, comptime twirlAngle: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 360, comptime defaultValue: comptime_float = 90} = .{.type = f32, .minValue = 0, .maxValue = 360, .defaultValue = 90}, comptime gaussOrSinc: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 0} = .{.type = i32, .minValue = 0, .maxValue = 1, .defaultValue = 0}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"radius",structure:K},{...e,type:8,isRequired:!1,slot:1,name:"center",structure:M},{...e,type:8,isRequired:!1,slot:2,name:"twirlAngle",structure:$},{...e,type:8,isRequired:!1,slot:3,name:"gaussOrSinc",structure:B}],methods:[],template:{memory:{array:Ct},slots:{0:{structure:K,memory:{array:vt},slots:{0:{structure:te,memory:{array:y},address:-1431655766}}},1:{structure:M,memory:{array:Et},slots:{0:{structure:me,memory:{array:y},address:-1431655766}}},2:{structure:$,memory:{array:Kt},slots:{0:{structure:ne,memory:{array:y},address:-1431655766}}},3:{structure:B,memory:{array:Ft},slots:{0:{structure:oe,memory:{array:y},address:-1431655766}}}}}},slot:15});Object.assign(L,{...t,type:11,name:"*struct{comptime radius: struct{comptime type: type = f32, comptime minValue: comptime_float = 0.1, comptime maxValue: comptime_float = 2048, comptime defaultValue: comptime_float = 10} = .{.type = f32, .minValue = 0.1, .maxValue = 2048, .defaultValue = 10}, comptime center: struct{comptime type: type = @Vector(2, f32), comptime minValue: struct{comptime comptime_float = 0, comptime comptime_float = 0} = .{0, 0}, comptime maxValue: struct{comptime comptime_float = 2048, comptime comptime_float = 2048} = .{2048, 2048}, comptime defaultValue: struct{comptime comptime_float = 256, comptime comptime_float = 256} = .{256, 256}} = .{.type = @Vector(2, f32), .minValue = .{0, 0}, .maxValue = .{2048, 2048}, .defaultValue = .{256, 256}}, comptime twirlAngle: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 360, comptime defaultValue: comptime_float = 90} = .{.type = f32, .minValue = 0, .maxValue = 360, .defaultValue = 90}, comptime gaussOrSinc: struct{comptime type: type = i32, comptime minValue: comptime_int = 0, comptime maxValue: comptime_int = 1, comptime defaultValue: comptime_int = 0} = .{.type = i32, .minValue = 0, .maxValue = 1, .defaultValue = 0}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ue}],methods:[],template:null},slot:14});const Dt=new Uint8Array([]),Tt=new Uint8Array([72,30,16,0]),Mt=new Uint8Array([4,0,0,0]);Object.assign(A,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:f}],methods:[],template:{memory:{array:Dt},slots:{0:{structure:f,memory:{array:Tt},slots:{0:{structure:m,memory:{array:Mt},address:1056328}}}}}},slot:48});Object.assign(O,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:A}],methods:[],template:null},slot:47});const $t=new Uint8Array([]),Bt=new Uint8Array([170,170,170,170]);Object.assign(le,{...t,type:2,name:"struct{comptime oImage: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"oImage",structure:O}],methods:[],template:{memory:{array:$t},slots:{0:{structure:O,memory:{array:Bt},slots:{0:{structure:A,memory:{array:y},address:-1431655766}}}}}},slot:17});Object.assign(G,{...t,type:11,name:"*struct{comptime oImage: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:le}],methods:[],template:null},slot:16});const Lt=new Uint8Array([]),Gt=new Uint8Array([170,170,170,170]);Object.assign(ce,{...t,type:2,name:"struct{comptime outputColor: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"outputColor",structure:O}],methods:[],template:{memory:{array:Lt},slots:{0:{structure:O,memory:{array:Gt},slots:{0:{structure:A,memory:{array:y},address:-1431655766}}}}}},slot:19});Object.assign(H,{...t,type:11,name:"*struct{comptime outputColor: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:ce}],methods:[],template:null},slot:18});const Ht=new Uint8Array([]),Jt=new Uint8Array([]),Nt=new Uint8Array([44,251,15,0]),Qt=new Uint8Array([214,55,16,0]),Wt=new Uint8Array([80,105,120,101,108,32,66,101,110,100,101,114,32,83,97,109,112,108,101,115,0]),Xt=new Uint8Array([108,251,15,0]),Yt=new Uint8Array([200,55,16,0]),Zt=new Uint8Array([65,100,111,98,101,32,83,121,115,116,101,109,115,0]),es=new Uint8Array([172,251,15,0]),ts=new Uint8Array([2,0,0,0]),ss=new Uint8Array([4,252,15,0]),rs=new Uint8Array([178,55,16,0]),as=new Uint8Array([116,119,105,115,116,32,97,110,32,105,109,97,103,101,32,97,114,111,117,110,100,0]),is=new Uint8Array([170,170,170,170]),ms=new Uint8Array([170,170,170,170]),ns=new Uint8Array([170,170,170,170]);Object.assign(we,{...t,type:2,name:"twirl.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Ht}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:C},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:v},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:h},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:E},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:L},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:G},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:H}],methods:[],template:{memory:{array:Jt},slots:{0:{structure:C,memory:{array:Nt},slots:{0:{structure:W,memory:{array:Qt},slots:{0:{structure:Q,memory:{array:Wt},address:1062870}}}}},1:{structure:v,memory:{array:Xt},slots:{0:{structure:Y,memory:{array:Yt},slots:{0:{structure:X,memory:{array:Zt},address:1062856}}}}},2:{structure:h,memory:{array:es},slots:{0:{structure:m,memory:{array:ts}}}},3:{structure:E,memory:{array:ss},slots:{0:{structure:ee,memory:{array:rs},slots:{0:{structure:Z,memory:{array:as},address:1062834}}}}},4:{structure:L,memory:{array:is},slots:{0:{structure:ue,memory:{array:y},address:-1431655766}}},5:{structure:G,memory:{array:ms},slots:{0:{structure:le,memory:{array:y},address:-1431655766}}},6:{structure:H,memory:{array:ns},slots:{0:{structure:ce,memory:{array:y},address:-1431655766}}}}}},slot:1});Object.assign(w,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:g}],methods:[],template:null},slot:24});Object.assign(ye,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(pe,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:ye}],methods:[],template:null},slot:22});Object.assign(c,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:c}],methods:[],template:null},slot:25});const os=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(fe,{...t,type:9,name:"twirl.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:m},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:m}],methods:[],template:{memory:{array:os}}},slot:26});Object.assign(R,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:R}],methods:[],template:null},slot:27});Object.assign(q,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:q}],methods:[],template:null},slot:28});Object.assign(be,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:b}],methods:[],template:null},slot:49});const us=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ls=new Uint8Array([]),cs=new Uint8Array([8,250,15,0]),ys=new Uint8Array([4,0,0,0]);Object.assign(J,{...t,type:2,name:"twirl.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:pe},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:fe},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:R},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:q}],methods:[],template:{memory:{array:us}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:be},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:ls},slots:{0:{structure:h,memory:{array:cs},slots:{0:{structure:m,memory:{array:ys}}}}}}},slot:21});const ps=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),fs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),bs=new Uint8Array([0,0,0,0,0,0,0,0]),Pe=new Uint8Array([]);Object.assign(U,{...t,type:2,name:"twirl.KernelInput(u8,twirl.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"oImage",structure:J}],methods:[],template:{memory:{array:ps},slots:{0:{structure:J,memory:{array:fs},slots:{0:{structure:pe,memory:{array:bs},slots:{0:{structure:ye,memory:{array:Pe}}}}}}}}},slot:20});Object.assign(de,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:23});Object.assign(he,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:de}],methods:[],template:null},slot:31});const ds=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),hs=new Uint8Array([]),gs=new Uint8Array([8,250,15,0]),Ss=new Uint8Array([4,0,0,0]);Object.assign(N,{...t,type:2,name:"twirl.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:he},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:c},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:c},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:fe},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:R},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:q}],methods:[],template:{memory:{array:ds}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:w},{...e,type:7,isRequired:!1,name:"FPixel",structure:be},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:h}],methods:[],template:{memory:{array:hs},slots:{0:{structure:h,memory:{array:gs},slots:{0:{structure:m,memory:{array:Ss}}}}}}},slot:30});const zs=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Os=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ws=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(_,{...t,type:2,name:"twirl.KernelOutput(u8,twirl.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"outputColor",structure:N}],methods:[],template:{memory:{array:zs},slots:{0:{structure:N,memory:{array:Os},slots:{0:{structure:he,memory:{array:ws},slots:{0:{structure:de,memory:{array:Pe}}}}}}}}},slot:29});const Vs=new Uint8Array([0,0,128,67,0,0,128,67,0,0,32,65,0,0,180,66,0,0,0,0,0,0,0,0]);Object.assign(j,{...t,type:2,name:"twirl.KernelParameters(twirl.kernel)",length:1,byteSize:24,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:64,bitSize:32,byteSize:4,slot:0,name:"radius",structure:b},{...e,type:6,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,slot:1,name:"center",structure:se},{...e,type:4,isRequired:!1,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"twirlAngle",structure:b},{...e,type:2,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:3,name:"gaussOrSinc",structure:m}],methods:[],template:{memory:{array:Vs}}},slot:32});Object.assign(Ve,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(twirl.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:50});Object.assign(Re,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(twirl.createOutput)).Fn.return_type.?).ErrorUnion.error_set!twirl.KernelOutput(u8,twirl.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:_},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Ve}],methods:[],template:null},slot:37});Object.assign(qe,{...t,type:3,name:"createOutput",length:1,byteSize:88,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:c},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:c},{...e,type:6,bitOffset:256,bitSize:192,byteSize:24,slot:2,name:"2",structure:U},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:3,name:"3",structure:j},{...e,type:6,bitOffset:448,bitSize:224,byteSize:28,slot:4,name:"retval",structure:Re}],methods:[],template:null},slot:35});Object.assign(Ae,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(twirl.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:51});Object.assign(Ue,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(twirl.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!twirl.KernelOutput(u8,twirl.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:_},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:Ae}],methods:[],template:null},slot:38});Object.assign(_e,{...t,type:3,name:"createPartialOutput",length:1,byteSize:96,align:3,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:192,bitSize:32,byteSize:4,slot:0,name:"0",structure:c},{...e,type:3,bitOffset:224,bitSize:32,byteSize:4,slot:1,name:"1",structure:c},{...e,type:3,bitOffset:256,bitSize:32,byteSize:4,slot:2,name:"2",structure:c},{...e,type:3,bitOffset:288,bitSize:32,byteSize:4,slot:3,name:"3",structure:c},{...e,type:6,bitOffset:320,bitSize:192,byteSize:24,slot:4,name:"4",structure:U},{...e,type:6,bitOffset:0,bitSize:192,byteSize:24,slot:5,name:"5",structure:j},{...e,type:6,bitOffset:512,bitSize:224,byteSize:28,slot:6,name:"retval",structure:Ue}],methods:[],template:null},slot:36});const Rs={argStruct:qe,thunk:1,name:"createOutput"},qs={argStruct:_e,thunk:5,name:"createPartialOutput"};Object.assign(je,{...t,type:2,name:"twirl",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:Pe}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:we},{...e,type:7,isRequired:!1,name:"Input",structure:U},{...e,type:7,isRequired:!1,name:"Output",structure:_},{...e,type:7,isRequired:!1,name:"Parameters",structure:j}],methods:[Rs,qs],template:null},slot:0});const As=[g,Q,W,C,X,Y,v,m,h,Z,ee,E,b,n,s,te,K,se,re,F,ae,D,ie,T,me,M,ne,$,f,oe,B,ue,L,A,O,le,G,ce,H,we,w,ye,pe,c,fe,R,q,be,J,U,de,he,N,_,j,Ve,Re,qe,Ae,Ue,_e,je],Us=st(As),_s=je.constructor,js=(async()=>{const o=new URL("twirl-6e449c5c.wasm",import.meta.url).href;return fetch(o)})();rt(js,{...Us,writeBack:!0});const{createOutput:Ks,createPartialOutput:Ps,kernel:Oe,Input:xs,Output:Fs,Parameters:Ds}=_s;function Is(o,l,a,r,i={},S={}){if(Array.isArray(i)){const d=i;i={};for(const[p,z]of Object.keys(Oe.inputImages).entries())i[z]=d[p]}const P=new xs(void 0),x=Object.keys(Oe.inputImages),u=[];let V;for(const d of x){let p=i[d];if(p||(x.length===1&&["data","width","height"].every(z=>!!i[z])?p=i:u.push(d)),P[d]=p,V){if(p.colorSpace!==V)throw new Error(`Input images must all use the same color space: ${V}`)}else V=p.colorSpace}if(u.length>0)throw new Error(`Missing input image${u.length>1?"s":""}: ${u.join(", ")}`);const ge=Ps(o,l,a,r,P,S),xe=d=>{const p=Object.keys(d),z={};for(const Ie of p){const{data:{typedArray:I},width:ke,height:Ke}=d[Ie];let k;if(typeof ImageData=="function"){const Fe=new Uint8ClampedArray(I.buffer,I.byteOffset,I.byteLength);k=new ImageData(Fe,ke,r,{colorSpace:V})}else k={data:I,width:ke,height:Ke};if(p.length===1)return k;z[Ie]=k}return z};return ge[Symbol.toStringTag]==="Promise"?ge.then(xe):xe(ge)}function ks(){const o={};for(let[l,a]of Object.entries(Oe)){if(l==="parameters"){const r={};for(const[i,S]of Object.entries(a)){const P=r[i]={};for(let[x,u]of Object.entries(S))typeof u=="object"?"string"in u?u=u.string:u=Ee(u):typeof u=="function"&&(u=Cs(u.name)),P[x]=u}a=r}else typeof a=="object"&&("string"in a?a=a.string:a=a.valueOf());o[l]=a}return o}function Ee(o){const l=[];for(let[a,r]of Object.entries(o))typeof r=="object"&&(r=Ee(r)),l[a]=r;return l}function Cs(o){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[o]}onmessage=o=>{const[l,a,...r]=o.data;vs(l,r).then(([i,S])=>{postMessage([l,a,i],{transfer:S})}).catch(i=>{postMessage(["error",a,i])})};async function vs(o,l){switch(o){case"getKernelInfo":return[ks(...l)];case"createPartialImageData":const r=await Is(...l),i=[];if("data"in r&&"width"in r&&"height"in r)i.push(r.data.buffer);else for(const S of Object.entries(r))i.push(r.data.buffer);return[r,i];default:throw new Error(`Unknown function: ${o}`)}}
