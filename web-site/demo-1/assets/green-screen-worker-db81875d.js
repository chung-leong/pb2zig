import{u as Re,a as qe,b as we,c as je,d as Ae,e as Ue,f as Pe,g as Ve,h as _e,i as Ie,j as ke,k as xe,l as ve,m as Ce,n as Ee,o as Ke,p as Fe,q as De,r as Te}from"./index-9f315e7a.js";Re();qe();we();je();Ae();Ue();Pe();Ve();_e();Ie();ke();xe();ve();Ce();Ee();Ke();Fe();const t={constructor:null,typedArray:null,type:0,name:void 0,byteSize:4,align:2,isConst:!1,hasPointer:!1,instance:{members:[],methods:[],template:null},static:{members:[],methods:[],template:null},options:{runtimeSafety:!1}},e={type:0,isRequired:!0},f={},B={},L={},x={},G={},H={},v={},u={},p={},J={},N={},C={},S={},b={},y={},Q={},E={},W={},K={},F={},j={},z={},X={},D={},Y={},T={},oe={},O={},Z={},ee={},m={},te={},q={},w={},se={},M={},A={},re={},ae={},$={},U={},P={},me={},ue={},le={},ce={},ye={},pe={},be={};Object.assign(f,{...t,name:"u8",length:1,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:5});Object.assign(B,{...t,type:1,name:"[6:0]u8",length:6,byteSize:7,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:4});Object.assign(L,{...t,type:11,name:"*const [6:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:B}],methods:[],template:null},slot:3});Object.assign(x,{...t,type:11,name:"**const [6:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:L}],methods:[],template:null},slot:2});Object.assign(G,{...t,type:1,name:"[11:0]u8",length:11,byteSize:12,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:8});Object.assign(H,{...t,type:11,name:"*const [11:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:G}],methods:[],template:null},slot:7});Object.assign(v,{...t,type:11,name:"**const [11:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:H}],methods:[],template:null},slot:6});Object.assign(u,{...t,name:"i32",length:1,instance:{members:[{...e,type:2,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:u}],methods:[],template:null},slot:10});Object.assign(p,{...t,type:11,name:"*i32",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:9});Object.assign(J,{...t,type:1,name:"[0:0]u8",length:0,byteSize:1,align:0,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:13});Object.assign(N,{...t,type:11,name:"*const [0:0]u8",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:J}],methods:[],template:null},slot:12});Object.assign(C,{...t,type:11,name:"**const [0:0]u8",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:N}],methods:[],template:null},slot:11});Object.assign(S,{...t,name:"f32",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:33});Object.assign(b,{...t,name:"f64",length:1,byteSize:8,align:3,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:64,byteSize:8,structure:b}],methods:[],template:null},slot:46});Object.assign(y,{...t,type:11,name:"*const f64",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:b}],methods:[],template:null},slot:45});const Me=new Uint8Array([]),$e=new Uint8Array([152,2,16,0]),Be=new Uint8Array([0,0,0,0,0,0,0,0]),Le=new Uint8Array([144,2,16,0]),Ge=new Uint8Array([0,0,0,0,0,0,89,64]),He=new Uint8Array([136,2,16,0]),Je=new Uint8Array([0,0,0,0,0,0,16,64]);Object.assign(Q,{...t,type:2,name:"struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:7,isRequired:!1,name:"type",structure:S},{...e,type:8,isRequired:!1,slot:0,name:"minValue",structure:y},{...e,type:8,isRequired:!1,slot:1,name:"maxValue",structure:y},{...e,type:8,isRequired:!1,slot:2,name:"defaultValue",structure:y}],methods:[],template:{memory:{array:Me},slots:{0:{structure:y,memory:{array:$e},slots:{0:{structure:b,memory:{array:Be},address:1049240}}},1:{structure:y,memory:{array:Le},slots:{0:{structure:b,memory:{array:Ge},address:1049232}}},2:{structure:y,memory:{array:He},slots:{0:{structure:b,memory:{array:Je},address:1049224}}}}}},slot:39});Object.assign(E,{...t,type:11,name:"*const struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Q}],methods:[],template:null},slot:38});const Ne=new Uint8Array([]),Qe=new Uint8Array([170,170,170,170]),h=new Uint8Array([]);Object.assign(W,{...t,type:2,name:"struct{comptime strength: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 4} = .{.type = f32, .minValue = 0, .maxValue = 100, .defaultValue = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"strength",structure:E}],methods:[],template:{memory:{array:Ne},slots:{0:{structure:E,memory:{array:Qe},slots:{0:{structure:Q,memory:{array:h},address:-1431655766}}}}}},slot:15});Object.assign(K,{...t,type:11,name:"*struct{comptime strength: struct{comptime type: type = f32, comptime minValue: comptime_float = 0, comptime maxValue: comptime_float = 100, comptime defaultValue: comptime_float = 4} = .{.type = f32, .minValue = 0, .maxValue = 100, .defaultValue = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:W}],methods:[],template:null},slot:14});Object.assign(F,{...t,type:11,name:"*const i32",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:u}],methods:[],template:null},slot:47});const We=new Uint8Array([]),Xe=new Uint8Array([128,2,16,0]),Ye=new Uint8Array([4,0,0,0]);Object.assign(j,{...t,type:2,name:"struct{comptime channels: comptime_int = 4}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"channels",structure:F}],methods:[],template:{memory:{array:We},slots:{0:{structure:F,memory:{array:Xe},slots:{0:{structure:u,memory:{array:Ye},address:1049216}}}}}},slot:41});Object.assign(z,{...t,type:11,name:"*const struct{comptime channels: comptime_int = 4}",length:1,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:j}],methods:[],template:null},slot:40});const Ze=new Uint8Array([]),et=new Uint8Array([170,170,170,170]);Object.assign(X,{...t,type:2,name:"struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"src",structure:z}],methods:[],template:{memory:{array:Ze},slots:{0:{structure:z,memory:{array:et},slots:{0:{structure:j,memory:{array:h},address:-1431655766}}}}}},slot:17});Object.assign(D,{...t,type:11,name:"*struct{comptime src: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:X}],methods:[],template:null},slot:16});const tt=new Uint8Array([]),st=new Uint8Array([170,170,170,170]);Object.assign(Y,{...t,type:2,name:"struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,byteSize:0,align:0,instance:{members:[{...e,type:8,isRequired:!1,slot:0,name:"dst",structure:z}],methods:[],template:{memory:{array:tt},slots:{0:{structure:z,memory:{array:st},slots:{0:{structure:j,memory:{array:h},address:-1431655766}}}}}},slot:19});Object.assign(T,{...t,type:11,name:"*struct{comptime dst: struct{comptime channels: comptime_int = 4} = .{.channels = 4}}",length:1,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,slot:0,structure:Y}],methods:[],template:null},slot:18});const rt=new Uint8Array([]),at=new Uint8Array([]),nt=new Uint8Array([44,250,15,0]),it=new Uint8Array([199,13,16,0]),ot=new Uint8Array([112,98,50,122,105,103,0]),mt=new Uint8Array([108,250,15,0]),ut=new Uint8Array([187,13,16,0]),lt=new Uint8Array([67,104,117,110,103,32,76,101,111,110,103,0]),ct=new Uint8Array([172,250,15,0]),yt=new Uint8Array([1,0,0,0]),pt=new Uint8Array([4,251,15,0]),bt=new Uint8Array([186,13,16,0]),ft=new Uint8Array([0]),dt=new Uint8Array([170,170,170,170]),gt=new Uint8Array([170,170,170,170]),ht=new Uint8Array([170,170,170,170]);Object.assign(oe,{...t,type:2,name:"green-screen.kernel",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:rt}}},static:{members:[{...e,type:6,isRequired:!1,slot:0,name:"namespace",structure:x},{...e,type:6,isRequired:!1,slot:1,name:"vendor",structure:v},{...e,type:6,isRequired:!1,slot:2,name:"version",structure:p},{...e,type:6,isRequired:!1,slot:3,name:"description",structure:C},{...e,type:6,isRequired:!1,slot:4,name:"parameters",structure:K},{...e,type:6,isRequired:!1,slot:5,name:"inputImages",structure:D},{...e,type:6,isRequired:!1,slot:6,name:"outputImages",structure:T}],methods:[],template:{memory:{array:at},slots:{0:{structure:x,memory:{array:nt},slots:{0:{structure:L,memory:{array:it},slots:{0:{structure:B,memory:{array:ot},address:1052103}}}}},1:{structure:v,memory:{array:mt},slots:{0:{structure:H,memory:{array:ut},slots:{0:{structure:G,memory:{array:lt},address:1052091}}}}},2:{structure:p,memory:{array:ct},slots:{0:{structure:u,memory:{array:yt}}}},3:{structure:C,memory:{array:pt},slots:{0:{structure:N,memory:{array:bt},slots:{0:{structure:J,memory:{array:ft},address:1052090}}}}},4:{structure:K,memory:{array:dt},slots:{0:{structure:W,memory:{array:h},address:-1431655766}}},5:{structure:D,memory:{array:gt},slots:{0:{structure:X,memory:{array:h},address:-1431655766}}},6:{structure:T,memory:{array:ht},slots:{0:{structure:Y,memory:{array:h},address:-1431655766}}}}}},slot:1});Object.assign(O,{...t,type:13,name:"@Vector(4, u8)",length:4,instance:{members:[{...e,type:3,isRequired:!1,bitSize:8,byteSize:1,structure:f}],methods:[],template:null},slot:24});Object.assign(Z,{...t,type:12,name:"[_]const @Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(ee,{...t,type:11,name:"[]const @Vector(4, u8)",length:1,byteSize:8,isConst:!0,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:Z}],methods:[],template:null},slot:22});Object.assign(m,{...t,name:"u32",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:m}],methods:[],template:null},slot:25});const St=new Uint8Array([0,0,0,0,1,0,0,0]);Object.assign(te,{...t,type:9,name:"green-screen.ColorSpace",length:1,byteSize:1,align:0,instance:{members:[{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"srgb",structure:u},{...e,type:2,isRequired:!1,bitSize:32,byteSize:4,name:"display-p3",structure:u}],methods:[],template:{memory:{array:St}}},slot:26});Object.assign(q,{...t,name:"bool",length:1,byteSize:1,align:0,instance:{members:[{...e,type:1,isRequired:!1,bitOffset:0,bitSize:1,byteSize:1,structure:q}],methods:[],template:null},slot:27});Object.assign(w,{...t,name:"usize",length:1,instance:{members:[{...e,type:3,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,structure:w}],methods:[],template:null},slot:28});Object.assign(se,{...t,type:13,name:"@Vector(4, f32)",length:4,byteSize:16,align:4,instance:{members:[{...e,type:4,isRequired:!1,bitSize:32,byteSize:4,structure:S}],methods:[],template:null},slot:42});const zt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Ot=new Uint8Array([]),Rt=new Uint8Array([104,253,15,0]),qt=new Uint8Array([4,0,0,0]);Object.assign(M,{...t,type:2,name:"green-screen.Image(u8,4,false)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ee},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:te},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:q},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:w}],methods:[],template:{memory:{array:zt}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:se},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:Ot},slots:{0:{structure:p,memory:{array:Rt},slots:{0:{structure:u,memory:{array:qt}}}}}}},slot:21});const wt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),jt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),At=new Uint8Array([0,0,0,0,0,0,0,0]),fe=new Uint8Array([]);Object.assign(A,{...t,type:2,name:"green-screen.KernelInput(u8,green-screen.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"src",structure:M}],methods:[],template:{memory:{array:wt},slots:{0:{structure:M,memory:{array:jt},slots:{0:{structure:ee,memory:{array:At},slots:{0:{structure:Z,memory:{array:fe}}}}}}}}},slot:20});Object.assign(re,{...t,type:12,name:"[_]@Vector(4, u8)",length:0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:32,byteSize:4,structure:O}],methods:[],template:null},slot:23});Object.assign(ae,{...t,type:11,name:"[]@Vector(4, u8)",length:1,byteSize:8,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitSize:64,byteSize:8,slot:0,structure:re}],methods:[],template:null},slot:31});const Ut=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Pt=new Uint8Array([]),Vt=new Uint8Array([104,253,15,0]),_t=new Uint8Array([4,0,0,0]);Object.assign($,{...t,type:2,name:"green-screen.Image(u8,4,true)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,bitOffset:0,bitSize:64,byteSize:8,slot:0,name:"data",structure:ae},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:1,name:"width",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:2,name:"height",structure:m},{...e,type:5,isRequired:!1,bitOffset:160,bitSize:1,byteSize:1,slot:3,name:"colorSpace",structure:te},{...e,type:1,isRequired:!1,bitOffset:168,bitSize:1,byteSize:1,slot:4,name:"premultiplied",structure:q},{...e,type:3,isRequired:!1,bitOffset:128,bitSize:32,byteSize:4,slot:5,name:"offset",structure:w}],methods:[],template:{memory:{array:Ut}}},static:{members:[{...e,type:7,isRequired:!1,name:"Pixel",structure:O},{...e,type:7,isRequired:!1,name:"FPixel",structure:se},{...e,type:6,isRequired:!1,slot:0,name:"channels",structure:p}],methods:[],template:{memory:{array:Pt},slots:{0:{structure:p,memory:{array:Vt},slots:{0:{structure:u,memory:{array:_t}}}}}}},slot:30});const It=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),kt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),xt=new Uint8Array([0,0,0,0,0,0,0,0]);Object.assign(U,{...t,type:2,name:"green-screen.KernelOutput(u8,green-screen.kernel)",length:1,byteSize:24,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"dst",structure:$}],methods:[],template:{memory:{array:It},slots:{0:{structure:$,memory:{array:kt},slots:{0:{structure:ae,memory:{array:xt},slots:{0:{structure:re,memory:{array:fe}}}}}}}}},slot:29});const vt=new Uint8Array([0,0,128,64]);Object.assign(P,{...t,type:2,name:"green-screen.KernelParameters(green-screen.kernel)",length:1,instance:{members:[{...e,type:4,isRequired:!1,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"strength",structure:S}],methods:[],template:{memory:{array:vt}}},slot:32});Object.assign(me,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(green-screen.createOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:43});Object.assign(ue,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(green-screen.createOutput)).Fn.return_type.?).ErrorUnion.error_set!green-screen.KernelOutput(u8,green-screen.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:me}],methods:[],template:null},slot:36});Object.assign(le,{...t,type:3,name:"createOutput",length:1,byteSize:64,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:6,bitOffset:64,bitSize:192,byteSize:24,slot:2,name:"2",structure:A},{...e,type:6,bitOffset:256,bitSize:32,byteSize:4,slot:3,name:"3",structure:P},{...e,type:6,bitOffset:288,bitSize:224,byteSize:28,slot:4,name:"retval",structure:ue}],methods:[],template:null},slot:34});Object.assign(ce,{...t,type:8,name:"@typeInfo(@typeInfo(@TypeOf(green-screen.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set",length:1,byteSize:2,align:1,instance:{members:[{...e,type:6,isRequired:!1,slot:22,name:"OutOfMemory"}],methods:[],template:null},slot:44});Object.assign(ye,{...t,type:7,name:"@typeInfo(@typeInfo(@TypeOf(green-screen.createPartialOutput)).Fn.return_type.?).ErrorUnion.error_set!green-screen.KernelOutput(u8,green-screen.kernel)",length:1,byteSize:28,hasPointer:!0,instance:{members:[{...e,type:6,isRequired:!1,bitOffset:0,bitSize:192,byteSize:24,slot:0,name:"value",structure:U},{...e,type:3,isRequired:!1,bitOffset:192,bitSize:16,byteSize:2,name:"error",structure:ce}],methods:[],template:null},slot:37});Object.assign(pe,{...t,type:3,name:"createPartialOutput",length:1,byteSize:72,hasPointer:!0,instance:{members:[{...e,type:3,bitOffset:0,bitSize:32,byteSize:4,slot:0,name:"0",structure:m},{...e,type:3,bitOffset:32,bitSize:32,byteSize:4,slot:1,name:"1",structure:m},{...e,type:3,bitOffset:64,bitSize:32,byteSize:4,slot:2,name:"2",structure:m},{...e,type:3,bitOffset:96,bitSize:32,byteSize:4,slot:3,name:"3",structure:m},{...e,type:6,bitOffset:128,bitSize:192,byteSize:24,slot:4,name:"4",structure:A},{...e,type:6,bitOffset:320,bitSize:32,byteSize:4,slot:5,name:"5",structure:P},{...e,type:6,bitOffset:352,bitSize:224,byteSize:28,slot:6,name:"retval",structure:ye}],methods:[],template:null},slot:35});const Ct={argStruct:le,thunk:8,name:"createOutput"},Et={argStruct:pe,thunk:2,name:"createPartialOutput"};Object.assign(be,{...t,type:2,name:"green-screen",length:1,byteSize:0,align:0,instance:{members:[],methods:[],template:{memory:{array:fe}}},static:{members:[{...e,type:7,isRequired:!1,name:"kernel",structure:oe},{...e,type:7,isRequired:!1,name:"Input",structure:A},{...e,type:7,isRequired:!1,name:"Output",structure:U},{...e,type:7,isRequired:!1,name:"Parameters",structure:P}],methods:[Ct,Et],template:null},slot:0});const Kt=[f,B,L,x,G,H,v,u,p,J,N,C,S,b,y,Q,E,W,K,F,j,z,X,D,Y,T,oe,O,Z,ee,m,te,q,w,se,M,A,re,ae,$,U,P,me,ue,le,ce,ye,pe,be],Ft=De(Kt),Dt=be.constructor,Tt=(async()=>{const n=new URL("green-screen-8b82593a.wasm",import.meta.url).href;return fetch(n)})();Te(Tt,{...Ft,writeBack:!0});const{createOutput:Nt,createPartialOutput:Mt,kernel:ie,Input:$t,Output:Qt,Parameters:Wt}=Dt;function Bt(n,o,r,s,a={},d={}){if(Array.isArray(a)){const c=a;a={};for(const[l,g]of Object.keys(ie.inputImages).entries())a[g]=c[l]}const V=new $t(void 0),_=Object.keys(ie.inputImages),i=[];let R;for(const c of _){let l=a[c];if(l||(_.length===1&&["data","width","height"].every(g=>!!a[g])?l=a:i.push(c)),V[c]=l,R){if(l.colorSpace!==R)throw new Error(`Input images must all use the same color space: ${R}`)}else R=l.colorSpace}if(i.length>0)throw new Error(`Missing input image${i.length>1?"s":""}: ${i.join(", ")}`);const ne=Mt(n,o,r,s,V,d),de=c=>{const l=Object.keys(c),g={};for(const ge of l){const{data:{typedArray:I},width:he,height:ze}=c[ge];let k;if(typeof ImageData=="function"){const Oe=new Uint8ClampedArray(I.buffer,I.byteOffset,I.byteLength);k=new ImageData(Oe,he,s,{colorSpace:R})}else k={data:I,width:he,height:ze};if(l.length===1)return k;g[ge]=k}return g};return ne[Symbol.toStringTag]==="Promise"?ne.then(de):de(ne)}function Lt(){const n={};for(let[o,r]of Object.entries(ie)){if(o==="parameters"){const s={};for(const[a,d]of Object.entries(r)){const V=s[a]={};for(let[_,i]of Object.entries(d))typeof i=="object"?"string"in i?i=i.string:i=Se(i):typeof i=="function"&&(i=Gt(i.name)),V[_]=i}r=s}else typeof r=="object"&&("string"in r?r=r.string:r=r.valueOf());n[o]=r}return n}function Se(n){const o=[];for(let[r,s]of Object.entries(n))typeof s=="object"&&(s=Se(s)),o[r]=s;return o}function Gt(n){return{bool:"bool","@Vector(2, bool)":"bool2","@Vector(3, bool)":"bool3","@Vector(4, bool)":"bool4",i32:"int","@Vector(2, i32)":"int2","@Vector(3, i32)":"int3","@Vector(4, i32)":"int4",f32:"float","@Vector(2, f32)":"float2","@Vector(3, f32)":"float3","@Vector(4, f32)":"float4","[2]@Vector(2, f32)":"float2x2","[3]@Vector(3, f32)":"float3x3","[4]@Vector(4, f32)":"float4x4"}[n]}onmessage=n=>{const[o,r,...s]=n.data;Ht(o,s).then(([a,d])=>{postMessage([o,r,a],{transfer:d})}).catch(a=>{postMessage(["error",r,a])})};async function Ht(n,o){switch(n){case"getKernelInfo":return[Lt(...o)];case"createPartialImageData":const s=await Bt(...o),a=[];if("data"in s&&"width"in s&&"height"in s)a.push(s.data.buffer);else for(const d of Object.entries(s))a.push(s.data.buffer);return[s,a];default:throw new Error(`Unknown function: ${n}`)}}
